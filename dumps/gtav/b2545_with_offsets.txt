struct AnimPostFXManager
{
	array<struct _0x8A3C2709>        RegisteredStacks;                // offset:0x000	type:ARRAY.ATARRAY
};

struct AnimatedPostFX
{
	string                           ModifierName;                    // offset:0x000	type:STRING.ATHASHVALUE
	uint                             StartDelayDuration;              // offset:0x004	type:UINT.0
	uint                             InDuration;                      // offset:0x008	type:UINT.0
	uint                             HoldDuration;                    // offset:0x00C	type:UINT.0
	uint                             OutDuration;                     // offset:0x010	type:UINT.0
	enum _0x9395154F                 AnimMode;                        // offset:0x024	type:ENUM.32BIT
	enum _0xDC4FDE9C                 LoopMode;                        // offset:0x02C	type:ENUM.32BIT
	bool                             Disabled;                        // offset:0x030	type:BOOL.0
	bool                             CanBePaused;                     // offset:0x032	type:BOOL.0
};

struct BaseShopItem
{
	string                           lockHash;                        // offset:0x008	type:STRING.ATHASHVALUE
	ushort                           cost;                            // offset:0x00C	type:USHORT.0
	string                           textLabel;                       // offset:0x010	type:STRING.ATSTRING
};

struct BaseShopPedApparel : BaseShopItem
{
	string                                 uniqueNameHash;                  // offset:0x020	type:STRING.ATHASHVALUE
	enum eShopEnum                         eShopEnum;                       // offset:0x024	type:ENUM.32BIT
	array<struct RestrictionTags>          restrictionTags;                 // offset:0x028	type:ARRAY.ATARRAY
	array<struct ComponentDescription>     forcedComponents;                // offset:0x038	type:ARRAY.ATARRAY
	array<struct PropDescription>          forcedProps;                     // offset:0x048	type:ARRAY.ATARRAY
	array<struct ComponentDescription>     variantComponents;               // offset:0x058	type:ARRAY.ATARRAY
	array<struct PropDescription>          variantProps;                    // offset:0x068	type:ARRAY.ATARRAY
	short                                  locate;                          // offset:0x078	type:SHORT.0
};

struct BoxOccluder
{
	short                            iCenterX;                        // offset:0x000	type:SHORT.0
	short                            iCenterY;                        // offset:0x002	type:SHORT.0
	short                            iCenterZ;                        // offset:0x004	type:SHORT.0
	short                            iCosZ;                           // offset:0x006	type:SHORT.0
	short                            iLength;                         // offset:0x008	type:SHORT.0
	short                            iWidth;                          // offset:0x00A	type:SHORT.0
	short                            iHeight;                         // offset:0x00C	type:SHORT.0
	short                            iSinZ;                           // offset:0x00E	type:SHORT.0
};

struct C2dEffectConfig
{
	int                              MaxAttrsAudio;                   // offset:0x000	type:INT.0
	int                              MaxAttrsBuoyancy;                // offset:0x004	type:INT.0
	int                              MaxAttrsDecal;                   // offset:0x008	type:INT.0
	int                              MaxAttrsExplosion;               // offset:0x00C	type:INT.0
	int                              MaxAttrsLadder;                  // offset:0x010	type:INT.0
	int                              MaxAttrsLightShaft;              // offset:0x01C	type:INT.0
	int                              MaxAttrsParticle;                // offset:0x020	type:INT.0
	int                              MaxAttrsProcObj;                 // offset:0x024	type:INT.0
	int                              MaxAttrsScrollBar;               // offset:0x028	type:INT.0
	int                              MaxAttrsSpawnPoint;              // offset:0x02C	type:INT.0
	int                              MaxAttrsWindDisturbance;         // offset:0x038	type:INT.0
	int                              MaxAttrsWorldPoint;              // offset:0x03C	type:INT.0
	int                              MaxEffects2d;                    // offset:0x040	type:INT.0
	int                              MaxEffectsWorld2d;               // offset:0x044	type:INT.0
};

struct CAICurvePoint
{
	float                            Angle;                           // offset:0x008	type:FLOAT.0
	float                            Speed;                           // offset:0x00C	type:FLOAT.0
};

struct CAIHandlingInfo
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	float                            MinBrakeDistance;                // offset:0x00C	type:FLOAT.0
	float                            MaxBrakeDistance;                // offset:0x010	type:FLOAT.0
	float                            MaxSpeedAtBrakeDistance;         // offset:0x014	type:FLOAT.0
	float                            AbsoluteMinSpeed;                // offset:0x018	type:FLOAT.0
	array<struct CAICurvePoint>      AICurvePoints;                   // offset:0x020	type:ARRAY.ATARRAY
};

struct CAIHandlingInfoMgr
{
	array<struct CAIHandlingInfo>     AIHandlingInfos;                 // offset:0x008	type:ARRAY.ATARRAY
};

struct CActionBranch
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	bitset<enum _0x76382FA4>         Filter;                          // offset:0x004	type:BITSET.32BIT
};

struct CActionBranchSet
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CActionBranch>      aActionBranches;                 // offset:0x008	type:ARRAY.ATARRAY
};

struct CActionCondPedOther
{
	array<struct CActionCondSpecial>          aCondSpecials;                   // offset:0x008	type:ARRAY.ATARRAY
	array<struct CWeaponActionResultList>     aWeaponActionResultList;         // offset:0x018	type:ARRAY.ATARRAY
	array<string>                             aBrawlingStyles;                 // offset:0x028	type:ARRAY.ATARRAY
	string                                    InterrelationTest;               // offset:0x038	type:STRING.ATHASHVALUE
	bitset<enum _0x76382FA4>                  SelfFilter;                      // offset:0x03C	type:BITSET.32BIT
	bitset<enum _0x21F00F8A>                  MovementSpeed;                   // offset:0x040	type:BITSET.32BIT
	bool                                      CheckAnimTime;                   // offset:0x044	type:BOOL.0
};

struct CActionCondSpecial
{
	string                           SpecialTest;                     // offset:0x000	type:STRING.ATHASHVALUE
	bitset<enum _0x76382FA4>         Filter;                          // offset:0x004	type:BITSET.32BIT
	bool                             InvertSense;                     // offset:0x008	type:BOOL.0
};

struct CActionDefinition
{
	string                                Name;                            // offset:0x020	type:STRING.ATHASHVALUE
	string                                ImpulseTest;                     // offset:0x024	type:STRING.ATHASHVALUE
	string                                InterrelationTest;               // offset:0x028	type:STRING.ATHASHVALUE
	array<struct CActionCondSpecial>      aCondSpecials;                   // offset:0x030	type:ARRAY.ATARRAY
	array<struct CWeaponActionResult>     aWeaponActionResults;            // offset:0x040	type:ARRAY.ATARRAY
	array<string>                         aBrawlingStyles;                 // offset:0x050	type:ARRAY.ATARRAY
	struct CActionCondPedOther            CondPedOther;                    // offset:0x060	type:STRUCT.STRUCTURE
	bitset<enum _0x2538A9CA>              ActionType;                      // offset:0x0A8	type:BITSET.32BIT
	bitset<enum _0x76382FA4>              SelfFilter;                      // offset:0x0AC	type:BITSET.32BIT
	bitset<enum _0x8FC87130>              TargetEntity;                    // offset:0x0B4	type:BITSET.32BIT
	bitset<enum _0x21F00F8A>              MovementSpeed;                   // offset:0x0B8	type:BITSET.32BIT
	bitset<enum _0xBC8DB6A8>              DesiredDirection;                // offset:0x0BC	type:BITSET.32BIT
	bitset<enum _0xAA73DD0C>              DefinitionAttrs;                 // offset:0x0C0	type:BITSET.32BIT
	int                                   Priority;                        // offset:0x0C4	type:INT.0
	int                                   SelectionRouletteBias;           // offset:0x0C8	type:INT.0
	uint                                  MaxImpulseTestDelay;             // offset:0x0CC	type:UINT.0
	bool                                  Debug;                           // offset:0x0D0	type:BOOL.0
};

struct CActionFacialAnimSet
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<string>                    aFacialAnimClipIds;              // offset:0x008	type:ARRAY.ATARRAY
};

struct CActionResult
{
	string                           Name;                            // offset:0x030	type:STRING.ATHASHVALUE
	string                           ClipSet;                         // offset:0x034	type:STRING.ATHASHVALUE
	string                           FirstPersonClipSet;              // offset:0x038	type:STRING.ATHASHVALUE
	string                           Anim;                            // offset:0x03C	type:STRING.ATHASHVALUE
	array<string>                    CameraAnimLeft;                  // offset:0x040	type:ARRAY.ATARRAY
	array<string>                    CameraAnimRight;                 // offset:0x050	type:ARRAY.ATARRAY
	string                           Homing;                          // offset:0x060	type:STRING.ATHASHVALUE
	string                           DamageAndReaction;               // offset:0x064	type:STRING.ATHASHVALUE
	string                           StrikeBoneSet;                   // offset:0x068	type:STRING.ATHASHVALUE
	string                           Sound;                           // offset:0x06C	type:STRING.ATHASHVALUE
	string                           ActionBranchSet;                 // offset:0x070	type:STRING.ATHASHVALUE
	string                           NmReactionSet;                   // offset:0x074	type:STRING.ATHASHVALUE
	enum _0x3E2999EA                 CameraTarget;                    // offset:0x078	type:ENUM.32BIT
	bool                             ApplyRelativeTargetPitch;        // offset:0x07C	type:BOOL.0
	float                            AnimBlendInRate;                 // offset:0x080	type:FLOAT.0
	float                            AnimBlendOutRate;                // offset:0x084	type:FLOAT.0
	int                              Priority;                        // offset:0x088	type:INT.0
	bitset<enum _0x9B409521>         ResultAttrs;                     // offset:0x08C	type:BITSET.32BIT
};

struct CActionRumble
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	uint                             Duration;                        // offset:0x004	type:UINT.0
	float                            Intensity;                       // offset:0x008	type:FLOAT.0
};

struct CActionVfx
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                           VfxName;                         // offset:0x004	type:STRING.ATHASHVALUE
	string                           dmgPackName;                     // offset:0x008	type:STRING.ATHASHVALUE
	vec3                             Offset;                          // offset:0x010	type:VECTOR3.0
	vec3                             Rotation;                        // offset:0x020	type:VECTOR3.0
	enum eAnimBoneTag                BoneTag;                         // offset:0x030	type:ENUM.32BIT
	float                            Scale;                           // offset:0x034	type:FLOAT.0
};

struct CAdditionalVfxWaterSample
{
	vec3                             position;                        // offset:0x000	type:VECTOR3.0
	float                            size;                            // offset:0x010	type:FLOAT.0
	int                              component;                       // offset:0x014	type:INT.0
};

struct CAdvancedData
{
	int                              Slot;                            // offset:0x008	type:INT.0
	int                              Index;                           // offset:0x00C	type:INT.0
	float                            Value;                           // offset:0x010	type:FLOAT.0
};

struct CAgitatedAction
{
};

struct CAgitatedActionAnger : CAgitatedAction
{
	float                            Set;                             // offset:0x008	type:FLOAT.0
	float                            Add;                             // offset:0x00C	type:FLOAT.0
	float                            Min;                             // offset:0x010	type:FLOAT.0
	float                            Max;                             // offset:0x014	type:FLOAT.0
};

struct CAgitatedActionApplyAgitation : CAgitatedAction
{
	enum AgitatedType                Type;                            // offset:0x008	type:ENUM.32BIT
};

struct CAgitatedActionCallPolice : CAgitatedActionTask
{
};

struct CAgitatedActionChangeResponse : CAgitatedAction
{
	string                           Response;                        // offset:0x008	type:STRING.ATHASHVALUE
	string                           State;                           // offset:0x00C	type:STRING.ATHASHVALUE
};

struct CAgitatedActionClearHash : CAgitatedAction
{
	string                           Value;                           // offset:0x008	type:STRING.ATHASHVALUE
};

struct CAgitatedActionConditional : CAgitatedAction
{
	struct CAgitatedCondition        Condition;                       // offset:0x008	type:STRUCT.POINTER
	struct CAgitatedAction           Action;                          // offset:0x010	type:STRUCT.POINTER
};

struct CAgitatedActionConfront : CAgitatedActionTask
{
	string                           AmbientClips;                    // offset:0x008	type:STRING.ATHASHVALUE
};

struct CAgitatedActionEnterVehicle : CAgitatedActionTask
{
};

struct CAgitatedActionExitVehicle : CAgitatedActionTask
{
};

struct CAgitatedActionFace : CAgitatedActionTask
{
	string                           AmbientClips;                    // offset:0x008	type:STRING.ATHASHVALUE
};

struct CAgitatedActionFear : CAgitatedAction
{
	float                            Set;                             // offset:0x008	type:FLOAT.0
	float                            Add;                             // offset:0x00C	type:FLOAT.0
	float                            Min;                             // offset:0x010	type:FLOAT.0
	float                            Max;                             // offset:0x014	type:FLOAT.0
};

struct CAgitatedActionFight : CAgitatedActionTask
{
};

struct CAgitatedActionFlee : CAgitatedActionTask
{
	float                                       _0x78B79F2F;                     // offset:0x008	type:FLOAT.0
	float                                       MoveBlendRatio;                  // offset:0x00C	type:FLOAT.0
	bool                                        _0x8D1A7B5A;                     // offset:0x010	type:BOOL.0
	bool                                        _0x7179D276;                     // offset:0x011	type:BOOL.0
	bool                                        _0x0841D1F4;                     // offset:0x012	type:BOOL.0
	string                                      AmbientClips;                    // offset:0x014	type:STRING.ATHASHVALUE
	bitset<enum CAgitatedActionFlee__Flags>     Flags;                           // offset:0x018	type:BITSET.8BIT
};

struct CAgitatedActionFlipOff : CAgitatedAction
{
	float                            Time;                            // offset:0x008	type:FLOAT.0
};

struct CAgitatedActionFollow : CAgitatedActionTask
{
};

struct CAgitatedActionHurryAway : CAgitatedActionTask
{
};

struct CAgitatedActionIgnoreForcedAudioFailures : CAgitatedAction
{
};

struct CAgitatedActionMakeAggressiveDriver : CAgitatedAction
{
};

struct CAgitatedActionMulti : CAgitatedAction
{
	array<struct CAgitatedAction>     Actions;                         // offset:0x008	type:ARRAY.ATARRAY
};

struct CAgitatedActionReportCrime : CAgitatedAction
{
};

struct CAgitatedActionReset : CAgitatedAction
{
};

struct CAgitatedActionSay : CAgitatedAction
{
	struct CAgitatedSay              Say;                             // offset:0x008	type:STRUCT.STRUCTURE
};

struct CAgitatedActionSayAgitator : CAgitatedAction
{
	struct CAmbientAudio             Audio;                           // offset:0x008	type:STRUCT.STRUCTURE
};

struct CAgitatedActionSetFleeAmbientClips : CAgitatedAction
{
	string                           AmbientClips;                    // offset:0x008	type:STRING.ATHASHVALUE
};

struct CAgitatedActionSetFleeMoveBlendRatio : CAgitatedAction
{
	float                            MoveBlendRatio;                  // offset:0x008	type:FLOAT.0
};

struct CAgitatedActionSetHash : CAgitatedAction
{
	string                           Value;                           // offset:0x008	type:STRING.ATHASHVALUE
};

struct CAgitatedActionStopVehicle : CAgitatedActionTask
{
};

struct CAgitatedActionTask : CAgitatedAction
{
};

struct CAgitatedActionTurnOnSiren : CAgitatedAction
{
	float                            Time;                            // offset:0x008	type:FLOAT.0
};

struct CAgitatedCondition
{
};

struct CAgitatedConditionAnd : CAgitatedConditionMulti
{
};

struct CAgitatedConditionCanCallPolice : CAgitatedCondition
{
};

struct CAgitatedConditionCanFight : CAgitatedCondition
{
};

struct CAgitatedConditionCanHurryAway : CAgitatedCondition
{
};

struct CAgitatedConditionCanStepOutOfVehicle : CAgitatedCondition
{
};

struct CAgitatedConditionCanWalkAway : CAgitatedCondition
{
};

struct CAgitatedConditionCheckBraveryFlags : CAgitatedCondition
{
	bitset<enum eBraveryFlags>       Flags;                           // offset:0x008	type:BITSET.32BIT
};

struct CAgitatedConditionHasBeenHostileFor : CAgitatedCondition
{
	float                            MinTime;                         // offset:0x008	type:FLOAT.0
	float                            MaxTime;                         // offset:0x00C	type:FLOAT.0
};

struct CAgitatedConditionHasContext : CAgitatedCondition
{
	string                           Context;                         // offset:0x008	type:STRING.ATPARTIALHASHVALUE
};

struct CAgitatedConditionHasFriendsNearby : CAgitatedCondition
{
	uchar                            Min;                             // offset:0x008	type:UCHAR.0
};

struct CAgitatedConditionHasLeader : CAgitatedCondition
{
};

struct CAgitatedConditionHasLeaderBeenFightingFor : CAgitatedCondition
{
	float                            MinTime;                         // offset:0x008	type:FLOAT.0
	float                            MaxTime;                         // offset:0x00C	type:FLOAT.0
};

struct CAgitatedConditionHasPavement : CAgitatedCondition
{
};

struct CAgitatedConditionHasVehicle : CAgitatedCondition
{
};

struct CAgitatedConditionIntruderLeft : CAgitatedCondition
{
};

struct CAgitatedConditionIsAGunPulled : CAgitatedCondition
{
};

struct CAgitatedConditionIsAgitatorArmed : CAgitatedCondition
{
};

struct CAgitatedConditionIsAgitatorEnteringVehicle : CAgitatedCondition
{
};

struct CAgitatedConditionIsAgitatorInOurTerritory : CAgitatedCondition
{
};

struct CAgitatedConditionIsAgitatorInVehicle : CAgitatedCondition
{
};

struct CAgitatedConditionIsAgitatorInjured : CAgitatedCondition
{
};

struct CAgitatedConditionIsAgitatorMovingAway : CAgitatedCondition
{
	float                            Dot;                             // offset:0x008	type:FLOAT.0
};

struct CAgitatedConditionIsAngry : CAgitatedCondition
{
	float                            Threshold;                       // offset:0x008	type:FLOAT.0
};

struct CAgitatedConditionIsArgumentative : CAgitatedCondition
{
};

struct CAgitatedConditionIsAvoiding : CAgitatedCondition
{
};

struct CAgitatedConditionIsBecomingArmed : CAgitatedCondition
{
};

struct CAgitatedConditionIsBumped : CAgitatedCondition
{
};

struct CAgitatedConditionIsBumpedByVehicle : CAgitatedCondition
{
};

struct CAgitatedConditionIsBumpedInVehicle : CAgitatedCondition
{
};

struct CAgitatedConditionIsCallingPolice : CAgitatedCondition
{
};

struct CAgitatedConditionIsConfrontational : CAgitatedCondition
{
};

struct CAgitatedConditionIsConfronting : CAgitatedCondition
{
};

struct CAgitatedConditionIsContext : CAgitatedCondition
{
	string                           Context;                         // offset:0x008	type:STRING.ATHASHVALUE
};

struct CAgitatedConditionIsDodged : CAgitatedCondition
{
};

struct CAgitatedConditionIsDodgedVehicle : CAgitatedCondition
{
};

struct CAgitatedConditionIsDrivingVehicle : CAgitatedCondition
{
};

struct CAgitatedConditionIsExitingScenario : CAgitatedCondition
{
};

struct CAgitatedConditionIsFacing : CAgitatedCondition
{
};

struct CAgitatedConditionIsFearful : CAgitatedCondition
{
	float                            Threshold;                       // offset:0x008	type:FLOAT.0
};

struct CAgitatedConditionIsFighting : CAgitatedCondition
{
};

struct CAgitatedConditionIsFleeing : CAgitatedCondition
{
};

struct CAgitatedConditionIsFlippingOff : CAgitatedCondition
{
};

struct CAgitatedConditionIsFollowing : CAgitatedCondition
{
};

struct CAgitatedConditionIsFriendlyTalking : CAgitatedCondition
{
};

struct CAgitatedConditionIsGettingUp : CAgitatedCondition
{
};

struct CAgitatedConditionIsGriefing : CAgitatedCondition
{
};

struct CAgitatedConditionIsGunAimedAt : CAgitatedCondition
{
};

struct CAgitatedConditionIsHarassed : CAgitatedCondition
{
};

struct CAgitatedConditionIsHash : CAgitatedCondition
{
	string                           Value;                           // offset:0x008	type:STRING.ATHASHVALUE
};

struct CAgitatedConditionIsHostile : CAgitatedCondition
{
};

struct CAgitatedConditionIsHurryingAway : CAgitatedCondition
{
};

struct CAgitatedConditionIsInVehicle : CAgitatedCondition
{
};

struct CAgitatedConditionIsInjured : CAgitatedCondition
{
};

struct CAgitatedConditionIsInsulted : CAgitatedCondition
{
};

struct CAgitatedConditionIsIntervene : CAgitatedCondition
{
};

struct CAgitatedConditionIsIntimidate : CAgitatedCondition
{
};

struct CAgitatedConditionIsLastAgitationApplied : CAgitatedCondition
{
	enum AgitatedType                Type;                            // offset:0x008	type:ENUM.32BIT
};

struct CAgitatedConditionIsLawEnforcement : CAgitatedCondition
{
};

struct CAgitatedConditionIsLeaderAgitated : CAgitatedCondition
{
};

struct CAgitatedConditionIsLeaderFighting : CAgitatedCondition
{
};

struct CAgitatedConditionIsLeaderInState : CAgitatedCondition
{
	string                           State;                           // offset:0x008	type:STRING.ATHASHVALUE
};

struct CAgitatedConditionIsLeaderStill : CAgitatedCondition
{
};

struct CAgitatedConditionIsLeaderTalking : CAgitatedCondition
{
};

struct CAgitatedConditionIsLeaderUsingResponse : CAgitatedCondition
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
};

struct CAgitatedConditionIsLoitering : CAgitatedCondition
{
};

struct CAgitatedConditionIsMale : CAgitatedCondition
{
};

struct CAgitatedConditionIsOutsideClosestDistance : CAgitatedCondition
{
	float                            Distance;                        // offset:0x008	type:FLOAT.0
};

struct CAgitatedConditionIsOutsideDistance : CAgitatedCondition
{
	float                            Distance;                        // offset:0x008	type:FLOAT.0
};

struct CAgitatedConditionIsPlayingAmbientsInScenario : CAgitatedCondition
{
};

struct CAgitatedConditionIsProvoked : CAgitatedCondition
{
	bool                             IgnoreHostility;                 // offset:0x008	type:BOOL.0
};

struct CAgitatedConditionIsRanting : CAgitatedCondition
{
};

struct CAgitatedConditionIsReadyForScenarioResponse : CAgitatedCondition
{
};

struct CAgitatedConditionIsSirenOn : CAgitatedCondition
{
};

struct CAgitatedConditionIsStanding : CAgitatedCondition
{
};

struct CAgitatedConditionIsSwimming : CAgitatedCondition
{
};

struct CAgitatedConditionIsTalking : CAgitatedCondition
{
};

struct CAgitatedConditionIsTargetDoingAMeleeMove : CAgitatedCondition
{
};

struct CAgitatedConditionIsTerritoryIntruded : CAgitatedCondition
{
};

struct CAgitatedConditionIsUsingRagdoll : CAgitatedCondition
{
};

struct CAgitatedConditionIsUsingScenario : CAgitatedCondition
{
};

struct CAgitatedConditionIsUsingTerritoryScenario : CAgitatedCondition
{
};

struct CAgitatedConditionIsWandering : CAgitatedCondition
{
};

struct CAgitatedConditionMulti : CAgitatedCondition
{
	array<struct CAgitatedCondition>     Conditions;                      // offset:0x008	type:ARRAY.ATARRAY
};

struct CAgitatedConditionNot : CAgitatedCondition
{
	struct CAgitatedCondition        Condition;                       // offset:0x008	type:STRUCT.POINTER
};

struct CAgitatedConditionOr : CAgitatedConditionMulti
{
};

struct CAgitatedConditionRandom : CAgitatedCondition
{
	float                            Chances;                         // offset:0x008	type:FLOAT.0
};

struct CAgitatedConditionTimeout : CAgitatedCondition
{
	float                            Time;                            // offset:0x008	type:FLOAT.0
	float                            MinTime;                         // offset:0x00C	type:FLOAT.0
	float                            MaxTime;                         // offset:0x010	type:FLOAT.0
};

struct CAgitatedConditionWasLeaderHit : CAgitatedCondition
{
};

struct CAgitatedConditionWasRecentlyBumpedWhenStill : CAgitatedCondition
{
	float                            MaxTime;                         // offset:0x008	type:FLOAT.0
};

struct CAgitatedConditionWasUsingTerritorialScenario : CAgitatedCondition
{
};

struct CAgitatedConditionalAction
{
	struct CAgitatedCondition        Condition;                       // offset:0x000	type:STRUCT.POINTER
	struct CAgitatedAction           Action;                          // offset:0x008	type:STRUCT.POINTER
};

struct CAgitatedConditionalSay
{
	struct CAgitatedCondition        Condition;                       // offset:0x000	type:STRUCT.POINTER
	struct CAgitatedSay              Say;                             // offset:0x008	type:STRUCT.STRUCTURE
};

struct CAgitatedContext
{
	string                               Response;                        // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CAgitatedSituation>     Situations;                      // offset:0x008	type:ARRAY.ATARRAY
};

struct CAgitatedPersonalities
{
	map<string, struct CAgitatedPersonality>     Personalities;                   // offset:0x000	type:MAP.ATBINARYMAP
};

struct CAgitatedPersonality
{
	bitset<enum CAgitatedPersonality__Flags>     Flags;                           // offset:0x000	type:BITSET.8BIT
	map<string, struct CAgitatedContext>         Contexts;                        // offset:0x008	type:MAP.ATBINARYMAP
};

struct CAgitatedReaction
{
	struct CAgitatedCondition                 Condition;                       // offset:0x000	type:STRUCT.POINTER
	struct CAgitatedAction                    Action;                          // offset:0x008	type:STRUCT.POINTER
	struct CAgitatedConditionalAction         ConditionalAction;               // offset:0x010	type:STRUCT.STRUCTURE
	string                                    State;                           // offset:0x020	type:STRING.ATHASHVALUE
	float                                     Anger;                           // offset:0x024	type:FLOAT.0
	float                                     Fear;                            // offset:0x028	type:FLOAT.0
	struct CAgitatedSay                       Say;                             // offset:0x030	type:STRUCT.STRUCTURE
	struct CAgitatedConditionalSay            ConditionalSay;                  // offset:0x058	type:STRUCT.STRUCTURE
	array<struct CAgitatedConditionalSay>     ConditionalSays;                 // offset:0x088	type:ARRAY.ATARRAY
	bitset<enum CAgitatedReaction__Flags>     Flags;                           // offset:0x098	type:BITSET.8BIT
};

struct CAgitatedResponse
{
	bitset<enum CAgitatedResponse__Flags>     Flags;                           // offset:0x000	type:BITSET.8BIT
	array<struct _0x33246141>                 OnFootClipSets;                  // offset:0x008	type:ARRAY.ATARRAY
	struct _0x2FF3C222                        TalkResponse;                    // offset:0x018	type:STRUCT.STRUCTURE
	array<struct _0x2FF3C222>                 TalkResponses;                   // offset:0x028	type:ARRAY.ATARRAY
	map<string, struct _0x2FF3C222>           FollowUps;                       // offset:0x038	type:MAP.ATBINARYMAP
	map<string, struct CAgitatedState>        States;                          // offset:0x050	type:MAP.ATBINARYMAP
	map<string, struct CAgitatedReaction>     Reactions;                       // offset:0x068	type:MAP.ATBINARYMAP
};

struct CAgitatedResponses
{
	map<string, struct CAgitatedResponse>     Responses;                       // offset:0x000	type:MAP.ATBINARYMAP
};

struct CAgitatedSay
{
	struct CAmbientAudio                 Audio;                           // offset:0x000	type:STRUCT.STRUCTURE
	array<struct CAmbientAudio>          Audios;                          // offset:0x010	type:ARRAY.ATARRAY
	bitset<enum CAgitatedSay__Flags>     Flags;                           // offset:0x020	type:BITSET.8BIT
};

struct CAgitatedScenarioExit : CAgitatedAction
{
};

struct CAgitatedScenarioFastCowardExit : CAgitatedAction
{
};

struct CAgitatedScenarioFleeExit : CAgitatedAction
{
};

struct CAgitatedScenarioNormalCowardExit : CAgitatedAction
{
};

struct CAgitatedSetWaterSurvivalTime : CAgitatedAction
{
	float                            Time;                            // offset:0x008	type:FLOAT.0
};

struct CAgitatedSituation
{
	struct CAgitatedCondition        Condition;                       // offset:0x000	type:STRUCT.POINTER
	string                           Response;                        // offset:0x008	type:STRING.ATHASHVALUE
};

struct CAgitatedState
{
	struct CAgitatedAction                       Action;                          // offset:0x000	type:STRUCT.POINTER
	struct CAgitatedConditionalAction            ConditionalAction;               // offset:0x008	type:STRUCT.STRUCTURE
	array<struct CAgitatedConditionalAction>     ConditionalActions;              // offset:0x018	type:ARRAY.ATARRAY
	bitset<enum CAgitatedState__Flags>           Flags;                           // offset:0x028	type:BITSET.8BIT
	array<string>                                Reactions;                       // offset:0x030	type:ARRAY.ATARRAY
	float                                        TimeToListen;                    // offset:0x040	type:FLOAT.0
	struct _0x2FF3C222                           TalkResponse;                    // offset:0x044	type:STRUCT.STRUCTURE
	struct _0x114671D0                           _0x2F024EFC;                     // offset:0x050	type:STRUCT.STRUCTURE
	array<struct _0x2FF3C222>                    TalkResponses;                   // offset:0x068	type:ARRAY.ATARRAY
};

struct CAgitatedTrigger
{
	array<string>                    PedTypes;                        // offset:0x000	type:ARRAY.ATARRAY
	float                            Chances;                         // offset:0x010	type:FLOAT.0
	float                            Distance;                        // offset:0x014	type:FLOAT.0
	string                           Reaction;                        // offset:0x018	type:STRING.ATHASHVALUE
};

struct CAgitatedTriggerSet
{
	string                             Parent;                          // offset:0x000	type:STRING.ATHASHVALUE
	bitset<enum _0x7C84137D>           Flags;                           // offset:0x004	type:BITSET.32BIT
	array<struct CAgitatedTrigger>     Triggers;                        // offset:0x008	type:ARRAY.ATARRAY
};

struct CAgitatedTriggers
{
	map<string, struct _0x2EE37A14>             Reactions;                       // offset:0x000	type:MAP.ATBINARYMAP
	map<string, struct CAgitatedTriggerSet>     Sets;                            // offset:0x018	type:MAP.ATBINARYMAP
};

struct CAiCoverClipVariationHelper__Tunables : CTuning
{
	uint                             MinUsesForPeekingVariationChange; // offset:0x010	type:UINT.0
	uint                             MaxUsesForPeekingVariationChange; // offset:0x014	type:UINT.0
	uint                             MinUsesForPinnedVariationChange; // offset:0x018	type:UINT.0
	uint                             MaxUsesForPinnedVariationChange; // offset:0x01C	type:UINT.0
	uint                             MinUsesForOutroReactVariationChange; // offset:0x020	type:UINT.0
	uint                             MaxUsesForOutroReactVariationChange; // offset:0x024	type:UINT.0
	uint                             MinUsesForIdleVariationChange;   // offset:0x028	type:UINT.0
	uint                             MaxUsesForIdleVariationChange;   // offset:0x02C	type:UINT.0
};

struct CAimingInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	float                            HeadingLimit;                    // offset:0x004	type:FLOAT.0
	float                            SweepPitchMin;                   // offset:0x008	type:FLOAT.0
	float                            SweepPitchMax;                   // offset:0x00C	type:FLOAT.0
};

struct CAlternateVariations
{
	array<struct _0xEF79CBDB>        peds;                            // offset:0x000	type:ARRAY.ATARRAY
};

struct CAmbientAudio
{
	string                                Context;                         // offset:0x000	type:STRING.ATPARTIALHASHVALUE
	bitset<enum CAmbientAudio__Flags>     Flags;                           // offset:0x008	type:BITSET.8BIT
};

struct CAmbientAudios
{
	map<string, struct _0x07122856>     Exchanges;                       // offset:0x000	type:MAP.ATBINARYMAP
	map<string, struct _0x7CB2FE1E>     Sets;                            // offset:0x018	type:MAP.ATBINARYMAP
};

struct CAmbientLookAt__Tunables : CTuning
{
	float                            DefaultLookAtThreshold;          // offset:0x010	type:FLOAT.0
	float                            DefaultDistanceFromWorldCenter;  // offset:0x014	type:FLOAT.0
	float                            ExtendedDistanceFromWorldCenter; // offset:0x018	type:FLOAT.0
	float                            MaxDistanceToScanLookAts;        // offset:0x01C	type:FLOAT.0
	float                            BaseTimeToLook;                  // offset:0x020	type:FLOAT.0
	float                            AITimeBetweenLookAtsFailureMin;  // offset:0x024	type:FLOAT.0
	float                            AITimeBetweenLookAtsFailureMax;  // offset:0x028	type:FLOAT.0
	float                            PlayerTimeBetweenLookAtsMin;     // offset:0x02C	type:FLOAT.0
	float                            PlayerTimeMyVehicleLookAtsMax;   // offset:0x030	type:FLOAT.0
	float                            PlayerTimeMyVehicleLookAtsMin;   // offset:0x034	type:FLOAT.0
	float                            PlayerTimeBetweenLookAtsMax;     // offset:0x038	type:FLOAT.0
	float                            TimeBetweenScenarioScans;        // offset:0x03C	type:FLOAT.0
	float                            ScenarioScanOffsetDistance;      // offset:0x040	type:FLOAT.0
	float                            ScenarioScanRadius;              // offset:0x044	type:FLOAT.0
	float                            MaxPlayerScore;                  // offset:0x048	type:FLOAT.0
	float                            BasicPedScore;                   // offset:0x04C	type:FLOAT.0
	float                            BasicVehicleScore;               // offset:0x050	type:FLOAT.0
	float                            BasicObjectScore;                // offset:0x054	type:FLOAT.0
	float                            BehindPedModifier;               // offset:0x058	type:FLOAT.0
	float                            PlayerPedModifier;               // offset:0x05C	type:FLOAT.0
	float                            WalkingRoundPedModifier;         // offset:0x060	type:FLOAT.0
	float                            RunningPedModifier;              // offset:0x064	type:FLOAT.0
	float                            ClimbingOrJumpingPedModifier;    // offset:0x068	type:FLOAT.0
	float                            FightingModifier;                // offset:0x06C	type:FLOAT.0
	float                            JackingModifier;                 // offset:0x070	type:FLOAT.0
	float                            HangingAroundVehicleModifier;    // offset:0x074	type:FLOAT.0
	float                            ScenarioToScenarioPedModifier;   // offset:0x078	type:FLOAT.0
	float                            GangScenarioPedToPlayerModifier; // offset:0x07C	type:FLOAT.0
	float                            ApproachingPlayerModifier;       // offset:0x080	type:FLOAT.0
	float                            ClosePlayerModifier;             // offset:0x084	type:FLOAT.0
	float                            InRangePlayerModifier;           // offset:0x088	type:FLOAT.0
	float                            InRangeDrivingPlayerModifier;    // offset:0x08C	type:FLOAT.0
	float                            HoldingWeaponPlayerModifier;     // offset:0x090	type:FLOAT.0
	float                            CoveredInBloodPlayerModifier;    // offset:0x094	type:FLOAT.0
	float                            RagdollingModifier;              // offset:0x098	type:FLOAT.0
	float                            PickingUpBikeModifier;           // offset:0x09C	type:FLOAT.0
	float                            RecklessCarModifier;             // offset:0x0A0	type:FLOAT.0
	float                            RecklessCarSpeedMin;             // offset:0x0A4	type:FLOAT.0
	float                            RecklessCarSpeedMax;             // offset:0x0A8	type:FLOAT.0
	float                            CarSirenModifier;                // offset:0x0AC	type:FLOAT.0
	float                            PlayerCopModifier;               // offset:0x0B0	type:FLOAT.0
	float                            PlayerSexyPedModifier;           // offset:0x0B4	type:FLOAT.0
	float                            PlayerSwankyCarModifier;         // offset:0x0B8	type:FLOAT.0
	float                            PlayerCopCarModifier;            // offset:0x0BC	type:FLOAT.0
	float                            PlayerHasslingModifier;          // offset:0x0C0	type:FLOAT.0
	float                            RecentlyLookedAtPlayerModifier;  // offset:0x0C4	type:FLOAT.0
	float                            RecentlyLookedAtEntityModifier;  // offset:0x0C8	type:FLOAT.0
	float                            HighImportanceModifier;          // offset:0x0CC	type:FLOAT.0
	float                            MediumImportanceModifier;        // offset:0x0D0	type:FLOAT.0
	float                            LowImportanceModifier;           // offset:0x0D4	type:FLOAT.0
	array<string>                    ModelNamesToConsiderPlayersForScoringPurposes; // offset:0x0D8	type:ARRAY.ATARRAY
	float                            HotPedMinDistance;               // offset:0x0E8	type:FLOAT.0
	float                            HotPedMaxDistance;               // offset:0x0EC	type:FLOAT.0
	float                            HotPedMinDotAngle;               // offset:0x0F0	type:FLOAT.0
	float                            HotPedMaxDotAngle;               // offset:0x0F4	type:FLOAT.0
	float                            HotPedMaxHeightDifference;       // offset:0x0F8	type:FLOAT.0
	float                            InRangePlayerDistanceThreshold;  // offset:0x0FC	type:FLOAT.0
	float                            InRangePlayerInRaceDistanceThreshold; // offset:0x100	type:FLOAT.0
	float                            ClosePlayerDistanceThreshold;    // offset:0x104	type:FLOAT.0
	float                            ApproachingPlayerDistanceThreshold; // offset:0x108	type:FLOAT.0
	float                            ApproachingPlayerCosineThreshold; // offset:0x10C	type:FLOAT.0
	float                            RagdollPlayerDistanceThreshold;  // offset:0x110	type:FLOAT.0
	float                            LookingInRangePlayerMaxDotAngle; // offset:0x114	type:FLOAT.0
	float                            MaxVelocityForVehicleLookAtSqr;  // offset:0x118	type:FLOAT.0
	uchar                            PlayerSwankyCarMin;              // offset:0x11C	type:UCHAR.0
	uchar                            PlayerSwankyCarMax;              // offset:0x11D	type:UCHAR.0
	bool                             HotPedRenderDebug;               // offset:0x11E	type:BOOL.0
	bool                             HotPedDisableSexinessFlagChecks; // offset:0x11F	type:BOOL.0
	float                            MinTimeBeforeSwitchLookAt;       // offset:0x120	type:FLOAT.0
	float                            MaxLookBackAngle;                // offset:0x124	type:FLOAT.0
	float                            MinTurnSpeedMotionOverPOI;       // offset:0x128	type:FLOAT.0
	float                            SpeedForNarrowestAnglePickPOI;   // offset:0x12C	type:FLOAT.0
	float                            MaxAnglePickPOI;                 // offset:0x130	type:FLOAT.0
	float                            MinAnglePickPOI;                 // offset:0x134	type:FLOAT.0
	float                            MaxPitchingAnglePickPOI;         // offset:0x138	type:FLOAT.0
	bool                             PlayerLookAtDebugDraw;           // offset:0x13C	type:BOOL.0
	enum LookIkTurnRate              CameraLookAtTurnRate;            // offset:0x140	type:ENUM.32BIT
	enum LookIkTurnRate              POILookAtTurnRate;               // offset:0x144	type:ENUM.32BIT
	enum LookIkTurnRate              MotionLookAtTurnRate;            // offset:0x148	type:ENUM.32BIT
	enum LookIkTurnRate              VehicleJumpLookAtTurnRate;       // offset:0x14C	type:ENUM.32BIT
	enum LookIkBlendRate             CameraLookAtBlendRate;           // offset:0x150	type:ENUM.32BIT
	enum LookIkBlendRate             POILookAtBlendRate;              // offset:0x154	type:ENUM.32BIT
	enum LookIkBlendRate             MotionLookAtBlendRate;           // offset:0x158	type:ENUM.32BIT
	enum LookIkBlendRate             VehicleJumpLookAtBlendRate;      // offset:0x15C	type:ENUM.32BIT
	enum LookIkRotationLimit         CameraLookAtRotationLimit;       // offset:0x160	type:ENUM.32BIT
	enum LookIkRotationLimit         POILookAtRotationLimit;          // offset:0x164	type:ENUM.32BIT
	enum LookIkRotationLimit         MotionLookAtRotationLimit;       // offset:0x168	type:ENUM.32BIT
	float                            AITimeWaitingToCrossRoadMin;     // offset:0x16C	type:FLOAT.0
	float                            AITimeWaitingToCrossRoadMax;     // offset:0x170	type:FLOAT.0
	uint                             uAITimeBetweenGreeting;          // offset:0x174	type:UINT.0
	float                            fAIGreetingDistanceMin;          // offset:0x178	type:FLOAT.0
	float                            fAIGreetingDistanceMax;          // offset:0x17C	type:FLOAT.0
	float                            fAIGreetingPedModifier;          // offset:0x180	type:FLOAT.0
	uint                             uTimeBetweenLookBacks;           // offset:0x184	type:UINT.0
	uint                             uTimeToLookBack;                 // offset:0x188	type:UINT.0
	uint                             uAimToIdleLookAtTime;            // offset:0x18C	type:UINT.0
	float                            fAimToIdleBreakOutAngle;         // offset:0x190	type:FLOAT.0
	float                            fAimToIdleAngleLimitLeft;        // offset:0x194	type:FLOAT.0
	float                            fAimToIdleAngleLimitRight;       // offset:0x198	type:FLOAT.0
	uint                             uExitingCoverLookAtTime;         // offset:0x19C	type:UINT.0
};

struct CAmbientModel
{
	string                             Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	struct CAmbientModelVariations     Variations;                      // offset:0x008	type:STRUCT.POINTER
	float                              Probability;                     // offset:0x010	type:FLOAT.0
};

struct CAmbientModelSet
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	array<struct CAmbientModel>      Models;                          // offset:0x010	type:ARRAY.ATARRAY
};

struct CAmbientModelSets
{
	array<struct CAmbientModelSet>     ModelSets;                       // offset:0x000	type:ARRAY.ATARRAY
};

struct CAmbientModelVariations
{
};

struct CAmbientPedModelVariations : CAmbientModelVariations
{
	array<struct CPedCompRestriction>     CompRestrictions;                // offset:0x008	type:ARRAY.ATARRAY
	array<struct CPedPropRestriction>     PropRestrictions;                // offset:0x018	type:ARRAY.ATARRAY
	string                                LoadOut;                         // offset:0x028	type:STRING.ATHASHVALUE
};

struct CAmbientVehicleModelVariations : CAmbientModelVariations
{
	int                                                   BodyColour1;                     // offset:0x008	type:INT.0
	int                                                   BodyColour2;                     // offset:0x00C	type:INT.0
	int                                                   BodyColour3;                     // offset:0x010	type:INT.0
	int                                                   BodyColour4;                     // offset:0x014	type:INT.0
	int                                                   BodyColour5;                     // offset:0x018	type:INT.0
	int                                                   BodyColour6;                     // offset:0x01C	type:INT.0
	int                                                   WindowTint;                      // offset:0x020	type:INT.0
	int                                                   ColourCombination;               // offset:0x024	type:INT.0
	int                                                   Livery;                          // offset:0x028	type:INT.0
	int                                                   Livery2;                         // offset:0x02C	type:INT.0
	int                                                   ModKit;                          // offset:0x030	type:INT.0
	array<struct CAmbientVehicleModelVariations__Mod>     Mods;                            // offset:0x038	type:ARRAY.ATARRAY
	enum CAmbientVehicleModelVariations__UseExtra         Extra1;                          // offset:0x048	type:ENUM.32BIT
	enum CAmbientVehicleModelVariations__UseExtra         Extra2;                          // offset:0x04C	type:ENUM.32BIT
	enum CAmbientVehicleModelVariations__UseExtra         Extra3;                          // offset:0x050	type:ENUM.32BIT
	enum CAmbientVehicleModelVariations__UseExtra         Extra4;                          // offset:0x054	type:ENUM.32BIT
	enum CAmbientVehicleModelVariations__UseExtra         Extra5;                          // offset:0x058	type:ENUM.32BIT
	enum CAmbientVehicleModelVariations__UseExtra         Extra6;                          // offset:0x05C	type:ENUM.32BIT
	enum CAmbientVehicleModelVariations__UseExtra         Extra7;                          // offset:0x060	type:ENUM.32BIT
	enum CAmbientVehicleModelVariations__UseExtra         Extra8;                          // offset:0x064	type:ENUM.32BIT
	enum CAmbientVehicleModelVariations__UseExtra         Extra9;                          // offset:0x068	type:ENUM.32BIT
	enum CAmbientVehicleModelVariations__UseExtra         Extra10;                         // offset:0x06C	type:ENUM.32BIT
};

struct CAmbientVehicleModelVariations__Mod
{
	enum eVehicleModType             ModType;                         // offset:0x000	type:ENUM.32BIT
	uchar                            ModIndex;                        // offset:0x004	type:UCHAR.0
};

struct CAmmoInfo : CItemInfo
{
	int                               AmmoMax;                         // offset:0x020	type:INT.0
	int                               AmmoMax50;                       // offset:0x024	type:INT.0
	int                               AmmoMax100;                      // offset:0x028	type:INT.0
	int                               AmmoMaxMP;                       // offset:0x02C	type:INT.0
	int                               AmmoMax50MP;                     // offset:0x030	type:INT.0
	int                               AmmoMax100MP;                    // offset:0x034	type:INT.0
	bitset<enum CAmmoInfo__Flags>     AmmoFlags;                       // offset:0x038	type:BITSET.8BIT
	enum _0x64703CC5                  AmmoSpecialType;                 // offset:0x03C	type:ENUM.32BIT
};

struct CAmmoProjectileInfo : CAmmoInfo
{
	float                                       Damage;                          // offset:0x040	type:FLOAT.0
	float                                       LifeTime;                        // offset:0x044	type:FLOAT.0
	float                                       FromVehicleLifeTime;             // offset:0x048	type:FLOAT.0
	float                                       LifeTimeAfterImpact;             // offset:0x04C	type:FLOAT.0
	float                                       LifeTimeAfterExplosion;          // offset:0x050	type:FLOAT.0
	float                                       ExplosionTime;                   // offset:0x054	type:FLOAT.0
	float                                       LaunchSpeed;                     // offset:0x058	type:FLOAT.0
	float                                       SeparationTime;                  // offset:0x05C	type:FLOAT.0
	float                                       TimeToReachTarget;               // offset:0x060	type:FLOAT.0
	float                                       Damping;                         // offset:0x064	type:FLOAT.0
	float                                       GravityFactor;                   // offset:0x068	type:FLOAT.0
	float                                       RicochetTolerance;               // offset:0x06C	type:FLOAT.0
	float                                       PedRicochetTolerance;            // offset:0x070	type:FLOAT.0
	float                                       VehicleRicochetTolerance;        // offset:0x074	type:FLOAT.0
	float                                       FrictionMultiplier;              // offset:0x078	type:FLOAT.0
	struct CAmmoProjectileInfo__sExplosion      Explosion;                       // offset:0x07C	type:STRUCT.STRUCTURE
	string                                      FuseFx;                          // offset:0x094	type:STRING.ATHASHVALUE
	string                                      ProximityFx;                     // offset:0x098	type:STRING.ATHASHVALUE
	string                                      TrailFx;                         // offset:0x09C	type:STRING.ATHASHVALUE
	string                                      TrailFxUnderWater;               // offset:0x0A0	type:STRING.ATHASHVALUE
	string                                      PrimedFx;                        // offset:0x0A4	type:STRING.ATHASHVALUE
	string                                      FuseFxFP;                        // offset:0x0A8	type:STRING.ATHASHVALUE
	string                                      PrimedFxFP;                      // offset:0x0AC	type:STRING.ATHASHVALUE
	float                                       TrailFxFadeInTime;               // offset:0x0B0	type:FLOAT.0
	float                                       TrailFxFadeOutTime;              // offset:0x0B4	type:FLOAT.0
	string                                      DisturbFxDefault;                // offset:0x0B8	type:STRING.ATHASHVALUE
	string                                      DisturbFxSand;                   // offset:0x0BC	type:STRING.ATHASHVALUE
	string                                      DisturbFxWater;                  // offset:0x0C0	type:STRING.ATHASHVALUE
	string                                      DisturbFxDirt;                   // offset:0x0C4	type:STRING.ATHASHVALUE
	string                                      DisturbFxFoliage;                // offset:0x0C8	type:STRING.ATHASHVALUE
	float                                       DisturbFxProbeDist;              // offset:0x0CC	type:FLOAT.0
	float                                       DisturbFxScale;                  // offset:0x0D0	type:FLOAT.0
	float                                       GroundFxProbeDistance;           // offset:0x0D4	type:FLOAT.0
	bool                                        FxAltTintColour;                 // offset:0x0D8	type:BOOL.0
	bool                                        LightOnlyActiveWhenStuck;        // offset:0x0D9	type:BOOL.0
	bool                                        LightFlickers;                   // offset:0x0DA	type:BOOL.0
	bool                                        LightSpeedsUp;                   // offset:0x0DB	type:BOOL.0
	struct CWeaponBoneId                        LightBone;                       // offset:0x0DC	type:STRUCT.STRUCTURE
	vec3                                        LightColour;                     // offset:0x0E0	type:VECTOR3.0
	float                                       LightIntensity;                  // offset:0x0F0	type:FLOAT.0
	float                                       LightRange;                      // offset:0x0F4	type:FLOAT.0
	float                                       LightFalloffExp;                 // offset:0x0F8	type:FLOAT.0
	float                                       LightFrequency;                  // offset:0x0FC	type:FLOAT.0
	float                                       LightPower;                      // offset:0x100	type:FLOAT.0
	float                                       CoronaSize;                      // offset:0x104	type:FLOAT.0
	float                                       CoronaIntensity;                 // offset:0x108	type:FLOAT.0
	float                                       CoronaZBias;                     // offset:0x10C	type:FLOAT.0
	bool                                        ProximityAffectsFiringPlayer;    // offset:0x110	type:BOOL.0
	bool                                        ProximityCanBeTriggeredByPeds;   // offset:0x111	type:BOOL.0
	float                                       ProximityActivationTime;         // offset:0x114	type:FLOAT.0
	float                                       ProximityRepeatedDetonationActivationTime; // offset:0x118	type:FLOAT.0
	float                                       ProximityTriggerRadius;          // offset:0x11C	type:FLOAT.0
	float                                       ProximityFuseTimePed;            // offset:0x120	type:FLOAT.0
	float                                       ProximityFuseTimeVehicleMin;     // offset:0x124	type:FLOAT.0
	float                                       ProximityFuseTimeVehicleMax;     // offset:0x128	type:FLOAT.0
	float                                       ProximityFuseTimeVehicleSpeed;   // offset:0x12C	type:FLOAT.0
	vec3                                        ProximityLightColourUntriggered; // offset:0x130	type:VECTOR3.0
	float                                       ProximityLightFrequencyMultiplierTriggered; // offset:0x140	type:FLOAT.0
	float                                       TimeToIgnoreOwner;               // offset:0x144	type:FLOAT.0
	float                                       ChargedLaunchTime;               // offset:0x148	type:FLOAT.0
	float                                       ChargedLaunchSpeedMult;          // offset:0x14C	type:FLOAT.0
	enum eExplosionTag                          ClusterExplosionTag;             // offset:0x150	type:ENUM.32BIT
	uint                                        ClusterExplosionCount;           // offset:0x154	type:UINT.0
	float                                       ClusterMinRadius;                // offset:0x158	type:FLOAT.0
	float                                       ClusterMaxRadius;                // offset:0x15C	type:FLOAT.0
	float                                       ClusterInitialDelay;             // offset:0x160	type:FLOAT.0
	float                                       ClusterInbetweenDelay;           // offset:0x164	type:FLOAT.0
	bitset<enum CAmmoProjectileInfo__Flags>     ProjectileFlags;                 // offset:0x168	type:BITSET.32BIT
};

struct CAmmoProjectileInfo__sExplosion
{
	enum eExplosionTag               Default;                         // offset:0x000	type:ENUM.32BIT
	enum eExplosionTag               HitCar;                          // offset:0x004	type:ENUM.32BIT
	enum eExplosionTag               HitTruck;                        // offset:0x008	type:ENUM.32BIT
	enum eExplosionTag               HitBike;                         // offset:0x00C	type:ENUM.32BIT
	enum eExplosionTag               HitBoat;                         // offset:0x010	type:ENUM.32BIT
	enum eExplosionTag               HitPlane;                        // offset:0x014	type:ENUM.32BIT
};

struct CAmmoRocketInfo : CAmmoProjectileInfo
{
	float                            ForwardDragCoeff;                // offset:0x170	type:FLOAT.0
	float                            SideDragCoeff;                   // offset:0x174	type:FLOAT.0
	float                            TimeBeforeHoming;                // offset:0x178	type:FLOAT.0
	float                            TimeBeforeSwitchTargetMin;       // offset:0x17C	type:FLOAT.0
	float                            TimeBeforeSwitchTargetMax;       // offset:0x180	type:FLOAT.0
	float                            ProximityRadius;                 // offset:0x184	type:FLOAT.0
	float                            PitchChangeRate;                 // offset:0x188	type:FLOAT.0
	float                            YawChangeRate;                   // offset:0x18C	type:FLOAT.0
	float                            RollChangeRate;                  // offset:0x190	type:FLOAT.0
	float                            MaxRollAngleSin;                 // offset:0x194	type:FLOAT.0
	float                            LifeTimePlayerVehicleLockedOverrideMP; // offset:0x198	type:FLOAT.0
	struct _0xDACB18BA               HomingRocketParams;              // offset:0x19C	type:STRUCT.STRUCTURE
};

struct CAmmoThrownInfo : CAmmoProjectileInfo
{
	float                            ThrownForce;                     // offset:0x170	type:FLOAT.0
	float                            ThrownForceFromVehicle;          // offset:0x174	type:FLOAT.0
	int                              AmmoMaxMPBonus;                  // offset:0x178	type:INT.0
};

struct CAnchorProps
{
	array<uchar>                     props;                           // offset:0x000	type:ARRAY.ATARRAY
	enum eAnchorPoints               anchor;                          // offset:0x010	type:ENUM.32BIT
};

struct CAnimRateSet
{
	struct _0xCF1632CA               NormalEntry;                     // offset:0x000	type:STRUCT.STRUCTURE
	struct _0xCF1632CA               AnimCombatEntry;                 // offset:0x008	type:STRUCT.STRUCTURE
	struct _0xCF1632CA               NoAnimCombatEntry;               // offset:0x010	type:STRUCT.STRUCTURE
	struct _0xCF1632CA               CombatJackEntry;                 // offset:0x018	type:STRUCT.STRUCTURE
	struct _0xCF1632CA               ForcedEntry;                     // offset:0x020	type:STRUCT.STRUCTURE
	bool                             UseInVehicleCombatRates;         // offset:0x028	type:BOOL.0
	struct _0xCF1632CA               NormalInVehicle;                 // offset:0x02C	type:STRUCT.STRUCTURE
	struct _0xCF1632CA               NoAnimCombatInVehicle;           // offset:0x034	type:STRUCT.STRUCTURE
	struct _0xCF1632CA               NormalExit;                      // offset:0x03C	type:STRUCT.STRUCTURE
	struct _0xCF1632CA               NoAnimCombatExit;                // offset:0x044	type:STRUCT.STRUCTURE
	string                           Name;                            // offset:0x04C	type:STRING.ATHASHVALUE
};

struct CAnimScene
{
	float                                          rate;                            // offset:0x008	type:FLOAT.0
	struct CAnimSceneMatrix                        sceneOrigin;                     // offset:0x010	type:STRUCT.STRUCTURE
	map<string, struct CAnimSceneEntity>           entities;                        // offset:0x0D0	type:MAP.ATBINARYMAP
	map<string, struct CAnimSceneSection>          sections;                        // offset:0x0E8	type:MAP.ATBINARYMAP
	map<string, struct CAnimScenePlaybackList>     playbackLists;                   // offset:0x100	type:MAP.ATBINARYMAP
	bitset<enum eAnimSceneFlags>                   flags;                           // offset:0x118	type:BITSET.32BIT
	uint                                           version;                         // offset:0x11C	type:UINT.0
};

struct CAnimSceneBoolean : CAnimSceneEntity
{
	bool                             value;                           // offset:0x030	type:BOOL.0
	bool                             _0xBAC8E518;                     // offset:0x031	type:BOOL.0
};

struct CAnimSceneCamera : CAnimSceneEntity
{
};

struct CAnimSceneClip : CAnimSceneHelperBase
{
	string                           clipDictionaryName;              // offset:0x010	type:STRING.ATHASHVALUE
	string                           clipName;                        // offset:0x014	type:STRING.ATHASHVALUE
};

struct CAnimSceneClipSet : CAnimSceneHelperBase
{
	string                           clipSetName;                     // offset:0x010	type:STRING.ATHASHVALUE
};

struct CAnimSceneCreateObjectEvent : CAnimSceneEvent
{
	struct CAnimSceneEntityHandle     entity;                          // offset:0x038	type:STRUCT.STRUCTURE
	string                            modelName;                       // offset:0x060	type:STRING.ATFINALHASHSTRING
};

struct CAnimSceneCreatePedEvent : CAnimSceneEvent
{
	struct CAnimSceneEntityHandle     entity;                          // offset:0x038	type:STRUCT.STRUCTURE
	string                            modelName;                       // offset:0x060	type:STRING.ATFINALHASHSTRING
};

struct CAnimSceneCreateVehicleEvent : CAnimSceneEvent
{
	struct CAnimSceneEntityHandle     entity;                          // offset:0x038	type:STRUCT.STRUCTURE
	string                            modelName;                       // offset:0x060	type:STRING.ATFINALHASHSTRING
};

struct CAnimSceneDictionary
{
	map<string, struct CAnimScene>     scenes;                          // offset:0x008	type:MAP.ATBINARYMAP
};

struct CAnimSceneEntity
{
	string                              Id;                              // offset:0x008	type:STRING.ATHASHVALUE
	map<string, struct _0xA47600F5>     locationData;                    // offset:0x018	type:MAP.ATBINARYMAP
};

struct CAnimSceneEntityHandle : CAnimSceneHelperBase
{
	string                           entityId;                        // offset:0x010	type:STRING.ATHASHVALUE
};

struct CAnimSceneEvent
{
	float                            startTime;                       // offset:0x018	type:FLOAT.0
	float                            endTime;                         // offset:0x01C	type:FLOAT.0
	float                            _0x420E8F0C;                     // offset:0x020	type:FLOAT.0
	struct CAnimSceneEventList       pChildren;                       // offset:0x028	type:STRUCT.POINTER
};

struct CAnimSceneEventList
{
	array<struct CAnimSceneEvent>     events;                          // offset:0x008	type:ARRAY.ATARRAY
};

struct CAnimSceneForceMotionStateEvent : CAnimSceneEvent
{
	struct CAnimSceneEntityHandle     ped;                             // offset:0x038	type:STRUCT.STRUCTURE
	enum _0x92A659FE                  motionState;                     // offset:0x060	type:ENUM.32BIT
	bool                              restartState;                    // offset:0x064	type:BOOL.0
};

struct CAnimSceneHelperBase
{
};

struct CAnimSceneInternalLoopEvent : CAnimSceneEvent
{
	struct CAnimSceneEntityHandle     _0x088531F0;                     // offset:0x038	type:STRUCT.STRUCTURE
	bool                              _0x47B47045;                     // offset:0x060	type:BOOL.0
};

struct CAnimSceneLeadInData
{
	struct CAnimSceneClipSet         clipSet;                         // offset:0x008	type:STRUCT.STRUCTURE
	string                           playbackList;                    // offset:0x020	type:STRING.ATHASHVALUE
};

struct CAnimSceneMatrix : CAnimSceneHelperBase
{
	matrix34V                        matrix;                          // offset:0x010	type:MAT34V.0
};

struct CAnimSceneObject : CAnimSceneEntity
{
	string                           debugModelName;                  // offset:0x030	type:STRING.ATHASHVALUE
	bool                             optional;                        // offset:0x048	type:BOOL.0
};

struct CAnimScenePed : CAnimSceneEntity
{
	string                                 debugPedName;                    // offset:0x030	type:STRING.ATHASHVALUE
	array<struct CAnimSceneLeadInData>     _0x46EC3400;                     // offset:0x038	type:ARRAY.ATARRAY
	bool                                   optional;                        // offset:0x058	type:BOOL.0
};

struct CAnimScenePlayAnimEvent : CAnimSceneEvent
{
	struct CAnimSceneEntityHandle          entity;                          // offset:0x038	type:STRUCT.STRUCTURE
	struct CAnimSceneClip                  clip;                            // offset:0x060	type:STRUCT.STRUCTURE
	bitset<enum eScriptedAnimFlags>        animFlags;                       // offset:0x080	type:BITSET.32BIT
	bitset<enum eRagdollBlockingFlags>     ragdollBlockingFlags;            // offset:0x084	type:BITSET.32BIT
	bitset<enum eIkControlFlags>           ikFlags;                         // offset:0x088	type:BITSET.32BIT
	string                                 filter;                          // offset:0x08C	type:STRING.ATHASHVALUE
	float                                  blendInDuration;                 // offset:0x090	type:FLOAT.0
	float                                  blendOutDuration;                // offset:0x094	type:FLOAT.0
	float                                  _0xEB3388F4;                     // offset:0x098	type:FLOAT.0
	float                                  startPhase;                      // offset:0x09C	type:FLOAT.0
	bool                                   _0x68303946;                     // offset:0x0A4	type:BOOL.0
	struct CAnimSceneMatrix                _0x03EFD81F;                     // offset:0x0A8	type:STRUCT.POINTER
};

struct CAnimScenePlayCameraAnimEvent : CAnimSceneEvent
{
	struct CAnimSceneEntityHandle     entity;                          // offset:0x038	type:STRUCT.STRUCTURE
	struct CAnimSceneClip             clip;                            // offset:0x060	type:STRUCT.STRUCTURE
	float                             blendInDuration;                 // offset:0x080	type:FLOAT.0
	float                             blendOutDuration;                // offset:0x084	type:FLOAT.0
	float                             startPhase;                      // offset:0x090	type:FLOAT.0
	bool                              _0x68303946;                     // offset:0x094	type:BOOL.0
	bitset<enum eCameraSettings>      cameraSettings;                  // offset:0x098	type:BITSET.32BIT
	struct CAnimSceneMatrix           _0x03EFD81F;                     // offset:0x0A0	type:STRUCT.POINTER
};

struct CAnimScenePlaySceneEvent : CAnimSceneEvent
{
	string                            sceneName;                       // offset:0x038	type:STRING.ATHASHVALUE
	struct CAnimSceneEntityHandle     trigger;                         // offset:0x040	type:STRUCT.STRUCTURE
	bool                              _0x365B6DCC;                     // offset:0x068	type:BOOL.0
	struct CAnimSceneEntityHandle     _0x088531F0;                     // offset:0x070	type:STRUCT.STRUCTURE
	bool                              _0x47B47045;                     // offset:0x098	type:BOOL.0
};

struct CAnimScenePlayVfxEvent : CAnimSceneEvent
{
	string                            vfxName;                         // offset:0x038	type:STRING.ATHASHVALUE
	struct CAnimSceneEntityHandle     entity;                          // offset:0x040	type:STRUCT.STRUCTURE
	vec3V                             offsetPosition;                  // offset:0x070	type:VEC3V.0
	vec3V                             _0x8A60C92F;                     // offset:0x080	type:VEC3V.0
	float                             scale;                           // offset:0x090	type:FLOAT.0
	int                               probability;                     // offset:0x094	type:INT.0
	enum eAnimBoneTag                 boneId;                          // offset:0x098	type:ENUM.32BIT
	uint                              color;                           // offset:0x09C	type:UINT.1
	bool                              continuous;                      // offset:0x0A0	type:BOOL.0
	bool                              _0xF39CADA7;                     // offset:0x0A1	type:BOOL.0
};

struct CAnimScenePlaybackList
{
	array<string>                    sections;                        // offset:0x008	type:ARRAY.ATARRAY
};

struct CAnimSceneSection
{
	struct CAnimSceneEventList       events;                          // offset:0x008	type:STRUCT.STRUCTURE
};

struct CAnimSceneVehicle : CAnimSceneEntity
{
	string                           debugModelName;                  // offset:0x030	type:STRING.ATHASHVALUE
	bool                             optional;                        // offset:0x048	type:BOOL.0
};

struct CAnimSpeedUps__Tunables : CTuning
{
	float                            MultiplayerClimbStandRateModifier; // offset:0x010	type:FLOAT.0
	float                            MultiplayerClimbRunningRateModifier; // offset:0x014	type:FLOAT.0
	float                            MultiplayerClimbClamberRateModifier; // offset:0x018	type:FLOAT.0
	float                            MultiplayerEnterExitJackVehicleRateModifier; // offset:0x01C	type:FLOAT.0
	float                            MultiplayerLadderRateModifier;   // offset:0x020	type:FLOAT.0
	float                            MultiplayerReloadRateModifier;   // offset:0x024	type:FLOAT.0
	float                            MultiplayerCoverIntroRateModifier; // offset:0x028	type:FLOAT.0
	float                            MultiplayerIdleTurnRateModifier; // offset:0x02C	type:FLOAT.0
	bool                             ForceMPAnimRatesInSP;            // offset:0x030	type:BOOL.0
};

struct CArrowData : SGeneralMovieData
{
	vec2                             vPosRight;                       // offset:0x018	type:VECTOR2.0
	uchar                            shownAlpha;                      // offset:0x020	type:UCHAR.0
	uchar                            hiddenAlpha;                     // offset:0x021	type:UCHAR.0
};

struct CAssassinsDispatch__Tunables : CTuning
{
	float                            AssassinLvl1Accuracy;            // offset:0x010	type:FLOAT.0
	float                            AssassinLvl1ShootRate;           // offset:0x014	type:FLOAT.0
	float                            AssassinLvl1HealthMod;           // offset:0x018	type:FLOAT.0
	string                           AssassinLvl1WeaponPrimary;       // offset:0x01C	type:STRING.ATHASHVALUE
	string                           AssassinLvl1WeaponSecondary;     // offset:0x020	type:STRING.ATHASHVALUE
	float                            AssassinLvl2Accuracy;            // offset:0x024	type:FLOAT.0
	float                            AssassinLvl2ShootRate;           // offset:0x028	type:FLOAT.0
	float                            AssassinLvl2HealthMod;           // offset:0x02C	type:FLOAT.0
	string                           AssassinLvl2WeaponPrimary;       // offset:0x030	type:STRING.ATHASHVALUE
	string                           AssassinLvl2WeaponSecondary;     // offset:0x034	type:STRING.ATHASHVALUE
	float                            AssassinLvl3Accuracy;            // offset:0x038	type:FLOAT.0
	float                            AssassinLvl3ShootRate;           // offset:0x03C	type:FLOAT.0
	float                            AssassinLvl3HealthMod;           // offset:0x040	type:FLOAT.0
	string                           AssassinLvl3WeaponPrimary;       // offset:0x044	type:STRING.ATHASHVALUE
	string                           AssassinLvl3WeaponSecondary;     // offset:0x048	type:STRING.ATHASHVALUE
};

struct CAudioSettings : CSettings
{
	bool                             Audio3d;                         // offset:0x008	type:BOOL.0
};

struct CAutoJunctionAdjustment
{
	vec3V                            vLocation;                       // offset:0x000	type:VEC3V.0
	float                            fCycleOffset;                    // offset:0x010	type:FLOAT.0
	float                            fCycleDuration;                  // offset:0x014	type:FLOAT.0
};

struct CBaseArchetypeDef : rage__fwArchetypeDef
{
};

struct CBaseCapsuleInfo
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	bool                             FlattenCollisionNormals;         // offset:0x00D	type:BOOL.0
	bool                             UsesRagdollReactionIfShoved;     // offset:0x00E	type:BOOL.0
	bool                             DiesOnEnteringRagdoll;           // offset:0x00F	type:BOOL.0
	bool                             UseInactiveRagdollCollision;     // offset:0x010	type:BOOL.0
	float                            Mass;                            // offset:0x014	type:FLOAT.0
	float                            GroundInstanceDamage;            // offset:0x018	type:FLOAT.0
	float                            GroundToRootOffset;              // offset:0x01C	type:FLOAT.0
	float                            ProbeRadius;                     // offset:0x020	type:FLOAT.0
	float                            ProbeYOffset;                    // offset:0x024	type:FLOAT.0
	float                            MaxNormalZForFlatten;            // offset:0x028	type:FLOAT.0
	float                            MinNormalZForFlatten;            // offset:0x02C	type:FLOAT.0
	float                            MaxNormalZForFlatten_Movable;    // offset:0x030	type:FLOAT.0
	float                            MinHeightForFlatten;             // offset:0x034	type:FLOAT.0
	float                            MinHeightForFlattenInteriorOffset; // offset:0x038	type:FLOAT.0
	enum eRagdollType                RagdollType;                     // offset:0x03C	type:ENUM.32BIT
};

struct CBaseElementLocation
{
	vec3                             location;                        // offset:0x010	type:VECTOR3.0
	vec3                             rotation;                        // offset:0x020	type:VECTOR3.0
};

struct CBaseElementLocationsMap
{
	array<struct CBaseElementLocation>     BaseElementLocations;            // offset:0x008	type:ARRAY.ATARRAY
};

struct CBaseElements
{
	struct CBaseElementLocationsMap     BaseElementLocationsMap_HighApt; // offset:0x008	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     BaseElementLocationsMap;         // offset:0x020	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     ExtraBaseElementLocMap1;         // offset:0x038	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     ExtraBaseElementLocMap2;         // offset:0x050	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     ExtraBaseElementLocMap3;         // offset:0x068	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     ExtraBaseElementLocMap4;         // offset:0x080	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     ExtraBaseElementLocMap5;         // offset:0x098	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     ExtraBaseElementLocMap6;         // offset:0x0B0	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     ExtraBaseElementLocMap7;         // offset:0x0C8	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     ExtraBaseElementLocMap8;         // offset:0x0E0	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     _0xE7549289;                     // offset:0x0F8	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     _0x0E1FD343;                     // offset:0x110	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     _0x64537FA9;                     // offset:0x128	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     _0xEE9C943D;                     // offset:0x140	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     _0x3696A430;                     // offset:0x158	type:STRUCT.STRUCTURE
	struct CBaseElementLocationsMap     _0x44D940B5;                     // offset:0x170	type:STRUCT.STRUCTURE
};

struct CBaseStatsSaveStructure
{
	array<struct CBaseStatsSaveStructure__CIntStatStruct>        IntData;                         // offset:0x008	type:ARRAY.ATARRAY
	array<struct CBaseStatsSaveStructure__CFloatStatStruct>      FloatData;                       // offset:0x018	type:ARRAY.ATARRAY
	array<struct CBaseStatsSaveStructure__CBoolStatStruct>       BoolData;                        // offset:0x028	type:ARRAY.ATARRAY
	array<struct CBaseStatsSaveStructure__CStringStatStruct>     StringData;                      // offset:0x038	type:ARRAY.ATARRAY
	array<struct CBaseStatsSaveStructure__CUInt8StatStruct>      UInt8Data;                       // offset:0x048	type:ARRAY.ATARRAY
	array<struct CBaseStatsSaveStructure__CUInt16StatStruct>     UInt16Data;                      // offset:0x058	type:ARRAY.ATARRAY
	array<struct CBaseStatsSaveStructure__CUInt32StatStruct>     UInt32Data;                      // offset:0x068	type:ARRAY.ATARRAY
	array<struct CBaseStatsSaveStructure__CUInt64StatStruct>     UInt64Data;                      // offset:0x078	type:ARRAY.ATARRAY
	array<struct CBaseStatsSaveStructure__CInt64StatStruct>      Int64Data;                       // offset:0x088	type:ARRAY.ATARRAY
};

struct CBaseStatsSaveStructure__CBoolStatStruct
{
	int                              NameHash;                        // offset:0x000	type:INT.0
	bool                             Data;                            // offset:0x004	type:BOOL.0
};

struct CBaseStatsSaveStructure__CFloatStatStruct
{
	int                              NameHash;                        // offset:0x000	type:INT.0
	float                            Data;                            // offset:0x004	type:FLOAT.0
};

struct CBaseStatsSaveStructure__CInt64StatStruct
{
	int                              NameHash;                        // offset:0x000	type:INT.0
	uint                             DataHigh;                        // offset:0x004	type:UINT.0
	uint                             DataLow;                         // offset:0x008	type:UINT.0
};

struct CBaseStatsSaveStructure__CIntStatStruct
{
	int                              NameHash;                        // offset:0x000	type:INT.0
	int                              Data;                            // offset:0x004	type:INT.0
};

struct CBaseStatsSaveStructure__CStringStatStruct
{
	int                              NameHash;                        // offset:0x000	type:INT.0
	string                           Data;                            // offset:0x008	type:STRING.ATSTRING
};

struct CBaseStatsSaveStructure__CUInt16StatStruct
{
	int                              NameHash;                        // offset:0x000	type:INT.0
	ushort                           Data;                            // offset:0x004	type:USHORT.0
};

struct CBaseStatsSaveStructure__CUInt32StatStruct
{
	int                              NameHash;                        // offset:0x000	type:INT.0
	uint                             Data;                            // offset:0x004	type:UINT.0
};

struct CBaseStatsSaveStructure__CUInt64StatStruct
{
	int                              NameHash;                        // offset:0x000	type:INT.0
	uint                             DataHigh;                        // offset:0x004	type:UINT.0
	uint                             DataLow;                         // offset:0x008	type:UINT.0
};

struct CBaseStatsSaveStructure__CUInt8StatStruct
{
	int                              NameHash;                        // offset:0x000	type:INT.0
	uchar                            Data;                            // offset:0x004	type:UCHAR.0
};

struct CBaseSubHandlingData : CHandlingObject
{
};

struct CBicycleInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct _0x0DEE1CA7>        CruiseGearClipSpeeds;            // offset:0x008	type:ARRAY.ATARRAY
	array<struct _0x0DEE1CA7>        FastGearClipSpeeds;              // offset:0x018	type:ARRAY.ATARRAY
	float                            SpeedToTriggerBicycleLean;       // offset:0x028	type:FLOAT.0
	float                            SpeedToTriggerStillTransition;   // offset:0x02C	type:FLOAT.0
	float                            DesiredSitRateMult;              // offset:0x030	type:FLOAT.0
	float                            DesiredStandingInAirRateMult;    // offset:0x034	type:FLOAT.0
	float                            DesiredStandingRateMult;         // offset:0x038	type:FLOAT.0
	float                            StillToSitPedalGearApproachRate; // offset:0x03C	type:FLOAT.0
	float                            SitPedalGearApproachRate;        // offset:0x040	type:FLOAT.0
	float                            StandPedalGearApproachRate;      // offset:0x044	type:FLOAT.0
	float                            SitToStandPedalAccelerationScalar; // offset:0x048	type:FLOAT.0
	float                            SitToStandPedalMaxRate;          // offset:0x04C	type:FLOAT.0
	float                            PedalToFreewheelBlendDuration;   // offset:0x050	type:FLOAT.0
	float                            FreewheelToPedalBlendDuration;   // offset:0x054	type:FLOAT.0
	float                            StillToSitToSitBlendOutDuration; // offset:0x058	type:FLOAT.0
	float                            SitTransitionJumpPrepBlendDuration; // offset:0x05C	type:FLOAT.0
	float                            MinForcedInitialBrakeTime;       // offset:0x060	type:FLOAT.0
	float                            MinForcedStillToSitTime;         // offset:0x064	type:FLOAT.0
	float                            MinTimeInStandFreewheelState;    // offset:0x068	type:FLOAT.0
	bool                             IsFixie;                         // offset:0x06C	type:BOOL.0
	bool                             HasImpactAnims;                  // offset:0x06D	type:BOOL.0
	bool                             UseHelmet;                       // offset:0x06E	type:BOOL.0
	bool                             CanTrackStand;                   // offset:0x06F	type:BOOL.0
};

struct CBikeHandlingData : CBaseSubHandlingData
{
	float                            fLeanFwdCOMMult;                 // offset:0x008	type:FLOAT.0
	float                            fLeanFwdForceMult;               // offset:0x00C	type:FLOAT.0
	float                            fLeanBakCOMMult;                 // offset:0x010	type:FLOAT.0
	float                            fLeanBakForceMult;               // offset:0x014	type:FLOAT.0
	float                            fMaxBankAngle;                   // offset:0x018	type:FLOAT.0
	float                            fFullAnimAngle;                  // offset:0x01C	type:FLOAT.0
	float                            fDesLeanReturnFrac;              // offset:0x024	type:FLOAT.0
	float                            fStickLeanMult;                  // offset:0x028	type:FLOAT.0
	float                            fBrakingStabilityMult;           // offset:0x02C	type:FLOAT.0
	float                            fInAirSteerMult;                 // offset:0x030	type:FLOAT.0
	float                            fWheelieBalancePoint;            // offset:0x034	type:FLOAT.0
	float                            fStoppieBalancePoint;            // offset:0x038	type:FLOAT.0
	float                            fWheelieSteerMult;               // offset:0x03C	type:FLOAT.0
	float                            fRearBalanceMult;                // offset:0x040	type:FLOAT.0
	float                            fFrontBalanceMult;               // offset:0x044	type:FLOAT.0
	float                            fBikeGroundSideFrictionMult;     // offset:0x048	type:FLOAT.0
	float                            fBikeWheelGroundSideFrictionMult; // offset:0x04C	type:FLOAT.0
	float                            fBikeOnStandLeanAngle;           // offset:0x050	type:FLOAT.0
	float                            fBikeOnStandSteerAngle;          // offset:0x054	type:FLOAT.0
	float                            fJumpForce;                      // offset:0x058	type:FLOAT.0
};

struct CBikeLeanAngleHelper__Tunables : CTuning
{
	bool                             UseReturnOvershoot;              // offset:0x010	type:BOOL.0
	bool                             UseInitialLeanForcing;           // offset:0x011	type:BOOL.0
	float                            DesiredLeanAngleTolToBringLegIn; // offset:0x014	type:FLOAT.0
	float                            DesiredSpeedToBringLegIn;        // offset:0x018	type:FLOAT.0
	float                            DesiredLeanAngleRate;            // offset:0x01C	type:FLOAT.0
	float                            DesiredLeanAngleRateQuad;        // offset:0x020	type:FLOAT.0
	float                            LeanAngleReturnRate;             // offset:0x024	type:FLOAT.0
	float                            LeanAngleDefaultRate;            // offset:0x028	type:FLOAT.0
	float                            LeanAngleDefaultRatePassenger;   // offset:0x02C	type:FLOAT.0
	float                            DesiredOvershootLeanAngle;       // offset:0x030	type:FLOAT.0
	float                            LeanAngleReturnedTol;            // offset:0x034	type:FLOAT.0
	float                            HasStickInputThreshold;          // offset:0x038	type:FLOAT.0
	float                            LeaningExtremeThreshold;         // offset:0x03C	type:FLOAT.0
};

struct CBipedCapsuleInfo : CBaseCapsuleInfo
{
	float                            Radius;                          // offset:0x040	type:FLOAT.0
	float                            RadiusRunning;                   // offset:0x044	type:FLOAT.0
	float                            RadiusCrouched;                  // offset:0x048	type:FLOAT.0
	float                            RadiusInCover;                   // offset:0x04C	type:FLOAT.0
	float                            RadiusCrouchedinCover;           // offset:0x050	type:FLOAT.0
	float                            RadiusMobilePhone;               // offset:0x054	type:FLOAT.0
	float                            RadiusFPSHeadBlocker;            // offset:0x058	type:FLOAT.0
	float                            RadiusWeaponBlocked;             // offset:0x05C	type:FLOAT.0
	float                            RadiusGrowSpeed;                 // offset:0x060	type:FLOAT.0
	float                            HeadHeight;                      // offset:0x064	type:FLOAT.0
	float                            KneeHeight;                      // offset:0x068	type:FLOAT.0
	float                            CapsuleZOffset;                  // offset:0x06C	type:FLOAT.0
	float                            HeadHeightCrouched;              // offset:0x070	type:FLOAT.0
	float                            CrouchedCapsuleOffsetZ;          // offset:0x074	type:FLOAT.0
	float                            GroundOffsetExtend;              // offset:0x078	type:FLOAT.0
	float                            BoatBlockerHeadHeight;           // offset:0x07C	type:FLOAT.0
	float                            BoatBlockerZOffset;              // offset:0x080	type:FLOAT.0
	bool                             UseLowerLegBound;                // offset:0x084	type:BOOL.0
	bool                             UseBoatBlocker;                  // offset:0x085	type:BOOL.0
	bool                             UseFPSHeadBlocker;               // offset:0x086	type:BOOL.0
};

struct CBirdCapsuleInfo : CBipedCapsuleInfo
{
};

struct CBlockDesc
{
	uint                             version;                         // offset:0x000	type:UINT.0
	uint                             flags;                           // offset:0x004	type:UINT.0
	string                           name;                            // offset:0x008	type:STRING.ATSTRING
	string                           exportedBy;                      // offset:0x018	type:STRING.ATSTRING
	string                           owner;                           // offset:0x028	type:STRING.ATSTRING
	string                           time;                            // offset:0x038	type:STRING.ATSTRING
};

struct CBoatHandlingData : CBaseSubHandlingData
{
	float                            fBoxFrontMult;                   // offset:0x008	type:FLOAT.0
	float                            fBoxRearMult;                    // offset:0x00C	type:FLOAT.0
	float                            fBoxSideMult;                    // offset:0x010	type:FLOAT.0
	float                            fSampleTop;                      // offset:0x014	type:FLOAT.0
	float                            fSampleBottom;                   // offset:0x018	type:FLOAT.0
	float                            fSampleBottomTestCorrection;     // offset:0x01C	type:FLOAT.0
	float                            fAquaplaneForce;                 // offset:0x020	type:FLOAT.0
	float                            fAquaplanePushWaterMult;         // offset:0x024	type:FLOAT.0
	float                            fAquaplanePushWaterCap;          // offset:0x028	type:FLOAT.0
	float                            fAquaplanePushWaterApply;        // offset:0x02C	type:FLOAT.0
	float                            fRudderForce;                    // offset:0x030	type:FLOAT.0
	float                            fRudderOffsetSubmerge;           // offset:0x034	type:FLOAT.0
	float                            fRudderOffsetForce;              // offset:0x038	type:FLOAT.0
	float                            fRudderOffsetForceZMult;         // offset:0x03C	type:FLOAT.0
	float                            fWaveAudioMult;                  // offset:0x040	type:FLOAT.0
	vec3V                            vecMoveResistance;               // offset:0x050	type:VEC3V.0
	vec3V                            vecTurnResistance;               // offset:0x060	type:VEC3V.0
	float                            fLook_L_R_CamHeight;             // offset:0x070	type:FLOAT.0
	float                            fDragCoefficient;                // offset:0x074	type:FLOAT.0
	float                            fKeelSphereSize;                 // offset:0x078	type:FLOAT.0
	float                            fPropRadius;                     // offset:0x07C	type:FLOAT.0
	float                            fLowLodAngOffset;                // offset:0x080	type:FLOAT.0
	float                            fLowLodDraughtOffset;            // offset:0x084	type:FLOAT.0
	float                            fImpellerOffset;                 // offset:0x088	type:FLOAT.0
	float                            fImpellerForceMult;              // offset:0x08C	type:FLOAT.0
	float                            fDinghySphereBuoyConst;          // offset:0x090	type:FLOAT.0
	float                            fProwRaiseMult;                  // offset:0x094	type:FLOAT.0
	float                            fDeepWaterSampleBuoyancyMult;    // offset:0x098	type:FLOAT.0
	float                            fTransmissionMultiplier;         // offset:0x09C	type:FLOAT.0
	float                            fTractionMultiplier;             // offset:0x0A0	type:FLOAT.0
};

struct CBrawlingStyleData
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	float                            TargetRadius;                    // offset:0x004	type:FLOAT.0
	float                            KeepMovingWhilePathingDistance;  // offset:0x008	type:FLOAT.0
	float                            MaxDistanceMayAdjustPathEndPosition; // offset:0x00C	type:FLOAT.0
	float                            MeleeMovementMBR;                // offset:0x010	type:FLOAT.0
	float                            AttackRangeMax;                  // offset:0x014	type:FLOAT.0
	float                            AttackProbabilityToComboMin;     // offset:0x018	type:FLOAT.0
	float                            AttackProbabilityToComboMax;     // offset:0x01C	type:FLOAT.0
	float                            ProbabilityToBeDazedMin;         // offset:0x020	type:FLOAT.0
	float                            ProbabilityToBeDazedMax;         // offset:0x024	type:FLOAT.0
	float                            TauntProbability;                // offset:0x028	type:FLOAT.0
	float                            TauntProbabilityQueued;          // offset:0x02C	type:FLOAT.0
	float                            BlockProbabilityMin;             // offset:0x030	type:FLOAT.0
	float                            BlockProbabilityMax;             // offset:0x034	type:FLOAT.0
	float                            CounterProbabilityMin;           // offset:0x038	type:FLOAT.0
	float                            CounterProbabilityMax;           // offset:0x03C	type:FLOAT.0
	int                              SeekModeScanTimeMin;             // offset:0x040	type:INT.0
	int                              SeekModeScanTimeMax;             // offset:0x044	type:INT.0
	int                              AttackFrequencyWorstFighterMinInMs; // offset:0x048	type:INT.0
	int                              AttackFrequencyWorstFighterMaxInMs; // offset:0x04C	type:INT.0
	int                              AttackFrequencyBestFighterMinInMs; // offset:0x050	type:INT.0
	int                              AttackFrequencyBestFighterMaxInMs; // offset:0x054	type:INT.0
	int                              TauntFrequencyMinInMs;           // offset:0x058	type:INT.0
	int                              TauntFrequencyMaxInMs;           // offset:0x05C	type:INT.0
	int                              TauntFrequencyQueuedMinInMs;     // offset:0x060	type:INT.0
	int                              TauntFrequencyQueuedMaxInMs;     // offset:0x064	type:INT.0
	bool                             PlayTauntBeforeAttacking;        // offset:0x068	type:BOOL.0
};

struct CBrawlingStyleManager
{
	array<struct CBrawlingStyleData>     aBrawlingData;                   // offset:0x000	type:ARRAY.ATARRAY
};

struct CBroadcastDataEntry
{
	int                              SizeOfData;                      // offset:0x000	type:INT.0
	int                              MaxParticipants;                 // offset:0x004	type:INT.0
	int                              NumInstances;                    // offset:0x008	type:INT.0
};

struct CCameraSaveStructure
{
	map<string, string>              ContextViewModeMap;              // offset:0x000	type:MAP.ATBINARYMAP
};

struct CCameraSaveStructure_Migration
{
	map<uint, uint>                  ContextViewModeMap;              // offset:0x000	type:MAP.ATBINARYMAP
};

struct CCarGen
{
	vec3                             position;                        // offset:0x010	type:VECTOR3.0
	float                            orientX;                         // offset:0x020	type:FLOAT.0
	float                            orientY;                         // offset:0x024	type:FLOAT.0
	float                            perpendicularLength;             // offset:0x028	type:FLOAT.0
	string                           carModel;                        // offset:0x02C	type:STRING.ATHASHVALUE
	uint                             flags;                           // offset:0x030	type:UINT.0
	int                              bodyColorRemap1;                 // offset:0x034	type:INT.0
	int                              bodyColorRemap2;                 // offset:0x038	type:INT.0
	int                              bodyColorRemap3;                 // offset:0x03C	type:INT.0
	int                              bodyColorRemap4;                 // offset:0x040	type:INT.0
	string                           popGroup;                        // offset:0x044	type:STRING.ATHASHVALUE
	char                             livery;                          // offset:0x048	type:CHAR.0
};

struct CCarHandlingData : CBaseSubHandlingData
{
	float                            fBackEndPopUpCarImpulseMult;     // offset:0x008	type:FLOAT.0
	float                            fBackEndPopUpBuildingImpulseMult; // offset:0x00C	type:FLOAT.0
	float                            fBackEndPopUpMaxDeltaSpeed;      // offset:0x010	type:FLOAT.0
	float                            fToeFront;                       // offset:0x014	type:FLOAT.0
	float                            fToeRear;                        // offset:0x018	type:FLOAT.0
	float                            fCamberFront;                    // offset:0x01C	type:FLOAT.0
	float                            fCamberRear;                     // offset:0x020	type:FLOAT.0
	float                            fCastor;                         // offset:0x024	type:FLOAT.0
	float                            fEngineResistance;               // offset:0x028	type:FLOAT.0
	float                            fMaxDriveBiasTransfer;           // offset:0x02C	type:FLOAT.0
	float                            fJumpForceScale;                 // offset:0x030	type:FLOAT.0
	float                            _0xFD5598BA;                     // offset:0x034	type:FLOAT.0
	string                           strAdvancedFlags;                // offset:0x038	type:STRING.ATFINALHASHSTRING
	array<struct CAdvancedData>      AdvancedData;                    // offset:0x040	type:ARRAY.ATARRAY
};

struct CClipScalingHelper__Tunables : CTuning
{
	bool                             DisableRotationScaling;          // offset:0x010	type:BOOL.0
	bool                             DisableRotationOvershoot;        // offset:0x011	type:BOOL.0
	bool                             DisableTranslationScaling;       // offset:0x012	type:BOOL.0
	bool                             DisableTranslationOvershoot;     // offset:0x013	type:BOOL.0
	float                            MinAnimRotationDeltaToScale;     // offset:0x014	type:FLOAT.0
	float                            MinAnimTranslationDeltaToScale;  // offset:0x018	type:FLOAT.0
	float                            MinCurrentRotationDeltaToScale;  // offset:0x01C	type:FLOAT.0
	float                            MinRemainingAnimDurationToScale; // offset:0x020	type:FLOAT.0
	float                            MinVelocityToScale;              // offset:0x024	type:FLOAT.0
	float                            MaxTransVelocity;                // offset:0x028	type:FLOAT.0
	float                            DefaultMinRotationScalingValue;  // offset:0x02C	type:FLOAT.0
	float                            DefaultMaxRotationScalingValue;  // offset:0x030	type:FLOAT.0
	float                            DefaultMinTranslationScalingValue; // offset:0x034	type:FLOAT.0
	float                            DefaultMaxTranslationScalingValue; // offset:0x038	type:FLOAT.0
};

struct CClipSetMap
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct _0x76E65716>        Maps;                            // offset:0x008	type:ARRAY.ATARRAY
};

struct CClothCollisionData
{
	vec4V                            Rotation;                        // offset:0x000	type:VEC4V.0
	float                            CapsuleRadius;                   // offset:0x010	type:FLOAT.0
	float                            CapsuleLen;                      // offset:0x014	type:FLOAT.0
	int                              BoneIndex;                       // offset:0x018	type:INT.0
	string                           BoneName;                        // offset:0x020	type:STRING.ATSTRING
	bool                             Enabled;                         // offset:0x030	type:BOOL.0
};

struct CCombatInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	enum _0x4F456B61                 CombatMovement;                  // offset:0x004	type:ENUM.32BIT
	bitset<enum _0x0E8E7201>         BehaviourFlags;                  // offset:0x008	type:BITSET.32BIT
	enum _0xE793438C                 CombatAbility;                   // offset:0x014	type:ENUM.32BIT
	enum _0xB69160F5                 AttackRanges;                    // offset:0x018	type:ENUM.32BIT
	enum _0xB3D45189                 TargetLossResponse;              // offset:0x01C	type:ENUM.32BIT
	enum _0xC7B8413A                 TargetInjuredReaction;           // offset:0x020	type:ENUM.32BIT
	float                            WeaponShootRateModifier;         // offset:0x024	type:FLOAT.0
	string                           FiringPatternHash;               // offset:0x028	type:STRING.ATHASHVALUE
	float                            BlindFireChance;                 // offset:0x02C	type:FLOAT.0
	float                            BurstDurationInCover;            // offset:0x030	type:FLOAT.0
	float                            MaxShootingDistance;             // offset:0x034	type:FLOAT.0
	float                            TimeBetweenBurstsInCover;        // offset:0x038	type:FLOAT.0
	float                            TimeBetweenPeeks;                // offset:0x03C	type:FLOAT.0
	float                            StrafeWhenMovingChance;          // offset:0x040	type:FLOAT.0
	float                            WeaponAccuracy;                  // offset:0x044	type:FLOAT.0
	float                            WalkWhenStrafingChance;          // offset:0x04C	type:FLOAT.0
	float                            HeliSpeedModifier;               // offset:0x050	type:FLOAT.0
	float                            HeliSensesRange;                 // offset:0x054	type:FLOAT.0
	float                            AttackWindowDistanceForCover;    // offset:0x058	type:FLOAT.0
	float                            TimeToInvalidateInjuredTarget;   // offset:0x05C	type:FLOAT.0
	float                            MinimumDistanceToTarget;         // offset:0x060	type:FLOAT.0
	float                            BulletImpactDetectionRange;      // offset:0x064	type:FLOAT.0
	float                            AimTurnThreshold;                // offset:0x068	type:FLOAT.0
	float                            OptimalCoverDistance;            // offset:0x06C	type:FLOAT.0
	float                            AutomobileSpeedModifier;         // offset:0x070	type:FLOAT.0
	float                            SpeedToFleeInVehicle;            // offset:0x074	type:FLOAT.0
	float                            TriggerChargeTime_Far;           // offset:0x078	type:FLOAT.0
	float                            TriggerChargeTime_Near;          // offset:0x07C	type:FLOAT.0
	float                            MaxDistanceToHearEvents;         // offset:0x080	type:FLOAT.0
	float                            MaxDistanceToHearEventsUsingLOS; // offset:0x084	type:FLOAT.0
	float                            _0xF86FE7F5;                     // offset:0x088	type:FLOAT.0
	float                            _0xABAF7CBA;                     // offset:0x08C	type:FLOAT.0
	float                            _0x7D73B16B;                     // offset:0x090	type:FLOAT.0
	float                            _0x825C0B4F;                     // offset:0x094	type:FLOAT.0
	float                            _0x43F782A1;                     // offset:0x098	type:FLOAT.0
	float                            _0xA319C2D2;                     // offset:0x09C	type:FLOAT.0
};

struct CCombatInfoMgr
{
	array<struct CCombatInfo>        CombatInfos;                     // offset:0x000	type:ARRAY.ATARRAY
};

struct CCombatTaskManager__Tunables : CTuning
{
	float                            fTimeBetweenUpdates;             // offset:0x010	type:FLOAT.0
	int                              iMaxPedsInCombatTask;            // offset:0x014	type:INT.0
};

struct CCommunityStatsData
{
	string                           StatId;                          // offset:0x008	type:STRING.ATHASHVALUE
	float                            Value;                           // offset:0x00C	type:FLOAT.0
	array<float>                     HistoryDepth;                    // offset:0x010	type:ARRAY.ATARRAY
};

struct CCommunityStatsDataMgr
{
	array<struct CCommunityStatsData>     Data;                            // offset:0x008	type:ARRAY.ATARRAY
};

struct CCompEntityAnims
{
	string                                   AnimDict;                        // offset:0x000	type:STRING.MEMBER
	string                                   AnimName;                        // offset:0x040	type:STRING.MEMBER
	string                                   AnimatedModel;                   // offset:0x080	type:STRING.MEMBER
	float                                    punchInPhase;                    // offset:0x0C0	type:FLOAT.0
	float                                    punchOutPhase;                   // offset:0x0C4	type:FLOAT.0
	array<struct CCompEntityEffectsData>     effectsData;                     // offset:0x0C8	type:ARRAY.ATARRAY
};

struct CCompEntityEffectsData
{
	uint                             fxType;                          // offset:0x000	type:UINT.0
	vec3                             fxOffsetPos;                     // offset:0x010	type:VECTOR3.0
	vec4                             fxOffsetRot;                     // offset:0x020	type:VECTOR4.0
	uint                             boneTag;                         // offset:0x030	type:UINT.0
	float                            startPhase;                      // offset:0x034	type:FLOAT.0
	float                            endPhase;                        // offset:0x038	type:FLOAT.0
	bool                             ptFxIsTriggered;                 // offset:0x03C	type:BOOL.0
	string                           ptFxTag;                         // offset:0x03D	type:STRING.MEMBER
	float                            ptFxScale;                       // offset:0x080	type:FLOAT.0
	float                            ptFxProbability;                 // offset:0x084	type:FLOAT.0
	bool                             ptFxHasTint;                     // offset:0x088	type:BOOL.0
	uchar                            ptFxTintR;                       // offset:0x089	type:UCHAR.0
	uchar                            ptFxTintG;                       // offset:0x08A	type:UCHAR.0
	uchar                            ptFxTintB;                       // offset:0x08B	type:UCHAR.0
	vec3                             ptFxSize;                        // offset:0x090	type:VECTOR3.0
};

struct CComponentInfo
{
	string                           _0x2FD08CEF;                     // offset:0x000	type:STRING.ATHASHVALUE
	string                           _0xFC507D28;                     // offset:0x004	type:STRING.ATHASHVALUE
	array<float, 5>                  _0x07AE529D;                     // offset:0x008	type:ARRAY.MEMBER
	uint                             flags;                           // offset:0x01C	type:UINT.0
	bitset<enum _0x00000000>         inclusions;                      // offset:0x020	type:BITSET.32BIT
	bitset<enum _0x00000000>         exclusions;                      // offset:0x024	type:BITSET.32BIT
	bitset<enum ePedVarComp>         _0x6032815C;                     // offset:0x028	type:BITSET.16BIT
	ushort                           _0x7E103C8B;                     // offset:0x02A	type:USHORT.0
	uchar                            _0xD12F579D;                     // offset:0x02C	type:UCHAR.0
	uchar                            _0xFA1F27BF;                     // offset:0x02D	type:UCHAR.0
};

struct CCompositeEntityAnimation
{
	string                                           animDict;                        // offset:0x008	type:STRING.MEMBER
	string                                           animName;                        // offset:0x048	type:STRING.MEMBER
	string                                           animatedModel;                   // offset:0x088	type:STRING.MEMBER
	float                                            punchInPhase;                    // offset:0x0C8	type:FLOAT.0
	float                                            punchOutPhase;                   // offset:0x0CC	type:FLOAT.0
	array<struct CCompositeEntityEffectsSetting>     effectsData;                     // offset:0x0D0	type:ARRAY.ATARRAY
};

struct CCompositeEntityArchetypeDef : CBaseArchetypeDef
{
	string                                      startModel;                      // offset:0x090	type:STRING.MEMBER
	string                                      endModel;                        // offset:0x0D0	type:STRING.MEMBER
	string                                      startImapFile;                   // offset:0x110	type:STRING.ATHASHVALUE
	string                                      endImapFile;                     // offset:0x114	type:STRING.ATHASHVALUE
	array<struct CCompositeEntityAnimation>     animations;                      // offset:0x118	type:ARRAY.ATARRAY
};

struct CCompositeEntityEffectsSetting
{
	enum _0x1A0C237C                 fxType;                          // offset:0x008	type:ENUM.32BIT
	vec3                             fxOffsetPos;                     // offset:0x010	type:VECTOR3.0
	vec4                             fxOffsetRot;                     // offset:0x020	type:VECTOR4.0
	uint                             boneTag;                         // offset:0x030	type:UINT.0
	float                            startPhase;                      // offset:0x034	type:FLOAT.0
	float                            endPhase;                        // offset:0x038	type:FLOAT.0
	bool                             ptFxIsTriggered;                 // offset:0x03C	type:BOOL.0
	string                           ptFxTag;                         // offset:0x03D	type:STRING.MEMBER
	float                            ptFxScale;                       // offset:0x080	type:FLOAT.0
	float                            ptFxProbability;                 // offset:0x084	type:FLOAT.0
	bool                             ptFxHasTint;                     // offset:0x088	type:BOOL.0
	uchar                            ptFxTintR;                       // offset:0x089	type:UCHAR.0
	uchar                            ptFxTintG;                       // offset:0x08A	type:UCHAR.0
	uchar                            ptFxTintB;                       // offset:0x08B	type:UCHAR.0
	vec3                             ptFxSize;                        // offset:0x090	type:VECTOR3.0
};

struct CCompositeEntityType
{
	string                             Name;                            // offset:0x000	type:STRING.MEMBER
	float                              lodDist;                         // offset:0x040	type:FLOAT.0
	uint                               flags;                           // offset:0x044	type:UINT.0
	uint                               specialAttribute;                // offset:0x048	type:UINT.0
	vec3                               bbMin;                           // offset:0x050	type:VECTOR3.0
	vec3                               bbMax;                           // offset:0x060	type:VECTOR3.0
	vec3                               bsCentre;                        // offset:0x070	type:VECTOR3.0
	float                              bsRadius;                        // offset:0x080	type:FLOAT.0
	string                             StartModel;                      // offset:0x088	type:STRING.MEMBER
	string                             EndModel;                        // offset:0x0C8	type:STRING.MEMBER
	string                             StartImapFile;                   // offset:0x108	type:STRING.ATHASHVALUE
	string                             EndImapFile;                     // offset:0x10C	type:STRING.ATHASHVALUE
	string                             PtFxAssetName;                   // offset:0x110	type:STRING.ATHASHVALUE
	array<struct CCompEntityAnims>     Animations;                      // offset:0x118	type:ARRAY.ATARRAY
};

struct CConditionalAnimManager
{
	array<struct CConditionalAnimsGroup>     ConditionalAnimsGroup;           // offset:0x018	type:ARRAY.ATARRAY
};

struct CConditionalAnims
{
	string                                   Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                                   PropSet;                         // offset:0x004	type:STRING.ATHASHVALUE
	bitset<enum _0x0090661F>                 Flags;                           // offset:0x008	type:BITSET.32BIT
	float                                    Probability;                     // offset:0x00C	type:FLOAT.0
	struct CScenarioCondition                SpecialCondition;                // offset:0x010	type:STRUCT.POINTER
	float                                    SpecialConditionProbability;     // offset:0x018	type:FLOAT.0
	float                                    NextIdleTime;                    // offset:0x01C	type:FLOAT.0
	float                                    ChanceOfSpawningWithAnything;    // offset:0x020	type:FLOAT.0
	float                                    BlendInDelta;                    // offset:0x024	type:FLOAT.0
	float                                    BlendOutDelta;                   // offset:0x028	type:FLOAT.0
	string                                   GestureClipSetId;                // offset:0x02C	type:STRING.ATHASHVALUE
	string                                   LowLodBaseAnim;                  // offset:0x030	type:STRING.ATHASHVALUE
	array<struct CConditionalClipSetVFX>     VFXData;                         // offset:0x038	type:ARRAY.ATARRAY
	float                                    VFXCullRange;                    // offset:0x048	type:FLOAT.0
	struct CScenarioTransitionInfo           TransitionInfo;                  // offset:0x050	type:STRUCT.POINTER
	array<struct CScenarioCondition>         Conditions;                      // offset:0x058	type:ARRAY.ATARRAY
	array<struct CConditionalClipSet>        BaseAnims;                       // offset:0x068	type:ARRAY.ATARRAY
	array<struct CConditionalClipSet>        Enters;                          // offset:0x078	type:ARRAY.ATARRAY
	array<struct CConditionalClipSet>        Exits;                           // offset:0x088	type:ARRAY.ATARRAY
	array<struct CConditionalClipSet>        Variations;                      // offset:0x098	type:ARRAY.ATARRAY
	array<struct CConditionalClipSet>        Reactions;                       // offset:0x0A8	type:ARRAY.ATARRAY
	array<struct CConditionalClipSet>        PanicBaseAnims;                  // offset:0x0B8	type:ARRAY.ATARRAY
	array<struct CConditionalClipSet>        PanicIntros;                     // offset:0x0C8	type:ARRAY.ATARRAY
	array<struct CConditionalClipSet>        PanicOutros;                     // offset:0x0D8	type:ARRAY.ATARRAY
	array<struct CConditionalClipSet>        PanicVariations;                 // offset:0x0E8	type:ARRAY.ATARRAY
	array<struct CConditionalClipSet>        PanicExits;                      // offset:0x0F8	type:ARRAY.ATARRAY
};

struct CConditionalAnimsGroup
{
	string                              Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CConditionalAnims>     ConditionalAnims;                // offset:0x008	type:ARRAY.ATARRAY
};

struct CConditionalClipSet
{
	array<struct CScenarioCondition>     Conditions;                      // offset:0x000	type:ARRAY.ATARRAY
	bitset<enum _0x21AB971E>             ActionFlags;                     // offset:0x010	type:BITSET.32BIT
	string                               ClipSet;                         // offset:0x014	type:STRING.ATHASHVALUE
	string                               AssociatedSpeech;                // offset:0x018	type:STRING.ATHASHVALUE
};

struct CConditionalClipSetVFX
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                           fxName;                          // offset:0x004	type:STRING.ATHASHVALUE
	vec3                             offsetPosition;                  // offset:0x010	type:VECTOR3.0
	vec3                             eulerRotation;                   // offset:0x020	type:VECTOR3.0
	enum eAnimBoneTag                boneTag;                         // offset:0x030	type:ENUM.32BIT
	float                            scale;                           // offset:0x034	type:FLOAT.0
	int                              probability;                     // offset:0x038	type:INT.0
	uint                             color;                           // offset:0x03C	type:UINT.1
};

struct CConfigMediaTranscoding
{
	int                              TranscodingSmallObjectBuffer;    // offset:0x000	type:INT.0
	int                              TranscodingSmallObjectMaxPointers; // offset:0x004	type:INT.0
	int                              TranscodingBuffer;               // offset:0x008	type:INT.0
	int                              TranscodingMaxPointers;          // offset:0x00C	type:INT.0
};

struct CConfigNetScriptBroadcastData
{
	array<struct CBroadcastDataEntry, 10>     HostBroadcastData;               // offset:0x000	type:ARRAY.ATFIXEDARRAY
	array<struct CBroadcastDataEntry, 10>     PlayerBroadcastData;             // offset:0x07C	type:ARRAY.ATFIXEDARRAY
};

struct CConfigOnlineServices
{
	string                           RosTitleName;                    // offset:0x000	type:STRING.CONST_STRING
	int                              RosTitleVersion;                 // offset:0x008	type:INT.0
	int                              RosScVersion;                    // offset:0x00C	type:INT.0
	int                              SteamAppId;                      // offset:0x010	type:INT.0
	string                           TitleDirectoryName;              // offset:0x018	type:STRING.CONST_STRING
	string                           MultiplayerSessionTemplateName;  // offset:0x020	type:STRING.CONST_STRING
	string                           ScAuthTitleId;                   // offset:0x028	type:STRING.CONST_STRING
};

struct CConfigScriptResourceExpectedMaximums
{
	array<struct CScriptResourceExpectedMaximum>     ExpectedMaximumsArray;           // offset:0x000	type:ARRAY.ATARRAY
};

struct CConfigScriptStackSizes
{
	array<struct CScriptStackSizeDataEntry>     StackSizeData;                   // offset:0x000	type:ARRAY.ATARRAY
};

struct CConfigScriptTextLines
{
	array<struct CScriptTextLines>     ArrayOfMaximumTextLines;         // offset:0x000	type:ARRAY.ATARRAY
};

struct CConfigStreamingEngine
{
	int                              ArchiveCount;                    // offset:0x000	type:INT.0
	int                              PhysicalStreamingBuffer;         // offset:0x004	type:INT.0
	int                              VirtualStreamingBuffer;          // offset:0x008	type:INT.0
};

struct CConfigUGCDescriptions
{
	int                              MaxDescriptionLength;            // offset:0x000	type:INT.0
	int                              MaxNumDescriptions;              // offset:0x004	type:INT.0
	int                              SizeOfDescriptionBuffer;         // offset:0x008	type:INT.0
};

struct CContentsOfWeatherXmlFile
{
	float                            VersionNumber;                   // offset:0x000	type:FLOAT.0
	array<struct _0xF72CBA11>        WeatherGpuFx;                    // offset:0x008	type:ARRAY.ATARRAY
	array<struct _0x11C51609>        WeatherTypes;                    // offset:0x018	type:ARRAY.ATARRAY
	array<struct _0x5B800C53>        WeatherCycles;                   // offset:0x028	type:ARRAY.ATARRAY
};

struct CContextMenu
{
	array<string>                    contextOptions;                  // offset:0x008	type:ARRAY.ATARRAY
	enum eMenuScreen                 TriggerMenuId;                   // offset:0x018	type:ENUM.32BIT
	enum eMenuScreen                 ContextMenuId;                   // offset:0x01C	type:ENUM.32BIT
	enum eDepth                      depth;                           // offset:0x020	type:ENUM.32BIT
};

struct CContextMenuOption
{
	string                           text;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                           contextOption;                   // offset:0x004	type:STRING.ATHASHVALUE
	bool                             bIsSelectable;                   // offset:0x018	type:BOOL.0
};

struct CCoverTuning
{
	bitset<enum _0x05DA4244>         Flags;                           // offset:0x000	type:BITSET.32BIT
};

struct CCoverTuningFile
{
	array<struct CCoverTuningFile__NamedTuning>     NamedTuningArray;                // offset:0x000	type:ARRAY.ATARRAY
	array<struct _0xE3C9C5BB>                       ModelToTuneMapping;              // offset:0x010	type:ARRAY.ATARRAY
};

struct CCoverTuningFile__NamedTuning
{
	string                           Name;                            // offset:0x000	type:STRING.CONST_STRING
	struct CCoverTuning              Tuning;                          // offset:0x008	type:STRUCT.STRUCTURE
};

struct CCreatureMetaData
{
	array<struct CShaderVariableComponent>     shaderVariableComponents;        // offset:0x008	type:ARRAY.ATARRAY
	array<struct CPedPropExpressionData>       pedPropExpressions;              // offset:0x018	type:ARRAY.ATARRAY
	array<struct CPedCompExpressionData>       pedCompExpressions;              // offset:0x028	type:ARRAY.ATARRAY
};

struct CCreditArray
{
	array<struct CCreditItem>        CreditItems;                     // offset:0x000	type:ARRAY.ATARRAY
};

struct CCreditItem
{
	enum eCreditType                 LineType;                        // offset:0x000	type:ENUM.32BIT
	string                           cTextId1;                        // offset:0x008	type:STRING.ATSTRING
	string                           cTextId2;                        // offset:0x018	type:STRING.ATSTRING
};

struct CCrimeInfoManager
{
	array<struct CDefaultCrimeInfo>     Crimes;                          // offset:0x008	type:ARRAY.ATARRAY
};

struct CCrimeInformation
{
	struct CWitnessInformation       WitnessInformation;              // offset:0x000	type:STRUCT.STRUCTURE
	float                            ImmediateDetectionRange;         // offset:0x008	type:FLOAT.0
};

struct CCrimeInformations
{
	map<string, struct CCrimeInformation>     CrimeInformations;               // offset:0x000	type:MAP.ATBINARYMAP
};

struct CCrimeWitnesses__Tunables : CTuning
{
	struct CCrimeWitnesses__Tunables__Scoring     Scoring;                         // offset:0x010	type:STRUCT.STRUCTURE
};

struct CCrimeWitnesses__Tunables__Scoring
{
	float                            _0x77E0A95C;                     // offset:0x000	type:FLOAT.0
	float                            _0xB9144364;                     // offset:0x004	type:FLOAT.0
	float                            _0x98707959;                     // offset:0x008	type:FLOAT.0
	float                            _0xF4D97A19;                     // offset:0x00C	type:FLOAT.0
	float                            _0x71B952E5;                     // offset:0x010	type:FLOAT.0
};

struct CCurve
{
	float                            fInputMax;                       // offset:0x010	type:FLOAT.0
	float                            fResultMax;                      // offset:0x014	type:FLOAT.0
	float                            fPow;                            // offset:0x018	type:FLOAT.0
};

struct CCurveSet
{
	array<struct CCurve>             curves;                          // offset:0x008	type:ARRAY.ATARRAY
	string                           Name;                            // offset:0x018	type:STRING.ATHASHVALUE
};

struct CCustomShaderEffectTree__BRANCH_BEND_AND_TRI_WAVE_MICRO_MOVEMENTS_GLOBALS
{
	float                            umLowWind;                       // offset:0x000	type:FLOAT.0
	float                            umHighWind;                      // offset:0x004	type:FLOAT.0
	float                            WindVariationRange;              // offset:0x008	type:FLOAT.0
	array<float, 3>                  WindVariationScales;             // offset:0x00C	type:ARRAY.MEMBER
	array<float, 2>                  WindVariationBlendWaveFreq;      // offset:0x018	type:ARRAY.MEMBER
	float                            WindSmoothChangeControlPointInterval; // offset:0x020	type:FLOAT.0
	float                            WindSpeedSoftClamp;              // offset:0x030	type:FLOAT.0
	float                            WindSpeedSoftClampUnrestrictedProportion; // offset:0x034	type:FLOAT.0
	float                            _0x34D94846;                     // offset:0x038	type:FLOAT.0
	float                            AlphaCardOnlyGlobalStiffness;    // offset:0x03C	type:FLOAT.0
};

struct CCustomShaderEffectTree__BRANCH_BEND_AND_TRI_WAVE_MICRO_MOVEMENTS_LOCALS
{
	float                                                                                                     PivotHeight;                     // offset:0x000	type:FLOAT.0
	float                                                                                                     TrunkStiffnessAdjustLow;         // offset:0x004	type:FLOAT.0
	float                                                                                                     TrunkStiffnessAdjustHigh;        // offset:0x008	type:FLOAT.0
	float                                                                                                     PhaseStiffnessAdjustLow;         // offset:0x00C	type:FLOAT.0
	float                                                                                                     PhaseStiffnessAdjustHigh;        // offset:0x010	type:FLOAT.0
	array<struct CCustomShaderEffectTree__BRANCH_BEND_AND_TRI_WAVE_MICRO_MOVEMENTS_LOCALS__BASIS_WAVE, 3>     BasisWaves;                      // offset:0x028	type:ARRAY.MEMBER
};

struct CCustomShaderEffectTree__BRANCH_BEND_AND_TRI_WAVE_MICRO_MOVEMENTS_LOCALS__BASIS_WAVE
{
	struct CCustomShaderEffectTree__BRANCH_BEND_AND_TRI_WAVE_MICRO_MOVEMENTS_LOCALS__TRIANGLE_WAVE     lowWind;                         // offset:0x000	type:STRUCT.STRUCTURE
	struct CCustomShaderEffectTree__BRANCH_BEND_AND_TRI_WAVE_MICRO_MOVEMENTS_LOCALS__TRIANGLE_WAVE     highWind;                        // offset:0x008	type:STRUCT.STRUCTURE
};

struct CCustomShaderEffectTree__BRANCH_BEND_AND_TRI_WAVE_MICRO_MOVEMENTS_LOCALS__TRIANGLE_WAVE
{
	vec2                             freqAndAmp;                      // offset:0x000	type:VECTOR2.0
};

struct CCustomShaderEffectTree__BRANCH_BEND_AND_TRI_WAVE_MICRO_MOVEMENTS_SFX_GLOBALS
{
	vec3                             SfxWindEvalModulationFreq;       // offset:0x000	type:VECTOR3.0
	float                            SfxWindEvalModulationDisplacementAmp; // offset:0x010	type:FLOAT.0
	float                            SfxWindValueModulationProportion; // offset:0x014	type:FLOAT.0
};

struct CDLCScript
{
	string                           startupScript;                   // offset:0x000	type:STRING.ATFINALHASHSTRING
	int                              scriptCallstackSize;             // offset:0x018	type:INT.0
};

struct CDamageAndReaction
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	string                           ActionRumble;                    // offset:0x00C	type:STRING.ATHASHVALUE
	float                            OnHitDamageAmountMin;            // offset:0x010	type:FLOAT.0
	float                            OnHitDamageAmountMax;            // offset:0x014	type:FLOAT.0
	float                            SelfDamageAmount;                // offset:0x018	type:FLOAT.0
	enum eAnimBoneTag                ForcedSelfDamageBoneTag;         // offset:0x01C	type:ENUM.32BIT
	bitset<enum _0xF5B84E35>         DamageReactionAttrs;             // offset:0x020	type:BITSET.32BIT
};

struct CDataFileMgr__ChangeSetData
{
	string                                            associatedMap;                   // offset:0x000	type:STRING.ATSTRING
	array<string>                                     filesToInvalidate;               // offset:0x010	type:ARRAY.ATARRAY
	array<string>                                     filesToDisable;                  // offset:0x020	type:ARRAY.ATARRAY
	array<string>                                     filesToEnable;                   // offset:0x030	type:ARRAY.ATARRAY
	array<string>                                     txdToUnload;                     // offset:0x040	type:ARRAY.ATARRAY
	array<string>                                     txdToLoad;                       // offset:0x050	type:ARRAY.ATARRAY
	array<struct CDataFileMgr__ResourceReference>     residentResources;               // offset:0x060	type:ARRAY.ATARRAY
	array<struct CDataFileMgr__ResourceReference>     unregisterResources;             // offset:0x070	type:ARRAY.ATARRAY
};

struct CDataFileMgr__ContentChangeSet
{
	string                                            changeSetName;                   // offset:0x000	type:STRING.ATSTRING
	array<struct CDataFileMgr__ChangeSetData>         mapChangeSetData;                // offset:0x010	type:ARRAY.ATARRAY
	array<string>                                     filesToInvalidate;               // offset:0x020	type:ARRAY.ATARRAY
	array<string>                                     filesToDisable;                  // offset:0x030	type:ARRAY.ATARRAY
	array<string>                                     filesToEnable;                   // offset:0x040	type:ARRAY.ATARRAY
	array<string>                                     txdToUnload;                     // offset:0x050	type:ARRAY.ATARRAY
	array<string>                                     txdToLoad;                       // offset:0x060	type:ARRAY.ATARRAY
	array<struct CDataFileMgr__ResourceReference>     residentResources;               // offset:0x070	type:ARRAY.ATARRAY
	array<struct CDataFileMgr__ResourceReference>     unregisterResources;             // offset:0x080	type:ARRAY.ATARRAY
	bool                                              requiresLoadingScreen;           // offset:0x0A0	type:BOOL.0
	enum LoadingScreenContext                         loadingScreenContext;            // offset:0x0A4	type:ENUM.32BIT
	struct ExecutionConditions                        executionConditions;             // offset:0x0A8	type:STRUCT.STRUCTURE
	bool                                              useCacheLoader;                  // offset:0x0C0	type:BOOL.0
};

struct CDataFileMgr__ContentsOfDataFileXml
{
	array<string>                                    disabledFiles;                   // offset:0x000	type:ARRAY.ATARRAY
	array<string>                                    includedDataFiles;               // offset:0x010	type:ARRAY.ATARRAY
	array<struct CDataFileMgr__DataFileArray>        includedXmlFiles;                // offset:0x020	type:ARRAY.ATARRAY
	array<struct CDataFileMgr__DataFile>             dataFiles;                       // offset:0x030	type:ARRAY.ATARRAY
	array<struct CDataFileMgr__ContentChangeSet>     contentChangeSets;               // offset:0x040	type:ARRAY.ATARRAY
	array<string>                                    patchFiles;                      // offset:0x050	type:ARRAY.ATARRAY
	array<string>                                    allowedFolders;                  // offset:0x060	type:ARRAY.ATARRAY
};

struct CDataFileMgr__DataFile
{
	string                           filename;                        // offset:0x000	type:STRING.MEMBER
	string                           registerAs;                      // offset:0x080	type:STRING.ATSTRING
	enum DataFileType                fileType;                        // offset:0x090	type:ENUM.32BIT
	bool                             locked;                          // offset:0x098	type:BOOL.0
	bool                             enforceLsnSorting;               // offset:0x099	type:BOOL.0
	bool                             loadCompletely;                  // offset:0x09A	type:BOOL.0
	bool                             disabled;                        // offset:0x09B	type:BOOL.0
	bool                             persistent;                      // offset:0x09C	type:BOOL.0
	bool                             overlay;                         // offset:0x09D	type:BOOL.0
	bool                             patchFile;                       // offset:0x09E	type:BOOL.0
	enum DataFileContents            contents;                        // offset:0x0A0	type:ENUM.32BIT
	enum InstallPartition            installPartition;                // offset:0x0A4	type:ENUM.32BIT
};

struct CDataFileMgr__DataFileArray
{
	array<struct CDataFileMgr__DataFile>     dataFiles;                       // offset:0x000	type:ARRAY.ATARRAY
};

struct CDataFileMgr__ResourceReference
{
	string                           AssetName;                       // offset:0x000	type:STRING.ATSTRING
	string                           Extension;                       // offset:0x010	type:STRING.MEMBER
};

struct CDefaultCrimeInfo
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	float                            _0x241629CD;                     // offset:0x00C	type:FLOAT.0
};

struct CDefaultTaskDataManager
{
	array<struct CDefaultTaskDataSet>     aDefaultTaskData;                // offset:0x000	type:ARRAY.ATARRAY
	struct void                           DefaultSet;                      // offset:0x010	type:STRUCT.EXTERNAL_NAMED
};

struct CDefaultTaskDataSet
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	struct sDefaultTaskData          onFoot;                          // offset:0x008	type:STRUCT.POINTER
};

struct CDeformableBoneData
{
	string                           boneName;                        // offset:0x008	type:STRING.ATSTRING
	float                            strength;                        // offset:0x018	type:FLOAT.0
	float                            radius;                          // offset:0x01C	type:FLOAT.0
	float                            damageVelThreshold;              // offset:0x020	type:FLOAT.0
};

struct CDeformableObjectManager
{
	map<string, struct _0x9AD9DC27>     DeformableObjects;               // offset:0x000	type:MAP.ATBINARYMAP
};

struct CDispatchAdvancedSpawnHelper__Tunables : CTuning
{
	struct CDispatchAdvancedSpawnHelper__Tunables__Rendering     Rendering;                       // offset:0x010	type:STRUCT.STRUCTURE
	float                                                        TimeBetweenInvalidateInvalidDispatchVehicles; // offset:0x014	type:FLOAT.0
	float                                                        TimeBetweenMarkDispatchVehiclesForDespawn; // offset:0x018	type:FLOAT.0
};

struct CDispatchAdvancedSpawnHelper__Tunables__Rendering
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
};

struct CDispatchData
{
	array<struct CVehicleSet>           VehicleSets;                     // offset:0x000	type:ARRAY.ATARRAY
	map<string, struct _0x37603C00>     PedVariations;                   // offset:0x010	type:MAP.ATBINARYMAP
	array<int>                          WantedLevelThresholds;           // offset:0x028	type:ARRAY.ATARRAY
	array<float>                        SingleplayerWantedLevelRadius;   // offset:0x038	type:ARRAY.ATARRAY
	array<float>                        MultiplayerWantedLevelRadius;    // offset:0x048	type:ARRAY.ATARRAY
	array<uint>                         HiddenEvasionTimes;              // offset:0x058	type:ARRAY.ATARRAY
	array<struct CWantedResponse>       WantedResponses;                 // offset:0x068	type:ARRAY.ATARRAY
	array<struct CDispatchResponse>     EmergencyResponses;              // offset:0x078	type:ARRAY.ATARRAY
	uint                                ParoleDuration;                  // offset:0x088	type:UINT.0
	array<float>                        LawSpawnDelayMin;                // offset:0x090	type:ARRAY.ATARRAY
	array<float>                        LawSpawnDelayMax;                // offset:0x0A0	type:ARRAY.ATARRAY
	array<float>                        AmbulanceSpawnDelayMin;          // offset:0x0B0	type:ARRAY.ATARRAY
	array<float>                        AmbulanceSpawnDelayMax;          // offset:0x0C0	type:ARRAY.ATARRAY
	array<float>                        FireSpawnDelayMin;               // offset:0x0D0	type:ARRAY.ATARRAY
	array<float>                        FireSpawnDelayMax;               // offset:0x0E0	type:ARRAY.ATARRAY
	float                               InHeliRadiusMultiplier;          // offset:0x0F0	type:FLOAT.0
	float                               ImmediateDetectionRange;         // offset:0x0F4	type:FLOAT.0
	float                               OnScreenImmediateDetectionRange; // offset:0x0F8	type:FLOAT.0
	array<struct _0xB63EC1F3, 16>       DispatchOrderDistances;          // offset:0x0FC	type:ARRAY.ATFIXEDARRAY
	array<uint>                         MultiplayerHiddenEvasionTimes;   // offset:0x200	type:ARRAY.ATARRAY
};

struct CDispatchHelperSearchInAutomobile__Tunables : CTuning
{
	array<struct CDispatchHelperSearch__Constraints>     Constraints;                     // offset:0x010	type:ARRAY.ATARRAY
	float                                                MaxDistanceFromRoadNode;         // offset:0x020	type:FLOAT.0
	float                                                CruiseSpeed;                     // offset:0x024	type:FLOAT.0
};

struct CDispatchHelperSearchInBoat__Tunables : CTuning
{
	array<struct CDispatchHelperSearch__Constraints>     Constraints;                     // offset:0x010	type:ARRAY.ATARRAY
	float                                                CruiseSpeed;                     // offset:0x020	type:FLOAT.0
};

struct CDispatchHelperSearchInHeli__Tunables : CTuning
{
	array<struct CDispatchHelperSearch__Constraints>     Constraints;                     // offset:0x010	type:ARRAY.ATARRAY
};

struct CDispatchHelperSearchOnFoot__Tunables : CTuning
{
	array<struct CDispatchHelperSearch__Constraints>     Constraints;                     // offset:0x010	type:ARRAY.ATARRAY
	float                                                MaxDistanceFromNavMesh;          // offset:0x020	type:FLOAT.0
};

struct CDispatchHelperSearch__Constraints
{
	float                            MinTimeSinceLastSpotted;         // offset:0x000	type:FLOAT.0
	float                            MaxTimeSinceLastSpotted;         // offset:0x004	type:FLOAT.0
	float                            MaxRadiusForMinTimeSinceLastSpotted; // offset:0x008	type:FLOAT.0
	float                            MaxRadiusForMaxTimeSinceLastSpotted; // offset:0x00C	type:FLOAT.0
	float                            MaxHeight;                       // offset:0x010	type:FLOAT.0
	float                            MaxAngle;                        // offset:0x014	type:FLOAT.0
	bool                             UseLastSeenPosition;             // offset:0x018	type:BOOL.0
	bool                             UseByDefault;                    // offset:0x019	type:BOOL.0
	bool                             UseEnclosedSearchRegions;        // offset:0x01A	type:BOOL.0
};

struct CDispatchHelperVolumes__Tunables : CTuning
{
	struct CDispatchHelperVolumes__Tunables__Rendering                              Rendering;                       // offset:0x010	type:STRUCT.STRUCTURE
	struct CDispatchHelperVolumes__Tunables__LocationForNearestCarNodeOverrides     LocationForNearestCarNodeOverrides; // offset:0x018	type:STRUCT.STRUCTURE
	struct CDispatchHelperVolumes__Tunables__EnclosedSearchRegions                  EnclosedSearchRegions;           // offset:0x048	type:STRUCT.STRUCTURE
	struct CDispatchHelperVolumes__Tunables__BlockingAreas                          BlockingAreas;                   // offset:0x078	type:STRUCT.STRUCTURE
};

struct CDispatchHelperVolumes__Tunables__AngledArea
{
	struct CDispatchHelperVolumes__Tunables__Position     Start;                           // offset:0x000	type:STRUCT.STRUCTURE
	struct CDispatchHelperVolumes__Tunables__Position     End;                             // offset:0x00C	type:STRUCT.STRUCTURE
	float                                                 Width;                           // offset:0x018	type:FLOAT.0
};

struct CDispatchHelperVolumes__Tunables__AngledAreaWithPosition
{
	struct CDispatchHelperVolumes__Tunables__AngledArea     AngledArea;                      // offset:0x000	type:STRUCT.STRUCTURE
	struct CDispatchHelperVolumes__Tunables__Position       Position;                        // offset:0x01C	type:STRUCT.STRUCTURE
};

struct CDispatchHelperVolumes__Tunables__BlockingAreas
{
	array<struct CDispatchHelperVolumes__Tunables__AngledArea>     AngledAreas;                     // offset:0x000	type:ARRAY.ATARRAY
	array<struct CDispatchHelperVolumes__Tunables__Sphere>         Spheres;                         // offset:0x010	type:ARRAY.ATARRAY
};

struct CDispatchHelperVolumes__Tunables__EnclosedSearchAngledArea
{
	struct CDispatchHelperVolumes__Tunables__AngledArea                          AngledArea;                      // offset:0x000	type:STRUCT.STRUCTURE
	bitset<enum CDispatchHelperVolumes__Tunables__EnclosedSearchRegionFlags>     Flags;                           // offset:0x01C	type:BITSET.32BIT
};

struct CDispatchHelperVolumes__Tunables__EnclosedSearchRegions
{
	array<struct CDispatchHelperVolumes__Tunables__EnclosedSearchAngledArea>     AngledAreas;                     // offset:0x000	type:ARRAY.ATARRAY
	array<struct CDispatchHelperVolumes__Tunables__EnclosedSearchSphere>         Spheres;                         // offset:0x010	type:ARRAY.ATARRAY
};

struct CDispatchHelperVolumes__Tunables__EnclosedSearchSphere
{
	struct CDispatchHelperVolumes__Tunables__Sphere                              Sphere;                          // offset:0x000	type:STRUCT.STRUCTURE
	bitset<enum CDispatchHelperVolumes__Tunables__EnclosedSearchRegionFlags>     Flags;                           // offset:0x010	type:BITSET.32BIT
};

struct CDispatchHelperVolumes__Tunables__LocationForNearestCarNodeOverrides
{
	array<struct CDispatchHelperVolumes__Tunables__AngledAreaWithPosition>     AngledAreas;                     // offset:0x000	type:ARRAY.ATARRAY
	array<struct CDispatchHelperVolumes__Tunables__SphereWithPosition>         Spheres;                         // offset:0x010	type:ARRAY.ATARRAY
};

struct CDispatchHelperVolumes__Tunables__Position
{
	float                            X;                               // offset:0x000	type:FLOAT.0
	float                            Y;                               // offset:0x004	type:FLOAT.0
	float                            Z;                               // offset:0x008	type:FLOAT.0
};

struct CDispatchHelperVolumes__Tunables__Rendering
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	bool                             LocationForNearestCarNodeOverrides; // offset:0x001	type:BOOL.0
	bool                             EnclosedSearchRegions;           // offset:0x002	type:BOOL.0
	bool                             BlockingAreas;                   // offset:0x003	type:BOOL.0
};

struct CDispatchHelperVolumes__Tunables__Sphere
{
	struct CDispatchHelperVolumes__Tunables__Position     Position;                        // offset:0x000	type:STRUCT.STRUCTURE
	float                                                 Radius;                          // offset:0x00C	type:FLOAT.0
};

struct CDispatchHelperVolumes__Tunables__SphereWithPosition
{
	struct CDispatchHelperVolumes__Tunables__Sphere       Sphere;                          // offset:0x000	type:STRUCT.STRUCTURE
	struct CDispatchHelperVolumes__Tunables__Position     Position;                        // offset:0x010	type:STRUCT.STRUCTURE
};

struct CDispatchResponse
{
	enum DispatchType                DispatchType;                    // offset:0x000	type:ENUM.32BIT
	char                             NumPedsToSpawn;                  // offset:0x004	type:CHAR.0
	bool                             _0xCA7B2DB8;                     // offset:0x005	type:BOOL.0
	array<string>                    DispatchVehicleSets;             // offset:0x008	type:ARRAY.ATARRAY
};

struct CDispatchSpawnHelper__Tunables : CTuning
{
	struct CDispatchSpawnHelper__Tunables__Restrictions     Restrictions;                    // offset:0x010	type:STRUCT.STRUCTURE
	struct CDispatchSpawnHelper__Tunables__Rendering        Rendering;                       // offset:0x018	type:STRUCT.STRUCTURE
	float                                                   IdealSpawnDistance;              // offset:0x01C	type:FLOAT.0
	float                                                   MinDotForInFront;                // offset:0x020	type:FLOAT.0
	float                                                   MaxDistanceTraveledMultiplier;   // offset:0x024	type:FLOAT.0
	float                                                   MinSpeedToBeConsideredEscapingInVehicle; // offset:0x028	type:FLOAT.0
	float                                                   MaxDistanceForDispatchPosition;  // offset:0x02C	type:FLOAT.0
};

struct CDispatchSpawnHelper__Tunables__Rendering
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	bool                             DispatchNode;                    // offset:0x001	type:BOOL.0
	bool                             FindSpawnPointInDirection;       // offset:0x002	type:BOOL.0
	bool                             IncidentLocation;                // offset:0x003	type:BOOL.0
};

struct CDispatchSpawnHelper__Tunables__Restrictions
{
	float                            MaxDistanceFromCameraForViewportChecks; // offset:0x000	type:FLOAT.0
	float                            RadiusForViewportCheck;          // offset:0x004	type:FLOAT.0
};

struct CDistantLODLight
{
	array<struct FloatXYZ>           position;                        // offset:0x008	type:ARRAY.ATARRAY
	array<uint>                      RGBI;                            // offset:0x018	type:ARRAY.ATARRAY
	ushort                           numStreetLights;                 // offset:0x028	type:USHORT.0
	ushort                           category;                        // offset:0x02A	type:USHORT.0
};

struct CDoorStiffnessInfo
{
	enum eDoorId                     doorId;                          // offset:0x000	type:ENUM.32BIT
	float                            stiffnessMult;                   // offset:0x004	type:FLOAT.0
};

struct CDoorTuning
{
	vec3V                            AutoOpenVolumeOffset;            // offset:0x000	type:VEC3V.0
	bitset<enum _0xA77304C3>         Flags;                           // offset:0x010	type:BITSET.32BIT
	float                            AutoOpenRadiusModifier;          // offset:0x014	type:FLOAT.0
	float                            AutoOpenRate;                    // offset:0x018	type:FLOAT.0
	float                            AutoOpenCosineAngleBetweenThreshold; // offset:0x01C	type:FLOAT.0
	bool                             AutoOpenCloseRateTaper;          // offset:0x020	type:BOOL.0
	bool                             UseAutoOpenTriggerBox;           // offset:0x021	type:BOOL.0
	bool                             CustomTriggerBox;                // offset:0x022	type:BOOL.0
	struct rage__spdAABB             TriggerBoxMinMax;                // offset:0x030	type:STRUCT.STRUCTURE
	bool                             BreakableByVehicle;              // offset:0x050	type:BOOL.0
	float                            BreakingImpulse;                 // offset:0x054	type:FLOAT.0
	bool                             ShouldLatchShut;                 // offset:0x058	type:BOOL.0
	float                            MassMultiplier;                  // offset:0x05C	type:FLOAT.0
	float                            WeaponImpulseMultiplier;         // offset:0x060	type:FLOAT.0
	float                            RotationLimitAngle;              // offset:0x064	type:FLOAT.0
	float                            TorqueAngularVelocityLimit;      // offset:0x068	type:FLOAT.0
	enum StdDoorRotDir               StdDoorRotDir;                   // offset:0x06C	type:ENUM.32BIT
};

struct CDoorTuningFile
{
	array<struct CDoorTuningFile__NamedTuning>     NamedTuningArray;                // offset:0x000	type:ARRAY.ATARRAY
	array<struct _0x37ADF737>                      ModelToTuneMapping;              // offset:0x010	type:ARRAY.ATARRAY
};

struct CDoorTuningFile__NamedTuning
{
	string                           Name;                            // offset:0x000	type:STRING.CONST_STRING
	struct CDoorTuning               Tuning;                          // offset:0x010	type:STRUCT.STRUCTURE
};

struct CDrivebyWeaponGroup
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<string>                    WeaponGroupNames;                // offset:0x008	type:ARRAY.ATARRAY
	array<string>                    WeaponTypeNames;                 // offset:0x018	type:ARRAY.ATARRAY
};

struct CDriverInfo
{
	string                           driverName;                      // offset:0x000	type:STRING.ATHASHVALUE
	string                           npcName;                         // offset:0x004	type:STRING.ATHASHVALUE
};

struct CDynamicCoverHelper__Tunables : CTuning
{
	bool                             EnableConflictingNormalCollisionRemoval; // offset:0x010	type:BOOL.0
	bool                             UseStickHistoryForCoverSearch;   // offset:0x011	type:BOOL.0
	float                            StickDownMinRange;               // offset:0x014	type:FLOAT.0
	uint                             StickDownDuration;               // offset:0x018	type:UINT.0
	bool                             UseCameraOrientationWeighting;   // offset:0x01C	type:BOOL.0
	bool                             UseCameraOrientationWhenStill;   // offset:0x01D	type:BOOL.0
	bool                             UseCameraOrientationForBackwardsDirection; // offset:0x01E	type:BOOL.0
	float                            BehindThreshold;                 // offset:0x020	type:FLOAT.0
	float                            DistanceToWallStanding;          // offset:0x024	type:FLOAT.0
	float                            DistanceToWallCrouching;         // offset:0x028	type:FLOAT.0
	float                            DistanceToWallCoverToCover;      // offset:0x02C	type:FLOAT.0
	float                            OCMCrouchedForwardClearanceOffset; // offset:0x030	type:FLOAT.0
	float                            OCMStandingForwardClearanceOffset; // offset:0x034	type:FLOAT.0
	float                            OCMSideClearanceDepth;           // offset:0x038	type:FLOAT.0
	float                            OCMClearanceCapsuleRadius;       // offset:0x03C	type:FLOAT.0
	float                            OCMSideTestDepth;                // offset:0x040	type:FLOAT.0
	float                            OCMCrouchedHeightOffset;         // offset:0x044	type:FLOAT.0
	float                            OCMStandingHeightOffset;         // offset:0x048	type:FLOAT.0
	float                            CTCSideOffset;                   // offset:0x04C	type:FLOAT.0
	float                            CTCProbeDepth;                   // offset:0x050	type:FLOAT.0
	float                            CTCForwardOffset;                // offset:0x054	type:FLOAT.0
	float                            CTCSpacingOffset;                // offset:0x058	type:FLOAT.0
	float                            CTCCapsuleRadius;                // offset:0x05C	type:FLOAT.0
	float                            CTCHeightOffset;                 // offset:0x060	type:FLOAT.0
	float                            LowCoverProbeHeight;             // offset:0x064	type:FLOAT.0
	float                            HighCoverProbeHeight;            // offset:0x068	type:FLOAT.0
	float                            CTCClearanceCapsuleRadius;       // offset:0x06C	type:FLOAT.0
	float                            CTCClearanceCapsuleStartForwardOffset; // offset:0x070	type:FLOAT.0
	float                            CTCClearanceCapsuleEndForwardOffset; // offset:0x074	type:FLOAT.0
	float                            CTCClearanceCapsuleStartZOffset; // offset:0x078	type:FLOAT.0
	float                            CTCClearanceCapsuleEndZOffset;   // offset:0x07C	type:FLOAT.0
	float                            CTCMinDistance;                  // offset:0x080	type:FLOAT.0
	float                            VehicleEdgeProbeXOffset;         // offset:0x084	type:FLOAT.0
	float                            VehicleEdgeProbeZOffset;         // offset:0x088	type:FLOAT.0
	float                            MaxZDiffBetweenCoverPoints;      // offset:0x08C	type:FLOAT.0
	float                            MaxZDiffBetweenPedPos;           // offset:0x090	type:FLOAT.0
	float                            MaxHeadingDiffBetweenCTCPoints;  // offset:0x094	type:FLOAT.0
	float                            PedToCoverCapsuleRadius;         // offset:0x098	type:FLOAT.0
	float                            PedToCoverEndPullBackDistance;   // offset:0x09C	type:FLOAT.0
	float                            PedToCoverEndZOffset;            // offset:0x0A0	type:FLOAT.0
	float                            MaxStickInputAngleInfluence;     // offset:0x0A4	type:FLOAT.0
	float                            IdleYStartOffset;                // offset:0x0A8	type:FLOAT.0
};

struct CEntityDef : rage__fwEntityDef
{
	int                              ambientOcclusionMultiplier;      // offset:0x070	type:INT.0
	int                              artificialAmbientOcclusion;      // offset:0x074	type:INT.0
	uint                             tintValue;                       // offset:0x078	type:UINT.0
};

struct CEntryAnimVariations
{
	string                                Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	bitset<enum _0x0090661F>              Flags;                           // offset:0x004	type:BITSET.32BIT
	array<struct CScenarioCondition>      Conditions;                      // offset:0x008	type:ARRAY.ATARRAY
	array<struct CConditionalClipSet>     EntryAnims;                      // offset:0x018	type:ARRAY.ATARRAY
	array<struct CConditionalClipSet>     JackingAnims;                    // offset:0x028	type:ARRAY.ATARRAY
	array<struct CConditionalClipSet>     ExitAnims;                       // offset:0x038	type:ARRAY.ATARRAY
};

struct CEventAgitated__Tunables : CTuning
{
	uint                             TimeToLive;                      // offset:0x010	type:UINT.0
	float                            AmbientEventLifetime;            // offset:0x014	type:FLOAT.0
	float                            TriggerAmbientReactionChances;   // offset:0x018	type:FLOAT.0
	float                            MinDistanceForAmbientReaction;   // offset:0x01C	type:FLOAT.0
	float                            MaxDistanceForAmbientReaction;   // offset:0x020	type:FLOAT.0
	float                            MinTimeForAmbientReaction;       // offset:0x024	type:FLOAT.0
	float                            MaxTimeForAmbientReaction;       // offset:0x028	type:FLOAT.0
	enum AmbientEventType            AmbientEventType;                // offset:0x02C	type:ENUM.32BIT
};

struct CEventCrimeCryForHelp__Tunables : CTuning
{
	float                            MaxDistance;                     // offset:0x010	type:FLOAT.0
	float                            MinDelayDistance;                // offset:0x014	type:FLOAT.0
	float                            MaxDelayDistance;                // offset:0x018	type:FLOAT.0
	float                            MaxDistanceDelay;                // offset:0x01C	type:FLOAT.0
	float                            MinRandomDelay;                  // offset:0x020	type:FLOAT.0
	float                            MaxRandomDelay;                  // offset:0x024	type:FLOAT.0
};

struct CEventDataDecisionMaker
{
	string                           Name;                            // offset:0x1E8	type:STRING.ATHASHVALUE
	string                           DecisionMakerParentRef;          // offset:0x1EC	type:STRING.ATHASHVALUE
	array<string>                    EventResponse;                   // offset:0x1F0	type:ARRAY.ATARRAY
};

struct CEventDataManager
{
	array<struct CEventDataDecisionMaker>         eventDecisionMaker;              // offset:0x000	type:ARRAY.ATARRAY
	array<struct CEventDecisionMakerResponse>     eventDecisionMakerResponseData;  // offset:0x010	type:ARRAY.ATARRAY
	array<struct CEventDataResponseTask>          eventResponseTaskData;           // offset:0x020	type:ARRAY.ATARRAY
};

struct CEventDataResponseAggressiveRubberneck : CEventDataResponseTask
{
};

struct CEventDataResponseDeferToScenarioPointFlags : CEventDataResponseTask
{
};

struct CEventDataResponseFriendlyAimedAt : CEventDataResponseTask
{
};

struct CEventDataResponseFriendlyNearMiss : CEventDataResponseTask
{
};

struct CEventDataResponsePlayerDeath : CEventDataResponseTask
{
};

struct CEventDataResponsePoliceTaskWanted : CEventDataResponseTask
{
};

struct CEventDataResponseSwatTaskWanted : CEventDataResponseTask
{
};

struct CEventDataResponseTask
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
};

struct CEventDataResponseTaskAgitated : CEventDataResponseTask
{
};

struct CEventDataResponseTaskCombat : CEventDataResponseTask
{
};

struct CEventDataResponseTaskCower : CEventDataResponseTask
{
};

struct CEventDataResponseTaskCrouch : CEventDataResponseTask
{
	float                            TimeToCrouch;                    // offset:0x010	type:FLOAT.0
};

struct CEventDataResponseTaskDuckAndCover : CEventDataResponseTask
{
};

struct CEventDataResponseTaskEscapeBlast : CEventDataResponseTask
{
};

struct CEventDataResponseTaskEvasiveStep : CEventDataResponseTask
{
};

struct CEventDataResponseTaskExhaustedFlee : CEventDataResponseTask
{
};

struct CEventDataResponseTaskExplosion : CEventDataResponseTask
{
};

struct CEventDataResponseTaskFlee : CEventDataResponseTask
{
	uchar                            Flee;                            // offset:0x010	type:UCHAR.0
};

struct CEventDataResponseTaskFlyAway : CEventDataResponseTask
{
};

struct CEventDataResponseTaskGrowlAndFlee : CEventDataResponseTask
{
};

struct CEventDataResponseTaskGunAimedAt : CEventDataResponseTask
{
};

struct CEventDataResponseTaskHandsUp : CEventDataResponseTask
{
};

struct CEventDataResponseTaskHeadTrack : CEventDataResponseTask
{
};

struct CEventDataResponseTaskLeaveCarAndFlee : CEventDataResponseTask
{
};

struct CEventDataResponseTaskScenarioFlee : CEventDataResponseTask
{
};

struct CEventDataResponseTaskSharkAttack : CEventDataResponseTask
{
};

struct CEventDataResponseTaskShockingEventBackAway : CEventDataResponseTask
{
};

struct CEventDataResponseTaskShockingEventGoto : CEventDataResponseTask
{
};

struct CEventDataResponseTaskShockingEventHurryAway : CEventDataResponseTask
{
};

struct CEventDataResponseTaskShockingEventReact : CEventDataResponseTask
{
};

struct CEventDataResponseTaskShockingEventReactToAircraft : CEventDataResponseTask
{
};

struct CEventDataResponseTaskShockingEventStopAndStare : CEventDataResponseTask
{
};

struct CEventDataResponseTaskShockingEventThreatResponse : CEventDataResponseTask
{
};

struct CEventDataResponseTaskShockingEventWatch : CEventDataResponseTask
{
};

struct CEventDataResponseTaskShockingNiceCar : CEventDataResponseTask
{
};

struct CEventDataResponseTaskShockingPoliceInvestigate : CEventDataResponseTask
{
};

struct CEventDataResponseTaskThreat : CEventDataResponseTask
{
};

struct CEventDataResponseTaskTurnToFace : CEventDataResponseTask
{
	uchar                            Face;                            // offset:0x010	type:UCHAR.0
};

struct CEventDataResponseTaskWalkAway : CEventDataResponseTask
{
};

struct CEventDataResponseTaskWalkRoundEntity : CEventDataResponseTask
{
};

struct CEventDataResponseTaskWalkRoundFire : CEventDataResponseTask
{
};

struct CEventDataResponse_Decision
{
	string                           TaskRef;                         // offset:0x000	type:STRING.ATHASHVALUE
	float                            Chance_SourcePlayer;             // offset:0x004	type:FLOAT.0
	float                            Chance_SourceFriend;             // offset:0x008	type:FLOAT.0
	float                            Chance_SourceThreat;             // offset:0x00C	type:FLOAT.0
	float                            Chance_SourceOther;              // offset:0x010	type:FLOAT.0
	float                            DistanceMinSq;                   // offset:0x014	type:FLOAT.0
	float                            DistanceMaxSq;                   // offset:0x018	type:FLOAT.0
	string                           SpeechHash;                      // offset:0x01C	type:STRING.ATHASHVALUE
	bitset<enum _0x0FDA7738>         EventResponseDecisionFlags;      // offset:0x024	type:BITSET.32BIT
	bitset<enum _0xB2CEB155>         EventResponseFleeFlags;          // offset:0x02C	type:BITSET.8BIT
};

struct CEventDecisionMakerResponse
{
	string                                            Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	enum eEventType                                   Event;                           // offset:0x00C	type:ENUM.32BIT
	struct CEventDecisionMakerResponse__sCooldown     Cooldown;                        // offset:0x010	type:STRUCT.STRUCTURE
	array<struct CEventDataResponse_Decision>         Decision;                        // offset:0x018	type:ARRAY.ATARRAY
};

struct CEventDecisionMakerResponse__sCooldown
{
	float                            Time;                            // offset:0x000	type:FLOAT.0
	float                            MaxDistance;                     // offset:0x004	type:FLOAT.0
};

struct CEventEncroachingPed__Tunables : CTuning
{
};

struct CEventExplosionHeard__Tunables : CTuning
{
	float                            MaxCombineDistThresholdSquared;  // offset:0x010	type:FLOAT.0
};

struct CEventFootStepHeard__Tunables : CTuning
{
	float                            MinDelayTimer;                   // offset:0x010	type:FLOAT.0
	float                            MaxDelayTimer;                   // offset:0x014	type:FLOAT.0
};

struct CEventGunAimedAt__Tunables : CTuning
{
	float                            MinDelayTimer;                   // offset:0x010	type:FLOAT.0
	float                            MaxDelayTimer;                   // offset:0x014	type:FLOAT.0
};

struct CEventGunShot__Tunables : CTuning
{
	float                            MinDelayTimer;                   // offset:0x010	type:FLOAT.0
	float                            MaxDelayTimer;                   // offset:0x014	type:FLOAT.0
	float                            GunShotThresholdDistance;        // offset:0x018	type:FLOAT.0
};

struct CEventMeleeAction__Tunables : CTuning
{
	float                            MinDelayTimer;                   // offset:0x010	type:FLOAT.0
	float                            MaxDelayTimer;                   // offset:0x014	type:FLOAT.0
};

struct CEventPedJackingMyVehicle__Tunables : CTuning
{
	float                            MinDelayTimer;                   // offset:0x010	type:FLOAT.0
	float                            MaxDelayTimer;                   // offset:0x014	type:FLOAT.0
};

struct CEventPotentialBeWalkedInto__Tunables : CTuning
{
	float                            AngleThresholdDegrees;           // offset:0x010	type:FLOAT.0
	float                            ChancesToReactToRunningPedsBehindUs; // offset:0x014	type:FLOAT.0
	float                            ChanceToUseCasualAvoidAgainstRunningPed; // offset:0x018	type:FLOAT.0
};

struct CEventPotentialBlast__Tunables : CTuning
{
};

struct CEventPotentialGetRunOver__Tunables : CTuning
{
	float                            MinSpeedToDive;                  // offset:0x010	type:FLOAT.0
	float                            SpeedToAlwaysDive;               // offset:0x014	type:FLOAT.0
	float                            MaxSpeedToDive;                  // offset:0x018	type:FLOAT.0
	float                            ChancesToDive;                   // offset:0x01C	type:FLOAT.0
	float                            ChancesToBeCasual;               // offset:0x020	type:FLOAT.0
	float                            MinDelay;                        // offset:0x024	type:FLOAT.0
	float                            MaxDelay;                        // offset:0x028	type:FLOAT.0
};

struct CEventRequestHelp__Tunables : CTuning
{
	float                            MaxRangeWithoutRadioForFistFights; // offset:0x010	type:FLOAT.0
	float                            MinDelayTimer;                   // offset:0x014	type:FLOAT.0
	float                            MaxDelayTimer;                   // offset:0x018	type:FLOAT.0
};

struct CEventRespondedToThreat__Tunables : CTuning
{
	float                            MinDelayTimer;                   // offset:0x010	type:FLOAT.0
	float                            MaxDelayTimer;                   // offset:0x014	type:FLOAT.0
};

struct CEventShocking__Tunables : CTuning
{
	float                                              LifeTime;                        // offset:0x010	type:FLOAT.0
	float                                              VisualReactionRange;             // offset:0x014	type:FLOAT.0
	float                                              CopInVehicleVisualReactionRange; // offset:0x018	type:FLOAT.0
	float                                              AudioReactionRange;              // offset:0x01C	type:FLOAT.0
	float                                              AIOnlyReactionRangeScaleFactor;  // offset:0x020	type:FLOAT.0
	float                                              DuckAndCoverCanTriggerForPlayerTime; // offset:0x024	type:FLOAT.0
	float                                              GotoWatchRange;                  // offset:0x028	type:FLOAT.0
	float                                              StopWatchDistance;               // offset:0x02C	type:FLOAT.0
	float                                              HurryAwayMBRChangeDelay;         // offset:0x030	type:FLOAT.0
	float                                              HurryAwayMBRChangeRange;         // offset:0x034	type:FLOAT.0
	float                                              HurryAwayInitialMBR;             // offset:0x038	type:FLOAT.0
	float                                              HurryAwayMoveBlendRatioWhenFar;  // offset:0x03C	type:FLOAT.0
	float                                              HurryAwayMoveBlendRatioWhenNear; // offset:0x040	type:FLOAT.0
	float                                              MinWatchTime;                    // offset:0x044	type:FLOAT.0
	float                                              MaxWatchTime;                    // offset:0x048	type:FLOAT.0
	float                                              MinWatchTimeHurryAway;           // offset:0x04C	type:FLOAT.0
	float                                              MaxWatchTimeHurryAway;           // offset:0x050	type:FLOAT.0
	float                                              ChanceOfWatchRatherThanHurryAway; // offset:0x054	type:FLOAT.0
	float                                              MinPhoneFilmTime;                // offset:0x058	type:FLOAT.0
	float                                              MaxPhoneFilmTime;                // offset:0x05C	type:FLOAT.0
	float                                              MinPhoneFilmTimeHurryAway;       // offset:0x060	type:FLOAT.0
	float                                              MaxPhoneFilmTimeHurryAway;       // offset:0x064	type:FLOAT.0
	float                                              ChanceOfFilmingEventOnPhoneIfWatching; // offset:0x068	type:FLOAT.0
	float                                              PedGenBlockedAreaMinRadius;      // offset:0x06C	type:FLOAT.0
	float                                              WanderInfluenceSphereRadius;     // offset:0x070	type:FLOAT.0
	float                                              TriggerAmbientReactionChances;   // offset:0x074	type:FLOAT.0
	float                                              MinDistanceForAmbientReaction;   // offset:0x078	type:FLOAT.0
	float                                              MaxDistanceForAmbientReaction;   // offset:0x07C	type:FLOAT.0
	float                                              AmbientEventLifetime;            // offset:0x080	type:FLOAT.0
	float                                              MinTimeForAmbientReaction;       // offset:0x084	type:FLOAT.0
	float                                              MaxTimeForAmbientReaction;       // offset:0x088	type:FLOAT.0
	float                                              PedFearImpact;                   // offset:0x08C	type:FLOAT.0
	float                                              ShockingSpeechChance;            // offset:0x090	type:FLOAT.0
	float                                              MinDelayTimer;                   // offset:0x094	type:FLOAT.0
	float                                              MaxDelayTimer;                   // offset:0x098	type:FLOAT.0
	float                                              DuplicateDistanceCheck;          // offset:0x09C	type:FLOAT.0
	float                                              MaxTimeForAudioReaction;         // offset:0x0A0	type:FLOAT.0
	float                                              DistanceToUseGunfireReactAndFleeAnimations; // offset:0x0A4	type:FLOAT.0
	uint                                               PedGenBlockingAreaLifeTimeMS;    // offset:0x0A8	type:UINT.0
	uint                                               DuplicateTimeCheck;              // offset:0x0AC	type:UINT.0
	string                                             ShockingSpeechHash;              // offset:0x0B0	type:STRING.ATHASHVALUE
	string                                             ShockingFilmSpeechHash;          // offset:0x0B4	type:STRING.ATHASHVALUE
	int                                                Priority;                        // offset:0x0B8	type:INT.0
	enum AmbientEventType                              AmbientEventType;                // offset:0x0BC	type:ENUM.32BIT
	bool                                               AddPedGenBlockedArea;            // offset:0x0C0	type:BOOL.0
	bool                                               CausesVehicleAvoidance;          // offset:0x0C1	type:BOOL.0
	bool                                               AllowIgnoreAsLowPriority;        // offset:0x0C2	type:BOOL.0
	bool                                               DebugDisplayAlwaysUseEventPosition; // offset:0x0C3	type:BOOL.0
	bool                                               DebugDisplayListPlayerInfo;      // offset:0x0C4	type:BOOL.0
	bool                                               HurryAwayWatchFirst;             // offset:0x0C5	type:BOOL.0
	bool                                               MobileChatScenarioMayAbort;      // offset:0x0C6	type:BOOL.0
	bool                                               WatchSayFightCheers;             // offset:0x0C7	type:BOOL.0
	bool                                               WatchSayShocked;                 // offset:0x0C8	type:BOOL.0
	bool                                               VehicleSlowDown;                 // offset:0x0C9	type:BOOL.0
	bool                                               IgnoreIfSensingPedIsOtherEntity; // offset:0x0CA	type:BOOL.0
	bool                                               IgnorePavementChecks;            // offset:0x0CB	type:BOOL.0
	bool                                               AllowScanningEvenIfPreviouslyReacted; // offset:0x0CC	type:BOOL.0
	enum CEventShocking__ShockingEventReactionMode     ReactionMode;                    // offset:0x0D0	type:ENUM.32BIT
	bool                                               StopResponseWhenExpired;         // offset:0x0D4	type:BOOL.0
	bool                                               FleeIfApproachedByOtherEntity;   // offset:0x0D5	type:BOOL.0
	bool                                               FleeIfApproachedBySourceEntity;  // offset:0x0D6	type:BOOL.0
	bool                                               CanCallPolice;                   // offset:0x0D7	type:BOOL.0
	bool                                               IgnoreFovForHeadIk;              // offset:0x0D8	type:BOOL.0
	bool                                               ReactToOtherEntity;              // offset:0x0D9	type:BOOL.0
};

struct CEventSuspiciousActivity__Tunables : CTuning
{
	float                            fMinDistanceToBeConsideredSameEvent; // offset:0x010	type:FLOAT.0
};

struct CExplosionData
{
	enum eExplosionTag               ExplosionTag;                    // offset:0x000	type:ENUM.32BIT
	bool                             PositionAtPetrolTank;            // offset:0x004	type:BOOL.0
	bool                             PositionInBoundingBox;           // offset:0x005	type:BOOL.0
	vec3                             PositionOffset;                  // offset:0x010	type:VECTOR3.0
	int                              DelayTimeMs;                     // offset:0x020	type:INT.0
	float                            Scale;                           // offset:0x024	type:FLOAT.0
};

struct CExplosionInfoManager
{
	array<struct CExplosionTagData>     aExplosionTagData;               // offset:0x000	type:ARRAY.ATARRAY
};

struct CExplosionTagData
{
	string                           name;                            // offset:0x000	type:STRING.ATSTRING
	float                            damageAtCentre;                  // offset:0x010	type:FLOAT.0
	float                            damageAtEdge;                    // offset:0x014	type:FLOAT.0
	float                            networkPlayerModifier;           // offset:0x018	type:FLOAT.0
	float                            networkPedModifier;              // offset:0x01C	type:FLOAT.0
	float                            endRadius;                       // offset:0x020	type:FLOAT.0
	float                            initSpeed;                       // offset:0x024	type:FLOAT.0
	float                            decayFactor;                     // offset:0x028	type:FLOAT.0
	float                            forceFactor;                     // offset:0x02C	type:FLOAT.0
	float                            fRagdollForceModifier;           // offset:0x030	type:FLOAT.0
	float                            fSelfForceModifier;              // offset:0x034	type:FLOAT.0
	float                            directedWidth;                   // offset:0x038	type:FLOAT.0
	float                            directedLifeTime;                // offset:0x03C	type:FLOAT.0
	float                            camShake;                        // offset:0x040	type:FLOAT.0
	float                            camShakeRollOffScaling;          // offset:0x044	type:FLOAT.0
	float                            shockingEventVisualRangeOverride; // offset:0x048	type:FLOAT.0
	float                            shockingEventAudioRangeOverride; // offset:0x04C	type:FLOAT.0
	float                            fragDamage;                      // offset:0x050	type:FLOAT.0
	bool                             minorExplosion;                  // offset:0x054	type:BOOL.0
	bool                             bAppliesContinuousDamage;        // offset:0x055	type:BOOL.0
	bool                             bPostProcessCollisionsWithNoForce; // offset:0x056	type:BOOL.0
	bool                             bDamageVehicles;                 // offset:0x057	type:BOOL.0
	bool                             bDamageObjects;                  // offset:0x058	type:BOOL.0
	bool                             bOnlyAffectsLivePeds;            // offset:0x059	type:BOOL.0
	bool                             bIgnoreExplodingEntity;          // offset:0x05A	type:BOOL.0
	bool                             _0x209E8965;                     // offset:0x05B	type:BOOL.0
	bool                             bNoOcclusion;                    // offset:0x05C	type:BOOL.0
	bool                             explodeAttachEntityWhenFinished; // offset:0x05D	type:BOOL.0
	bool                             bCanSetPedOnFire;                // offset:0x05E	type:BOOL.0
	bool                             bCanSetPlayerOnFire;             // offset:0x05F	type:BOOL.0
	bool                             bSuppressCrime;                  // offset:0x060	type:BOOL.0
	bool                             bUseDistanceDamageCalc;          // offset:0x061	type:BOOL.0
	bool                             bPreventWaterExplosionVFX;       // offset:0x062	type:BOOL.0
	bool                             bIgnoreRatioCheckForFire;        // offset:0x063	type:BOOL.0
	bool                             bAllowUnderwaterExplosion;       // offset:0x064	type:BOOL.0
	bool                             bForceVehicleExplosion;          // offset:0x065	type:BOOL.0
	float                            midRadius;                       // offset:0x068	type:FLOAT.0
	float                            damageAtMid;                     // offset:0x06C	type:FLOAT.0
	bool                             bApplyVehicleEMP;                // offset:0x070	type:BOOL.0
	bool                             bApplyVehicleSlick;              // offset:0x071	type:BOOL.0
	bool                             bApplyVehicleSlowdown;           // offset:0x072	type:BOOL.0
	bool                             bApplyVehicleTyrePop;            // offset:0x073	type:BOOL.0
	bool                             _0xAFCA2883;                     // offset:0x074	type:BOOL.0
	bool                             bForcePetrolTankDamage;          // offset:0x075	type:BOOL.0
	bool                             _0xC2CF286B;                     // offset:0x076	type:BOOL.0
	bool                             _0x512F3F0A;                     // offset:0x077	type:BOOL.0
	bool                             _0xEAE3465B;                     // offset:0x078	type:BOOL.0
	bool                             _0xCAE234C3;                     // offset:0x079	type:BOOL.0
	bool                             _0xC25AFD9B;                     // offset:0x07A	type:BOOL.0
	bool                             _0x7BA679E0;                     // offset:0x07B	type:BOOL.0
	string                           camShakeName;                    // offset:0x07C	type:STRING.ATHASHVALUE
	string                           vfxTagHashName;                  // offset:0x080	type:STRING.ATHASHVALUE
};

struct CExtensionConfig
{
	int                              MaxDoorExtensions;               // offset:0x000	type:INT.0
	int                              MaxLightExtensions;              // offset:0x004	type:INT.0
	int                              MaxSpawnPointOverrideExtensions; // offset:0x008	type:INT.0
	int                              MaxExpressionExtensions;         // offset:0x00C	type:INT.0
	int                              MaxClothCollisionsExtensions;    // offset:0x010	type:INT.0
};

struct CExtensionDef : rage__fwExtensionDef
{
	vec3                             offsetPosition;                  // offset:0x010	type:VECTOR3.0
};

struct CExtensionDefAudioCollisionSettings : CExtensionDef
{
	string                           settings;                        // offset:0x020	type:STRING.ATHASHVALUE
};

struct CExtensionDefAudioEmitter : CExtensionDef
{
	vec4                             offsetRotation;                  // offset:0x020	type:VECTOR4.0
	uint                             effectHash;                      // offset:0x030	type:UINT.0
};

struct CExtensionDefBuoyancy : CExtensionDef
{
};

struct CExtensionDefClimbHandHold : CExtensionDef
{
	vec3                             left;                            // offset:0x020	type:VECTOR3.0
	vec3                             right;                           // offset:0x030	type:VECTOR3.0
	vec3                             normal;                          // offset:0x040	type:VECTOR3.0
};

struct CExtensionDefDecal : CExtensionDef
{
	vec4                             offsetRotation;                  // offset:0x020	type:VECTOR4.0
	string                           decalName;                       // offset:0x030	type:STRING.ATSTRING
	int                              decalType;                       // offset:0x040	type:INT.0
	int                              boneTag;                         // offset:0x044	type:INT.0
	float                            scale;                           // offset:0x048	type:FLOAT.0
	int                              probability;                     // offset:0x04C	type:INT.0
	int                              flags;                           // offset:0x050	type:INT.0
};

struct CExtensionDefDoor : CExtensionDef
{
	bool                             enableLimitAngle;                // offset:0x020	type:BOOL.0
	bool                             startsLocked;                    // offset:0x021	type:BOOL.0
	bool                             canBreak;                        // offset:0x022	type:BOOL.0
	float                            limitAngle;                      // offset:0x024	type:FLOAT.0
	float                            doorTargetRatio;                 // offset:0x028	type:FLOAT.0
	string                           audioHash;                       // offset:0x02C	type:STRING.ATHASHVALUE
};

struct CExtensionDefExplosionEffect : CExtensionDef
{
	vec4                             offsetRotation;                  // offset:0x020	type:VECTOR4.0
	string                           explosionName;                   // offset:0x030	type:STRING.ATSTRING
	int                              boneTag;                         // offset:0x040	type:INT.0
	int                              explosionTag;                    // offset:0x044	type:INT.0
	int                              explosionType;                   // offset:0x048	type:INT.0
	uint                             flags;                           // offset:0x04C	type:UINT.0
};

struct CExtensionDefExpression : CExtensionDef
{
	string                           expressionDictionaryName;        // offset:0x020	type:STRING.ATFINALHASHSTRING
	string                           expressionName;                  // offset:0x024	type:STRING.ATFINALHASHSTRING
	string                           creatureMetadataName;            // offset:0x028	type:STRING.ATFINALHASHSTRING
	bool                             initialiseOnCollision;           // offset:0x02C	type:BOOL.0
};

struct CExtensionDefLadder : CExtensionDef
{
	vec3                                     bottom;                          // offset:0x020	type:VECTOR3.0
	vec3                                     top;                             // offset:0x030	type:VECTOR3.0
	vec3                                     normal;                          // offset:0x040	type:VECTOR3.0
	enum CExtensionDefLadderMaterialType     materialType;                    // offset:0x050	type:ENUM.32BIT
	string                                   template;                        // offset:0x054	type:STRING.ATHASHVALUE
	bool                                     canGetOffAtTop;                  // offset:0x058	type:BOOL.0
	bool                                     canGetOffAtBottom;               // offset:0x059	type:BOOL.0
};

struct CExtensionDefLight : CExtensionDef
{
};

struct CExtensionDefLightEffect : CExtensionDef
{
	array<struct CLightAttrDef>      instances;                       // offset:0x020	type:ARRAY.ATARRAY
};

struct CExtensionDefLightShaft : CExtensionDef
{
	vec3                                        cornerA;                         // offset:0x020	type:VECTOR3.0
	vec3                                        cornerB;                         // offset:0x030	type:VECTOR3.0
	vec3                                        cornerC;                         // offset:0x040	type:VECTOR3.0
	vec3                                        cornerD;                         // offset:0x050	type:VECTOR3.0
	vec3                                        direction;                       // offset:0x060	type:VECTOR3.0
	float                                       directionAmount;                 // offset:0x070	type:FLOAT.0
	float                                       length;                          // offset:0x074	type:FLOAT.0
	float                                       fadeInTimeStart;                 // offset:0x078	type:FLOAT.0
	float                                       fadeInTimeEnd;                   // offset:0x07C	type:FLOAT.0
	float                                       fadeOutTimeStart;                // offset:0x080	type:FLOAT.0
	float                                       fadeOutTimeEnd;                  // offset:0x084	type:FLOAT.0
	float                                       fadeDistanceStart;               // offset:0x088	type:FLOAT.0
	float                                       fadeDistanceEnd;                 // offset:0x08C	type:FLOAT.0
	uint                                        color;                           // offset:0x090	type:UINT.1
	float                                       intensity;                       // offset:0x094	type:FLOAT.0
	uchar                                       flashiness;                      // offset:0x098	type:UCHAR.0
	uint                                        flags;                           // offset:0x09C	type:UINT.0
	enum CExtensionDefLightShaftDensityType     densityType;                     // offset:0x0A0	type:ENUM.32BIT
	enum CExtensionDefLightShaftVolumeType      volumeType;                      // offset:0x0A4	type:ENUM.32BIT
	float                                       softness;                        // offset:0x0A8	type:FLOAT.0
	bool                                        scaleBySunIntensity;             // offset:0x0AC	type:BOOL.0
};

struct CExtensionDefParticleEffect : CExtensionDef
{
	vec4                             offsetRotation;                  // offset:0x020	type:VECTOR4.0
	string                           fxName;                          // offset:0x030	type:STRING.ATSTRING
	int                              fxType;                          // offset:0x040	type:INT.0
	int                              boneTag;                         // offset:0x044	type:INT.0
	float                            scale;                           // offset:0x048	type:FLOAT.0
	int                              probability;                     // offset:0x04C	type:INT.0
	int                              flags;                           // offset:0x050	type:INT.0
	uint                             color;                           // offset:0x054	type:UINT.1
};

struct CExtensionDefProcObject : CExtensionDef
{
	float                            radiusInner;                     // offset:0x020	type:FLOAT.0
	float                            radiusOuter;                     // offset:0x024	type:FLOAT.0
	float                            spacing;                         // offset:0x028	type:FLOAT.0
	float                            minScale;                        // offset:0x02C	type:FLOAT.0
	float                            maxScale;                        // offset:0x030	type:FLOAT.0
	float                            minScaleZ;                       // offset:0x034	type:FLOAT.0
	float                            maxScaleZ;                       // offset:0x038	type:FLOAT.0
	float                            minZOffset;                      // offset:0x03C	type:FLOAT.0
	float                            maxZOffset;                      // offset:0x040	type:FLOAT.0
	uint                             objectHash;                      // offset:0x044	type:UINT.0
	uint                             flags;                           // offset:0x048	type:UINT.0
};

struct CExtensionDefScript : CExtensionDef
{
	string                                     scriptName;                      // offset:0x020	type:STRING.ATSTRING
	array<struct CExtensionDefScriptChild>     children;                        // offset:0x030	type:ARRAY.ATARRAY
};

struct CExtensionDefScriptChild
{
	vec3                             position;                        // offset:0x010	type:VECTOR3.0
	float                            rotationZ;                       // offset:0x020	type:FLOAT.0
};

struct CExtensionDefScrollbars : CExtensionDef
{
	float                            height;                          // offset:0x020	type:FLOAT.0
	int                              _0xD0F79DE4;                     // offset:0x024	type:INT.0
	array<vec3>                      points;                          // offset:0x028	type:ARRAY.ATARRAY
};

struct CExtensionDefSpawnPoint : CExtensionDef
{
	vec4                                        offsetRotation;                  // offset:0x020	type:VECTOR4.0
	string                                      spawnType;                       // offset:0x030	type:STRING.ATHASHVALUE
	string                                      pedType;                         // offset:0x034	type:STRING.ATHASHVALUE
	string                                      group;                           // offset:0x038	type:STRING.ATHASHVALUE
	string                                      interior;                        // offset:0x03C	type:STRING.ATHASHVALUE
	string                                      requiredImap;                    // offset:0x040	type:STRING.ATHASHVALUE
	enum CSpawnPoint__AvailabilityMpSp          availableInMpSp;                 // offset:0x044	type:ENUM.32BIT
	float                                       probability;                     // offset:0x048	type:FLOAT.0
	float                                       timeTillPedLeaves;               // offset:0x04C	type:FLOAT.0
	float                                       radius;                          // offset:0x050	type:FLOAT.0
	uchar                                       start;                           // offset:0x054	type:UCHAR.0
	uchar                                       end;                             // offset:0x055	type:UCHAR.0
	bitset<enum CScenarioPointFlags__Flags>     flags;                           // offset:0x058	type:BITSET.32BIT
	bool                                        highPri;                         // offset:0x05C	type:BOOL.0
	bool                                        extendedRange;                   // offset:0x05D	type:BOOL.0
	bool                                        shortRange;                      // offset:0x05E	type:BOOL.0
};

struct CExtensionDefSpawnPointOverride : CExtensionDef
{
	string                                      ScenarioType;                    // offset:0x020	type:STRING.ATHASHVALUE
	uchar                                       iTimeStartOverride;              // offset:0x024	type:UCHAR.0
	uchar                                       iTimeEndOverride;                // offset:0x025	type:UCHAR.0
	string                                      Group;                           // offset:0x028	type:STRING.ATHASHVALUE
	string                                      ModelSet;                        // offset:0x02C	type:STRING.ATHASHVALUE
	enum CSpawnPoint__AvailabilityMpSp          AvailabilityInMpSp;              // offset:0x030	type:ENUM.32BIT
	bitset<enum CScenarioPointFlags__Flags>     Flags;                           // offset:0x034	type:BITSET.32BIT
	float                                       Radius;                          // offset:0x038	type:FLOAT.0
	float                                       TimeTillPedLeaves;               // offset:0x03C	type:FLOAT.0
};

struct CExtensionDefSwayableEffect : CExtensionDef
{
	int                              boneTag;                         // offset:0x020	type:INT.0
	float                            lowWindSpeed;                    // offset:0x024	type:FLOAT.0
	float                            lowWindAmplitude;                // offset:0x028	type:FLOAT.0
	float                            highWindSpeed;                   // offset:0x02C	type:FLOAT.0
	float                            highWindAmplitude;               // offset:0x030	type:FLOAT.0
};

struct CExtensionDefWalkDontWalk : CExtensionDef
{
};

struct CExtensionDefWindDisturbance : CExtensionDef
{
	vec4                             offsetRotation;                  // offset:0x020	type:VECTOR4.0
	int                              disturbanceType;                 // offset:0x030	type:INT.0
	int                              boneTag;                         // offset:0x034	type:INT.0
	vec4                             size;                            // offset:0x040	type:VECTOR4.0
	float                            strength;                        // offset:0x050	type:FLOAT.0
	int                              flags;                           // offset:0x054	type:INT.0
};

struct CExtraContentCloudManifest
{
	array<struct _0xAF365801>        Files;                           // offset:0x000	type:ARRAY.ATARRAY
	array<struct _0x5D3F6196>        CompatibilityPacks;              // offset:0x010	type:ARRAY.ATARRAY
	array<struct _0x5D3F6196>        PaidPacks;                       // offset:0x020	type:ARRAY.ATARRAY
	string                           _0x7294F412;                     // offset:0x030	type:STRING.ATSTRING
	string                           ScriptPatchName;                 // offset:0x040	type:STRING.ATSTRING
};

struct CExtraContentSaveStructure
{
	array<struct CExtraContentSaveStructure__CInstalledPackagesStruct>     InstalledPackages;               // offset:0x000	type:ARRAY.ATARRAY
};

struct CExtraContentSaveStructure__CInstalledPackagesStruct
{
	uint                             nameHash;                        // offset:0x000	type:UINT.0
};

struct CExtraTextMetaFile
{
	bool                             hasAdditionalText;               // offset:0x010	type:BOOL.0
	bool                             hasGlobalTextFile;               // offset:0x011	type:BOOL.0
	bool                             isTitleUpdate;                   // offset:0x012	type:BOOL.0
};

struct CExtraVehiclePoint
{
	enum CExtraVehiclePoint__eLocationType     LocationType;                    // offset:0x000	type:ENUM.32BIT
	enum CExtraVehiclePoint__ePointType        PointType;                       // offset:0x004	type:ENUM.32BIT
	vec3                                       Position;                        // offset:0x010	type:VECTOR3.0
	float                                      Heading;                         // offset:0x020	type:FLOAT.0
	float                                      Pitch;                           // offset:0x024	type:FLOAT.0
	string                                     BoneName;                        // offset:0x028	type:STRING.ATSTRING
};

struct CFiringPatternInfo
{
	string                           Name;                            // offset:0x010	type:STRING.ATHASHVALUE
	short                            NumberOfBurstsMin;               // offset:0x014	type:SHORT.0
	short                            NumberOfBurstsMax;               // offset:0x016	type:SHORT.0
	short                            NumberOfShotsPerBurstMin;        // offset:0x018	type:SHORT.0
	short                            NumberOfShotsPerBurstMax;        // offset:0x01A	type:SHORT.0
	float                            TimeBetweenShotsMin;             // offset:0x01C	type:FLOAT.0
	float                            TimeBetweenShotsMax;             // offset:0x020	type:FLOAT.0
	float                            TimeBetweenShotsAbsoluteMin;     // offset:0x024	type:FLOAT.0
	float                            TimeBetweenBurstsMin;            // offset:0x028	type:FLOAT.0
	float                            TimeBetweenBurstsMax;            // offset:0x02C	type:FLOAT.0
	float                            TimeBetweenBurstsAbsoluteMin;    // offset:0x030	type:FLOAT.0
	float                            TimeBeforeFiringMin;             // offset:0x034	type:FLOAT.0
	float                            TimeBeforeFiringMax;             // offset:0x038	type:FLOAT.0
	bool                             _0xAE2ADD87;                     // offset:0x03C	type:BOOL.0
};

struct CFiringPatternInfoManager
{
	array<struct CFiringPatternInfo>     Infos;                           // offset:0x000	type:ARRAY.ATARRAY
};

struct CFirstPersonDriveByLookAroundData
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	bool                             AllowLookback;                   // offset:0x004	type:BOOL.0
	vec2                             HeadingLimits;                   // offset:0x008	type:VECTOR2.0
	struct _0x688F83C2               DataLeft;                        // offset:0x010	type:STRUCT.STRUCTURE
	struct _0x688F83C2               DataRight;                       // offset:0x048	type:STRUCT.STRUCTURE
	struct _0x8FCEAB89               WheelClipInfo;                   // offset:0x080	type:STRUCT.STRUCTURE
};

struct CFishCapsuleInfo : CBaseCapsuleInfo
{
	float                            Radius;                          // offset:0x040	type:FLOAT.0
	float                            Length;                          // offset:0x044	type:FLOAT.0
	float                            ZOffset;                         // offset:0x048	type:FLOAT.0
	float                            YOffset;                         // offset:0x04C	type:FLOAT.0
};

struct CFlareFX
{
	float                            fDistFromLight;                  // offset:0x000	type:FLOAT.0
	float                            fSize;                           // offset:0x004	type:FLOAT.0
	float                            fWidthRotate;                    // offset:0x008	type:FLOAT.0
	float                            fScrollSpeed;                    // offset:0x00C	type:FLOAT.0
	float                            fDistanceInnerOffset;            // offset:0x014	type:FLOAT.0
	float                            fIntensityScale;                 // offset:0x018	type:FLOAT.0
	float                            fIntensityFade;                  // offset:0x01C	type:FLOAT.0
	float                            fAnimorphicScaleFactorU;         // offset:0x020	type:FLOAT.0
	float                            fAnimorphicScaleFactorV;         // offset:0x024	type:FLOAT.0
	uint                             color;                           // offset:0x028	type:UINT.1
	float                            fTextureColorDesaturate;         // offset:0x02C	type:FLOAT.0
	float                            fGradientMultiplier;             // offset:0x030	type:FLOAT.0
	uchar                            nTexture;                        // offset:0x034	type:UCHAR.0
	uchar                            nSubGroup;                       // offset:0x035	type:UCHAR.0
	bool                             bAnimorphicBehavesLikeArtefact;  // offset:0x036	type:BOOL.0
	bool                             bAlignRotationToSun;             // offset:0x037	type:BOOL.0
	float                            fPositionOffsetU;                // offset:0x038	type:FLOAT.0
};

struct CFlyingHandlingData : CBaseSubHandlingData
{
	float                            fThrust;                         // offset:0x008	type:FLOAT.0
	float                            fThrustFallOff;                  // offset:0x00C	type:FLOAT.0
	float                            fThrustVectoring;                // offset:0x010	type:FLOAT.0
	float                            fInitialThrust;                  // offset:0x014	type:FLOAT.0
	float                            _0xA763C743;                     // offset:0x018	type:FLOAT.0
	float                            fYawMult;                        // offset:0x01C	type:FLOAT.0
	float                            fYawStabilise;                   // offset:0x020	type:FLOAT.0
	float                            fSideSlipMult;                   // offset:0x024	type:FLOAT.0
	float                            fInitialYawMult;                 // offset:0x028	type:FLOAT.0
	float                            fRollMult;                       // offset:0x02C	type:FLOAT.0
	float                            fRollStabilise;                  // offset:0x030	type:FLOAT.0
	float                            fInitialRollMult;                // offset:0x034	type:FLOAT.0
	float                            fPitchMult;                      // offset:0x038	type:FLOAT.0
	float                            fPitchStabilise;                 // offset:0x03C	type:FLOAT.0
	float                            fInitialPitchMult;               // offset:0x040	type:FLOAT.0
	float                            fFormLiftMult;                   // offset:0x044	type:FLOAT.0
	float                            fAttackLiftMult;                 // offset:0x048	type:FLOAT.0
	float                            fAttackDiveMult;                 // offset:0x04C	type:FLOAT.0
	float                            fGearDownDragV;                  // offset:0x050	type:FLOAT.0
	float                            fGearDownLiftMult;               // offset:0x054	type:FLOAT.0
	float                            fWindMult;                       // offset:0x058	type:FLOAT.0
	float                            fMoveRes;                        // offset:0x05C	type:FLOAT.0
	vec3V                            vecTurnRes;                      // offset:0x060	type:VEC3V.0
	vec3V                            vecSpeedRes;                     // offset:0x070	type:VEC3V.0
	float                            fGearDoorFrontOpen;              // offset:0x080	type:FLOAT.0
	float                            fGearDoorRearOpen;               // offset:0x084	type:FLOAT.0
	float                            fGearDoorRearOpen2;              // offset:0x088	type:FLOAT.0
	float                            fGearDoorRearMOpen;              // offset:0x08C	type:FLOAT.0
	float                            fTurublenceMagnitudeMax;         // offset:0x090	type:FLOAT.0
	float                            fTurublenceForceMulti;           // offset:0x094	type:FLOAT.0
	float                            fTurublenceRollTorqueMulti;      // offset:0x098	type:FLOAT.0
	float                            fTurublencePitchTorqueMulti;     // offset:0x09C	type:FLOAT.0
	float                            fBodyDamageControlEffectMult;    // offset:0x0A0	type:FLOAT.0
	float                            fInputSensitivityForDifficulty;  // offset:0x0A4	type:FLOAT.0
	float                            fOnGroundYawBoostSpeedPeak;      // offset:0x0A8	type:FLOAT.0
	float                            fOnGroundYawBoostSpeedCap;       // offset:0x0AC	type:FLOAT.0
	float                            fEngineOffGlideMulti;            // offset:0x0B0	type:FLOAT.0
	float                            fAfterburnerEffectRadius;        // offset:0x0B4	type:FLOAT.0
	float                            fAfterburnerEffectDistance;      // offset:0x0B8	type:FLOAT.0
	float                            fAfterburnerEffectForceMulti;    // offset:0x0BC	type:FLOAT.0
	float                            fSubmergeLevelToPullHeliUnderwater; // offset:0x0C0	type:FLOAT.0
	float                            fExtraLiftWithRoll;              // offset:0x0C4	type:FLOAT.0
	enum eHandlingType               handlingType;                    // offset:0x0C8	type:ENUM.32BIT
};

struct CGameConfig : fwConfig
{
	struct CPopulationConfig                         ConfigPopulation;                // offset:0x020	type:STRUCT.STRUCTURE
	struct C2dEffectConfig                           Config2dEffects;                 // offset:0x2A4	type:STRUCT.STRUCTURE
	struct CModelInfoConfig                          ConfigModelInfo;                 // offset:0x2F0	type:STRUCT.STRUCTURE
	struct CExtensionConfig                          ConfigExtensions;                // offset:0x330	type:STRUCT.STRUCTURE
	struct CConfigStreamingEngine                    ConfigStreamingEngine;           // offset:0x344	type:STRUCT.STRUCTURE
	struct CConfigOnlineServices                     ConfigOnlineServices;            // offset:0x350	type:STRUCT.STRUCTURE
	struct CConfigUGCDescriptions                    ConfigUGCDescriptions;           // offset:0x380	type:STRUCT.STRUCTURE
	struct CConfigNetScriptBroadcastData             ConfigNetScriptBroadcastData;    // offset:0x38C	type:STRUCT.STRUCTURE
	struct CConfigScriptStackSizes                   ConfigScriptStackSizes;          // offset:0x488	type:STRUCT.STRUCTURE
	struct CConfigScriptResourceExpectedMaximums     ConfigScriptResourceExpectedMaximums; // offset:0x498	type:STRUCT.STRUCTURE
	struct CConfigScriptTextLines                    ConfigScriptTextLines;           // offset:0x4A8	type:STRUCT.STRUCTURE
	struct CConfigMediaTranscoding                   ConfigMediaTranscoding;          // offset:0x4B8	type:STRUCT.STRUCTURE
	map<string, struct _0x53C3CC2E>                  Threads;                         // offset:0x4C8	type:MAP.ATMAP
	enum ConfigBool                                  UseVehicleBurnoutTexture;        // offset:0x4D8	type:ENUM.32BIT
	enum ConfigBool                                  AllowCrouchedMovement;           // offset:0x4DC	type:ENUM.32BIT
	enum ConfigBool                                  AllowParachuting;                // offset:0x4E0	type:ENUM.32BIT
	enum ConfigBool                                  AllowStealthMovement;            // offset:0x4E4	type:ENUM.32BIT
	string                                           DebugScriptsPath;                // offset:0x4E8	type:STRING.CONST_STRING
};

struct CGarages__CGarageInitData
{
	array<struct _0x2E35FD1E>        boxes;                           // offset:0x000	type:ARRAY.ATARRAY
	enum GarageType                  type;                            // offset:0x010	type:ENUM.32BIT
	string                           name;                            // offset:0x014	type:STRING.ATHASHVALUE
	string                           owner;                           // offset:0x018	type:STRING.ATHASHVALUE
	int                              permittedVehicleType;            // offset:0x01C	type:INT.0
	bool                             startedWithVehicleSavingEnabled; // offset:0x020	type:BOOL.0
	bool                             isEnclosed;                      // offset:0x021	type:BOOL.0
	bool                             isMPGarage;                      // offset:0x022	type:BOOL.0
	char                             InteriorBoxIDX;                  // offset:0x023	type:CHAR.0
	char                             ExteriorBoxIDX;                  // offset:0x024	type:CHAR.0
};

struct CGarages__CGarageInitDataList
{
	array<struct CGarages__CGarageInitData>     garages;                         // offset:0x000	type:ARRAY.ATARRAY
};

struct CGeneralPauseData
{
	map<string, struct SGeneralPauseDataConfig>     MovieSettings;                   // offset:0x000	type:MAP.ATBINARYMAP
};

struct CGrabHelper__Tunables : CTuning
{
	struct CNmTuningSetGroup         Sets;                            // offset:0x010	type:STRUCT.STRUCTURE
};

struct CGradient : SGeneralMovieData
{
	uchar                            minAlpha;                        // offset:0x018	type:UCHAR.0
	uchar                            maxAlpha;                        // offset:0x019	type:UCHAR.0
	uchar                            flatAlpha;                       // offset:0x01A	type:UCHAR.0
};

struct CGraphicsSettings : CSettings
{
	int                              Tessellation;                    // offset:0x008	type:INT.0
	float                            LodScale;                        // offset:0x00C	type:FLOAT.0
	float                            PedLodBias;                      // offset:0x010	type:FLOAT.0
	float                            VehicleLodBias;                  // offset:0x014	type:FLOAT.0
	int                              ShadowQuality;                   // offset:0x018	type:INT.0
	int                              ReflectionQuality;               // offset:0x01C	type:INT.0
	int                              ReflectionMSAA;                  // offset:0x020	type:INT.0
	int                              SSAO;                            // offset:0x024	type:INT.0
	int                              AnisotropicFiltering;            // offset:0x028	type:INT.0
	int                              MSAA;                            // offset:0x02C	type:INT.0
	int                              MSAAFragments;                   // offset:0x030	type:INT.0
	int                              MSAAQuality;                     // offset:0x034	type:INT.0
	int                              SamplingMode;                    // offset:0x038	type:INT.0
	int                              TextureQuality;                  // offset:0x03C	type:INT.0
	int                              ParticleQuality;                 // offset:0x040	type:INT.0
	int                              WaterQuality;                    // offset:0x044	type:INT.0
	int                              GrassQuality;                    // offset:0x048	type:INT.0
	int                              ShaderQuality;                   // offset:0x04C	type:INT.0
	int                              Shadow_SoftShadows;              // offset:0x050	type:INT.0
	bool                             UltraShadows_Enabled;            // offset:0x054	type:BOOL.0
	bool                             Shadow_ParticleShadows;          // offset:0x055	type:BOOL.0
	float                            Shadow_Distance;                 // offset:0x058	type:FLOAT.0
	bool                             Shadow_LongShadows;              // offset:0x05C	type:BOOL.0
	float                            Shadow_SplitZStart;              // offset:0x060	type:FLOAT.0
	float                            Shadow_SplitZEnd;                // offset:0x064	type:FLOAT.0
	float                            Shadow_aircraftExpWeight;        // offset:0x068	type:FLOAT.0
	bool                             Shadow_DisableScreenSizeCheck;   // offset:0x06C	type:BOOL.0
	bool                             Reflection_MipBlur;              // offset:0x06D	type:BOOL.0
	bool                             FXAA_Enabled;                    // offset:0x06E	type:BOOL.0
	bool                             TXAA_Enabled;                    // offset:0x06F	type:BOOL.0
	bool                             Lighting_FogVolumes;             // offset:0x070	type:BOOL.0
	bool                             Shader_SSA;                      // offset:0x071	type:BOOL.0
	float                            CityDensity;                     // offset:0x074	type:FLOAT.0
	float                            PedVarietyMultiplier;            // offset:0x078	type:FLOAT.0
	float                            VehicleVarietyMultiplier;        // offset:0x07C	type:FLOAT.0
	int                              DX_Version;                      // offset:0x080	type:INT.0
	int                              PostFX;                          // offset:0x084	type:INT.0
	bool                             DoF;                             // offset:0x088	type:BOOL.0
	bool                             HdStreamingInFlight;             // offset:0x089	type:BOOL.0
	float                            MaxLodScale;                     // offset:0x08C	type:FLOAT.0
	float                            MotionBlurStrength;              // offset:0x090	type:FLOAT.0
};

struct CGrassScalingParams
{
	float                            distanceMultiplier;              // offset:0x000	type:FLOAT.0
	float                            densityMultiplier;               // offset:0x004	type:FLOAT.0
};

struct CGrassScalingParams_AllLODs
{
	array<struct CGrassScalingParams, 3>     AllLods;                         // offset:0x000	type:ARRAY.MEMBER
};

struct CGrassShadowParams_AllLODs
{
	array<struct _0xB42A0C08, 3>     AllLods;                         // offset:0x000	type:ARRAY.MEMBER
};

struct CGroup
{
	int                              Id;                              // offset:0x008	type:INT.0
	string                           Name;                            // offset:0x010	type:STRING.ATSTRING
	array<struct CRsRef>             RefList;                         // offset:0x020	type:ARRAY.ATARRAY
};

struct CHDTxdAssetBinding
{
	enum ePackFileMetaDataAssetType     assetType;                       // offset:0x000	type:ENUM.32BIT
	string                              targetAsset;                     // offset:0x004	type:STRING.MEMBER
	string                              HDTxd;                           // offset:0x044	type:STRING.MEMBER
};

struct CHandlingData : CHandlingObject
{
	string                                 handlingName;                    // offset:0x008	type:STRING.ATHASHVALUE
	float                                  fMass;                           // offset:0x00C	type:FLOAT.0
	float                                  fInitialDragCoeff;               // offset:0x010	type:FLOAT.0
	float                                  fDownforceModifier;              // offset:0x014	type:FLOAT.0
	float                                  fPopUpLightRotation;             // offset:0x018	type:FLOAT.0
	vec3V                                  vecCentreOfMassOffset;           // offset:0x020	type:VEC3V.0
	vec3V                                  vecInertiaMultiplier;            // offset:0x030	type:VEC3V.0
	float                                  fPercentSubmerged;               // offset:0x040	type:FLOAT.0
	float                                  fDriveBiasFront;                 // offset:0x048	type:FLOAT.0
	uchar                                  nInitialDriveGears;              // offset:0x050	type:UCHAR.0
	float                                  fDriveInertia;                   // offset:0x054	type:FLOAT.0
	float                                  fClutchChangeRateScaleUpShift;   // offset:0x058	type:FLOAT.0
	float                                  fClutchChangeRateScaleDownShift; // offset:0x05C	type:FLOAT.0
	float                                  fInitialDriveForce;              // offset:0x060	type:FLOAT.0
	float                                  fInitialDriveMaxFlatVel;         // offset:0x068	type:FLOAT.0
	float                                  fBrakeForce;                     // offset:0x06C	type:FLOAT.0
	float                                  fBrakeBiasFront;                 // offset:0x074	type:FLOAT.0
	float                                  fHandBrakeForce;                 // offset:0x07C	type:FLOAT.0
	float                                  fSteeringLock;                   // offset:0x080	type:FLOAT.0
	float                                  fTractionCurveMax;               // offset:0x088	type:FLOAT.0
	float                                  fTractionCurveMin;               // offset:0x090	type:FLOAT.0
	float                                  fTractionCurveLateral;           // offset:0x098	type:FLOAT.0
	float                                  fTractionSpringDeltaMax;         // offset:0x0A0	type:FLOAT.0
	float                                  fLowSpeedTractionLossMult;       // offset:0x0A8	type:FLOAT.0
	float                                  fCamberStiffnesss;               // offset:0x0AC	type:FLOAT.0
	float                                  fTractionBiasFront;              // offset:0x0B0	type:FLOAT.0
	float                                  fTractionLossMult;               // offset:0x0B8	type:FLOAT.0
	float                                  fSuspensionForce;                // offset:0x0BC	type:FLOAT.0
	float                                  fSuspensionCompDamp;             // offset:0x0C0	type:FLOAT.0
	float                                  fSuspensionReboundDamp;          // offset:0x0C4	type:FLOAT.0
	float                                  fSuspensionUpperLimit;           // offset:0x0C8	type:FLOAT.0
	float                                  fSuspensionLowerLimit;           // offset:0x0CC	type:FLOAT.0
	float                                  fSuspensionRaise;                // offset:0x0D0	type:FLOAT.0
	float                                  fSuspensionBiasFront;            // offset:0x0D4	type:FLOAT.0
	float                                  fAntiRollBarForce;               // offset:0x0DC	type:FLOAT.0
	float                                  fAntiRollBarBiasFront;           // offset:0x0E0	type:FLOAT.0
	float                                  fRollCentreHeightFront;          // offset:0x0E8	type:FLOAT.0
	float                                  fRollCentreHeightRear;           // offset:0x0EC	type:FLOAT.0
	float                                  fCollisionDamageMult;            // offset:0x0F0	type:FLOAT.0
	float                                  fWeaponDamageMult;               // offset:0x0F4	type:FLOAT.0
	float                                  fDeformationDamageMult;          // offset:0x0F8	type:FLOAT.0
	float                                  fEngineDamageMult;               // offset:0x0FC	type:FLOAT.0
	float                                  fPetrolTankVolume;               // offset:0x100	type:FLOAT.0
	float                                  fOilVolume;                      // offset:0x104	type:FLOAT.0
	float                                  _0x80593873;                     // offset:0x108	type:FLOAT.0
	float                                  fSeatOffsetDistX;                // offset:0x10C	type:FLOAT.0
	float                                  fSeatOffsetDistY;                // offset:0x110	type:FLOAT.0
	float                                  fSeatOffsetDistZ;                // offset:0x114	type:FLOAT.0
	uint                                   nMonetaryValue;                  // offset:0x118	type:UINT.0
	float                                  fRocketBoostCapacity;            // offset:0x11C	type:FLOAT.0
	float                                  fBoostMaxSpeed;                  // offset:0x120	type:FLOAT.0
	string                                 strModelFlags;                   // offset:0x130	type:STRING.ATFINALHASHSTRING
	string                                 strHandlingFlags;                // offset:0x134	type:STRING.ATFINALHASHSTRING
	string                                 strDamageFlags;                  // offset:0x138	type:STRING.ATFINALHASHSTRING
	string                                 AIHandling;                      // offset:0x13C	type:STRING.ATHASHVALUE
	array<struct CBaseSubHandlingData>     SubHandlingData;                 // offset:0x158	type:ARRAY.ATARRAY
	float                                  fWeaponDamageScaledToVehHealthMult; // offset:0x168	type:FLOAT.0
};

struct CHandlingDataMgr
{
	array<struct CHandlingData>      HandlingData;                    // offset:0x000	type:ARRAY.ATARRAY
};

struct CHandlingObject
{
};

struct CHealthConfigInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	float                            DefaultHealth;                   // offset:0x004	type:FLOAT.0
	float                            DefaultArmour;                   // offset:0x008	type:FLOAT.0
	float                            _0x7C84F2FD;                     // offset:0x00C	type:FLOAT.0
	float                            FatiguedHealthThreshold;         // offset:0x010	type:FLOAT.0
	float                            InjuredHealthThreshold;          // offset:0x014	type:FLOAT.0
	float                            DyingHealthThreshold;            // offset:0x018	type:FLOAT.0
	float                            HurtHealthThreshold;             // offset:0x01C	type:FLOAT.0
	float                            DogTakedownThreshold;            // offset:0x020	type:FLOAT.0
	float                            WritheFromBulletDamageTheshold;  // offset:0x024	type:FLOAT.0
	bool                             MeleeCardinalFatalAttackCheck;   // offset:0x028	type:BOOL.0
	bool                             Invincible;                      // offset:0x029	type:BOOL.0
};

struct CHealthConfigInfoManager
{
	array<struct CHealthConfigInfo>     aHealthConfig;                   // offset:0x000	type:ARRAY.ATARRAY
	struct void                         DefaultSet;                      // offset:0x010	type:STRUCT.EXTERNAL_NAMED
};

struct CHoming
{
	vec2                             TargetOffset;                    // offset:0x000	type:VECTOR2.0
	float                            ActivationDistance;              // offset:0x008	type:FLOAT.0
	float                            MaxSpeed;                        // offset:0x00C	type:FLOAT.0
	float                            TargetHeading;                   // offset:0x010	type:FLOAT.0
	string                           Name;                            // offset:0x014	type:STRING.ATHASHVALUE
	enum _0x1D4C6710                 TargetType;                      // offset:0x018	type:ENUM.32BIT
	bitset<enum _0xA105E618>         HomingAttrs;                     // offset:0x01C	type:BITSET.32BIT
};

struct CImapDependencies
{
	string                           imapName;                        // offset:0x000	type:STRING.ATHASHVALUE
	bitset<enum manifestFlags>       manifestFlags;                   // offset:0x004	type:BITSET.32BIT
	array<string>                    itypDepArray;                    // offset:0x008	type:ARRAY.ATARRAY
};

struct CImapDependency
{
	string                           imapName;                        // offset:0x000	type:STRING.ATHASHVALUE
	string                           itypName;                        // offset:0x004	type:STRING.ATHASHVALUE
	string                           packFileName;                    // offset:0x008	type:STRING.ATHASHVALUE
};

struct CImpulse
{
	enum _0x1639985A                 Impulse;                         // offset:0x000	type:ENUM.32BIT
};

struct CImpulseCombo
{
	array<struct CImpulse, 3>        aImpulses;                       // offset:0x000	type:ARRAY.ATFIXEDARRAY
};

struct CImpulseTest
{
	string                               Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	enum _0x9B2EFC0E                     ImpulseOp;                       // offset:0x004	type:ENUM.32BIT
	array<struct CSimpleImpulseTest>     aImpulses;                       // offset:0x008	type:ARRAY.ATARRAY
};

struct CInVehicleOverrideInfo
{
	string                              Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CSeatOverrideInfo>     SeatOverrideInfos;               // offset:0x008	type:ARRAY.ATARRAY
};

struct CInteriorBoundsFiles
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<string>                    Bounds;                          // offset:0x008	type:ARRAY.ATARRAY
};

struct CInterrelationTest
{
	struct CRelativeRange            RelativeRange;                   // offset:0x004	type:STRUCT.STRUCTURE
	string                           Name;                            // offset:0x024	type:STRING.ATHASHVALUE
	float                            RootOffsetZ;                     // offset:0x028	type:FLOAT.0
};

struct CIplCullBoxEntry
{
	string                           name;                            // offset:0x000	type:STRING.ATHASHVALUE
	struct rage__spdAABB             aabb;                            // offset:0x010	type:STRUCT.STRUCTURE
	array<uint>                      culledContainerHashes;           // offset:0x040	type:ARRAY.ATARRAY
	bool                             bEnabled;                        // offset:0x050	type:BOOL.0
};

struct CIplCullBoxFile
{
	array<struct CIplCullBoxEntry>     entries;                         // offset:0x000	type:ARRAY.ATARRAY
};

struct CIslandHopperData
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                           Cullbox;                         // offset:0x008	type:STRING.ATSTRING
	string                           HeightMap;                       // offset:0x018	type:STRING.ATSTRING
	string                           LodLights;                       // offset:0x028	type:STRING.ATSTRING
	array<string>                    IPLsToEnable;                    // offset:0x038	type:ARRAY.ATARRAY
	array<string>                    IMAPsToPreempt;                  // offset:0x048	type:ARRAY.ATARRAY
};

struct CItemInfo
{
	string                           Name;                            // offset:0x010	type:STRING.ATHASHVALUE
	string                           Model;                           // offset:0x014	type:STRING.ATHASHVALUE
	string                           Audio;                           // offset:0x018	type:STRING.ATHASHVALUE
	string                           Slot;                            // offset:0x01C	type:STRING.ATHASHVALUE
};

struct CItypDependencies
{
	string                           itypName;                        // offset:0x000	type:STRING.ATHASHVALUE
	bitset<enum manifestFlags>       manifestFlags;                   // offset:0x004	type:BITSET.32BIT
	array<string>                    itypDepArray;                    // offset:0x008	type:ARRAY.ATARRAY
};

struct CJunctionTemplate
{
	uint                                                          iFlags;                          // offset:0x000	type:UINT.0
	int                                                           iNumJunctionNodes;               // offset:0x004	type:INT.0
	int                                                           iNumEntrances;                   // offset:0x008	type:INT.0
	int                                                           iNumPhases;                      // offset:0x00C	type:INT.0
	int                                                           iNumTrafficLightLocations;       // offset:0x010	type:INT.0
	float                                                         fSearchDistance;                 // offset:0x014	type:FLOAT.0
	float                                                         fPhaseOffset;                    // offset:0x018	type:FLOAT.0
	vec3                                                          vJunctionMin;                    // offset:0x020	type:VECTOR3.0
	vec3                                                          vJunctionMax;                    // offset:0x030	type:VECTOR3.0
	array<vec3, 8>                                                vJunctionNodePositions;          // offset:0x040	type:ARRAY.ATRANGEARRAY
	array<struct CJunctionTemplate__CEntrance, 16>                Entrances;                       // offset:0x0C0	type:ARRAY.ATRANGEARRAY
	array<struct CJunctionTemplate__CPhaseTiming, 16>             PhaseTimings;                    // offset:0x3C0	type:ARRAY.ATRANGEARRAY
	array<struct CJunctionTemplate__CTrafficLightLocation, 8>     TrafficLightLocations;           // offset:0x440	type:ARRAY.ATRANGEARRAY
};

struct CJunctionTemplateArray
{
	array<struct CJunctionTemplate, 150>         Entries;                         // offset:0x000	type:ARRAY.ATFIXEDARRAY
	array<struct CAutoJunctionAdjustment, 8>     AutoJunctionAdjustments;         // offset:0x299B0	type:ARRAY.ATFIXEDARRAY
};

struct CJunctionTemplate__CEntrance
{
	vec3                             vNodePosition;                   // offset:0x000	type:VECTOR3.0
	int                              iPhase;                          // offset:0x010	type:INT.0
	float                            fStoppingDistance;               // offset:0x014	type:FLOAT.0
	float                            fOrientation;                    // offset:0x018	type:FLOAT.0
	float                            fAngleFromCenter;                // offset:0x01C	type:FLOAT.0
	bool                             bLeftLaneIsAheadOnly;            // offset:0x020	type:BOOL.0
	bool                             bCanTurnRightOnRedLight;         // offset:0x021	type:BOOL.0
	bool                             bRightLaneIsRightOnly;           // offset:0x022	type:BOOL.0
	int                              iLeftFilterLanePhase;            // offset:0x024	type:INT.0
};

struct CJunctionTemplate__CPhaseTiming
{
	float                            fStartTime;                      // offset:0x000	type:FLOAT.0
	float                            fDuration;                       // offset:0x004	type:FLOAT.0
};

struct CJunctionTemplate__CTrafficLightLocation
{
	short                            iPosX;                           // offset:0x000	type:SHORT.0
	short                            iPosY;                           // offset:0x002	type:SHORT.0
	short                            iPosZ;                           // offset:0x004	type:SHORT.0
};

struct CLODLight
{
	array<struct FloatXYZ>           direction;                       // offset:0x008	type:ARRAY.ATARRAY
	array<float>                     falloff;                         // offset:0x018	type:ARRAY.ATARRAY
	array<float>                     falloffExponent;                 // offset:0x028	type:ARRAY.ATARRAY
	array<uint>                      timeAndStateFlags;               // offset:0x038	type:ARRAY.ATARRAY
	array<uint>                      hash;                            // offset:0x048	type:ARRAY.ATARRAY
	array<uchar>                     coneInnerAngle;                  // offset:0x058	type:ARRAY.ATARRAY
	array<uchar>                     coneOuterAngleOrCapExt;          // offset:0x068	type:ARRAY.ATARRAY
	array<uchar>                     coronaIntensity;                 // offset:0x078	type:ARRAY.ATARRAY
};

struct CLadderMetadata
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	string                           ClipSet;                         // offset:0x00C	type:STRING.ATHASHVALUE
	string                           FemaleClipSet;                   // offset:0x010	type:STRING.ATHASHVALUE
	float                            RungSpacing;                     // offset:0x014	type:FLOAT.0
	float                            Width;                           // offset:0x018	type:FLOAT.0
	bool                             CanSlide;                        // offset:0x01C	type:BOOL.0
	bool                             CanMountBehind;                  // offset:0x01D	type:BOOL.0
};

struct CLadderMetadataManager
{
	array<struct CLadderMetadata>     LadderData;                      // offset:0x000	type:ARRAY.ATARRAY
};

struct CLayoutNode
{
	string                           Name;                            // offset:0x008	type:STRING.ATSTRING
	vec3                             Translation;                     // offset:0x020	type:VECTOR3.0
	vec3                             Rotation;                        // offset:0x030	type:VECTOR3.0
	bool                             Purchasable;                     // offset:0x040	type:BOOL.0
	array<struct CGroup>             GroupList;                       // offset:0x048	type:ARRAY.ATARRAY
};

struct CLegIkSolver__Tunables : CTuning
{
	struct CLegIkSolver__Tunables__InterpolationSettings     PelvisInterp;                    // offset:0x010	type:STRUCT.STRUCTURE
	struct CLegIkSolver__Tunables__InterpolationSettings     PelvisInterpMoving;              // offset:0x01C	type:STRUCT.STRUCTURE
	struct CLegIkSolver__Tunables__InterpolationSettings     PelvisInterpOnDynamic;           // offset:0x028	type:STRUCT.STRUCTURE
	struct CLegIkSolver__Tunables__InterpolationSettings     FootInterp;                      // offset:0x034	type:STRUCT.STRUCTURE
	struct CLegIkSolver__Tunables__InterpolationSettings     FootInterpIntersecting;          // offset:0x040	type:STRUCT.STRUCTURE
	struct CLegIkSolver__Tunables__InterpolationSettings     FootInterpMoving;                // offset:0x04C	type:STRUCT.STRUCTURE
	struct CLegIkSolver__Tunables__InterpolationSettings     FootInterpIntersectingMoving;    // offset:0x058	type:STRUCT.STRUCTURE
	struct CLegIkSolver__Tunables__InterpolationSettings     FootInterpOnDynamic;             // offset:0x064	type:STRUCT.STRUCTURE
	struct CLegIkSolver__Tunables__InterpolationSettings     StairsPelvisInterp;              // offset:0x070	type:STRUCT.STRUCTURE
	struct CLegIkSolver__Tunables__InterpolationSettings     StairsPelvisInterpMoving;        // offset:0x07C	type:STRUCT.STRUCTURE
	struct CLegIkSolver__Tunables__InterpolationSettings     StairsPelvisInterpCoverAim;      // offset:0x088	type:STRUCT.STRUCTURE
	struct CLegIkSolver__Tunables__InterpolationSettings     StairsFootInterp;                // offset:0x094	type:STRUCT.STRUCTURE
	struct CLegIkSolver__Tunables__InterpolationSettings     StairsFootInterpIntersecting;    // offset:0x0A0	type:STRUCT.STRUCTURE
	struct CLegIkSolver__Tunables__InterpolationSettings     StairsFootInterpCoverAim;        // offset:0x0AC	type:STRUCT.STRUCTURE
	float                                                    VelMagStairsSpringMin;           // offset:0x0B8	type:FLOAT.0
	float                                                    VelMagStairsSpringMax;           // offset:0x0BC	type:FLOAT.0
	float                                                    StairsSpringMultiplierMin;       // offset:0x0C0	type:FLOAT.0
	float                                                    StairsSpringMultiplierMax;       // offset:0x0C4	type:FLOAT.0
	float                                                    DownStairsPelvisMaxDeltaZMoving; // offset:0x0C8	type:FLOAT.0
	float                                                    DownStairsPelvisMaxNegativeDeltaZMoving; // offset:0x0CC	type:FLOAT.0
	float                                                    UpStairsPelvisMaxDeltaZMoving;   // offset:0x0D0	type:FLOAT.0
	float                                                    UpStairsPelvisMaxNegativeDeltaZMoving; // offset:0x0D4	type:FLOAT.0
	float                                                    StairsPelvisMaxNegativeDeltaZCoverAim; // offset:0x0D8	type:FLOAT.0
};

struct CLegIkSolver__Tunables__InterpolationSettings
{
	float                            Rate;                            // offset:0x000	type:FLOAT.0
	bool                             AccelerationBased;               // offset:0x004	type:BOOL.0
	bool                             ScaleAccelWithDelta;             // offset:0x005	type:BOOL.0
	bool                             ZeroRateOnDirectionChange;       // offset:0x006	type:BOOL.0
	float                            AccelRate;                       // offset:0x008	type:FLOAT.0
};

struct CLensFlareSettings
{
	float                            fSunVisibilityFactor;            // offset:0x000	type:FLOAT.0
	int                              iSunVisibilityAlphaClip;         // offset:0x004	type:INT.0
	float                            fSunFogFactor;                   // offset:0x008	type:FLOAT.0
	float                            fChromaticTexUSize;              // offset:0x00C	type:FLOAT.0
	float                            fExposureScaleFactor;            // offset:0x010	type:FLOAT.0
	float                            fExposureIntensityFactor;        // offset:0x014	type:FLOAT.0
	float                            fExposureRotationFactor;         // offset:0x018	type:FLOAT.0
	float                            fChromaticFadeFactor;            // offset:0x01C	type:FLOAT.0
	float                            fArtefactDistanceFadeFactor;     // offset:0x020	type:FLOAT.0
	float                            fArtefactRotationFactor;         // offset:0x024	type:FLOAT.0
	float                            fArtefactScaleFactor;            // offset:0x028	type:FLOAT.0
	float                            fArtefactGradientFactor;         // offset:0x02C	type:FLOAT.0
	float                            fCoronaDistanceAdditionalSize;   // offset:0x030	type:FLOAT.0
	float                            fMinExposureScale;               // offset:0x034	type:FLOAT.0
	float                            fMaxExposureScale;               // offset:0x038	type:FLOAT.0
	float                            fMinExposureIntensity;           // offset:0x03C	type:FLOAT.0
	float                            fMaxExposureIntensity;           // offset:0x040	type:FLOAT.0
	array<struct _0xE5D047AF, 1>     arrFlareTypeFX;                  // offset:0x048	type:ARRAY.MEMBER
};

struct CLevelData
{
	array<struct sLevelData>         aLevelsData;                     // offset:0x008	type:ARRAY.ATARRAY
};

struct CLightAttrDef
{
	array<float, 3>                  posn;                            // offset:0x008	type:ARRAY.MEMBER
	array<uchar, 3>                  colour;                          // offset:0x014	type:ARRAY.MEMBER
	uchar                            flashiness;                      // offset:0x017	type:UCHAR.0
	float                            intensity;                       // offset:0x018	type:FLOAT.0
	uint                             flags;                           // offset:0x01C	type:UINT.0
	short                            boneTag;                         // offset:0x020	type:SHORT.0
	uchar                            lightType;                       // offset:0x022	type:UCHAR.0
	uchar                            groupId;                         // offset:0x023	type:UCHAR.0
	uint                             timeFlags;                       // offset:0x024	type:UINT.0
	float                            falloff;                         // offset:0x028	type:FLOAT.0
	float                            falloffExponent;                 // offset:0x02C	type:FLOAT.0
	array<float, 4>                  cullingPlane;                    // offset:0x030	type:ARRAY.MEMBER
	uchar                            shadowBlur;                      // offset:0x040	type:UCHAR.0
	uchar                            padding1;                        // offset:0x041	type:UCHAR.0
	short                            padding2;                        // offset:0x042	type:SHORT.0
	uint                             padding3;                        // offset:0x044	type:UINT.0
	float                            volIntensity;                    // offset:0x048	type:FLOAT.0
	float                            volSizeScale;                    // offset:0x04C	type:FLOAT.0
	array<uchar, 3>                  volOuterColour;                  // offset:0x050	type:ARRAY.MEMBER
	uchar                            lightHash;                       // offset:0x053	type:UCHAR.0
	float                            volOuterIntensity;               // offset:0x054	type:FLOAT.0
	float                            coronaSize;                      // offset:0x058	type:FLOAT.0
	float                            volOuterExponent;                // offset:0x05C	type:FLOAT.0
	uchar                            lightFadeDistance;               // offset:0x060	type:UCHAR.0
	uchar                            shadowFadeDistance;              // offset:0x061	type:UCHAR.0
	uchar                            specularFadeDistance;            // offset:0x062	type:UCHAR.0
	uchar                            volumetricFadeDistance;          // offset:0x063	type:UCHAR.0
	float                            shadowNearClip;                  // offset:0x064	type:FLOAT.0
	float                            coronaIntensity;                 // offset:0x068	type:FLOAT.0
	float                            coronaZBias;                     // offset:0x06C	type:FLOAT.0
	array<float, 3>                  direction;                       // offset:0x070	type:ARRAY.MEMBER
	array<float, 3>                  tangent;                         // offset:0x07C	type:ARRAY.MEMBER
	float                            coneInnerAngle;                  // offset:0x088	type:FLOAT.0
	float                            coneOuterAngle;                  // offset:0x08C	type:FLOAT.0
	array<float, 3>                  extents;                         // offset:0x090	type:ARRAY.MEMBER
	uint                             projectedTextureKey;             // offset:0x09C	type:UINT.0
};

struct CLoadOutItem
{
};

struct CLoadOutRandom : CLoadOutItem
{
	array<struct CLoadOutRandom__sRandomItem>     Items;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct CLoadOutRandom__sRandomItem
{
	struct CLoadOutItem              Item;                            // offset:0x000	type:STRUCT.POINTER
	float                            Chance;                          // offset:0x008	type:FLOAT.0
};

struct CLoadOutWeapon : CLoadOutItem
{
	string                                 WeaponName;                      // offset:0x008	type:STRING.ATHASHVALUE
	uint                                   Ammo;                            // offset:0x00C	type:UINT.0
	bitset<enum CLoadOutWeapon__Flags>     Flags;                           // offset:0x010	type:BITSET.32BIT
	array<string>                          ComponentNames;                  // offset:0x018	type:ARRAY.ATARRAY
};

struct CLookAtHistory__Tunables : CTuning
{
	float                            HistoryCosineThreshold;          // offset:0x010	type:FLOAT.0
	uint                             MemoryDuration;                  // offset:0x014	type:UINT.0
};

struct CMPApparelData
{
	map<string, int>                 MPApparelDataMale;               // offset:0x008	type:MAP.ATMAP
	map<string, int>                 MPApparelDataFemale;             // offset:0x018	type:MAP.ATMAP
};

struct CMPOutfits
{
	struct CMPOutfitsMap             MPOutfitsDataMale;               // offset:0x008	type:STRUCT.STRUCTURE
	struct CMPOutfitsMap             MPOutfitsDataFemale;             // offset:0x020	type:STRUCT.STRUCTURE
};

struct CMPOutfitsData
{
	array<int, 12>                   ComponentDrawables;              // offset:0x008	type:ARRAY.ATFIXEDARRAY
	array<int, 12>                   ComponentTextures;               // offset:0x03C	type:ARRAY.ATFIXEDARRAY
	array<int, 9>                    PropIndices;                     // offset:0x070	type:ARRAY.ATFIXEDARRAY
	array<int, 9>                    PropTextures;                    // offset:0x098	type:ARRAY.ATFIXEDARRAY
	array<int, 3>                    TattooHashes;                    // offset:0x0C0	type:ARRAY.ATFIXEDARRAY
};

struct CMPOutfitsMap
{
	array<struct CMPOutfitsData>     MPOutfitsData;                   // offset:0x008	type:ARRAY.ATARRAY
};

struct CMapData : rage__fwMapData
{
	array<struct CTimeCycleModifier>     timeCycleModifiers;              // offset:0x0E0	type:ARRAY.ATARRAY
	array<struct CCarGen>                carGenerators;                   // offset:0x0F0	type:ARRAY.ATARRAY
	struct CLODLight                     LODLightsSOA;                    // offset:0x100	type:STRUCT.STRUCTURE
	struct CDistantLODLight              DistantLODLightsSOA;             // offset:0x188	type:STRUCT.STRUCTURE
	struct CBlockDesc                    block;                           // offset:0x1B8	type:STRUCT.STRUCTURE
};

struct CMapDataGroup
{
	string                                          Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<string>                                   Bounds;                          // offset:0x008	type:ARRAY.ATARRAY
	bitset<enum ePackFileMetaDataImapGroupType>     Flags;                           // offset:0x018	type:BITSET.32BIT
	array<string>                                   WeatherTypes;                    // offset:0x020	type:ARRAY.ATARRAY
	uint                                            HoursOnOff;                      // offset:0x030	type:UINT.0
};

struct CMapParentTxds
{
	array<struct CTxdRelationship>     txdRelationships;                // offset:0x000	type:ARRAY.ATARRAY
};

struct CMapTypes : rage__fwMapTypes
{
	array<struct CCompositeEntityType>     compositeEntityTypes;            // offset:0x040	type:ARRAY.ATARRAY
};

struct CMapZone
{
	string                           Name;                            // offset:0x000	type:STRING.ATSTRING
	array<struct CMapZoneArea>       ZoneAreas;                       // offset:0x010	type:ARRAY.ATARRAY
	struct rage__spdAABB             BoundBox;                        // offset:0x020	type:STRUCT.STRUCTURE
};

struct CMapZoneArea
{
	array<vec3>                      ZoneAreaHull;                    // offset:0x000	type:ARRAY.ATARRAY
};

struct CMapZonesContainer
{
	array<struct CMapZone>           Zones;                           // offset:0x000	type:ARRAY.ATARRAY
};

struct CMenuArray
{
	array<struct CMenuVersion>           MenuVersions;                    // offset:0x000	type:ARRAY.ATARRAY
	array<struct CMenuScreen>            MenuScreens;                     // offset:0x010	type:ARRAY.ATARRAY
	array<struct CMenuDisplayValue>      DisplayValues;                   // offset:0x020	type:ARRAY.ATARRAY
	array<struct CContextMenuOption>     ContextMenuOptions;              // offset:0x030	type:ARRAY.ATARRAY
	struct CMenuButtonList               DefaultButtonList;               // offset:0x040	type:STRUCT.STRUCTURE
	struct CGeneralPauseData             GeneralData;                     // offset:0x058	type:STRUCT.STRUCTURE
};

struct CMenuButton
{
	enum rage__InputType             ButtonInput;                     // offset:0x010	type:ENUM.32BIT
	enum rage__InputGroup            ButtonInputGroup;                // offset:0x014	type:ENUM.32BIT
	enum eInstructionButtons         RawButtonIcon;                   // offset:0x018	type:ENUM.32BIT
	string                           hButtonHash;                     // offset:0x01C	type:STRING.ATHASHVALUE
	bool                             _0x4A70420F;                     // offset:0x020	type:BOOL.0
};

struct CMenuButtonList
{
	array<struct CMenuButton>        ButtonPrompts;                   // offset:0x000	type:ARRAY.ATARRAY
	int                              WrappingPoint;                   // offset:0x010	type:INT.0
};

struct CMenuDisplayOption
{
	string                           cTextId;                         // offset:0x000	type:STRING.ATHASHVALUE
};

struct CMenuDisplayValue
{
	enum eMenuOption                     MenuOption;                      // offset:0x000	type:ENUM.32BIT
	array<struct CMenuDisplayOption>     MenuDisplayOptions;              // offset:0x008	type:ARRAY.ATARRAY
};

struct CMenuItem
{
	enum eMenuScreen                 MenuUniqueId;                    // offset:0x000	type:ENUM.32BIT
	string                           cTextId;                         // offset:0x004	type:STRING.ATHASHVALUE
	enum eMenuPref                   MenuPref;                        // offset:0x018	type:ENUM.8BIT
	enum eMenuOption                 MenuOption;                      // offset:0x019	type:ENUM.8BIT
	enum eMenuAction                 MenuAction;                      // offset:0x01A	type:ENUM.8BIT
	bitset<enum eMenuItemBits>       Flags;                           // offset:0x01B	type:BITSET.8BIT
};

struct CMenuScreen
{
	array<struct CMenuItem>          MenuItems;                       // offset:0x008	type:ARRAY.ATARRAY
	struct CMenuButtonList           ButtonList;                      // offset:0x018	type:STRUCT.SIMPLE_POINTER
	struct CContextMenu              ContextMenu;                     // offset:0x020	type:STRUCT.SIMPLE_POINTER
	struct _0x2ADDA568               runtime;                         // offset:0x028	type:STRUCT.SIMPLE_POINTER
	string                           cGfxFilename;                    // offset:0x030	type:STRING.ATSTRING
	enum eMenuScreen                 MenuScreen;                      // offset:0x040	type:ENUM.32BIT
	enum eDepth                      depth;                           // offset:0x044	type:ENUM.32BIT
	bitset<enum eMenuScreenBits>     Flags;                           // offset:0x048	type:BITSET.16BIT
	bitset<enum eMenuScrollBits>     ScrollBarFlags;                  // offset:0x04A	type:BITSET.16BIT
};

struct CMenuVersion
{
	string                            MenuVersionId;                   // offset:0x000	type:STRING.ATHASHVALUE
	string                            MenuItemColour;                  // offset:0x004	type:STRING.ATHASHVALUE
	string                            MenuHeader;                      // offset:0x008	type:STRING.ATHASHVALUE
	enum eMenuScreen                  InitialScreen;                   // offset:0x00C	type:ENUM.32BIT
	bitset<enum eMenuVersionBits>     VersionFlags;                    // offset:0x010	type:BITSET.32BIT
};

struct CMiloInterior
{
	string                           Name;                            // offset:0x008	type:STRING.ATSTRING
	string                           File;                            // offset:0x018	type:STRING.ATSTRING
	array<struct CMiloRoom>          RoomList;                        // offset:0x028	type:ARRAY.ATARRAY
};

struct CMiloRoom
{
	string                           Name;                            // offset:0x008	type:STRING.ATSTRING
	array<struct CLayoutNode>        LayoutNodeList;                  // offset:0x018	type:ARRAY.ATARRAY
};

struct CMiniMapSaveStructure
{
	array<struct CMiniMapSaveStructure__CPointOfInterestStruct>     PointsOfInterestList;            // offset:0x000	type:ARRAY.ATARRAY
};

struct CMiniMapSaveStructure__CPointOfInterestStruct
{
	bool                             bIsSet;                          // offset:0x000	type:BOOL.0
	vec2                             vPos;                            // offset:0x004	type:VECTOR2.0
};

struct CMiniMap_BitmapTunables
{
	ushort                           iBitmapTilesX;                   // offset:0x000	type:USHORT.0
	ushort                           iBitmapTilesY;                   // offset:0x002	type:USHORT.0
	vec2                             vBitmapTileSize;                 // offset:0x004	type:VECTOR2.0
	vec2                             vBitmapStart;                    // offset:0x00C	type:VECTOR2.0
	bool                             bAlwaysDrawBitmap;               // offset:0x014	type:BOOL.0
	enum MM_BITMAP_VERSION           eBitmapForPause;                 // offset:0x018	type:ENUM.32BIT
	enum MM_BITMAP_VERSION           eBitmapForMinimap;               // offset:0x01C	type:ENUM.32BIT
};

struct CMiniMap_CameraTunables
{
	float                            fPauseMenuTilt;                  // offset:0x000	type:FLOAT.0
	float                            fBitmapRequiredZoom;             // offset:0x004	type:FLOAT.0
	float                            fExteriorFootZoom;               // offset:0x008	type:FLOAT.0
	float                            fExteriorFootZoomRunning;        // offset:0x00C	type:FLOAT.0
	float                            fExteriorFootZoomWanted;         // offset:0x010	type:FLOAT.0
	float                            fExteriorFootZoomWantedRunning;  // offset:0x014	type:FLOAT.0
	float                            fExteriorFootTilt;               // offset:0x018	type:FLOAT.0
	float                            fExteriorFootOffset;             // offset:0x01C	type:FLOAT.0
	float                            fInteriorFootZoom;               // offset:0x020	type:FLOAT.0
	float                            fInteriorVerySmall;              // offset:0x024	type:FLOAT.0
	float                            fInteriorVeryLarge;              // offset:0x028	type:FLOAT.0
	float                            fInteriorFootTilt;               // offset:0x02C	type:FLOAT.0
	float                            fInteriorFootOffset;             // offset:0x030	type:FLOAT.0
	float                            fParachutingZoom;                // offset:0x034	type:FLOAT.0
	float                            fVehicleStaticZoom;              // offset:0x038	type:FLOAT.0
	float                            fVehicleStaticWantedZoom;        // offset:0x03C	type:FLOAT.0
	float                            fVehicleMovingZoom;              // offset:0x040	type:FLOAT.0
	float                            fVehicleMovingWantedZoom;        // offset:0x044	type:FLOAT.0
	float                            fVehicleSpeedZoomScalar;         // offset:0x048	type:FLOAT.0
	float                            fVehicleTilt;                    // offset:0x04C	type:FLOAT.0
	float                            fVehicleOffset;                  // offset:0x050	type:FLOAT.0
	float                            fAltimeterTilt;                  // offset:0x054	type:FLOAT.0
	float                            fAltimeterOffset;                // offset:0x058	type:FLOAT.0
	float                            fBigmapTilt;                     // offset:0x05C	type:FLOAT.0
	float                            fBigmapOffset;                   // offset:0x060	type:FLOAT.0
	float                            fRangeZoomedScalarStandard;      // offset:0x064	type:FLOAT.0
	float                            fRangeZoomedScalarPlane;         // offset:0x068	type:FLOAT.0
};

struct CMiniMap_DisplayTunables
{
	ushort                           ScriptOverlayTime;               // offset:0x000	type:USHORT.0
	ushort                           WantedOverlayTime;               // offset:0x002	type:USHORT.0
	float                            MaskNormalAlpha;                 // offset:0x004	type:FLOAT.0
	float                            MaskFlashAlpha;                  // offset:0x008	type:FLOAT.0
};

struct CMiniMap_FogOfWarTunables
{
	float                            fWorldX;                         // offset:0x000	type:FLOAT.0
	float                            fWorldY;                         // offset:0x004	type:FLOAT.0
	float                            fWorldW;                         // offset:0x008	type:FLOAT.0
	float                            fWorldH;                         // offset:0x00C	type:FLOAT.0
	float                            fBaseAlpha;                      // offset:0x010	type:FLOAT.0
	float                            fTopAlpha;                       // offset:0x014	type:FLOAT.0
	float                            fFowWaterHeight;                 // offset:0x018	type:FLOAT.0
};

struct CMiniMap_HealthBarTunables
{
	float                            fStaminaDepletionBlinkPercentage; // offset:0x000	type:FLOAT.0
	int                              iHealthDepletionBlinkPercentage; // offset:0x004	type:INT.0
};

struct CMiniMap_OverlayTunables
{
	vec2                             vPos;                            // offset:0x000	type:VECTOR2.0
	vec2                             vScale;                          // offset:0x008	type:VECTOR2.0
	float                            fDisplayZ;                       // offset:0x010	type:FLOAT.0
};

struct CMiniMap_SonarTunables
{
	float                            fSoundRange_BarelyAudible;       // offset:0x000	type:FLOAT.0
	float                            fSoundRange_MostlyAudible;       // offset:0x004	type:FLOAT.0
	float                            fSoundRange_ClearlyAudible;      // offset:0x008	type:FLOAT.0
	float                            fSoundRange_Whisper;             // offset:0x00C	type:FLOAT.0
	float                            fSoundRange_Talking;             // offset:0x010	type:FLOAT.0
	float                            fSoundRange_Shouting;            // offset:0x014	type:FLOAT.0
	float                            fSoundRange_Megaphone;           // offset:0x018	type:FLOAT.0
	float                            fSoundRange_FootstepBase;        // offset:0x01C	type:FLOAT.0
	float                            fSoundRange_HeavyFootstep;       // offset:0x020	type:FLOAT.0
	float                            fSoundRange_FootstepFoliage;     // offset:0x024	type:FLOAT.0
	float                            fSoundRange_LandFromFall;        // offset:0x028	type:FLOAT.0
	float                            fSoundRange_WeaponSpinUp;        // offset:0x02C	type:FLOAT.0
	float                            fSoundRange_Gunshot;             // offset:0x030	type:FLOAT.0
	float                            fSoundRange_SilencedGunshot;     // offset:0x034	type:FLOAT.0
	float                            fSoundRange_ProjectileLanding;   // offset:0x038	type:FLOAT.0
	float                            fSoundRange_Explosion;           // offset:0x03C	type:FLOAT.0
	float                            fSoundRange_ObjectCollision;     // offset:0x040	type:FLOAT.0
	float                            fSoundRange_GlassBreak;          // offset:0x044	type:FLOAT.0
	float                            fSoundRange_CarHorn;             // offset:0x048	type:FLOAT.0
	float                            fSoundRange_CarLowSpeed;         // offset:0x04C	type:FLOAT.0
	float                            fSoundRange_CarHighSpeed;        // offset:0x050	type:FLOAT.0
	float                            fSoundRange_WaterSplashSmall;    // offset:0x054	type:FLOAT.0
	float                            fSoundRange_WaterSplashLarge;    // offset:0x058	type:FLOAT.0
	float                            fMinListenerRangeToDrawSonarBlips; // offset:0x05C	type:FLOAT.0
	float                            fRainSnowSoundReductionAmount;   // offset:0x060	type:FLOAT.0
	float                            fRadioSoundReductionAmount;      // offset:0x064	type:FLOAT.0
	float                            fRadioSoundReductionDistance;    // offset:0x068	type:FLOAT.0
	float                            fConversationSoundReductionAmount; // offset:0x06C	type:FLOAT.0
	float                            fConversationSoundReductionDistance; // offset:0x070	type:FLOAT.0
};

struct CMiniMap_TileTunables
{
	vec2                             vMiniMapWorldSize;               // offset:0x000	type:VECTOR2.0
	vec2                             vMiniMapWorldStart;              // offset:0x008	type:VECTOR2.0
	bool                             bDrawVectorSeaPaused;            // offset:0x010	type:BOOL.0
	bool                             bDrawVectorSeaMinimap;           // offset:0x011	type:BOOL.0
};

struct CMiniMap__Tunables : CTuning
{
	struct CMiniMap_SonarTunables         Sonar;                           // offset:0x010	type:STRUCT.STRUCTURE
	struct CMiniMap_HealthBarTunables     HealthBar;                       // offset:0x084	type:STRUCT.STRUCTURE
	struct CMiniMap_BitmapTunables        Bitmap;                          // offset:0x08C	type:STRUCT.STRUCTURE
	struct CMiniMap_FogOfWarTunables      FogOfWar;                        // offset:0x0AC	type:STRUCT.STRUCTURE
	struct CMiniMap_CameraTunables        Camera;                          // offset:0x0C8	type:STRUCT.STRUCTURE
	struct CMiniMap_OverlayTunables       Overlay;                         // offset:0x134	type:STRUCT.STRUCTURE
	struct CMiniMap_TileTunables          Tiles;                           // offset:0x148	type:STRUCT.STRUCTURE
	struct CMiniMap_DisplayTunables       Display;                         // offset:0x15C	type:STRUCT.STRUCTURE
};

struct CMloArchetypeDef : CBaseArchetypeDef
{
	uint                                    mloFlags;                        // offset:0x090	type:UINT.0
	array<struct rage__fwEntityDef>         entities;                        // offset:0x098	type:ARRAY.ATARRAY
	array<struct CMloRoomDef>               rooms;                           // offset:0x0A8	type:ARRAY.ATARRAY
	array<struct CMloPortalDef>             portals;                         // offset:0x0B8	type:ARRAY.ATARRAY
	array<struct CMloEntitySet>             entitySets;                      // offset:0x0C8	type:ARRAY.ATARRAY
	array<struct CMloTimeCycleModifier>     timeCycleModifiers;              // offset:0x0D8	type:ARRAY.ATARRAY
};

struct CMloEntitySet
{
	string                              name;                            // offset:0x008	type:STRING.ATHASHVALUE
	array<uint>                         locations;                       // offset:0x010	type:ARRAY.ATARRAY
	array<struct rage__fwEntityDef>     entities;                        // offset:0x020	type:ARRAY.ATARRAY
};

struct CMloInstanceDef : CEntityDef
{
	uint                             groupId;                         // offset:0x080	type:UINT.0
	uint                             floorId;                         // offset:0x084	type:UINT.0
	array<string>                    defaultEntitySets;               // offset:0x088	type:ARRAY.ATARRAY
	uint                             numExitPortals;                  // offset:0x098	type:UINT.0
	uint                             MLOInstflags;                    // offset:0x09C	type:UINT.0
};

struct CMloPortalDef
{
	uint                             roomFrom;                        // offset:0x008	type:UINT.0
	uint                             roomTo;                          // offset:0x00C	type:UINT.0
	uint                             flags;                           // offset:0x010	type:UINT.0
	uint                             mirrorPriority;                  // offset:0x014	type:UINT.0
	uint                             opacity;                         // offset:0x018	type:UINT.0
	uint                             audioOcclusion;                  // offset:0x01C	type:UINT.0
	array<vec3>                      corners;                         // offset:0x020	type:ARRAY.ATARRAY
	array<uint>                      attachedObjects;                 // offset:0x030	type:ARRAY.ATARRAY
};

struct CMloRoomDef
{
	string                           name;                            // offset:0x008	type:STRING.ATSTRING
	vec3                             bbMin;                           // offset:0x020	type:VECTOR3.0
	vec3                             bbMax;                           // offset:0x030	type:VECTOR3.0
	float                            blend;                           // offset:0x040	type:FLOAT.0
	string                           timecycleName;                   // offset:0x044	type:STRING.ATHASHVALUE
	string                           secondaryTimecycleName;          // offset:0x048	type:STRING.ATHASHVALUE
	uint                             flags;                           // offset:0x04C	type:UINT.0
	uint                             portalCount;                     // offset:0x050	type:UINT.0
	int                              floorId;                         // offset:0x054	type:INT.0
	int                              exteriorVisibiltyDepth;          // offset:0x058	type:INT.0
	array<uint>                      attachedObjects;                 // offset:0x060	type:ARRAY.ATARRAY
};

struct CMloTimeCycleModifier
{
	string                           name;                            // offset:0x008	type:STRING.ATHASHVALUE
	vec4                             sphere;                          // offset:0x010	type:VECTOR4.0
	float                            percentage;                      // offset:0x020	type:FLOAT.0
	float                            range;                           // offset:0x024	type:FLOAT.0
	uint                             startHour;                       // offset:0x028	type:UINT.0
	uint                             endHour;                         // offset:0x02C	type:UINT.0
};

struct CModelInfoConfig
{
	string                           defaultPlayerName;               // offset:0x000	type:STRING.CONST_STRING
	string                           defaultProloguePlayerName;       // offset:0x008	type:STRING.CONST_STRING
	int                              MaxBaseModelInfos;               // offset:0x010	type:INT.0
	int                              MaxCompEntityModelInfos;         // offset:0x014	type:INT.0
	int                              MaxMloInstances;                 // offset:0x018	type:INT.0
	int                              MaxMloModelInfos;                // offset:0x01C	type:INT.0
	int                              MaxPedModelInfos;                // offset:0x020	type:INT.0
	int                              MaxTimeModelInfos;               // offset:0x024	type:INT.0
	int                              MaxVehicleModelInfos;            // offset:0x028	type:INT.0
	int                              MaxWeaponModelInfos;             // offset:0x02C	type:INT.0
	int                              MaxExtraPedModelInfos;           // offset:0x030	type:INT.0
	int                              MaxExtraVehicleModelInfos;       // offset:0x034	type:INT.0
	int                              MaxExtraWeaponModelInfos;        // offset:0x038	type:INT.0
};

struct CMotionTaskDataManager
{
	array<struct CMotionTaskDataSet>     aMotionTaskData;                 // offset:0x000	type:ARRAY.ATARRAY
};

struct CMotionTaskDataSet
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	struct sMotionTaskData           onFoot;                          // offset:0x008	type:STRUCT.POINTER
	struct sMotionTaskData           inWater;                         // offset:0x010	type:STRUCT.POINTER
	bool                             HasLowLodMotionTask;             // offset:0x018	type:BOOL.0
};

struct CMovieSubtitleContainer
{
	string                                   TextBlockName;                   // offset:0x000	type:STRING.ATSTRING
	array<struct CMovieSubtitleEventArg>     pCutsceneEventArgsList;          // offset:0x010	type:ARRAY.ATARRAY
	array<struct CMovieSubtitleEvent>        pCutsceneEventList;              // offset:0x020	type:ARRAY.ATARRAY
};

struct CMovieSubtitleEvent
{
	float                            fTime;                           // offset:0x000	type:FLOAT.0
	int                              iEventId;                        // offset:0x004	type:INT.0
	int                              iEventArgsIndex;                 // offset:0x008	type:INT.0
	int                              iObjectId;                       // offset:0x018	type:INT.0
};

struct CMovieSubtitleEventArg
{
	string                           cName;                           // offset:0x000	type:STRING.ATHASHVALUE
	float                            fSubtitleDuration;               // offset:0x004	type:FLOAT.0
};

struct CMultiTxdRelationship
{
	string                           parent;                          // offset:0x008	type:STRING.ATSTRING
	array<string>                    children;                        // offset:0x018	type:ARRAY.ATARRAY
};

struct CMultiplayerStatsSaveStructure : CBaseStatsSaveStructure
{
	array<uint>                      MpVehiclesDriven;                // offset:0x098	type:ARRAY.ATARRAY
};

struct CNetworkShoppingMgr
{
	array<struct _0x566D3A85>        transactiontypes;                // offset:0x000	type:ARRAY.ATARRAY
	array<struct _0x566D3A85>        actiontypes;                     // offset:0x010	type:ARRAY.ATARRAY
};

struct CNmBlendOutBlendItem : CNmBlendOutItem
{
	float                            blendDuration;                   // offset:0x018	type:FLOAT.0
	bool                             tagSync;                         // offset:0x01C	type:BOOL.0
};

struct CNmBlendOutItem
{
	string                           id;                              // offset:0x008	type:STRING.ATHASHVALUE
	enum _0x51C4A404                 type;                            // offset:0x00C	type:ENUM.32BIT
	string                           nextItemId;                      // offset:0x010	type:STRING.ATHASHVALUE
};

struct CNmBlendOutMotionStateItem : CNmBlendOutItem
{
	enum _0x92A659FE                 motionState;                     // offset:0x018	type:ENUM.32BIT
	bool                             forceRestart;                    // offset:0x01C	type:BOOL.0
	float                            motionStartPhase;                // offset:0x020	type:FLOAT.0
};

struct CNmBlendOutPoseItem : CNmBlendOutItem
{
	string                           clipSet;                         // offset:0x018	type:STRING.ATHASHVALUE
	string                           clip;                            // offset:0x01C	type:STRING.ATHASHVALUE
	bool                             addToPointCloud;                 // offset:0x020	type:BOOL.0
	bool                             no180Blend;                      // offset:0x021	type:BOOL.0
	bool                             looping;                         // offset:0x022	type:BOOL.0
	bool                             allowInstantBlendToAim;          // offset:0x023	type:BOOL.0
	float                            minPlaybackRate;                 // offset:0x024	type:FLOAT.0
	float                            maxPlaybackRate;                 // offset:0x028	type:FLOAT.0
	float                            earlyOutPhase;                   // offset:0x02C	type:FLOAT.0
	float                            armedAIEarlyOutPhase;            // offset:0x030	type:FLOAT.0
	float                            movementBreakOutPhase;           // offset:0x034	type:FLOAT.0
	float                            turnBreakOutPhase;               // offset:0x038	type:FLOAT.0
	float                            playerAimOrFireBreakOutPhase;    // offset:0x03C	type:FLOAT.0
	float                            ragdollFrameBlendDuration;       // offset:0x040	type:FLOAT.0
	float                            duration;                        // offset:0x044	type:FLOAT.0
	float                            fullBlendHeadingInterpRate;      // offset:0x048	type:FLOAT.0
	float                            zeroBlendHeadingInterpRate;      // offset:0x04C	type:FLOAT.0
	float                            dropDownPhase;                   // offset:0x050	type:FLOAT.0
};

struct CNmBlendOutReactionItem : CNmBlendOutItem
{
	string                           clipSet;                         // offset:0x018	type:STRING.ATHASHVALUE
	float                            _0x9FCC1C11;                     // offset:0x01C	type:FLOAT.0
};

struct CNmBlendOutSet
{
	bitset<enum _0x4E8E5163>          ControlFlags;                    // offset:0x008	type:BITSET.32BIT
	array<struct CNmBlendOutItem>     items;                           // offset:0x010	type:ARRAY.ATARRAY
	string                            fallbackSet;                     // offset:0x020	type:STRING.ATHASHVALUE
};

struct CNmBlendOutSetManager
{
	map<string, struct CNmBlendOutSet>     sets;                            // offset:0x008	type:MAP.ATBINARYMAP
};

struct CNmMessage
{
	string                           Name;                            // offset:0x008	type:STRING.ATFINALHASHSTRING
	array<struct CNmParameter>       Params;                          // offset:0x010	type:ARRAY.ATARRAY
	bool                             ForceNewMessage;                 // offset:0x020	type:BOOL.0
	bool                             TaskMessage;                     // offset:0x021	type:BOOL.0
};

struct CNmParameter
{
	string                           Name;                            // offset:0x008	type:STRING.ATFINALHASHSTRING
};

struct CNmParameterBool : CNmParameter
{
	bool                             Value;                           // offset:0x010	type:BOOL.0
};

struct CNmParameterFloat : CNmParameter
{
	float                            Value;                           // offset:0x010	type:FLOAT.0
};

struct CNmParameterInt : CNmParameter
{
	int                              Value;                           // offset:0x010	type:INT.0
};

struct CNmParameterRandomFloat : CNmParameter
{
	float                            Min;                             // offset:0x010	type:FLOAT.0
	float                            Max;                             // offset:0x014	type:FLOAT.0
};

struct CNmParameterRandomInt : CNmParameter
{
	int                              Min;                             // offset:0x010	type:INT.0
	int                              Max;                             // offset:0x014	type:INT.0
};

struct CNmParameterResetMessage : CNmParameter
{
};

struct CNmParameterString : CNmParameter
{
	string                           Value;                           // offset:0x010	type:STRING.ATFINALHASHSTRING
};

struct CNmParameterVector : CNmParameter
{
	vec3                             Value;                           // offset:0x010	type:VECTOR3.0
};

struct CNmTuningSet
{
	string                           Id;                              // offset:0x008	type:STRING.ATHASHVALUE
	int                              Priority;                        // offset:0x00C	type:INT.0
	bool                             Enabled;                         // offset:0x010	type:BOOL.0
	array<struct CNmMessage>         Messages;                        // offset:0x018	type:ARRAY.ATARRAY
};

struct CNmTuningSetGroup
{
	map<string, struct CNmTuningSet>     sets;                            // offset:0x000	type:MAP.ATBINARYMAP
};

struct CPOVTuningInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	float                            StickCenteredBodyLeanYSlowMin;   // offset:0x004	type:FLOAT.0
	float                            StickCenteredBodyLeanYSlowMax;   // offset:0x008	type:FLOAT.0
	float                            StickCenteredBodyLeanYFastMin;   // offset:0x00C	type:FLOAT.0
	float                            StickCenteredBodyLeanYFastMax;   // offset:0x010	type:FLOAT.0
	float                            BodyLeanXDeltaFromCenterMinBikeLean; // offset:0x014	type:FLOAT.0
	float                            BodyLeanXDeltaFromCenterMaxBikeLean; // offset:0x018	type:FLOAT.0
	float                            MinForwardsPitchSlow;            // offset:0x01C	type:FLOAT.0
	float                            MaxForwardsPitchSlow;            // offset:0x020	type:FLOAT.0
	float                            MinForwardsPitchFast;            // offset:0x024	type:FLOAT.0
	float                            MaxForwardsPitchFast;            // offset:0x028	type:FLOAT.0
};

struct CPQSMix_Parameters
{
	float                            CPRelativeStrength;              // offset:0x000	type:FLOAT.0
	float                            QSRelativeStrength;              // offset:0x004	type:FLOAT.0
	float                            QSFadeInStart;                   // offset:0x008	type:FLOAT.0
	float                            QSFadeInEnd;                     // offset:0x00C	type:FLOAT.0
	float                            QSRadius;                        // offset:0x010	type:FLOAT.0
	float                            CPRadius;                        // offset:0x014	type:FLOAT.0
	float                            CPNormalOffset;                  // offset:0x018	type:FLOAT.0
};

struct CPVComponentData
{
	uchar                            numAvailTex;                     // offset:0x000	type:UCHAR.0
	array<struct CPVDrawblData>      aDrawblData3;                    // offset:0x008	type:ARRAY.ATARRAY
};

struct CPVDrawblData
{
	uchar                                           propMask;                        // offset:0x000	type:UCHAR.0
	uchar                                           numAlternatives;                 // offset:0x001	type:UCHAR.0
	array<struct CPVTextureData>                    aTexData;                        // offset:0x008	type:ARRAY.ATARRAY
	struct CPVDrawblData__CPVClothComponentData     clothData;                       // offset:0x018	type:STRUCT.STRUCTURE
};

struct CPVDrawblData__CPVClothComponentData
{
	bool                             ownsCloth;                       // offset:0x000	type:BOOL.0
};

struct CPVTextureData
{
	uchar                            texId;                           // offset:0x000	type:UCHAR.0
	uchar                            distribution;                    // offset:0x001	type:UCHAR.0
};

struct CPackFileMetaData
{
	array<struct CMapDataGroup>            MapDataGroups;                   // offset:0x000	type:ARRAY.ATARRAY
	array<struct CHDTxdAssetBinding>       HDTxdBindingArray;               // offset:0x010	type:ARRAY.ATARRAY
	array<struct CImapDependency>          imapDependencies;                // offset:0x020	type:ARRAY.ATARRAY
	array<struct CImapDependencies>        imapDependencies_2;              // offset:0x030	type:ARRAY.ATARRAY
	array<struct CItypDependencies>        itypDependencies_2;              // offset:0x040	type:ARRAY.ATARRAY
	array<struct CInteriorBoundsFiles>     Interiors;                       // offset:0x050	type:ARRAY.ATARRAY
};

struct CPathZone
{
	vec2                             vMin;                            // offset:0x000	type:VECTOR2.0
	vec2                             vMax;                            // offset:0x008	type:VECTOR2.0
	int                              ZoneKey;                         // offset:0x010	type:INT.0
};

struct CPathZoneArray
{
	array<struct CPathZone, 4>       Entries;                         // offset:0x000	type:ARRAY.ATFIXEDARRAY
};

struct CPathZoneData
{
	struct CPathZoneArray            PathZones;                       // offset:0x000	type:STRUCT.STRUCTURE
	struct CPathZoneMappingArray     PathZoneMappings;                // offset:0x060	type:STRUCT.STRUCTURE
};

struct CPathZoneMapping
{
	vec3                             vDestination;                    // offset:0x000	type:VECTOR3.0
	int                              SrcKey;                          // offset:0x010	type:INT.0
	int                              DestKey;                         // offset:0x014	type:INT.0
	bool                             LoadEntireExtents;               // offset:0x018	type:BOOL.0
};

struct CPathZoneMappingArray
{
	array<struct CPathZoneMapping, 12>     Entries;                         // offset:0x000	type:ARRAY.ATFIXEDARRAY
};

struct CPauseMenuPersistentData
{
	struct CSpinnerData              Spinner;                         // offset:0x000	type:STRUCT.STRUCTURE
	struct CGradient                 Gradient;                        // offset:0x028	type:STRUCT.STRUCTURE
	struct CArrowData                Arrows;                          // offset:0x048	type:STRUCT.STRUCTURE
};

struct CPedBloodDamageInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	struct _0x6E9C0088               SoakTexture;                     // offset:0x008	type:STRUCT.STRUCTURE
	struct _0x6E9C0088               SoakTextureGravity;              // offset:0x048	type:STRUCT.STRUCTURE
	struct _0x6E9C0088               WoundTexture;                    // offset:0x088	type:STRUCT.STRUCTURE
	struct _0x6E9C0088               SplatterTexture;                 // offset:0x0C8	type:STRUCT.STRUCTURE
	enum _0x9AF56963                 RotationType;                    // offset:0x108	type:ENUM.32BIT
	bool                             SyncSoakWithWound;               // offset:0x10C	type:BOOL.0
	float                            WoundMinSize;                    // offset:0x110	type:FLOAT.0
	float                            WoundMaxSize;                    // offset:0x114	type:FLOAT.0
	float                            WoundIntensityWet;               // offset:0x118	type:FLOAT.0
	float                            WoundIntensityDry;               // offset:0x11C	type:FLOAT.0
	float                            WoundDryingTime;                 // offset:0x120	type:FLOAT.0
	float                            SplatterMinSize;                 // offset:0x124	type:FLOAT.0
	float                            SplatterMaxSize;                 // offset:0x128	type:FLOAT.0
	float                            SplatterIntensityWet;            // offset:0x12C	type:FLOAT.0
	float                            SplatterIntensityDry;            // offset:0x130	type:FLOAT.0
	float                            SplatterDryingTime;              // offset:0x134	type:FLOAT.0
	float                            SoakStartSize;                   // offset:0x138	type:FLOAT.0
	float                            SoakEndSize;                     // offset:0x13C	type:FLOAT.0
	float                            SoakStartSizeGravity;            // offset:0x140	type:FLOAT.0
	float                            SoakEndSizeGravity;              // offset:0x144	type:FLOAT.0
	float                            SoakScaleTime;                   // offset:0x148	type:FLOAT.0
	float                            SoakIntensityWet;                // offset:0x14C	type:FLOAT.0
	float                            SoakIntensityDry;                // offset:0x150	type:FLOAT.0
	float                            SoakDryingTime;                  // offset:0x154	type:FLOAT.0
	float                            BloodFadeStartTime;              // offset:0x158	type:FLOAT.0
	float                            BloodFadeTime;                   // offset:0x15C	type:FLOAT.0
	string                           ScarName;                        // offset:0x160	type:STRING.ATHASHVALUE
	float                            ScarStartTime;                   // offset:0x164	type:FLOAT.0
};

struct CPedCapsuleInfoManager
{
	array<struct CBaseCapsuleInfo>     aPedCapsule;                     // offset:0x000	type:ARRAY.ATARRAY
};

struct CPedClothCollision
{
	array<struct CClothCollisionData>     CollisionData;                   // offset:0x030	type:ARRAY.ATARRAY
};

struct CPedCompExpressionData
{
	uint                             pedCompID;                       // offset:0x008	type:UINT.0
	int                              pedCompVarIndex;                 // offset:0x00C	type:INT.0
	uint                             pedCompExpressionIndex;          // offset:0x010	type:UINT.0
	array<uchar>                     tracks;                          // offset:0x018	type:ARRAY.ATARRAY
	array<ushort>                    ids;                             // offset:0x028	type:ARRAY.ATARRAY
	array<uchar>                     types;                           // offset:0x038	type:ARRAY.ATARRAY
	array<uchar>                     components;                      // offset:0x048	type:ARRAY.ATARRAY
};

struct CPedCompRestriction
{
	enum ePedVarComp                          Component;                       // offset:0x000	type:ENUM.32BIT
	int                                       DrawableIndex;                   // offset:0x004	type:INT.0
	int                                       TextureIndex;                    // offset:0x008	type:INT.0
	enum CPedCompRestriction__Restriction     Restriction;                     // offset:0x00C	type:ENUM.32BIT
};

struct CPedComponentClothInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	int                              ComponentID;                     // offset:0x004	type:INT.0
	int                              DrawableID;                      // offset:0x008	type:INT.0
	int                              ComponentTargetID;               // offset:0x00C	type:INT.0
	int                              ClothSetID;                      // offset:0x010	type:INT.0
};

struct CPedComponentClothManager
{
	array<struct CPedComponentClothInfo>     Infos;                           // offset:0x000	type:ARRAY.ATARRAY
};

struct CPedComponentSetInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	bool                             HasFacial;                       // offset:0x004	type:BOOL.0
	bool                             HasRagdollConstraints;           // offset:0x005	type:BOOL.0
	bool                             HasInventory;                    // offset:0x006	type:BOOL.0
	bool                             HasVfx;                          // offset:0x007	type:BOOL.0
	bool                             HasSpeech;                       // offset:0x008	type:BOOL.0
	bool                             HasPhone;                        // offset:0x009	type:BOOL.0
	bool                             HasHelmet;                       // offset:0x00A	type:BOOL.0
	bool                             HasShockingEventReponse;         // offset:0x00B	type:BOOL.0
	bool                             HasReins;                        // offset:0x00C	type:BOOL.0
	bool                             IsRidable;                       // offset:0x00D	type:BOOL.0
};

struct CPedComponentSetManager
{
	array<struct CPedComponentSetInfo>     Infos;                           // offset:0x000	type:ARRAY.ATARRAY
	struct void                            DefaultSet;                      // offset:0x010	type:STRUCT.EXTERNAL_NAMED
};

struct CPedDamageCylinderInfo
{
	vec3                             baseOffset;                      // offset:0x000	type:VECTOR3.0
	vec3                             topOffset;                       // offset:0x010	type:VECTOR3.0
	float                            rotation;                        // offset:0x020	type:FLOAT.0
	float                            push;                            // offset:0x024	type:FLOAT.0
	float                            lengthScale;                     // offset:0x028	type:FLOAT.0
	float                            radius;                          // offset:0x02C	type:FLOAT.0
	enum eAnimBoneTag                bone1;                           // offset:0x030	type:ENUM.32BIT
	enum eAnimBoneTag                bone2;                           // offset:0x034	type:ENUM.32BIT
	enum eAnimBoneTag                topBone;                         // offset:0x038	type:ENUM.32BIT
	array<struct _0x88E48BD0>        pushAreas;                       // offset:0x040	type:ARRAY.ATARRAY
};

struct CPedDamageCylinderInfoSet
{
	enum PedTypes                     type;                            // offset:0x000	type:ENUM.32BIT
	struct CPedDamageCylinderInfo     torsoInfo;                       // offset:0x010	type:STRUCT.STRUCTURE
	struct CPedDamageCylinderInfo     headInfo;                        // offset:0x060	type:STRUCT.STRUCTURE
	struct CPedDamageCylinderInfo     leftArmInfo;                     // offset:0x0B0	type:STRUCT.STRUCTURE
	struct CPedDamageCylinderInfo     rightArmInfo;                    // offset:0x100	type:STRUCT.STRUCTURE
	struct CPedDamageCylinderInfo     leftLegInfo;                     // offset:0x150	type:STRUCT.STRUCTURE
	struct CPedDamageCylinderInfo     rightLegInfo;                    // offset:0x1A0	type:STRUCT.STRUCTURE
};

struct CPedDamageData
{
	vec3                                        BloodColor;                      // offset:0x000	type:VECTOR3.0
	vec3                                        SoakColor;                       // offset:0x010	type:VECTOR3.0
	float                                       BloodSpecExponent;               // offset:0x020	type:FLOAT.0
	float                                       BloodSpecIntensity;              // offset:0x024	type:FLOAT.0
	float                                       BloodFresnel;                    // offset:0x028	type:FLOAT.0
	float                                       BloodReflection;                 // offset:0x02C	type:FLOAT.0
	float                                       WoundBumpAdjust;                 // offset:0x030	type:FLOAT.0
	float                                       HiResTargetDistanceCutoff;       // offset:0x034	type:FLOAT.0
	float                                       MedResTargetDistanceCutoff;      // offset:0x038	type:FLOAT.0
	float                                       LowResTargetDistanceCutoff;      // offset:0x03C	type:FLOAT.0
	float                                       CutsceneLODDistanceScale;        // offset:0x040	type:FLOAT.0
	int                                         MaxMedResTargetsPerFrame;        // offset:0x044	type:INT.0
	int                                         MaxTotalTargetsPerFrame;         // offset:0x048	type:INT.0
	int                                         NumWoundsToScarsOnDeathSP;       // offset:0x04C	type:INT.0
	int                                         NumWoundsToScarsOnDeathMP;       // offset:0x050	type:INT.0
	int                                         MaxPlayerBloodWoundsSP;          // offset:0x054	type:INT.0
	int                                         MaxPlayerBloodWoundsMP;          // offset:0x058	type:INT.0
	vec4                                        TattooTintAdjust;                // offset:0x060	type:VECTOR4.0
	array<struct CPedBloodDamageInfo>           BloodData;                       // offset:0x070	type:ARRAY.ATARRAY
	array<struct CPedDamageDecalInfo>           DamageDecalData;                 // offset:0x080	type:ARRAY.ATARRAY
	array<struct CPedDamagePack>                DamagePacks;                     // offset:0x090	type:ARRAY.ATARRAY
	array<struct CPedDamageCylinderInfoSet>     CylinderInfoSets;                // offset:0x0A0	type:ARRAY.ATARRAY
};

struct CPedDamageDecalInfo
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	struct _0x6E9C0088               Texture;                         // offset:0x010	type:STRUCT.STRUCTURE
	struct _0x6E9C0088               BumpTexture;                     // offset:0x050	type:STRUCT.STRUCTURE
	float                            MinSize;                         // offset:0x090	type:FLOAT.0
	float                            MaxSize;                         // offset:0x094	type:FLOAT.0
	float                            MinStartAlpha;                   // offset:0x098	type:FLOAT.0
	float                            MaxStartAlpha;                   // offset:0x09C	type:FLOAT.0
	float                            FadeInTime;                      // offset:0x0A0	type:FLOAT.0
	float                            FadeOutTime;                     // offset:0x0A4	type:FLOAT.0
	float                            FadeOutStartTime;                // offset:0x0A8	type:FLOAT.0
	enum _0x9989A624                 CoverageType;                    // offset:0x0AC	type:ENUM.32BIT
};

struct CPedDamagePack
{
	string                                Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CPedDamagePackEntry>     Entries;                         // offset:0x008	type:ARRAY.ATARRAY
};

struct CPedDamagePackEntry
{
	string                           DamageName;                      // offset:0x008	type:STRING.ATHASHVALUE
	enum ePedDamageZones             Zone;                            // offset:0x00C	type:ENUM.32BIT
	vec2                             uvPos;                           // offset:0x010	type:VECTOR2.0
	float                            Rotation;                        // offset:0x018	type:FLOAT.0
	float                            Scale;                           // offset:0x01C	type:FLOAT.0
	int                              ForcedFrame;                     // offset:0x020	type:INT.0
};

struct CPedFacialOverlays
{
	array<string>                    blemishes;                       // offset:0x000	type:ARRAY.ATARRAY
	array<string>                    facialHair;                      // offset:0x010	type:ARRAY.ATARRAY
	array<string>                    eyebrow;                         // offset:0x020	type:ARRAY.ATARRAY
	array<string>                    aging;                           // offset:0x030	type:ARRAY.ATARRAY
	array<string>                    makeup;                          // offset:0x040	type:ARRAY.ATARRAY
	array<string>                    blusher;                         // offset:0x050	type:ARRAY.ATARRAY
	array<string>                    damage;                          // offset:0x060	type:ARRAY.ATARRAY
	array<string>                    baseDetail;                      // offset:0x070	type:ARRAY.ATARRAY
	array<string>                    skinDetail1;                     // offset:0x080	type:ARRAY.ATARRAY
	array<string>                    skinDetail2;                     // offset:0x090	type:ARRAY.ATARRAY
	array<string>                    bodyOverlay1;                    // offset:0x0A0	type:ARRAY.ATARRAY
	array<string>                    bodyOverlay2;                    // offset:0x0B0	type:ARRAY.ATARRAY
	array<string>                    bodyOverlay3;                    // offset:0x0C0	type:ARRAY.ATARRAY
};

struct CPedIKSettingsInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	bitset<enum _0x658F32E6>         IKSolversDisabled;               // offset:0x004	type:BITSET.32BIT
	struct _0x119962EE               TorsoDeltaLimits;                // offset:0x010	type:STRUCT.STRUCTURE
	struct _0x119962EE               HeadDeltaLimits;                 // offset:0x110	type:STRUCT.STRUCTURE
	struct _0x119962EE               NeckDeltaLimits;                 // offset:0x210	type:STRUCT.STRUCTURE
};

struct CPedIKSettingsInfoManager
{
	array<struct CPedIKSettingsInfo>     aPedIKSettings;                  // offset:0x000	type:ARRAY.ATARRAY
	struct void                          DefaultSet;                      // offset:0x010	type:STRUCT.EXTERNAL_NAMED
};

struct CPedInventoryLoadOut
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CLoadOutItem>       Items;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct CPedInventoryLoadOutManager
{
	array<struct CPedInventoryLoadOut>     LoadOuts;                        // offset:0x000	type:ARRAY.ATARRAY
};

struct CPedModelInfo__InitData
{
	string                                 Name;                            // offset:0x000	type:STRING.CONST_STRING
	string                                 PropsName;                       // offset:0x008	type:STRING.CONST_STRING
	string                                 Pedtype;                         // offset:0x010	type:STRING.ATHASHVALUE
	string                                 CreatureMetadataName;            // offset:0x014	type:STRING.ATHASHVALUE
	string                                 ClipDictionaryName;              // offset:0x018	type:STRING.ATHASHVALUE
	string                                 BlendShapeFileName;              // offset:0x01C	type:STRING.ATHASHVALUE
	string                                 ExpressionSetName;               // offset:0x020	type:STRING.ATHASHVALUE
	string                                 ExpressionDictionaryName;        // offset:0x024	type:STRING.ATHASHVALUE
	string                                 ExpressionName;                  // offset:0x028	type:STRING.ATHASHVALUE
	string                                 MovementClipSet;                 // offset:0x02C	type:STRING.ATHASHVALUE
	array<string>                          MovementClipSets;                // offset:0x030	type:ARRAY.ATARRAY
	string                                 StrafeClipSet;                   // offset:0x040	type:STRING.ATHASHVALUE
	string                                 MovementToStrafeClipSet;         // offset:0x044	type:STRING.ATHASHVALUE
	string                                 InjuredStrafeClipSet;            // offset:0x048	type:STRING.ATHASHVALUE
	string                                 FullBodyDamageClipSet;           // offset:0x04C	type:STRING.ATHASHVALUE
	string                                 AdditiveDamageClipSet;           // offset:0x050	type:STRING.ATHASHVALUE
	string                                 DefaultGestureClipSet;           // offset:0x054	type:STRING.ATHASHVALUE
	string                                 DefaultVisemeClipSet;            // offset:0x058	type:STRING.ATHASHVALUE
	string                                 SidestepClipSet;                 // offset:0x05C	type:STRING.ATHASHVALUE
	string                                 FacialClipsetGroupName;          // offset:0x060	type:STRING.ATHASHVALUE
	string                                 PoseMatcherName;                 // offset:0x064	type:STRING.ATHASHVALUE
	string                                 PoseMatcherProneName;            // offset:0x068	type:STRING.ATHASHVALUE
	string                                 GetupSetHash;                    // offset:0x06C	type:STRING.ATHASHVALUE
	string                                 DecisionMakerName;               // offset:0x070	type:STRING.ATHASHVALUE
	string                                 MotionTaskDataSetName;           // offset:0x074	type:STRING.ATHASHVALUE
	string                                 DefaultTaskDataSetName;          // offset:0x078	type:STRING.ATHASHVALUE
	string                                 PedCapsuleName;                  // offset:0x07C	type:STRING.ATHASHVALUE
	string                                 PedLayoutName;                   // offset:0x080	type:STRING.ATHASHVALUE
	string                                 PedComponentSetName;             // offset:0x084	type:STRING.ATHASHVALUE
	string                                 PedComponentClothName;           // offset:0x088	type:STRING.ATHASHVALUE
	string                                 PedIKSettingsName;               // offset:0x08C	type:STRING.ATHASHVALUE
	string                                 TaskDataName;                    // offset:0x090	type:STRING.ATHASHVALUE
	string                                 RelationshipGroup;               // offset:0x094	type:STRING.ATHASHVALUE
	string                                 NavCapabilitiesName;             // offset:0x098	type:STRING.ATHASHVALUE
	string                                 PerceptionInfo;                  // offset:0x09C	type:STRING.ATHASHVALUE
	string                                 DefaultBrawlingStyle;            // offset:0x0A0	type:STRING.ATHASHVALUE
	string                                 DefaultUnarmedWeapon;            // offset:0x0A4	type:STRING.ATHASHVALUE
	string                                 PedVoiceGroup;                   // offset:0x0A8	type:STRING.ATHASHVALUE
	string                                 AnimalAudioObject;               // offset:0x0AC	type:STRING.ATHASHVALUE
	string                                 Personality;                     // offset:0x0B0	type:STRING.ATHASHVALUE
	string                                 CombatInfo;                      // offset:0x0B4	type:STRING.ATHASHVALUE
	string                                 VfxInfoName;                     // offset:0x0B8	type:STRING.ATHASHVALUE
	string                                 AmbientClipsForFlee;             // offset:0x0BC	type:STRING.ATHASHVALUE
	bool                                   IsStreamedGfx;                   // offset:0x0C0	type:BOOL.0
	bool                                   AmbulanceShouldRespondTo;        // offset:0x0C1	type:BOOL.0
	bool                                   CanRideBikeWithNoHelmet;         // offset:0x0C2	type:BOOL.0
	bool                                   CanSpawnInCar;                   // offset:0x0C3	type:BOOL.0
	bool                                   IsHeadBlendPed;                  // offset:0x0C4	type:BOOL.0
	bool                                   bOnlyBulkyItemVariations;        // offset:0x0C6	type:BOOL.0
	enum ePedRadioGenre                    Radio1;                          // offset:0x0C8	type:ENUM.32BIT
	enum ePedRadioGenre                    Radio2;                          // offset:0x0CC	type:ENUM.32BIT
	float                                  FUpOffset;                       // offset:0x0D0	type:FLOAT.0
	float                                  RUpOffset;                       // offset:0x0D4	type:FLOAT.0
	float                                  FFrontOffset;                    // offset:0x0D8	type:FLOAT.0
	float                                  RFrontOffset;                    // offset:0x0DC	type:FLOAT.0
	float                                  MinActivationImpulse;            // offset:0x0E0	type:FLOAT.0
	float                                  Stubble;                         // offset:0x0E4	type:FLOAT.0
	float                                  HDDist;                          // offset:0x0E8	type:FLOAT.0
	float                                  TargetingThreatModifier;         // offset:0x0EC	type:FLOAT.0
	float                                  KilledPerceptionRangeModifer;    // offset:0x0F0	type:FLOAT.0
	bitset<enum eSexinessFlags>            Sexiness;                        // offset:0x0F4	type:BITSET.32BIT
	uchar                                  Age;                             // offset:0x0F8	type:UCHAR.0
	uchar                                  MaxPassengersInCar;              // offset:0x0F9	type:UCHAR.0
	bitset<enum eExternallyDrivenDOFs>     ExternallyDrivenDOFs;            // offset:0x0FA	type:BITSET.8BIT
	enum SpecialAbilityType                AbilityType;                     // offset:0x0FC	type:ENUM.32BIT
	enum ThermalBehaviour                  ThermalBehaviour;                // offset:0x100	type:ENUM.32BIT
	enum eSuperlodType                     SuperlodType;                    // offset:0x104	type:ENUM.32BIT
	enum eScenarioPopStreamingSlot         ScenarioPopStreamingSlot;        // offset:0x108	type:ENUM.32BIT
	enum DefaultSpawnPreference            DefaultSpawningPreference;       // offset:0x10C	type:ENUM.32BIT
	float                                  DefaultRemoveRangeMultiplier;    // offset:0x110	type:FLOAT.0
	bool                                   AllowCloseSpawning;              // offset:0x114	type:BOOL.0
};

struct CPedModelInfo__InitDataList
{
	array<struct CPedModelInfo__InitData>     InitDatas;                       // offset:0x000	type:ARRAY.ATARRAY
	string                                    residentTxd;                     // offset:0x010	type:STRING.ATSTRING
	array<string>                             residentAnims;                   // offset:0x020	type:ARRAY.ATARRAY
	array<struct CTxdRelationship>            txdRelationships;                // offset:0x030	type:ARRAY.ATARRAY
	array<struct CMultiTxdRelationship>       multiTxdRelationships;           // offset:0x040	type:ARRAY.ATARRAY
};

struct CPedModelInfo__PersonalityAgility
{
	bitset<enum eAgilityFlags>       Flags;                           // offset:0x000	type:BITSET.32BIT
	float                            MovementCostModifier;            // offset:0x004	type:FLOAT.0
};

struct CPedModelInfo__PersonalityBravery
{
	string                                                Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	bitset<enum eBraveryFlags>                            Flags;                           // offset:0x004	type:BITSET.32BIT
	float                                                 TakedownProbability;             // offset:0x008	type:FLOAT.0
	struct CPedModelInfo__PersonalityThreatResponse       ThreatResponseUnarmed;           // offset:0x00C	type:STRUCT.STRUCTURE
	struct CPedModelInfo__PersonalityThreatResponse       ThreatResponseMelee;             // offset:0x024	type:STRUCT.STRUCTURE
	struct CPedModelInfo__PersonalityThreatResponse       ThreatResponseArmed;             // offset:0x03C	type:STRUCT.STRUCTURE
	struct CPedModelInfo__PersonalityFleeDuringCombat     FleeDuringCombat;                // offset:0x054	type:STRUCT.STRUCTURE
};

struct CPedModelInfo__PersonalityCriminality
{
	string                             Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	bitset<enum eCriminalityFlags>     Flags;                           // offset:0x004	type:BITSET.32BIT
};

struct CPedModelInfo__PersonalityData
{
	string                                       PersonalityName;                 // offset:0x000	type:STRING.ATHASHVALUE
	string                                       DefaultWeaponLoadout;            // offset:0x004	type:STRING.ATHASHVALUE
	string                                       Bravery;                         // offset:0x008	type:STRING.ATHASHVALUE
	string                                       AgitatedPersonality;             // offset:0x00C	type:STRING.ATHASHVALUE
	string                                       Criminality;                     // offset:0x010	type:STRING.ATHASHVALUE
	string                                       AgitationTriggers;               // offset:0x014	type:STRING.ATHASHVALUE
	string                                       HealthConfigHash;                // offset:0x018	type:STRING.ATHASHVALUE
	array<string>                                WeaponAnimations;                // offset:0x020	type:ARRAY.ATARRAY
	string                                       AmbientAudio;                    // offset:0x030	type:STRING.ATHASHVALUE
	string                                       WitnessPersonality;              // offset:0x034	type:STRING.ATHASHVALUE
	struct CPedModelInfo__PersonalityAgility     Agility;                         // offset:0x038	type:STRUCT.STRUCTURE
	float                                        AttackStrengthMin;               // offset:0x040	type:FLOAT.0
	float                                        AttackStrengthMax;               // offset:0x044	type:FLOAT.0
	float                                        StaminaEfficiency;               // offset:0x048	type:FLOAT.0
	float                                        ArmourEfficiency;                // offset:0x04C	type:FLOAT.0
	float                                        HealthRegenEfficiency;           // offset:0x050	type:FLOAT.0
	float                                        ExplosiveDamageMod;              // offset:0x054	type:FLOAT.0
	float                                        HandGunDamageMod;                // offset:0x058	type:FLOAT.0
	float                                        RifleDamageMod;                  // offset:0x05C	type:FLOAT.0
	float                                        SmgDamageMod;                    // offset:0x060	type:FLOAT.0
	float                                        PopulationFleeMod;               // offset:0x064	type:FLOAT.0
	float                                        HotwireRate;                     // offset:0x068	type:FLOAT.0
	uint                                         MotivationMin;                   // offset:0x06C	type:UINT.0
	uint                                         MotivationMax;                   // offset:0x070	type:UINT.0
	bitset<enum ePedVehicleTypes>                VehicleTypes;                    // offset:0x074	type:BITSET.32BIT
	uchar                                        DrivingAbilityMin;               // offset:0x078	type:UCHAR.0
	uchar                                        DrivingAbilityMax;               // offset:0x079	type:UCHAR.0
	uchar                                        DrivingAggressivenessMin;        // offset:0x07A	type:UCHAR.0
	uchar                                        DrivingAggressivenessMax;        // offset:0x07B	type:UCHAR.0
	bool                                         IsMale;                          // offset:0x07C	type:BOOL.0
	bool                                         IsHuman;                         // offset:0x07D	type:BOOL.0
	bool                                         ShouldRewardMoneyOnDeath;        // offset:0x07E	type:BOOL.0
	bool                                         IsGang;                          // offset:0x07F	type:BOOL.0
	bool                                         IsSecurity;                      // offset:0x080	type:BOOL.0
	bool                                         IsWeird;                         // offset:0x081	type:BOOL.0
	bool                                         IsDangerousAnimal;               // offset:0x082	type:BOOL.0
	bool                                         CausesRumbleWhenCollidesWithPlayer; // offset:0x083	type:BOOL.0
	bool                                         AllowSlowCruisingWithMusic;      // offset:0x084	type:BOOL.0
	bool                                         AllowRoadCrossHurryOnLightChange; // offset:0x085	type:BOOL.0
	enum Affluence                               Affluence;                       // offset:0x088	type:ENUM.32BIT
	enum TechSavvy                               TechSavvy;                       // offset:0x08C	type:ENUM.32BIT
	string                                       MovementModes;                   // offset:0x090	type:STRING.ATHASHVALUE
	string                                       WeaponAnimsFPSIdle;              // offset:0x0A8	type:STRING.ATHASHVALUE
	string                                       WeaponAnimsFPSRNG;               // offset:0x0AC	type:STRING.ATHASHVALUE
	string                                       WeaponAnimsFPSLT;                // offset:0x0B0	type:STRING.ATHASHVALUE
	string                                       WeaponAnimsFPSScope;             // offset:0x0B4	type:STRING.ATHASHVALUE
};

struct CPedModelInfo__PersonalityDataList
{
	array<struct CPedModelInfo__PersonalityMovementModes__sUnholsterClipData>     MovementModeUnholsterData;       // offset:0x000	type:ARRAY.ATARRAY
	array<struct CPedModelInfo__PersonalityMovementModes>                         MovementModes;                   // offset:0x010	type:ARRAY.ATARRAY
	array<struct CPedModelInfo__PersonalityCriminality>                           CriminalityTypes;                // offset:0x020	type:ARRAY.ATARRAY
	array<struct CPedModelInfo__PersonalityBravery>                               BraveryTypes;                    // offset:0x030	type:ARRAY.ATARRAY
	array<struct CPedModelInfo__PersonalityData>                                  PedPersonalities;                // offset:0x040	type:ARRAY.ATARRAY
};

struct CPedModelInfo__PersonalityFleeDuringCombat
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	float                            ChancesWhenBuddyKilledWithScaryWeapon; // offset:0x004	type:FLOAT.0
};

struct CPedModelInfo__PersonalityMovementModes
{
	array<array<struct CPedModelInfo__PersonalityMovementModes__MovementMode>, 2>     MovementModes;                   // offset:0x000	type:ARRAY.MEMBER
	string                                                                            Name;                            // offset:0x020	type:STRING.ATHASHVALUE
	float                                                                             LastBattleEventHighEnergyStartTime; // offset:0x024	type:FLOAT.0
	float                                                                             LastBattleEventHighEnergyEndTime; // offset:0x028	type:FLOAT.0
};

struct CPedModelInfo__PersonalityMovementModes__MovementMode
{
	array<string>                                                                     Weapons;                         // offset:0x000	type:ARRAY.ATARRAY
	array<struct CPedModelInfo__PersonalityMovementModes__MovementMode__ClipSets>     ClipSets;                        // offset:0x010	type:ARRAY.ATARRAY
};

struct CPedModelInfo__PersonalityMovementModes__MovementMode__ClipSets
{
	string                           MovementClipSetId;               // offset:0x000	type:STRING.ATHASHVALUE
	string                           WeaponClipSetId;                 // offset:0x004	type:STRING.ATHASHVALUE
	string                           WeaponClipFilterId;              // offset:0x008	type:STRING.ATHASHVALUE
	bool                             UpperBodyShadowExpressionEnabled; // offset:0x00C	type:BOOL.0
	bool                             UpperBodyFeatheredLeanEnabled;   // offset:0x00D	type:BOOL.0
	bool                             UseWeaponAnimsForGrip;           // offset:0x00E	type:BOOL.0
	bool                             UseLeftHandIk;                   // offset:0x00F	type:BOOL.0
	float                            IdleTransitionBlendOutTime;      // offset:0x010	type:FLOAT.0
	array<string>                    IdleTransitions;                 // offset:0x018	type:ARRAY.ATARRAY
	string                           UnholsterClipSetId;              // offset:0x028	type:STRING.ATHASHVALUE
	string                           UnholsterClipData;               // offset:0x02C	type:STRING.ATHASHVALUE
};

struct CPedModelInfo__PersonalityMovementModes__sUnholsterClipData
{
	string                                                                                        Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CPedModelInfo__PersonalityMovementModes__sUnholsterClipData__sUnholsterClip>     UnholsterClips;                  // offset:0x008	type:ARRAY.ATARRAY
};

struct CPedModelInfo__PersonalityMovementModes__sUnholsterClipData__sUnholsterClip
{
	array<string>                    Weapons;                         // offset:0x000	type:ARRAY.ATARRAY
	string                           Clip;                            // offset:0x010	type:STRING.ATHASHVALUE
};

struct CPedModelInfo__PersonalityThreatResponse
{
	struct CPedModelInfo__PersonalityThreatResponse__Action     Action;                          // offset:0x000	type:STRUCT.STRUCTURE
	struct CPedModelInfo__PersonalityThreatResponse__Fight      Fight;                           // offset:0x008	type:STRUCT.STRUCTURE
};

struct CPedModelInfo__PersonalityThreatResponse__Action
{
	struct CPedModelInfo__PersonalityThreatResponse__Action__Weights     Weights;                         // offset:0x000	type:STRUCT.STRUCTURE
};

struct CPedModelInfo__PersonalityThreatResponse__Action__Weights
{
	float                            Fight;                           // offset:0x000	type:FLOAT.0
	float                            Flee;                            // offset:0x004	type:FLOAT.0
};

struct CPedModelInfo__PersonalityThreatResponse__Fight
{
	struct CPedModelInfo__PersonalityThreatResponse__Fight__Weights     Weights;                         // offset:0x000	type:STRUCT.STRUCTURE
	float                                                               ProbabilityDrawWeaponWhenLosing; // offset:0x00C	type:FLOAT.0
};

struct CPedModelInfo__PersonalityThreatResponse__Fight__Weights
{
	float                            KeepWeapon;                      // offset:0x000	type:FLOAT.0
	float                            MatchTargetWeapon;               // offset:0x004	type:FLOAT.0
	float                            EquipBestWeapon;                 // offset:0x008	type:FLOAT.0
};

struct CPedMotivationInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	float                            Happy;                           // offset:0x004	type:FLOAT.0
	float                            Anger;                           // offset:0x008	type:FLOAT.0
	float                            Fear;                            // offset:0x00C	type:FLOAT.0
	float                            Hunger;                          // offset:0x010	type:FLOAT.0
	float                            Tired;                           // offset:0x014	type:FLOAT.0
	float                            HappyRate;                       // offset:0x018	type:FLOAT.0
	float                            AngerRate;                       // offset:0x01C	type:FLOAT.0
	float                            FearRate;                        // offset:0x020	type:FLOAT.0
	float                            HungerRate;                      // offset:0x024	type:FLOAT.0
	float                            TiredRate;                       // offset:0x028	type:FLOAT.0
};

struct CPedMotivationInfoManager
{
	array<struct CPedMotivationInfo>     aPedMotivation;                  // offset:0x000	type:ARRAY.ATARRAY
};

struct CPedNavCapabilityInfoManager
{
	array<struct _0x64C795D1>        aPedNavCapabilities;             // offset:0x000	type:ARRAY.ATARRAY
};

struct CPedPerceptionInfoManager
{
	array<struct SPedPerceptionInfo>     aPedPerceptionInfoData;          // offset:0x000	type:ARRAY.ATARRAY
};

struct CPedPropExpressionData
{
	uint                             pedPropID;                       // offset:0x008	type:UINT.0
	int                              pedPropVarIndex;                 // offset:0x00C	type:INT.0
	uint                             pedPropExpressionIndex;          // offset:0x010	type:UINT.0
	array<uchar>                     tracks;                          // offset:0x018	type:ARRAY.ATARRAY
	array<ushort>                    ids;                             // offset:0x028	type:ARRAY.ATARRAY
	array<uchar>                     types;                           // offset:0x038	type:ARRAY.ATARRAY
	array<uchar>                     components;                      // offset:0x048	type:ARRAY.ATARRAY
};

struct CPedPropInfo
{
	uchar                              numAvailProps;                   // offset:0x000	type:UCHAR.0
	array<struct CPedPropMetaData>     aPropMetaData;                   // offset:0x008	type:ARRAY.ATARRAY
	array<struct CAnchorProps>         aAnchors;                        // offset:0x018	type:ARRAY.ATARRAY
};

struct CPedPropMetaData
{
	string                            audioId;                         // offset:0x000	type:STRING.ATHASHVALUE
	array<float, 5>                   expressionMods;                  // offset:0x004	type:ARRAY.MEMBER
	array<struct CPedPropTexData>     texData;                         // offset:0x018	type:ARRAY.ATARRAY
	bitset<enum ePropRenderFlags>     renderFlags;                     // offset:0x028	type:BITSET.8BIT
	uint                              propFlags;                       // offset:0x02C	type:UINT.0
	ushort                            flags;                           // offset:0x030	type:USHORT.0
	uchar                             anchorId;                        // offset:0x032	type:UCHAR.0
	uchar                             propId;                          // offset:0x033	type:UCHAR.0
	uchar                             _0xAC887A91;                     // offset:0x034	type:UCHAR.0
};

struct CPedPropRestriction
{
	enum eAnchorPoints                        PropSlot;                        // offset:0x000	type:ENUM.32BIT
	int                                       PropIndex;                       // offset:0x004	type:INT.0
	enum CPedPropRestriction__Restriction     Restriction;                     // offset:0x008	type:ENUM.32BIT
};

struct CPedPropTexData
{
	bitset<enum _0x00000000>         inclusions;                      // offset:0x000	type:BITSET.32BIT
	bitset<enum _0x00000000>         exclusions;                      // offset:0x004	type:BITSET.32BIT
	uchar                            texId;                           // offset:0x008	type:UCHAR.0
	uchar                            inclusionId;                     // offset:0x009	type:UCHAR.0
	uchar                            exclusionId;                     // offset:0x00A	type:UCHAR.0
	uchar                            distribution;                    // offset:0x00B	type:UCHAR.0
};

struct CPedSelectionSet
{
	string                           name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<uchar, 12>                 compDrawableId;                  // offset:0x004	type:ARRAY.MEMBER
	array<uchar, 12>                 compTexId;                       // offset:0x010	type:ARRAY.MEMBER
	array<uchar, 6>                  propAnchorId;                    // offset:0x01C	type:ARRAY.MEMBER
	array<uchar, 6>                  propDrawableId;                  // offset:0x022	type:ARRAY.MEMBER
	array<uchar, 6>                  propTexId;                       // offset:0x028	type:ARRAY.MEMBER
};

struct CPedSkinTones
{
	array<struct _0x6038C573, 3>     comps;                           // offset:0x000	type:ARRAY.MEMBER
	array<uchar>                     males;                           // offset:0x030	type:ARRAY.ATARRAY
	array<uchar>                     females;                         // offset:0x040	type:ARRAY.ATARRAY
	array<uchar>                     uniqueMales;                     // offset:0x050	type:ARRAY.ATARRAY
	array<uchar>                     uniqueFemales;                   // offset:0x060	type:ARRAY.ATARRAY
};

struct CPedTargetEvaluator__Tunables : CTuning
{
	float                            DefaultTargetAngularLimitMelee;  // offset:0x010	type:FLOAT.0
	float                            DefaultTargetAngularLimitMeleeLockOnNoStick; // offset:0x014	type:FLOAT.0
	float                            DefaultTargetDistanceWeightMelee; // offset:0x018	type:FLOAT.0
	float                            DefaultTargetDistanceWeightMeleeFPS; // offset:0x01C	type:FLOAT.0
	float                            DefaultTargetDistanceWeightMeleeRunning; // offset:0x020	type:FLOAT.0
	float                            DefaultTargetDistanceWeightMeleeRunningFPS; // offset:0x024	type:FLOAT.0
	float                            DefaultTargetHeadingWeightMelee; // offset:0x028	type:FLOAT.0
	float                            DefaultTargetHeadingWeightMeleeFPS; // offset:0x02C	type:FLOAT.0
	float                            DefaultTargetHeadingWeightMeleeRunning; // offset:0x030	type:FLOAT.0
	float                            DefaultTargetHeadingWeightMeleeRunningFPS; // offset:0x034	type:FLOAT.0
	float                            MeleeLockOnStickWeighting;       // offset:0x038	type:FLOAT.0
	float                            MeleeLockOnCameraWeighting;      // offset:0x03C	type:FLOAT.0
	float                            MeleeLockOnCameraWeightingNoStick; // offset:0x040	type:FLOAT.0
	float                            MeleeLockOnPedWeightingNoStick;  // offset:0x044	type:FLOAT.0
	float                            DefaultTargetAngularLimitVehicleWeapon; // offset:0x048	type:FLOAT.0
	float                            PrioHarmless;                    // offset:0x050	type:FLOAT.0
	float                            PrioNeutral;                     // offset:0x054	type:FLOAT.0
	float                            PrioNeutralInjured;              // offset:0x058	type:FLOAT.0
	float                            PrioIngangOrFriend;              // offset:0x05C	type:FLOAT.0
	float                            PrioPotentialThreat;             // offset:0x060	type:FLOAT.0
	float                            PrioMissionThreat;               // offset:0x064	type:FLOAT.0
	float                            PrioMissionThreatCuffed;         // offset:0x068	type:FLOAT.0
	float                            PrioPlayer2PlayerEveryone;       // offset:0x06C	type:FLOAT.0
	float                            PrioPlayer2PlayerStrangers;      // offset:0x070	type:FLOAT.0
	float                            PrioPlayer2PlayerAttackers;      // offset:0x074	type:FLOAT.0
	float                            PrioPlayer2Player;               // offset:0x078	type:FLOAT.0
	float                            PrioPlayer2PlayerCuffed;         // offset:0x07C	type:FLOAT.0
	float                            PrioScriptedHighPriority;        // offset:0x080	type:FLOAT.0
	float                            PrioMeleeDead;                   // offset:0x084	type:FLOAT.0
	float                            PrioMeleeCombatThreat;           // offset:0x088	type:FLOAT.0
	float                            PrioMeleeDownedCombatThreat;     // offset:0x08C	type:FLOAT.0
	float                            PrioMeleeInjured;                // offset:0x090	type:FLOAT.0
	float                            PrioMeleePotentialThreat;        // offset:0x094	type:FLOAT.0
	float                            DownedThreatModifier;            // offset:0x098	type:FLOAT.0
	float                            InCoverScoreModifier;            // offset:0x09C	type:FLOAT.0
	float                            ClosestPointToLineDist;          // offset:0x0A0	type:FLOAT.0
	float                            ClosestPointToLineBonusModifier; // offset:0x0A4	type:FLOAT.0
	float                            MeleeHeadingOverride;            // offset:0x0A8	type:FLOAT.0
	float                            MeleeHeadingOverrideRunning;     // offset:0x0AC	type:FLOAT.0
	float                            MeleeHeadingFalloffPowerRunning; // offset:0x0B0	type:FLOAT.0
	float                            DefaultMeleeRange;               // offset:0x0B4	type:FLOAT.0
	bool                             UseMeleeHeadingOverride;         // offset:0x0B8	type:BOOL.0
	bool                             LimitMeleeRangeToDefault;        // offset:0x0B9	type:BOOL.0
	bool                             DebugTargetting;                 // offset:0x0BA	type:BOOL.0
	float                            TargetDistanceWeightingMin;      // offset:0x0BC	type:FLOAT.0
	float                            TargetDistanceWeightingMax;      // offset:0x0C0	type:FLOAT.0
	float                            TargetHeadingWeighting;          // offset:0x0C4	type:FLOAT.0
	uint                             TargetDistanceMaxWeightingAimTime; // offset:0x0C8	type:UINT.0
	float                            TargetDistanceFallOffMin;        // offset:0x0CC	type:FLOAT.0
	float                            TargetDistanceFallOffMax;        // offset:0x0D0	type:FLOAT.0
	bool                             UseNonNormalisedScoringForPlayer; // offset:0x0D4	type:BOOL.0
	bool                             RejectLockIfBestTargetIsInCover; // offset:0x0D5	type:BOOL.0
	float                            RejectLockonHeadingTheshold;     // offset:0x0D8	type:FLOAT.0
	float                            HeadingScoreForCoverLockOnRejection; // offset:0x0DC	type:FLOAT.0
	float                            AircraftToAircraftRejectionModifier; // offset:0x0E0	type:FLOAT.0
	uint                             TimeForTakedownTargetAcquiry;    // offset:0x0E4	type:UINT.0
	uint                             TimeToIncreaseFriendlyFirePlayer2PlayerPriority; // offset:0x0E8	type:UINT.0
};

struct CPedTargetting__Tunables : CTuning
{
	float                            fExistingTargetScoreWeight;      // offset:0x010	type:FLOAT.0
	float                            fTargetingInactiveDisableTime;   // offset:0x014	type:FLOAT.0
	float                            fBlockedLosWeighting;            // offset:0x018	type:FLOAT.0
	float                            fTimeToIgnoreBlockedLosWeighting; // offset:0x01C	type:FLOAT.0
	float                            fPlayerHighThreatWeighting;      // offset:0x020	type:FLOAT.0
	float                            fTargetInAircraftWeighting;      // offset:0x024	type:FLOAT.0
	int                              iTargetNotSeenIgnoreTimeMs;      // offset:0x028	type:INT.0
	float                            fPlayerThreatDistance;           // offset:0x02C	type:FLOAT.0
	float                            fPlayerDirectThreatDistance;     // offset:0x030	type:FLOAT.0
	float                            fPlayerBeingTargetedExtraDistance; // offset:0x034	type:FLOAT.0
	int                              iPlayerDirectThreatTimeMs;       // offset:0x038	type:INT.0
};

struct CPedVariationInfo
{
	bool                               bHasTexVariations;               // offset:0x000	type:BOOL.0
	bool                               bHasDrawblVariations;            // offset:0x001	type:BOOL.0
	bool                               bHasLowLODs;                     // offset:0x002	type:BOOL.0
	bool                               bIsSuperLOD;                     // offset:0x003	type:BOOL.0
	array<uchar, 12>                   availComp;                       // offset:0x004	type:ARRAY.MEMBER
	array<struct CPVComponentData>     aComponentData3;                 // offset:0x010	type:ARRAY.ATARRAY
	array<struct CPedSelectionSet>     aSelectionSets;                  // offset:0x020	type:ARRAY.ATARRAY
	array<struct CComponentInfo>       compInfos;                       // offset:0x030	type:ARRAY.ATARRAY
	struct CPedPropInfo                propInfo;                        // offset:0x040	type:STRUCT.STRUCTURE
	string                             dlcName;                         // offset:0x068	type:STRING.ATFINALHASHSTRING
};

struct CPickupActionAudio : CPickupActionData
{
	string                           AudioRef;                        // offset:0x010	type:STRING.ATHASHVALUE
};

struct CPickupActionData
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
};

struct CPickupActionGroup : CPickupActionData
{
	array<string, 10>                Actions;                         // offset:0x010	type:ARRAY.ATFIXEDARRAY
};

struct CPickupActionPadShake : CPickupActionData
{
	float                            Intensity;                       // offset:0x010	type:FLOAT.0
	int                              Duration;                        // offset:0x014	type:INT.0
};

struct CPickupActionVfx : CPickupActionData
{
	string                           Vfx;                             // offset:0x010	type:STRING.MEMBER
};

struct CPickupData
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	bitset<enum _0x28B8378B>         PickupFlags;                     // offset:0x00C	type:BITSET.32BIT
	float                            GlowRange;                       // offset:0x010	type:FLOAT.0
	vec3                             AttachmentOffset;                // offset:0x020	type:VECTOR3.0
	vec3                             AttachmentRotation;              // offset:0x030	type:VECTOR3.0
	string                           Model;                           // offset:0x040	type:STRING.ATHASHVALUE
	float                            GenerationRange;                 // offset:0x044	type:FLOAT.0
	float                            RegenerationTime;                // offset:0x048	type:FLOAT.0
	float                            CollectionRadius;                // offset:0x04C	type:FLOAT.0
	float                            CollectionRadiusFirstPerson;     // offset:0x050	type:FLOAT.0
	float                            Scale;                           // offset:0x054	type:FLOAT.0
	string                           LoopingAudioRef;                 // offset:0x058	type:STRING.ATHASHVALUE
	float                            GlowRed;                         // offset:0x05C	type:FLOAT.0
	float                            GlowGreen;                       // offset:0x060	type:FLOAT.0
	float                            GlowBlue;                        // offset:0x064	type:FLOAT.0
	float                            GlowIntensity;                   // offset:0x068	type:FLOAT.0
	float                            DarkGlowIntensity;               // offset:0x06C	type:FLOAT.0
	float                            MPGlowIntensity;                 // offset:0x070	type:FLOAT.0
	float                            MPDarkGlowIntensity;             // offset:0x074	type:FLOAT.0
	array<string, 10>                OnFootPickupActions;             // offset:0x078	type:ARRAY.ATFIXEDARRAY
	array<string, 10>                InCarPickupActions;              // offset:0x0A4	type:ARRAY.ATFIXEDARRAY
	array<string, 10>                OnShotPickupActions;             // offset:0x0D0	type:ARRAY.ATFIXEDARRAY
	array<string, 10>                Rewards;                         // offset:0x0FC	type:ARRAY.ATFIXEDARRAY
	enum eAnimBoneTag                AttachmentBone;                  // offset:0x128	type:ENUM.32BIT
	enum eExplosionTag               ExplosionTag;                    // offset:0x12C	type:ENUM.32BIT
};

struct CPickupDataManager
{
	array<struct CPickupData>           pickupData;                      // offset:0x000	type:ARRAY.ATARRAY
	array<struct CPickupActionData>     actionData;                      // offset:0x010	type:ARRAY.ATARRAY
	array<struct CPickupRewardData>     rewardData;                      // offset:0x020	type:ARRAY.ATARRAY
};

struct CPickupRewardAmmo : CPickupRewardData
{
	string                           AmmoRef;                         // offset:0x010	type:STRING.ATHASHVALUE
	int                              Amount;                          // offset:0x014	type:INT.0
};

struct CPickupRewardArmour : CPickupRewardData
{
	int                              Armour;                          // offset:0x010	type:INT.0
};

struct CPickupRewardBulletMP : CPickupRewardData
{
};

struct CPickupRewardData
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
};

struct CPickupRewardFireworkMP : CPickupRewardData
{
};

struct CPickupRewardGrenadeLauncherMP : CPickupRewardData
{
};

struct CPickupRewardHealth : CPickupRewardData
{
	int                              Health;                          // offset:0x010	type:INT.0
};

struct CPickupRewardHealthVariable : CPickupRewardData
{
};

struct CPickupRewardMissileMP : CPickupRewardData
{
};

struct CPickupRewardMoneyFixed : CPickupRewardData
{
	int                              Money;                           // offset:0x010	type:INT.0
};

struct CPickupRewardMoneyVariable : CPickupRewardData
{
};

struct CPickupRewardStat : CPickupRewardData
{
	string                           Stat;                            // offset:0x010	type:STRING.MEMBER
	float                            Amount;                          // offset:0x030	type:FLOAT.0
};

struct CPickupRewardStatVariable : CPickupRewardData
{
	string                           Stat;                            // offset:0x010	type:STRING.MEMBER
};

struct CPickupRewardVehicleFix : CPickupRewardData
{
};

struct CPickupRewardWeapon : CPickupRewardData
{
	string                           WeaponRef;                       // offset:0x010	type:STRING.ATHASHVALUE
	bool                             Equip;                           // offset:0x014	type:BOOL.0
};

struct CPlantInfo
{
	string                           Tag;                             // offset:0x000	type:STRING.ATHASHVALUE
	uint                             Color;                           // offset:0x004	type:UINT.1
	uint                             GroundColor;                     // offset:0x008	type:UINT.1
	float16                          ScaleXY;                         // offset:0x00C	type:FLOAT16.0
	float16                          ScaleZ;                          // offset:0x00E	type:FLOAT16.0
	float16                          ScaleVariationXY;                // offset:0x010	type:FLOAT16.0
	float16                          ScaleVariationZ;                 // offset:0x012	type:FLOAT16.0
	float16                          ScaleRangeXYZ;                   // offset:0x014	type:FLOAT16.0
	float16                          ScaleRangeZ;                     // offset:0x016	type:FLOAT16.0
	float16                          MicroMovementsScaleH;            // offset:0x018	type:FLOAT16.0
	float16                          MicroMovementsScaleV;            // offset:0x01A	type:FLOAT16.0
	float16                          MicroMovementsFreqH;             // offset:0x01C	type:FLOAT16.0
	float16                          MicroMovementsFreqV;             // offset:0x01E	type:FLOAT16.0
	float16                          WindBendScale;                   // offset:0x020	type:FLOAT16.0
	float16                          WindBendVariation;               // offset:0x022	type:FLOAT16.0
	float16                          CollisionRadius;                 // offset:0x024	type:FLOAT16.0
	float16                          Density;                         // offset:0x026	type:FLOAT16.0
	float16                          DensityRange;                    // offset:0x028	type:FLOAT16.0
	uchar                            ModelId;                         // offset:0x02A	type:UCHAR.0
	uchar                            TextureId;                       // offset:0x02B	type:UCHAR.0
	bitset<enum PlantInfoFlags>      Flags;                           // offset:0x02C	type:BITSET.16BIT
	uchar                            Intensity;                       // offset:0x02E	type:UCHAR.0
	uchar                            IntensityVar;                    // offset:0x02F	type:UCHAR.0
};

struct CPlayerCoverClipVariationHelper__Tunables : CTuning
{
	uint                             MinUsesForIdleVariationChange;   // offset:0x010	type:UINT.0
	uint                             MaxUsesForIdleVariationChange;   // offset:0x014	type:UINT.0
};

struct CPlayerInfo__Tunables : CTuning
{
	struct CPlayerInfo__Tunables__EnemyCharging          EnemyCharging;                   // offset:0x010	type:STRUCT.STRUCTURE
	struct CPlayerInfo__Tunables__CombatLoitering        CombatLoitering;                 // offset:0x024	type:STRUCT.STRUCTURE
	struct _0x00FE80C3                                   _0x5BDFF673;                     // offset:0x02C	type:STRUCT.STRUCTURE
	float                                                MinVehicleCollisionDamageScale;  // offset:0x038	type:FLOAT.0
	float                                                MaxVehicleCollisionDamageScale;  // offset:0x03C	type:FLOAT.0
	float                                                MaxAngleConsidered;              // offset:0x040	type:FLOAT.0
	float                                                MinDotToConsiderVehicleValid;    // offset:0x044	type:FLOAT.0
	float                                                MaxDistToConsiderVehicleValid;   // offset:0x048	type:FLOAT.0
	float                                                SprintReplenishFinishedPercentage; // offset:0x04C	type:FLOAT.0
	float                                                SprintReplenishFinishedPercentageBicycle; // offset:0x050	type:FLOAT.0
	float                                                SprintReplenishRateMultiplier;   // offset:0x054	type:FLOAT.0
	float                                                SprintReplenishRateMultiplierBike; // offset:0x058	type:FLOAT.0
	float                                                MaxWorldLimitsPlayerX;           // offset:0x05C	type:FLOAT.0
	float                                                MaxWorldLimitsPlayerY;           // offset:0x060	type:FLOAT.0
	float                                                MinWorldLimitsPlayerX;           // offset:0x064	type:FLOAT.0
	float                                                MinWorldLimitsPlayerY;           // offset:0x068	type:FLOAT.0
	float                                                MaxTimeToTrespassWhileSwimmingBeforeDeath; // offset:0x06C	type:FLOAT.0
	float                                                MovementAwayWeighting;           // offset:0x070	type:FLOAT.0
	float                                                DistanceWeighting;               // offset:0x074	type:FLOAT.0
	float                                                HeadingWeighting;                // offset:0x078	type:FLOAT.0
	float                                                CameraWeighting;                 // offset:0x07C	type:FLOAT.0
	float                                                DistanceWeightingNoStick;        // offset:0x080	type:FLOAT.0
	float                                                HeadingWeightingNoStick;         // offset:0x084	type:FLOAT.0
	float                                                OnFireWeightingMult;             // offset:0x088	type:FLOAT.0
	float                                                BikeMaxRestoreDuration;          // offset:0x08C	type:FLOAT.0
	float                                                BikeMinRestoreDuration;          // offset:0x090	type:FLOAT.0
	float                                                BicycleDepletionMinMult;         // offset:0x094	type:FLOAT.0
	float                                                BicycleDepletionMidMult;         // offset:0x098	type:FLOAT.0
	float                                                BicycleDepletionMaxMult;         // offset:0x09C	type:FLOAT.0
	float                                                BicycleMinDepletionLimit;        // offset:0x0A0	type:FLOAT.0
	float                                                BicycleMidDepletionLimit;        // offset:0x0A4	type:FLOAT.0
	float                                                BicycleMaxDepletionLimit;        // offset:0x0A8	type:FLOAT.0
	uint                                                 TimeBetweenSwitchToClearTasks;   // offset:0x0AC	type:UINT.0
	uint                                                 TimeBetweenShoutTargetPosition;  // offset:0x0B0	type:UINT.0
	string                                               TrespassGuardModelName;          // offset:0x0B4	type:STRING.ATHASHVALUE
	bool                                                 GuardWorldExtents;               // offset:0x0B8	type:BOOL.0
	array<struct CPlayerInfo__sSprintControlData, 4>     SprintControlData;               // offset:0x0C0	type:ARRAY.ATFIXEDARRAY
	array<struct CPlayerInfo__sPlayerStatInfo, 8>        PlayerStatInfos;                 // offset:0x148	type:ARRAY.ATFIXEDARRAY
	float                                                ScanNearbyMountsDistance;        // offset:0x3D0	type:FLOAT.0
	float                                                MountPromptDistance;             // offset:0x3D4	type:FLOAT.0
	bool                                                 _0x53F9AFA1;                     // offset:0x3D8	type:BOOL.0
};

struct CPlayerInfo__Tunables__CombatLoitering
{
	float                            fPlayerMoveDistToResetLoiterPosition; // offset:0x000	type:FLOAT.0
	uint                             uDistanceCheckPeriodMS;          // offset:0x004	type:UINT.0
};

struct CPlayerInfo__Tunables__EnemyCharging
{
	float                            fChargeGoalBehindCoverCentralOffset; // offset:0x000	type:FLOAT.0
	float                            fChargeGoalLateralOffset;        // offset:0x004	type:FLOAT.0
	float                            fChargeGoalRearOffset;           // offset:0x008	type:FLOAT.0
	float                            fChargeGoalMaxAdjustRadius;      // offset:0x00C	type:FLOAT.0
	float                            fPlayerMoveDistToResetChargeGoals; // offset:0x010	type:FLOAT.0
};

struct CPlayerInfo__sPlayerStatInfo
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	float                            MinStaminaDuration;              // offset:0x00C	type:FLOAT.0
	float                            MaxStaminaDuration;              // offset:0x010	type:FLOAT.0
	float                            MinHoldBreathDuration;           // offset:0x014	type:FLOAT.0
	float                            MaxHoldBreathDuration;           // offset:0x018	type:FLOAT.0
	float                            MinWheelieAbility;               // offset:0x01C	type:FLOAT.0
	float                            MaxWheelieAbility;               // offset:0x020	type:FLOAT.0
	float                            MinPlaneControlAbility;          // offset:0x024	type:FLOAT.0
	float                            MaxPlaneControlAbility;          // offset:0x028	type:FLOAT.0
	float                            MinPlaneDamping;                 // offset:0x02C	type:FLOAT.0
	float                            MaxPlaneDamping;                 // offset:0x030	type:FLOAT.0
	float                            MinHeliDamping;                  // offset:0x034	type:FLOAT.0
	float                            MaxHeliDamping;                  // offset:0x038	type:FLOAT.0
	float                            MinFallHeight;                   // offset:0x03C	type:FLOAT.0
	float                            MaxFallHeight;                   // offset:0x040	type:FLOAT.0
	float                            MinDiveHeight;                   // offset:0x044	type:FLOAT.0
	float                            MaxDiveHeight;                   // offset:0x048	type:FLOAT.0
	float                            DiveRampPow;                     // offset:0x04C	type:FLOAT.0
};

struct CPlayerInfo__sSprintControlData
{
	float                            TapAdd;                          // offset:0x008	type:FLOAT.0
	float                            HoldSub;                         // offset:0x00C	type:FLOAT.0
	float                            ReleaseSub;                      // offset:0x010	type:FLOAT.0
	float                            Threshhold;                      // offset:0x014	type:FLOAT.0
	float                            MaxLimit;                        // offset:0x018	type:FLOAT.0
	float                            ResultMult;                      // offset:0x01C	type:FLOAT.0
};

struct CPlayerPedSaveStructure
{
	uint                                                                  GamerIdHigh;                     // offset:0x000	type:UINT.0
	uint                                                                  GamerIdLow;                      // offset:0x004	type:UINT.0
	ushort                                                                CarDensityForCurrentZone;        // offset:0x008	type:USHORT.0
	int                                                                   CollectablesPickedUp;            // offset:0x00C	type:INT.0
	int                                                                   TotalNumCollectables;            // offset:0x010	type:INT.0
	bool                                                                  DoesNotGetTired;                 // offset:0x014	type:BOOL.0
	bool                                                                  FastReload;                      // offset:0x015	type:BOOL.0
	bool                                                                  FireProof;                       // offset:0x016	type:BOOL.0
	ushort                                                                MaxHealth;                       // offset:0x018	type:USHORT.0
	ushort                                                                MaxArmour;                       // offset:0x01A	type:USHORT.0
	bool                                                                  bCanDoDriveBy;                   // offset:0x01C	type:BOOL.0
	bool                                                                  bCanBeHassledByGangs;            // offset:0x01D	type:BOOL.0
	ushort                                                                nLastBustMessageNumber;          // offset:0x01E	type:USHORT.0
	uint                                                                  ModelHashKey;                    // offset:0x020	type:UINT.0
	vec3                                                                  Position;                        // offset:0x030	type:VECTOR3.0
	float                                                                 fHealth;                         // offset:0x040	type:FLOAT.0
	float                                                                 nArmour;                         // offset:0x044	type:FLOAT.0
	uint                                                                  nCurrentWeaponSlot;              // offset:0x048	type:UINT.0
	bool                                                                  bPlayerHasHelmet;                // offset:0x04C	type:BOOL.0
	int                                                                   nStoredHatPropIdx;               // offset:0x050	type:INT.0
	int                                                                   nStoredHatTexIdx;                // offset:0x054	type:INT.0
	array<struct CPlayerPedSaveStructure__SPedCompPropConvData, 6>        CurrentProps;                    // offset:0x058	type:ARRAY.ATFIXEDARRAY
	map<string, struct CPlayerPedSaveStructure__SPedCompPropConvData>     ComponentVariations;             // offset:0x090	type:MAP.ATBINARYMAP
	map<string, uchar>                                                    TextureVariations;               // offset:0x0A8	type:MAP.ATBINARYMAP
	array<struct CPlayerPedSaveStructure__CPlayerDecorationStruct>        DecorationList;                  // offset:0x0C0	type:ARRAY.ATARRAY
};

struct CPlayerPedSaveStructure_Migration
{
	uint                                                                GamerIdHigh;                     // offset:0x000	type:UINT.0
	uint                                                                GamerIdLow;                      // offset:0x004	type:UINT.0
	ushort                                                              CarDensityForCurrentZone;        // offset:0x008	type:USHORT.0
	int                                                                 CollectablesPickedUp;            // offset:0x00C	type:INT.0
	int                                                                 TotalNumCollectables;            // offset:0x010	type:INT.0
	bool                                                                DoesNotGetTired;                 // offset:0x014	type:BOOL.0
	bool                                                                FastReload;                      // offset:0x015	type:BOOL.0
	bool                                                                FireProof;                       // offset:0x016	type:BOOL.0
	ushort                                                              MaxHealth;                       // offset:0x018	type:USHORT.0
	ushort                                                              MaxArmour;                       // offset:0x01A	type:USHORT.0
	bool                                                                bCanDoDriveBy;                   // offset:0x01C	type:BOOL.0
	bool                                                                bCanBeHassledByGangs;            // offset:0x01D	type:BOOL.0
	ushort                                                              nLastBustMessageNumber;          // offset:0x01E	type:USHORT.0
	uint                                                                ModelHashKey;                    // offset:0x020	type:UINT.0
	vec3                                                                Position;                        // offset:0x030	type:VECTOR3.0
	float                                                               fHealth;                         // offset:0x040	type:FLOAT.0
	float                                                               nArmour;                         // offset:0x044	type:FLOAT.0
	uint                                                                nCurrentWeaponSlot;              // offset:0x048	type:UINT.0
	bool                                                                bPlayerHasHelmet;                // offset:0x04C	type:BOOL.0
	int                                                                 nStoredHatPropIdx;               // offset:0x050	type:INT.0
	int                                                                 nStoredHatTexIdx;                // offset:0x054	type:INT.0
	array<struct CPlayerPedSaveStructure__SPedCompPropConvData, 6>      CurrentProps;                    // offset:0x058	type:ARRAY.ATFIXEDARRAY
	map<uint, struct CPlayerPedSaveStructure__SPedCompPropConvData>     ComponentVariations;             // offset:0x090	type:MAP.ATBINARYMAP
	map<uint, uchar>                                                    TextureVariations;               // offset:0x0A8	type:MAP.ATBINARYMAP
	array<struct CPlayerPedSaveStructure__CPlayerDecorationStruct>      DecorationList;                  // offset:0x0C0	type:ARRAY.ATARRAY
};

struct CPlayerPedSaveStructure__CPlayerDecorationStruct
{
	vec4                             UVCoords;                        // offset:0x000	type:VECTOR4.0
	vec2                             Scale;                           // offset:0x010	type:VECTOR2.0
	uint                             TxdHash;                         // offset:0x018	type:UINT.0
	uint                             TxtHash;                         // offset:0x01C	type:UINT.0
	uchar                            Type;                            // offset:0x020	type:UCHAR.0
	uchar                            Zone;                            // offset:0x021	type:UCHAR.0
	uchar                            Alpha;                           // offset:0x022	type:UCHAR.0
	uchar                            FixedFrame;                      // offset:0x023	type:UCHAR.0
	float                            Age;                             // offset:0x024	type:FLOAT.0
	uchar                            FlipUVFlags;                     // offset:0x028	type:UCHAR.0
	uint                             SourceNameHash;                  // offset:0x02C	type:UINT.0
};

struct CPlayerPedSaveStructure__SPedCompPropConvData
{
	uint                             hash;                            // offset:0x000	type:UINT.0
	uint                             data;                            // offset:0x004	type:UINT.0
};

struct CPlayerPedTargeting__Tunables : CTuning
{
	float                                fTargetableDistance;             // offset:0x010	type:FLOAT.0
	float                                fTargetThreatOverride;           // offset:0x014	type:FLOAT.0
	float                                UnarmedInCoverTargetingDistance; // offset:0x018	type:FLOAT.0
	float                                MeleeLostLOSBreakTime;           // offset:0x01C	type:FLOAT.0
	float                                ArrestHardLockDistance;          // offset:0x020	type:FLOAT.0
	float                                CoverDirectionOffsetForInCoverTarget; // offset:0x024	type:FLOAT.0
	uint                                 TimeToAllowCachedStickInputForMelee; // offset:0x028	type:UINT.0
	bool                                 DoAynchronousProbesWhenFindingFreeAimAssistTarget; // offset:0x02C	type:BOOL.0
	bool                                 AllowDriverLockOnToAmbientPeds;  // offset:0x02D	type:BOOL.0
	bool                                 AllowDriverLockOnToAmbientPedsInSP; // offset:0x02E	type:BOOL.0
	bool                                 DisplayAimAssistIntersections;   // offset:0x02F	type:BOOL.0
	bool                                 DisplayAimAssistTest;            // offset:0x030	type:BOOL.0
	bool                                 DisplayAimAssistCurves;          // offset:0x031	type:BOOL.0
	bool                                 DisplayLockOnDistRanges;         // offset:0x032	type:BOOL.0
	bool                                 DisplayLockOnAngularRanges;      // offset:0x033	type:BOOL.0
	bool                                 DisplaySoftLockDebug;            // offset:0x034	type:BOOL.0
	bool                                 DebugLockOnTargets;              // offset:0x035	type:BOOL.0
	bool                                 DisplayFreeAimTargetDebug;       // offset:0x036	type:BOOL.0
	bool                                 UseRagdollTargetIfNoAssistTarget; // offset:0x037	type:BOOL.0
	bool                                 UseReticuleSlowDownStrafeClamp;  // offset:0x038	type:BOOL.0
	struct CTargettingDifficultyInfo     EasyTargettingDifficultyInfo;    // offset:0x040	type:STRUCT.STRUCTURE
	struct CTargettingDifficultyInfo     NormalTargettingDifficultyInfo;  // offset:0x218	type:STRUCT.STRUCTURE
	struct CTargettingDifficultyInfo     HardTargettingDifficultyInfo;    // offset:0x3F0	type:STRUCT.STRUCTURE
	struct CTargettingDifficultyInfo     ExpertTargettingDifficultyInfo;  // offset:0x5C8	type:STRUCT.STRUCTURE
	struct CTargettingDifficultyInfo     FirstPersonEasyTargettingDifficultyInfo; // offset:0x7A0	type:STRUCT.STRUCTURE
	struct CTargettingDifficultyInfo     FirstPersonNormalTargettingDifficultyInfo; // offset:0x978	type:STRUCT.STRUCTURE
	struct CTargettingDifficultyInfo     FirstPersonHardTargettingDifficultyInfo; // offset:0xB50	type:STRUCT.STRUCTURE
	struct CTargettingDifficultyInfo     FirstPersonExpertTargettingDifficultyInfo; // offset:0xD28	type:STRUCT.STRUCTURE
};

struct CPlayerSpecialAbilityManager
{
	array<struct CSpecialAbilityData>     specialAbilities;                // offset:0x000	type:ARRAY.ATARRAY
	int                                   smallCharge;                     // offset:0x010	type:INT.0
	int                                   mediumCharge;                    // offset:0x014	type:INT.0
	int                                   largeCharge;                     // offset:0x018	type:INT.0
	int                                   continuousCharge;                // offset:0x01C	type:INT.0
	enum eFadeCurveType                   fadeCurveType;                   // offset:0x020	type:ENUM.32BIT
	float                                 halfSigmoidConstant;             // offset:0x024	type:FLOAT.0
	float                                 sigmoidConstant;                 // offset:0x028	type:FLOAT.0
	float                                 fadeInTime;                      // offset:0x02C	type:FLOAT.0
	float                                 fadeOutTime;                     // offset:0x030	type:FLOAT.0
};

struct CPlayerSwitchEstablishingShotMetadata
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	string                           OverriddenShotForFirstPersonOnFoot; // offset:0x00C	type:STRING.ATHASHVALUE
	vec3                             Position;                        // offset:0x010	type:VECTOR3.0
	vec3                             Orientation;                     // offset:0x020	type:VECTOR3.0
	vec3                             CatchUpPosition;                 // offset:0x030	type:VECTOR3.0
	vec3                             CatchUpOrientation;              // offset:0x040	type:VECTOR3.0
	float                            Fov;                             // offset:0x050	type:FLOAT.0
	float                            CatchUpFov;                      // offset:0x054	type:FLOAT.0
	float                            _0xB14688C8;                     // offset:0x058	type:FLOAT.0
	float                            _0x12102792;                     // offset:0x05C	type:FLOAT.0
	uint                             HoldDuration;                    // offset:0x060	type:UINT.0
	uint                             InterpolateOutDuration;          // offset:0x064	type:UINT.0
	bool                             _0xE5F1472D;                     // offset:0x068	type:BOOL.0
	bool                             ShouldIntepolateToCatchUp;       // offset:0x069	type:BOOL.0
	bool                             ShouldInhibitFirstPersonOnFoot;  // offset:0x06A	type:BOOL.0
};

struct CPlayerSwitchEstablishingShotMetadataStore
{
	array<struct CPlayerSwitchEstablishingShotMetadata>     ShotList;                        // offset:0x008	type:ARRAY.ATARRAY
};

struct CPlayerSwitchInterface
{
	array<struct _0xD84BED2A, 4>     switchSettings;                  // offset:0x220	type:ARRAY.MEMBER
};

struct CPoliceBoatDispatch__Tunables : CTuning
{
	float                            TimeBetweenSpawnAttempts;        // offset:0x010	type:FLOAT.0
};

struct CPopAllocation
{
	uchar                            _0x8B8457CE;                     // offset:0x000	type:UCHAR.0
	uchar                            _0x4FBE0445;                     // offset:0x001	type:UCHAR.0
	uchar                            _0xCD949F5E;                     // offset:0x002	type:UCHAR.0
	uchar                            _0x200E5190;                     // offset:0x003	type:UCHAR.0
	uchar                            _0x972C44C3;                     // offset:0x004	type:UCHAR.0
	uchar                            _0x192AC20C;                     // offset:0x005	type:UCHAR.0
	uchar                            _0xEB18C5C3;                     // offset:0x006	type:UCHAR.0
	uchar                            _0x0E445BD0;                     // offset:0x007	type:UCHAR.0
	uchar                            _0xC415DDE5;                     // offset:0x008	type:UCHAR.0
	uchar                            _0xF31E904C;                     // offset:0x009	type:UCHAR.0
	array<struct _0xFCB109FF>        _0x68BA7793;                     // offset:0x010	type:ARRAY.ATARRAY
	array<struct _0xFCB109FF>        _0xE509A044;                     // offset:0x020	type:ARRAY.ATARRAY
};

struct CPopGroupList
{
	array<struct CPopulationGroup>     pedGroups;                       // offset:0x000	type:ARRAY.ATARRAY
	array<struct CPopulationGroup>     vehGroups;                       // offset:0x010	type:ARRAY.ATARRAY
	array<string>                      wildlifeHabitats;                // offset:0x020	type:ARRAY.ATARRAY
};

struct CPopModelAndVariations
{
	string                             Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	struct CAmbientModelVariations     Variations;                      // offset:0x008	type:STRUCT.POINTER
};

struct CPopSchedule
{
	string                               Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CPopAllocation, 12>     popAllocation;                   // offset:0x008	type:ARRAY.MEMBER
};

struct CPopScheduleList
{
	array<struct CPopSchedule>       schedules;                       // offset:0x000	type:ARRAY.ATARRAY
};

struct CPopZoneData
{
	array<struct CPopZoneData__sZone>     zones;                           // offset:0x000	type:ARRAY.ATARRAY
};

struct CPopZoneData__sZone
{
	string                           zoneName;                        // offset:0x000	type:STRING.CONST_STRING
	string                           spName;                          // offset:0x008	type:STRING.ATHASHVALUE
	string                           mpName;                          // offset:0x00C	type:STRING.ATHASHVALUE
	string                           vfxRegion;                       // offset:0x010	type:STRING.ATHASHVALUE
	uchar                            _0x7111AC8A;                     // offset:0x014	type:UCHAR.0
	enum _0x68B21B94                 _0x6EAF264D;                     // offset:0x018	type:ENUM.32BIT
	enum _0xBEFF3185                 lawResponseTime;                 // offset:0x01C	type:ENUM.32BIT
	enum _0xFF842F1B                 lawResponseType;                 // offset:0x020	type:ENUM.32BIT
	enum _0xF4161D51                 specialZoneAttribute;            // offset:0x024	type:ENUM.32BIT
	float                            vehDirtMin;                      // offset:0x028	type:FLOAT.0
	float                            vehDirtMax;                      // offset:0x02C	type:FLOAT.0
	float                            vehDirtGrowScale;                // offset:0x030	type:FLOAT.0
	float                            pedDirtMin;                      // offset:0x034	type:FLOAT.0
	float                            pedDirtMax;                      // offset:0x038	type:FLOAT.0
	float                            popRangeScaleStart;              // offset:0x03C	type:FLOAT.0
	float                            popRangeScaleEnd;                // offset:0x040	type:FLOAT.0
	float                            popRangeMultiplier;              // offset:0x044	type:FLOAT.0
	float                            popBaseRangeScale;               // offset:0x048	type:FLOAT.0
	int                              _0x3CBB62E0;                     // offset:0x04C	type:INT.0
	uchar                            dirtRed;                         // offset:0x050	type:UCHAR.0
	uchar                            dirtGreen;                       // offset:0x051	type:UCHAR.0
	uchar                            dirtBlue;                        // offset:0x052	type:UCHAR.0
	bool                             _0x008ED931;                     // offset:0x053	type:BOOL.0
	bool                             _0xAEBEFEED;                     // offset:0x054	type:BOOL.0
};

struct CPopulationConfig
{
	int                              ScenarioPedsMultiplier_Base;     // offset:0x000	type:INT.0
	int                              ScenarioPedsMultiplier;          // offset:0x004	type:INT.0
	int                              AmbientPedsMultiplier_Base;      // offset:0x008	type:INT.0
	int                              AmbientPedsMultiplier;           // offset:0x00C	type:INT.0
	int                              MaxTotalPeds_Base;               // offset:0x010	type:INT.0
	int                              MaxTotalPeds;                    // offset:0x014	type:INT.0
	int                              PedMemoryMultiplier;             // offset:0x018	type:INT.0
	int                              PedsForVehicles_Base;            // offset:0x01C	type:INT.0
	int                              PedsForVehicles;                 // offset:0x020	type:INT.0
	int                              VehicleTimesliceMaxUpdatesPerFrame_Base; // offset:0x024	type:INT.0
	int                              VehicleTimesliceMaxUpdatesPerFrame; // offset:0x028	type:INT.0
	int                              VehicleAmbientDensityMultiplier_Base; // offset:0x02C	type:INT.0
	int                              VehicleAmbientDensityMultiplier; // offset:0x030	type:INT.0
	int                              VehicleMemoryMultiplier;         // offset:0x034	type:INT.0
	int                              VehicleParkedDensityMultiplier_Base; // offset:0x038	type:INT.0
	int                              VehicleParkedDensityMultiplier;  // offset:0x03C	type:INT.0
	int                              VehicleLowPrioParkedDensityMultiplier_Base; // offset:0x040	type:INT.0
	int                              VehicleLowPrioParkedDensityMultiplier; // offset:0x044	type:INT.0
	int                              VehicleUpperLimit_Base;          // offset:0x048	type:INT.0
	int                              VehicleUpperLimit;               // offset:0x04C	type:INT.0
	int                              VehicleUpperLimitMP;             // offset:0x050	type:INT.0
	int                              VehicleParkedUpperLimit_Base;    // offset:0x054	type:INT.0
	int                              VehicleParkedUpperLimit;         // offset:0x058	type:INT.0
	int                              VehicleKeyholeShapeInnerThickness_Base; // offset:0x05C	type:INT.0
	int                              VehicleKeyholeShapeInnerThickness; // offset:0x060	type:INT.0
	int                              VehicleKeyholeShapeOuterThickness_Base; // offset:0x064	type:INT.0
	int                              VehicleKeyholeShapeOuterThickness; // offset:0x068	type:INT.0
	int                              VehicleKeyholeShapeInnerRadius_Base; // offset:0x06C	type:INT.0
	int                              VehicleKeyholeShapeInnerRadius;  // offset:0x070	type:INT.0
	int                              VehicleKeyholeShapeOuterRadius_Base; // offset:0x074	type:INT.0
	int                              VehicleKeyholeShapeOuterRadius;  // offset:0x078	type:INT.0
	int                              VehicleKeyholeSideWallThickness_Base; // offset:0x07C	type:INT.0
	int                              VehicleKeyholeSideWallThickness; // offset:0x080	type:INT.0
	int                              VehicleMaxCreationDistance_Base; // offset:0x084	type:INT.0
	int                              VehicleMaxCreationDistance;      // offset:0x088	type:INT.0
	int                              VehicleMaxCreationDistanceOffscreen_Base; // offset:0x08C	type:INT.0
	int                              VehicleMaxCreationDistanceOffscreen; // offset:0x090	type:INT.0
	int                              VehicleCullRange_Base;           // offset:0x094	type:INT.0
	int                              VehicleCullRange;                // offset:0x098	type:INT.0
	int                              VehicleCullRangeOnScreenScale_Base; // offset:0x09C	type:INT.0
	int                              VehicleCullRangeOnScreenScale;   // offset:0x0A0	type:INT.0
	int                              VehicleCullRangeOffScreen_Base;  // offset:0x0A4	type:INT.0
	int                              VehicleCullRangeOffScreen;       // offset:0x0A8	type:INT.0
	int                              DensityBasedRemovalRateScale_Base; // offset:0x0AC	type:INT.0
	int                              DensityBasedRemovalRateScale;    // offset:0x0B0	type:INT.0
	int                              DensityBasedRemovalTargetHeadroom_Base; // offset:0x0B4	type:INT.0
	int                              DensityBasedRemovalTargetHeadroom; // offset:0x0B8	type:INT.0
	array<int, 16>                   VehicleSpacing_Base;             // offset:0x0BC	type:ARRAY.MEMBER
	array<int, 16>                   VehicleSpacing;                  // offset:0x0FC	type:ARRAY.MEMBER
	int                              PlayersRoadScanDistance_Base;    // offset:0x13C	type:INT.0
	int                              PlayersRoadScanDistance;         // offset:0x140	type:INT.0
	array<int, 16>                   PlayerRoadDensityInc_Base;       // offset:0x144	type:ARRAY.MEMBER
	array<int, 16>                   PlayerRoadDensityInc;            // offset:0x184	type:ARRAY.MEMBER
	array<int, 16>                   NonPlayerRoadDensityDec_Base;    // offset:0x1C4	type:ARRAY.MEMBER
	array<int, 16>                   NonPlayerRoadDensityDec;         // offset:0x204	type:ARRAY.MEMBER
	int                              VehiclePopulationFrameRate_Base; // offset:0x244	type:INT.0
	int                              VehiclePopulationFrameRate;      // offset:0x248	type:INT.0
	int                              VehiclePopulationCyclesPerFrame_Base; // offset:0x24C	type:INT.0
	int                              VehiclePopulationCyclesPerFrame; // offset:0x250	type:INT.0
	int                              VehiclePopulationFrameRateMP_Base; // offset:0x254	type:INT.0
	int                              VehiclePopulationFrameRateMP;    // offset:0x258	type:INT.0
	int                              VehiclePopulationCyclesPerFrameMP_Base; // offset:0x25C	type:INT.0
	int                              VehiclePopulationCyclesPerFrameMP; // offset:0x260	type:INT.0
	int                              PedPopulationFrameRate_Base;     // offset:0x264	type:INT.0
	int                              PedPopulationFrameRate;          // offset:0x268	type:INT.0
	int                              PedPopulationCyclesPerFrame_Base; // offset:0x26C	type:INT.0
	int                              PedPopulationCyclesPerFrame;     // offset:0x270	type:INT.0
	int                              PedPopulationFrameRateMP_Base;   // offset:0x274	type:INT.0
	int                              PedPopulationFrameRateMP;        // offset:0x278	type:INT.0
	int                              PedPopulationCyclesPerFrameMP_Base; // offset:0x27C	type:INT.0
	int                              PedPopulationCyclesPerFrameMP;   // offset:0x280	type:INT.0
};

struct CPopulationGroup
{
	string                                   Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CPopModelAndVariations>     models;                          // offset:0x008	type:ARRAY.ATARRAY
	bitset<enum ePopGroupFlags>              flags;                           // offset:0x018	type:BITSET.32BIT
};

struct CPosixTimeStampForMultiplayerSaves
{
	uint                             PosixHigh;                       // offset:0x008	type:UINT.0
	uint                             PosixLow;                        // offset:0x00C	type:UINT.0
};

struct CPrioritizedClipSetRequestManager__Tunables : CTuning
{
	bool                             RenderDebugDraw;                 // offset:0x010	type:BOOL.0
	vec2                             vScroll;                         // offset:0x014	type:VECTOR2.0
	float                            fIndent;                         // offset:0x01C	type:FLOAT.0
	int                              MaxNumRequestsPerContext;        // offset:0x020	type:INT.0
};

struct CProcObjInfo
{
	string                           Tag;                             // offset:0x000	type:STRING.ATHASHVALUE
	string                           PlantTag;                        // offset:0x004	type:STRING.ATHASHVALUE
	string                           ModelName;                       // offset:0x008	type:STRING.ATHASHVALUE
	float16                          Spacing;                         // offset:0x010	type:FLOAT16.0
	float16                          MinXRotation;                    // offset:0x012	type:FLOAT16.0
	float16                          MaxXRotation;                    // offset:0x014	type:FLOAT16.0
	float16                          MinYRotation;                    // offset:0x016	type:FLOAT16.0
	float16                          MaxYRotation;                    // offset:0x018	type:FLOAT16.0
	float16                          MinZRotation;                    // offset:0x01A	type:FLOAT16.0
	float16                          MaxZRotation;                    // offset:0x01C	type:FLOAT16.0
	float16                          MinScale;                        // offset:0x01E	type:FLOAT16.0
	float16                          MaxScale;                        // offset:0x020	type:FLOAT16.0
	float16                          MinScaleZ;                       // offset:0x022	type:FLOAT16.0
	float16                          MaxScaleZ;                       // offset:0x024	type:FLOAT16.0
	float16                          MinZOffset;                      // offset:0x026	type:FLOAT16.0
	float16                          MaxZOffset;                      // offset:0x028	type:FLOAT16.0
	float16                          MinDistance;                     // offset:0x02A	type:FLOAT16.0
	float16                          MaxDistance;                     // offset:0x02C	type:FLOAT16.0
	uchar                            MinTintPalette;                  // offset:0x02E	type:UCHAR.0
	uchar                            MaxTintPalette;                  // offset:0x02F	type:UCHAR.0
	bitset<enum _0x38FFB219>         Flags;                           // offset:0x030	type:BITSET.8BIT
};

struct CProceduralInfo
{
	array<struct CProcObjInfo>           procObjInfos;                    // offset:0x008	type:ARRAY.ATARRAY
	array<struct CPlantInfo>             plantInfos;                      // offset:0x018	type:ARRAY.ATARRAY
	array<struct ProcTagLookup, 255>     procTagTable;                    // offset:0x02C	type:ARRAY.MEMBER
};

struct CPropertyData
{
	int                              valueNumber;                     // offset:0x000	type:INT.0
	string                           valueHash;                       // offset:0x004	type:STRING.ATHASHVALUE
	string                           valueString;                     // offset:0x008	type:STRING.ATSTRING
	string                           textId;                          // offset:0x018	type:STRING.ATHASHVALUE
};

struct CPropertyItem
{
	string                           propertyId;                      // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CPropertyData>      data;                            // offset:0x008	type:ARRAY.ATARRAY
};

struct CPtFxAssetDependencyInfo
{
	string                           parentName;                      // offset:0x000	type:STRING.ATHASHVALUE
	string                           childName;                       // offset:0x004	type:STRING.ATHASHVALUE
};

struct CPtFxAssetInfoMgr
{
	array<struct CPtFxAssetDependencyInfo>     ptfxAssetDependencyInfos;        // offset:0x000	type:ARRAY.ATARRAY
};

struct CQuadrupedCapsuleInfo : CBaseCapsuleInfo
{
	float                            Radius;                          // offset:0x040	type:FLOAT.0
	float                            Length;                          // offset:0x044	type:FLOAT.0
	float                            ZOffset;                         // offset:0x048	type:FLOAT.0
	float                            YOffset;                         // offset:0x04C	type:FLOAT.0
	float                            ProbeDepthFromRoot;              // offset:0x054	type:FLOAT.0
	float                            BlockerRadius;                   // offset:0x058	type:FLOAT.0
	float                            BlockerLength;                   // offset:0x05C	type:FLOAT.0
	float                            BlockerYOffset;                  // offset:0x060	type:FLOAT.0
	float                            BlockerZOffset;                  // offset:0x064	type:FLOAT.0
	float                            BlockerXRotation;                // offset:0x068	type:FLOAT.0
	float                            PropBlockerY;                    // offset:0x06C	type:FLOAT.0
	float                            PropBlockerZ;                    // offset:0x070	type:FLOAT.0
	float                            PropBlockerRadius;               // offset:0x074	type:FLOAT.0
	float                            PropBlockerLength;               // offset:0x078	type:FLOAT.0
	float                            NeckBoundRadius;                 // offset:0x07C	type:FLOAT.0
	float                            NeckBoundLength;                 // offset:0x080	type:FLOAT.0
	float                            NeckBoundRotation;               // offset:0x084	type:FLOAT.0
	float                            NeckBoundHeightOffset;           // offset:0x088	type:FLOAT.0
	float                            NeckBoundFwdOffset;              // offset:0x08C	type:FLOAT.0
	bool                             PropBlocker;                     // offset:0x090	type:BOOL.0
	bool                             Blocker;                         // offset:0x091	type:BOOL.0
	bool                             NeckBound;                       // offset:0x092	type:BOOL.0
	bool                             UseHorseMapCollision;            // offset:0x093	type:BOOL.0
	char                             PropBlockerSlot;                 // offset:0x094	type:CHAR.0
	char                             BlockerSlot;                     // offset:0x095	type:CHAR.0
	char                             NeckBoundSlot;                   // offset:0x096	type:CHAR.0
};

struct CRadioStationSaveStructure
{
	uchar                                                             NewsReportHistoryWriteIndex;     // offset:0x000	type:UCHAR.0
	array<uint>                                                       NewsReportHistorySpace;          // offset:0x008	type:ARRAY.ATARRAY
	uchar                                                             WeatherReportHistoryWriteIndex;  // offset:0x018	type:UCHAR.0
	array<uint>                                                       WeatherReportHistorySpace;       // offset:0x020	type:ARRAY.ATARRAY
	uchar                                                             GenericAdvertHistoryWriteIndex;  // offset:0x030	type:UCHAR.0
	array<uint>                                                       GenericAdvertHistorySpace;       // offset:0x038	type:ARRAY.ATARRAY
	array<uchar>                                                      NewsStoryState;                  // offset:0x048	type:ARRAY.ATARRAY
	array<struct CRadioStationSaveStructure__CRadioStationStruct>     RadioStation;                    // offset:0x058	type:ARRAY.ATARRAY
};

struct CRadioStationSaveStructure__CRadioStationStruct
{
	float                            ListenTimer;                     // offset:0x000	type:FLOAT.0
	string                           RadioStationName;                // offset:0x004	type:STRING.MEMBER
	uchar                            IdentsHistoryWriteIndex;         // offset:0x103	type:UCHAR.0
	array<uint>                      IdentsHistorySpace;              // offset:0x108	type:ARRAY.ATARRAY
	uchar                            MusicHistoryWriteIndex;          // offset:0x118	type:UCHAR.0
	array<uint>                      MusicHistorySpace;               // offset:0x120	type:ARRAY.ATARRAY
	uchar                            DjSoloHistoryWriteIndex;         // offset:0x130	type:UCHAR.0
	array<uint>                      DjSoloHistorySpace;              // offset:0x138	type:ARRAY.ATARRAY
	uchar                            DjSpeechHistoryWriteIndex;       // offset:0x148	type:UCHAR.0
	array<uint>                      DjSpeechHistory;                 // offset:0x150	type:ARRAY.ATARRAY
};

struct CRandomEventManager__RandomEventData
{
	string                           RandomEventName;                 // offset:0x000	type:STRING.ATHASHVALUE
	enum eRandomEventType            RandomEventType;                 // offset:0x004	type:ENUM.32BIT
};

struct CRandomEventManager__RandomEventType
{
	string                           RandomEventTypeName;             // offset:0x000	type:STRING.ATHASHVALUE
	float                            RandomEventTimeIntervalMin;      // offset:0x008	type:FLOAT.0
	float                            RandomEventTimeIntervalMax;      // offset:0x00C	type:FLOAT.0
	float                            DeltaScaleWhenPlayerStationary;  // offset:0x010	type:FLOAT.0
};

struct CRandomEventManager__Tunables : CTuning
{
	bool                                                   RenderDebug;                     // offset:0x010	type:BOOL.0
	bool                                                   Enabled;                         // offset:0x011	type:BOOL.0
	bool                                                   ForceCrime;                      // offset:0x012	type:BOOL.0
	float                                                  EventInterval;                   // offset:0x014	type:FLOAT.0
	float                                                  EventInitInterval;               // offset:0x018	type:FLOAT.0
	bool                                                   SpawningChasesEnabled;           // offset:0x01C	type:BOOL.0
	int                                                    MaxNumberCopVehiclesInChase;     // offset:0x020	type:INT.0
	int                                                    ProbSpawnHeli;                   // offset:0x024	type:INT.0
	int                                                    MaxAmbientVehiclesToSpawnChase;  // offset:0x028	type:INT.0
	int                                                    MinPlayerMoveDistanceToSpawnChase; // offset:0x02C	type:INT.0
	string                                                 HeliVehicleModelId;              // offset:0x030	type:STRING.ATHASHVALUE
	string                                                 HeliPedModelId;                  // offset:0x034	type:STRING.ATHASHVALUE
	array<struct CRandomEventManager__RandomEventType>     RandomEventType;                 // offset:0x038	type:ARRAY.ATARRAY
	array<struct CRandomEventManager__RandomEventData>     RandomEventData;                 // offset:0x048	type:ARRAY.ATARRAY
};

struct CRelationshipManager__Tunables : CTuning
{
	bool                             DisplayRemovedGroups;            // offset:0x010	type:BOOL.0
};

struct CRelativeRange
{
	vec2                             GroundHeightRange;               // offset:0x000	type:VECTOR2.0
	vec2                             DistanceRange;                   // offset:0x008	type:VECTOR2.0
	vec2                             PlanarAngularRange;              // offset:0x010	type:VECTOR2.0
	float                            HeightDifference;                // offset:0x018	type:FLOAT.0
	bitset<enum _0xF393B0AB>         RelativeRangeAttrs;              // offset:0x01C	type:BITSET.32BIT
};

struct CReplayPostFxData
{
	string                           name;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                           uiName;                          // offset:0x004	type:STRING.ATHASHVALUE
};

struct CReplayPostFxRegistry
{
	array<struct CReplayPostFxData>     fxData;                          // offset:0x000	type:ARRAY.ATARRAY
};

struct CReportArray
{
	array<struct CReportList>        ReportLists;                     // offset:0x000	type:ARRAY.ATARRAY
};

struct CReportList
{
	enum eReportLink                 ReportLinkId;                    // offset:0x000	type:ENUM.32BIT
	string                           SubtitleHash;                    // offset:0x004	type:STRING.ATHASHVALUE
	array<struct CReportOption>      ReportOptions;                   // offset:0x008	type:ARRAY.ATARRAY
};

struct CReportOption
{
	string                           LabelHash;                       // offset:0x000	type:STRING.ATHASHVALUE
	enum eReportLink                 ReportLink;                      // offset:0x004	type:ENUM.32BIT
	enum eReportType                 ReportType;                      // offset:0x008	type:ENUM.32BIT
};

struct CRiots__Tunables : CTuning
{
};

struct CRsRef
{
	string                           Name;                            // offset:0x008	type:STRING.ATSTRING
	vec3                             Translation;                     // offset:0x020	type:VECTOR3.0
	vec3                             Rotation;                        // offset:0x030	type:VECTOR3.0
	struct CShopData                 ShopData;                        // offset:0x040	type:STRUCT.STRUCTURE
	array<struct CLayoutNode>        LayoutNodeList;                  // offset:0x070	type:ARRAY.ATARRAY
};

struct CSaveDoors
{
	array<struct CSaveDoors__DoorState>     savedDoorStates;                 // offset:0x000	type:ARRAY.ATARRAY
};

struct CSaveDoors__DoorState
{
	vec3                             postion;                         // offset:0x000	type:VECTOR3.0
	int                              doorEnumHash;                    // offset:0x010	type:INT.0
	int                              modelInfoHash;                   // offset:0x014	type:INT.0
	int                              doorState;                       // offset:0x018	type:INT.0
};

struct CSaveGameMigrationMetadata
{
	string                           LastCompletedMissionLocalizedText; // offset:0x000	type:STRING.ATSTRING
	float                            fCompletionPercentage;           // offset:0x010	type:FLOAT.0
	uint                             SavePosixTime;                   // offset:0x014	type:UINT.0
	uint                             HashOfTextKeyOfLastCompletedMission; // offset:0x018	type:UINT.0
	uint                             CompressedSize;                  // offset:0x01C	type:UINT.0
	uint                             UncompressedSize;                // offset:0x020	type:UINT.0
};

struct CSaveGarage_Migration
{
	uint                             NameHash;                        // offset:0x000	type:UINT.0
	uchar                            Type;                            // offset:0x004	type:UCHAR.0
	bool                             bLeaveCameraAlone;               // offset:0x005	type:BOOL.0
	bool                             bSavingVehilclesEnabled;         // offset:0x006	type:BOOL.0
};

struct CSaveGarages
{
	bool                                                      RespraysAreFree;                 // offset:0x000	type:BOOL.0
	bool                                                      NoResprays;                      // offset:0x001	type:BOOL.0
	array<struct CSaveGarages__CSavedVehiclesInSafeHouse>     SafeHouses;                      // offset:0x008	type:ARRAY.ATARRAY
	array<struct CSaveGarages__CSaveGarage>                   SavedGarages;                    // offset:0x018	type:ARRAY.ATARRAY
};

struct CSaveGarages_Migration
{
	bool                                                  RespraysAreFree;                 // offset:0x000	type:BOOL.0
	bool                                                  NoResprays;                      // offset:0x001	type:BOOL.0
	array<struct CSavedVehiclesInSafeHouse_Migration>     SafeHouses;                      // offset:0x008	type:ARRAY.ATARRAY
	array<struct CSaveGarage_Migration>                   SavedGarages;                    // offset:0x018	type:ARRAY.ATARRAY
};

struct CSaveGarages__CSaveGarage
{
	uint                             NameHash;                        // offset:0x000	type:UINT.0
	uchar                            Type;                            // offset:0x004	type:UCHAR.0
	bool                             bLeaveCameraAlone;               // offset:0x005	type:BOOL.0
	bool                             bSavingVehilclesEnabled;         // offset:0x006	type:BOOL.0
};

struct CSaveGarages__CSavedVehicle
{
	struct CSaveGarages__CSavedVehicleVariationInstance     variation;                       // offset:0x000	type:STRUCT.STRUCTURE
	float                                                   CoorX;                           // offset:0x030	type:FLOAT.0
	float                                                   CoorY;                           // offset:0x034	type:FLOAT.0
	float                                                   CoorZ;                           // offset:0x038	type:FLOAT.0
	uint                                                    FlagsLocal;                      // offset:0x03C	type:UINT.0
	uint                                                    ModelHashKey;                    // offset:0x040	type:UINT.0
	uint                                                    nDisableExtras;                  // offset:0x044	type:UINT.0
	int                                                     LiveryId;                        // offset:0x048	type:INT.0
	int                                                     Livery2Id;                       // offset:0x04C	type:INT.0
	short                                                   HornSoundIndex;                  // offset:0x050	type:SHORT.0
	short                                                   AudioEngineHealth;               // offset:0x052	type:SHORT.0
	short                                                   AudioBodyHealth;                 // offset:0x054	type:SHORT.0
	char                                                    iFrontX;                         // offset:0x056	type:CHAR.0
	char                                                    iFrontY;                         // offset:0x057	type:CHAR.0
	char                                                    iFrontZ;                         // offset:0x058	type:CHAR.0
	bool                                                    bUsed;                           // offset:0x059	type:BOOL.0
	bool                                                    bInInterior;                     // offset:0x05A	type:BOOL.0
	bool                                                    bNotDamagedByBullets;            // offset:0x05B	type:BOOL.0
	bool                                                    bNotDamagedByFlames;             // offset:0x05C	type:BOOL.0
	bool                                                    bIgnoresExplosions;              // offset:0x05D	type:BOOL.0
	bool                                                    bNotDamagedByCollisions;         // offset:0x05E	type:BOOL.0
	bool                                                    bNotDamagedByMelee;              // offset:0x05F	type:BOOL.0
	bool                                                    bTyresDontBurst;                 // offset:0x060	type:BOOL.0
	char                                                    LicensePlateTexIndex;            // offset:0x061	type:CHAR.0
	array<uchar, 8>                                         LicencePlateText;                // offset:0x062	type:ARRAY.MEMBER
};

struct CSaveGarages__CSavedVehicleVariationInstance
{
	map<string, uchar>               mods;                            // offset:0x000	type:MAP.ATBINARYMAP
	array<bool, 2>                   modVariation;                    // offset:0x018	type:ARRAY.MEMBER
	uchar                            kitIdx;                          // offset:0x01A	type:UCHAR.0
	uchar                            color1;                          // offset:0x01B	type:UCHAR.0
	uchar                            color2;                          // offset:0x01C	type:UCHAR.0
	uchar                            color3;                          // offset:0x01D	type:UCHAR.0
	uchar                            color4;                          // offset:0x01E	type:UCHAR.0
	uchar                            color5;                          // offset:0x01F	type:UCHAR.0
	uchar                            color6;                          // offset:0x020	type:UCHAR.0
	uchar                            smokeColR;                       // offset:0x021	type:UCHAR.0
	uchar                            smokeColG;                       // offset:0x022	type:UCHAR.0
	uchar                            smokeColB;                       // offset:0x023	type:UCHAR.0
	uchar                            neonColR;                        // offset:0x024	type:UCHAR.0
	uchar                            neonColG;                        // offset:0x025	type:UCHAR.0
	uchar                            neonColB;                        // offset:0x026	type:UCHAR.0
	uchar                            neonFlags;                       // offset:0x027	type:UCHAR.0
	uchar                            windowTint;                      // offset:0x028	type:UCHAR.0
	uchar                            wheelType;                       // offset:0x029	type:UCHAR.0
	ushort                           kitID_U16;                       // offset:0x02A	type:USHORT.0
};

struct CSaveGarages__CSavedVehiclesInSafeHouse
{
	uint                                          NameHashOfGarage;                // offset:0x000	type:UINT.0
	array<struct CSaveGarages__CSavedVehicle>     VehiclesSavedInThisSafeHouse;    // offset:0x008	type:ARRAY.ATARRAY
};

struct CSavedVehicleVariationInstance_Migration
{
	map<uint, uchar>                 mods;                            // offset:0x000	type:MAP.ATBINARYMAP
	array<bool, 2>                   modVariation;                    // offset:0x018	type:ARRAY.MEMBER
	uchar                            kitIdx;                          // offset:0x01A	type:UCHAR.0
	uchar                            color1;                          // offset:0x01B	type:UCHAR.0
	uchar                            color2;                          // offset:0x01C	type:UCHAR.0
	uchar                            color3;                          // offset:0x01D	type:UCHAR.0
	uchar                            color4;                          // offset:0x01E	type:UCHAR.0
	uchar                            color5;                          // offset:0x01F	type:UCHAR.0
	uchar                            color6;                          // offset:0x020	type:UCHAR.0
	uchar                            smokeColR;                       // offset:0x021	type:UCHAR.0
	uchar                            smokeColG;                       // offset:0x022	type:UCHAR.0
	uchar                            smokeColB;                       // offset:0x023	type:UCHAR.0
	uchar                            neonColR;                        // offset:0x024	type:UCHAR.0
	uchar                            neonColG;                        // offset:0x025	type:UCHAR.0
	uchar                            neonColB;                        // offset:0x026	type:UCHAR.0
	uchar                            neonFlags;                       // offset:0x027	type:UCHAR.0
	uchar                            windowTint;                      // offset:0x028	type:UCHAR.0
	uchar                            wheelType;                       // offset:0x029	type:UCHAR.0
	ushort                           kitID_U16;                       // offset:0x02A	type:USHORT.0
};

struct CSavedVehicle_Migration
{
	struct CSavedVehicleVariationInstance_Migration     variation;                       // offset:0x000	type:STRUCT.STRUCTURE
	float                                               CoorX;                           // offset:0x030	type:FLOAT.0
	float                                               CoorY;                           // offset:0x034	type:FLOAT.0
	float                                               CoorZ;                           // offset:0x038	type:FLOAT.0
	uint                                                FlagsLocal;                      // offset:0x03C	type:UINT.0
	uint                                                ModelHashKey;                    // offset:0x040	type:UINT.0
	uint                                                nDisableExtras;                  // offset:0x044	type:UINT.0
	int                                                 LiveryId;                        // offset:0x048	type:INT.0
	int                                                 Livery2Id;                       // offset:0x04C	type:INT.0
	short                                               HornSoundIndex;                  // offset:0x050	type:SHORT.0
	short                                               AudioEngineHealth;               // offset:0x052	type:SHORT.0
	short                                               AudioBodyHealth;                 // offset:0x054	type:SHORT.0
	char                                                iFrontX;                         // offset:0x056	type:CHAR.0
	char                                                iFrontY;                         // offset:0x057	type:CHAR.0
	char                                                iFrontZ;                         // offset:0x058	type:CHAR.0
	bool                                                bUsed;                           // offset:0x059	type:BOOL.0
	bool                                                bInInterior;                     // offset:0x05A	type:BOOL.0
	bool                                                bNotDamagedByBullets;            // offset:0x05B	type:BOOL.0
	bool                                                bNotDamagedByFlames;             // offset:0x05C	type:BOOL.0
	bool                                                bIgnoresExplosions;              // offset:0x05D	type:BOOL.0
	bool                                                bNotDamagedByCollisions;         // offset:0x05E	type:BOOL.0
	bool                                                bNotDamagedByMelee;              // offset:0x05F	type:BOOL.0
	bool                                                bTyresDontBurst;                 // offset:0x060	type:BOOL.0
	char                                                LicensePlateTexIndex;            // offset:0x061	type:CHAR.0
	array<uchar, 8>                                     LicencePlateText;                // offset:0x062	type:ARRAY.MEMBER
};

struct CSavedVehiclesInSafeHouse_Migration
{
	uint                                      NameHashOfGarage;                // offset:0x000	type:UINT.0
	array<struct CSavedVehicle_Migration>     VehiclesSavedInThisSafeHouse;    // offset:0x008	type:ARRAY.ATARRAY
};

struct CScenarioAction
{
};

struct CScenarioActionCombatExit : CScenarioAction
{
};

struct CScenarioActionCondition
{
};

struct CScenarioActionConditionCanDoQuickBlendout : CScenarioActionCondition
{
};

struct CScenarioActionConditionCloseOrRecent : CScenarioActionCondition
{
	float                            Range;                           // offset:0x008	type:FLOAT.0
};

struct CScenarioActionConditionCurrentlyRespondingToOtherEvent : CScenarioActionCondition
{
};

struct CScenarioActionConditionEvent : CScenarioActionCondition
{
	enum eEventType                  EventType;                       // offset:0x008	type:ENUM.32BIT
};

struct CScenarioActionConditionForceAction : CScenarioActionCondition
{
	enum eScenarioActionType         ScenarioActionType;              // offset:0x008	type:ENUM.32BIT
};

struct CScenarioActionConditionHasCowardReact : CScenarioActionCondition
{
};

struct CScenarioActionConditionHasShockingReact : CScenarioActionCondition
{
};

struct CScenarioActionConditionInRange : CScenarioActionCondition
{
	float                            Range;                           // offset:0x008	type:FLOAT.0
};

struct CScenarioActionConditionIsACopPed : CScenarioActionCondition
{
};

struct CScenarioActionConditionIsAGangPed : CScenarioActionCondition
{
};

struct CScenarioActionConditionIsASecurityPed : CScenarioActionCondition
{
};

struct CScenarioActionConditionNot : CScenarioActionCondition
{
	struct CScenarioActionCondition     Condition;                       // offset:0x008	type:STRUCT.POINTER
};

struct CScenarioActionConditionResponseTask : CScenarioActionCondition
{
	string                           TaskType;                        // offset:0x008	type:STRING.ATHASHVALUE
};

struct CScenarioActionConditionResponseType : CScenarioActionCondition
{
	string                           ResponseHash;                    // offset:0x008	type:STRING.ATHASHVALUE
};

struct CScenarioActionCowardExitThenRespondToEvent : CScenarioAction
{
};

struct CScenarioActionFlee : CScenarioAction
{
};

struct CScenarioActionHeadTrack : CScenarioAction
{
};

struct CScenarioActionImmediateExit : CScenarioAction
{
};

struct CScenarioActionNormalExit : CScenarioAction
{
};

struct CScenarioActionNormalExitThenRespondToEvent : CScenarioAction
{
};

struct CScenarioActionScriptExit : CScenarioAction
{
};

struct CScenarioActionShockReaction : CScenarioAction
{
};

struct CScenarioActionThreatResponseExit : CScenarioAction
{
};

struct CScenarioActionTrigger
{
	array<struct CScenarioActionCondition>     Conditions;                      // offset:0x000	type:ARRAY.ATARRAY
	struct CScenarioAction                     Action;                          // offset:0x010	type:STRUCT.POINTER
	float                                      Probability;                     // offset:0x018	type:FLOAT.0
};

struct CScenarioActionTriggers
{
	array<struct CScenarioActionTrigger>     Triggers;                        // offset:0x000	type:ARRAY.ATARRAY
};

struct CScenarioChain
{
	uchar                            _0x44F1B77A;                     // offset:0x000	type:UCHAR.0
	array<ushort>                    EdgeIds;                         // offset:0x008	type:ARRAY.ATARRAY
};

struct CScenarioChainingEdge
{
	ushort                                    NodeIndexFrom;                   // offset:0x000	type:USHORT.0
	ushort                                    NodeIndexTo;                     // offset:0x002	type:USHORT.0
	enum CScenarioChainingEdge__eAction       Action;                          // offset:0x004	type:ENUM.8BIT
	enum CScenarioChainingEdge__eNavMode      NavMode;                         // offset:0x005	type:ENUM.8BIT
	enum CScenarioChainingEdge__eNavSpeed     NavSpeed;                        // offset:0x006	type:ENUM.8BIT
};

struct CScenarioChainingGraph
{
	array<struct CScenarioChainingNode>     Nodes;                           // offset:0x000	type:ARRAY.ATARRAY
	array<struct CScenarioChainingEdge>     Edges;                           // offset:0x010	type:ARRAY.ATARRAY
	array<struct CScenarioChain>            Chains;                          // offset:0x020	type:ARRAY.ATARRAY
};

struct CScenarioChainingNode
{
	vec3V                            Position;                        // offset:0x000	type:VEC3V.0
	string                           _0x9B1D60AB;                     // offset:0x010	type:STRING.ATHASHVALUE
	string                           ScenarioType;                    // offset:0x014	type:STRING.ATHASHVALUE
	bool                             _0x1844403F;                     // offset:0x018	type:BOOL.0
	bool                             _0x4E017C07;                     // offset:0x019	type:BOOL.0
};

struct CScenarioClipHelper__Tunables : CTuning
{
};

struct CScenarioCondition
{
	enum CScenarioCondition__Result     Result;                          // offset:0x008	type:ENUM.32BIT
};

struct CScenarioConditionAffluence : CScenarioConditionPopulation
{
	enum Affluence                   Affluence;                       // offset:0x010	type:ENUM.32BIT
};

struct CScenarioConditionAlert : CScenarioCondition
{
};

struct CScenarioConditionAmbientEventDirection : CScenarioCondition
{
	vec3                             Direction;                       // offset:0x010	type:VECTOR3.0
	float                            Threshold;                       // offset:0x020	type:FLOAT.0
	bool                             FlattenZ;                        // offset:0x024	type:BOOL.0
};

struct CScenarioConditionAmbientEventTypeCheck : CScenarioCondition
{
	enum AmbientEventType            Type;                            // offset:0x010	type:ENUM.32BIT
};

struct CScenarioConditionArePedConfigFlagsSet : CScenarioCondition
{
	bitset<enum ePedConfigFlags>     ConfigFlags;                     // offset:0x010	type:BITSET.32BIT
};

struct CScenarioConditionArePedConfigFlagsSetOnOtherPed : CScenarioCondition
{
	bitset<enum ePedConfigFlags>     ConfigFlags;                     // offset:0x010	type:BITSET.32BIT
};

struct CScenarioConditionAttachedToPropOfType : CScenarioCondition
{
	struct void                      PropModelSet;                    // offset:0x010	type:STRUCT.EXTERNAL_NAMED
};

struct CScenarioConditionBraveryFlagSet : CScenarioCondition
{
	enum eBraveryFlags               Flag;                            // offset:0x010	type:ENUM.32BIT
};

struct CScenarioConditionCanPlayInCarIdle : CScenarioCondition
{
};

struct CScenarioConditionCanStartNewPhoneConversation : CScenarioCondition
{
};

struct CScenarioConditionCrouched : CScenarioCondition
{
};

struct CScenarioConditionDistanceToPlayer : CScenarioCondition
{
	float                            Range;                           // offset:0x010	type:FLOAT.0
	enum _0x0B95AB21                 Comparison;                      // offset:0x014	type:ENUM.32BIT
};

struct CScenarioConditionEquippedWeapon : CScenarioCondition
{
	string                           Weapon;                          // offset:0x010	type:STRING.ATHASHVALUE
};

struct CScenarioConditionFullyInIdle : CScenarioCondition
{
};

struct CScenarioConditionHasComponentWithFlag : CScenarioCondition
{
	enum ePedCompFlags               _0xFEF5ED46;                     // offset:0x010	type:ENUM.32BIT
};

struct CScenarioConditionHasHighHeels : CScenarioCondition
{
};

struct CScenarioConditionHasNoProp : CScenarioCondition
{
};

struct CScenarioConditionHasParachute : CScenarioCondition
{
};

struct CScenarioConditionHasProp : CScenarioCondition
{
	string                           PropSet;                         // offset:0x010	type:STRING.ATHASHVALUE
};

struct CScenarioConditionHeadbobMusicGenre : CScenarioCondition
{
	enum _0x0E4F7AC4                 RadioGenre;                      // offset:0x010	type:ENUM.32BIT
};

struct CScenarioConditionHealth : CScenarioCondition
{
	float                            Health;                          // offset:0x010	type:FLOAT.0
	enum _0x0B95AB21                 Comparison;                      // offset:0x014	type:ENUM.32BIT
};

struct CScenarioConditionInCover : CScenarioCondition
{
};

struct CScenarioConditionInInterior : CScenarioCondition
{
};

struct CScenarioConditionInStationaryVehicleScenario : CScenarioCondition
{
	float                            MinimumWaitTime;                 // offset:0x010	type:FLOAT.0
};

struct CScenarioConditionInVehicleOfType : CScenarioCondition
{
	struct void                      VehicleModelSet;                 // offset:0x010	type:STRUCT.EXTERNAL_NAMED
};

struct CScenarioConditionInVehicleSeat : CScenarioCondition
{
	char                             SeatIndex;                       // offset:0x010	type:CHAR.0
};

struct CScenarioConditionIsHeadbobbingToRadioMusicEnabled : CScenarioCondition
{
};

struct CScenarioConditionIsMale : CScenarioConditionPopulation
{
};

struct CScenarioConditionIsMultiplayerGame : CScenarioCondition
{
};

struct CScenarioConditionIsPanicking : CScenarioCondition
{
};

struct CScenarioConditionIsPlayer : CScenarioCondition
{
};

struct CScenarioConditionIsPlayerInMultiplayerGame : CScenarioCondition
{
};

struct CScenarioConditionIsPlayerTired : CScenarioCondition
{
};

struct CScenarioConditionIsRadioPlaying : CScenarioCondition
{
};

struct CScenarioConditionIsRadioPlayingMusic : CScenarioCondition
{
};

struct CScenarioConditionIsReaction : CScenarioCondition
{
};

struct CScenarioConditionIsSwat : CScenarioCondition
{
};

struct CScenarioConditionIsTwoHandedWeaponEquipped : CScenarioCondition
{
};

struct CScenarioConditionJustGotUp : CScenarioCondition
{
};

struct CScenarioConditionModel : CScenarioConditionPopulation
{
	struct void                      ModelSet;                        // offset:0x010	type:STRUCT.EXTERNAL_NAMED
};

struct CScenarioConditionMovementModeType : CScenarioCondition
{
	enum MovementModeType            MovementModeType;                // offset:0x010	type:ENUM.32BIT
	string                           MovementModeIdle;                // offset:0x014	type:STRING.ATHASHVALUE
	bool                             HighEnergy;                      // offset:0x018	type:BOOL.0
};

struct CScenarioConditionOnFootClipSet : CScenarioCondition
{
	string                           ClipSet;                         // offset:0x010	type:STRING.ATHASHVALUE
};

struct CScenarioConditionOnStraightPath : CScenarioCondition
{
	float                            MinDist;                         // offset:0x010	type:FLOAT.0
};

struct CScenarioConditionOutOfBreath : CScenarioCondition
{
};

struct CScenarioConditionPedHeading : CScenarioCondition
{
	float                            TurnAngleDegrees;                // offset:0x010	type:FLOAT.0
	float                            ThresholdDegrees;                // offset:0x014	type:FLOAT.0
};

struct CScenarioConditionPhoneConversationAvailable : CScenarioCondition
{
};

struct CScenarioConditionPhoneConversationStarting : CScenarioCondition
{
};

struct CScenarioConditionPlayerHasSpaceForIdle : CScenarioCondition
{
};

struct CScenarioConditionPlayingAnim : CScenarioCondition
{
	string                           ClipSet;                         // offset:0x010	type:STRING.ATHASHVALUE
	string                           Anim;                            // offset:0x014	type:STRING.ATHASHVALUE
};

struct CScenarioConditionPopulation : CScenarioCondition
{
};

struct CScenarioConditionRaining : CScenarioConditionWorld
{
};

struct CScenarioConditionRoleInSyncedScene : CScenarioCondition
{
	enum _0xC744E0AD                 Role;                            // offset:0x010	type:ENUM.32BIT
};

struct CScenarioConditionSet : CScenarioCondition
{
	array<struct CScenarioCondition>     Conditions;                      // offset:0x010	type:ARRAY.ATARRAY
};

struct CScenarioConditionSetOr : CScenarioConditionSet
{
};

struct CScenarioConditionSnowing : CScenarioConditionWorld
{
};

struct CScenarioConditionSpeed : CScenarioCondition
{
	enum CScenarioConditionSpeed__Speed     Speed;                           // offset:0x010	type:ENUM.32BIT
};

struct CScenarioConditionSunny : CScenarioConditionWorld
{
};

struct CScenarioConditionTechSavvy : CScenarioConditionPopulation
{
	enum TechSavvy                   TechSavvy;                       // offset:0x010	type:ENUM.32BIT
};

struct CScenarioConditionTime : CScenarioConditionWorld
{
	bitset<enum CScenarioConditionTime__Time>     Hours;                           // offset:0x010	type:BITSET.32BIT
};

struct CScenarioConditionUsingLRAltClipset : CScenarioCondition
{
};

struct CScenarioConditionWet : CScenarioCondition
{
};

struct CScenarioConditionWindy : CScenarioConditionWorld
{
};

struct CScenarioConditionWorld : CScenarioCondition
{
};

struct CScenarioConditionWorldPosWithinSphere : CScenarioCondition
{
	struct rage__spdSphere           Sphere;                          // offset:0x010	type:STRUCT.STRUCTURE
};

struct CScenarioConditionWorldSet : CScenarioConditionWorld
{
	array<struct CScenarioConditionWorld>     Conditions;                      // offset:0x010	type:ARRAY.ATARRAY
};

struct CScenarioControlAmbientInfo : CScenarioInfo
{
};

struct CScenarioCoupleInfo : CScenarioInfo
{
	vec3                             _0x2D32376C;                     // offset:0x100	type:VECTOR3.0
	bool                             _0xBCA38937;                     // offset:0x110	type:BOOL.0
};

struct CScenarioDeadPedInfo : CScenarioInfo
{
};

struct CScenarioEntityOverride
{
	vec3V                                     EntityPosition;                  // offset:0x000	type:VEC3V.0
	string                                    EntityType;                      // offset:0x010	type:STRING.ATHASHVALUE
	array<struct CExtensionDefSpawnPoint>     ScenarioPoints;                  // offset:0x018	type:ARRAY.ATARRAY
	bool                                      EntityMayNotAlwaysExist;         // offset:0x040	type:BOOL.0
	bool                                      SpecificallyPreventArtPoints;    // offset:0x041	type:BOOL.0
};

struct CScenarioFleeInfo : CScenarioInfo
{
	float                            SafeRadius;                      // offset:0x100	type:FLOAT.0
};

struct CScenarioGroupInfo : CScenarioInfo
{
};

struct CScenarioInfo
{
	string                             Name;                            // offset:0x00C	type:STRING.ATHASHVALUE
	string                             PropName;                        // offset:0x010	type:STRING.ATHASHVALUE
	struct void                        Models;                          // offset:0x018	type:STRUCT.EXTERNAL_NAMED
	struct void                        BlockedModels;                   // offset:0x020	type:STRUCT.EXTERNAL_NAMED
	float                              SpawnProbability;                // offset:0x028	type:FLOAT.0
	uint                               SpawnInterval;                   // offset:0x02C	type:UINT.0
	float                              SpawnHistoryRange;               // offset:0x030	type:FLOAT.0
	uint                               MaxNoInRange;                    // offset:0x038	type:UINT.0
	uint                               PropEndOfLifeTimeoutMS;          // offset:0x03C	type:UINT.0
	float                              Range;                           // offset:0x040	type:FLOAT.0
	string                             SpawnPropIntroDict;              // offset:0x044	type:STRING.ATHASHVALUE
	string                             SpawnPropIntroAnim;              // offset:0x048	type:STRING.ATHASHVALUE
	string                             StationaryReactHash;             // offset:0x04C	type:STRING.ATHASHVALUE
	float                              TimeTilPedLeaves;                // offset:0x050	type:FLOAT.0
	float                              ChanceOfRunningTowards;          // offset:0x054	type:FLOAT.0
	vec3                               SpawnPropOffset;                 // offset:0x060	type:VECTOR3.0
	vec4                               SpawnPropRotation;               // offset:0x070	type:VECTOR4.0
	bitset<enum _0x9138840C>           Flags;                           // offset:0x080	type:BITSET.32BIT
	struct CScenarioConditionWorld     Condition;                       // offset:0x090	type:STRUCT.POINTER
	struct CConditionalAnimsGroup      ConditionalAnimsGroup;           // offset:0x098	type:STRUCT.STRUCTURE
	string                             CameraNameHash;                  // offset:0x0B0	type:STRING.ATHASHVALUE
	float                              IntroBlendInDuration;            // offset:0x0B4	type:FLOAT.0
	float                              OutroBlendInDuration;            // offset:0x0B8	type:FLOAT.0
	float                              OutroBlendOutDuration;           // offset:0x0BC	type:FLOAT.0
	float                              ImmediateExitBlendOutDuration;   // offset:0x0C0	type:FLOAT.0
	float                              PanicExitBlendInDuration;        // offset:0x0C4	type:FLOAT.0
	float                              ReassessGroundExitThreshold;     // offset:0x0C8	type:FLOAT.0
	float                              FallExitThreshold;               // offset:0x0CC	type:FLOAT.0
	float                              ExitProbeZOverride;              // offset:0x0D0	type:FLOAT.0
	float                              ExitProbeCapsuleRadiusOverride;  // offset:0x0D4	type:FLOAT.0
	float                              MaxDistanceMayAdjustPathSearchOnExit; // offset:0x0D8	type:FLOAT.0
	enum eLookAtImportance             eLookAtImportance;               // offset:0x0DC	type:ENUM.32BIT
	vec3                               PedCapusleOffset;                // offset:0x0E0	type:VECTOR3.0
	float                              PedCapsuleRadiusOverride;        // offset:0x0F0	type:FLOAT.0
};

struct CScenarioInfoManager
{
	array<struct CScenarioInfo>          Scenarios;                       // offset:0x008	type:ARRAY.ATARRAY
	array<struct CScenarioTypeGroup>     ScenarioTypeGroups;              // offset:0x018	type:ARRAY.ATARRAY
};

struct CScenarioJoggingInfo : CScenarioInfo
{
};

struct CScenarioLookAtInfo : CScenarioInfo
{
};

struct CScenarioMoveBetweenInfo : CScenarioInfo
{
	float                            _0xE430CC73;                     // offset:0x100	type:FLOAT.0
};

struct CScenarioParkedVehicleInfo : CScenarioInfo
{
	enum eVehicleScenarioType        eVehicleScenarioType;            // offset:0x100	type:ENUM.32BIT
};

struct CScenarioPhoneConversationInProgress : CScenarioCondition
{
};

struct CScenarioPlayAnimsInfo : CScenarioInfo
{
	vec3                             SeatedOffset;                    // offset:0x100	type:VECTOR3.0
	string                           WanderScenarioToUseAfter;        // offset:0x110	type:STRING.ATHASHVALUE
};

struct CScenarioPoint
{
	uchar                                       iType;                           // offset:0x015	type:UCHAR.0
	uchar                                       ModelSetId;                      // offset:0x016	type:UCHAR.0
	uchar                                       iInterior;                       // offset:0x017	type:UCHAR.0
	uchar                                       iRequiredIMapId;                 // offset:0x018	type:UCHAR.0
	uchar                                       iProbability;                    // offset:0x019	type:UCHAR.0
	uchar                                       uAvailableInMpSp;                // offset:0x01A	type:UCHAR.0
	uchar                                       iTimeStartOverride;              // offset:0x01B	type:UCHAR.0
	uchar                                       iTimeEndOverride;                // offset:0x01C	type:UCHAR.0
	uchar                                       iRadius;                         // offset:0x01D	type:UCHAR.0
	uchar                                       iTimeTillPedLeaves;              // offset:0x01E	type:UCHAR.0
	ushort                                      iScenarioGroup;                  // offset:0x020	type:USHORT.0
	bitset<enum CScenarioPointFlags__Flags>     Flags;                           // offset:0x024	type:BITSET.32BIT
	vec4V                                       vPositionAndDirection;           // offset:0x030	type:VEC4V.0
};

struct CScenarioPointCluster
{
	struct CScenarioPointContainer     Points;                          // offset:0x000	type:STRUCT.STRUCTURE
	struct rage__spdSphere             ClusterSphere;                   // offset:0x030	type:STRUCT.STRUCTURE
	float                              _0x4151BB75;                     // offset:0x040	type:FLOAT.0
	bool                               _0xBA87159C;                     // offset:0x044	type:BOOL.0
};

struct CScenarioPointContainer
{
	array<struct CExtensionDefSpawnPoint>     LoadSavePoints;                  // offset:0x000	type:ARRAY.ATARRAY
	array<struct CScenarioPoint>              MyPoints;                        // offset:0x010	type:ARRAY.ATARRAY
};

struct CScenarioPointGroup
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	bool                             EnabledByDefault;                // offset:0x004	type:BOOL.0
};

struct CScenarioPointLookUps
{
	array<string>                    TypeNames;                       // offset:0x000	type:ARRAY.ATARRAY
	array<string>                    PedModelSetNames;                // offset:0x010	type:ARRAY.ATARRAY
	array<string>                    VehicleModelSetNames;            // offset:0x020	type:ARRAY.ATARRAY
	array<string>                    GroupNames;                      // offset:0x030	type:ARRAY.ATARRAY
	array<string>                    InteriorNames;                   // offset:0x040	type:ARRAY.ATARRAY
	array<string>                    RequiredIMapNames;               // offset:0x050	type:ARRAY.ATARRAY
};

struct CScenarioPointManifest
{
	int                                       VersionNumber;                   // offset:0x000	type:INT.0
	array<struct CScenarioPointRegionDef>     RegionDefs;                      // offset:0x008	type:ARRAY.ATARRAY
	array<struct CScenarioPointGroup>         Groups;                          // offset:0x018	type:ARRAY.ATARRAY
	array<string>                             InteriorNames;                   // offset:0x028	type:ARRAY.ATARRAY
};

struct CScenarioPointRegion
{
	int                                       VersionNumber;                   // offset:0x000	type:INT.0
	struct CScenarioPointContainer            Points;                          // offset:0x008	type:STRUCT.STRUCTURE
	array<struct CScenarioEntityOverride>     EntityOverrides;                 // offset:0x048	type:ARRAY.ATARRAY
	struct CScenarioChainingGraph             _0xDC4D2D41;                     // offset:0x060	type:STRUCT.STRUCTURE
	struct rage__spdGrid2D                    AccelGrid;                       // offset:0x0B8	type:STRUCT.STRUCTURE
	array<ushort>                             _0xE529D603;                     // offset:0x0F8	type:ARRAY.ATARRAY
	array<struct CScenarioPointCluster>       Clusters;                        // offset:0x108	type:ARRAY.ATARRAY
	struct CScenarioPointLookUps              LookUps;                         // offset:0x118	type:STRUCT.STRUCTURE
};

struct CScenarioPointRegionDef
{
	string                           Name;                            // offset:0x000	type:STRING.ATFINALHASHSTRING
	struct rage__spdAABB             AABB;                            // offset:0x010	type:STRUCT.STRUCTURE
};

struct CScenarioSkiLiftInfo : CScenarioInfo
{
};

struct CScenarioSkiingInfo : CScenarioInfo
{
};

struct CScenarioSniperInfo : CScenarioInfo
{
};

struct CScenarioTransitionInfo
{
	string                           TransitionToScenario;            // offset:0x000	type:STRING.ATHASHVALUE
	string                           TransitionToScenarioConditionalAnims; // offset:0x004	type:STRING.ATHASHVALUE
};

struct CScenarioTypeGroup
{
	string                                    Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CScenarioTypeGroupEntry>     Types;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct CScenarioTypeGroupEntry
{
	struct void                      ScenarioType;                    // offset:0x000	type:STRUCT.EXTERNAL_NAMED
	float                            ProbabilityWeight;               // offset:0x00C	type:FLOAT.0
};

struct CScenarioVehicleInfo : CScenarioInfo
{
	string                           ScenarioLayoutForPeds;           // offset:0x100	type:STRING.ATHASHVALUE
	enum _0xEE5256A0                 ScenarioLayoutOrigin;            // offset:0x104	type:ENUM.32BIT
	struct void                      VehicleModelSet;                 // offset:0x108	type:STRUCT.EXTERNAL_NAMED
	struct void                      VehicleTrailerModelSet;          // offset:0x110	type:STRUCT.EXTERNAL_NAMED
	float                            ProbabilityForDriver;            // offset:0x118	type:FLOAT.0
	float                            ProbabilityForPassengers;        // offset:0x11C	type:FLOAT.0
	float                            ProbabilityForTrailer;           // offset:0x120	type:FLOAT.0
	uchar                            MaxNumPassengers;                // offset:0x124	type:UCHAR.0
	uchar                            MinNumPassengers;                // offset:0x125	type:UCHAR.0
};

struct CScenarioVehicleParkInfo : CScenarioVehicleInfo
{
	enum _0x952D10C9                 ParkType;                        // offset:0x130	type:ENUM.8BIT
};

struct CScenarioWanderingInRadiusInfo : CScenarioInfo
{
	float                            WanderRadius;                    // offset:0x100	type:FLOAT.0
};

struct CScenarioWanderingInfo : CScenarioInfo
{
};

struct CScriptMetadata
{
	struct CMPOutfits                MPOutfits;                       // offset:0x008	type:STRUCT.STRUCTURE
	struct CBaseElements             BaseElements;                    // offset:0x040	type:STRUCT.STRUCTURE
	struct CMPApparelData            MPApparelData;                   // offset:0x1C8	type:STRUCT.STRUCTURE
};

struct CScriptResourceExpectedMaximum
{
	string                           ResourceTypeName;                // offset:0x000	type:STRING.ATHASHVALUE
	int                              ExpectedMaximum;                 // offset:0x004	type:INT.0
};

struct CScriptStackSizeDataEntry
{
	string                           StackName;                       // offset:0x000	type:STRING.ATHASHVALUE
	int                              SizeOfStack;                     // offset:0x004	type:INT.0
	int                              NumberOfStacksOfThisSize;        // offset:0x008	type:INT.0
};

struct CScriptTextLines
{
	string                           NameOfScriptTextLine;            // offset:0x000	type:STRING.ATHASHVALUE
	int                              MaximumNumber;                   // offset:0x004	type:INT.0
};

struct CScriptedGunTaskInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	float                            MinAimSweepHeadingAngleDegs;     // offset:0x004	type:FLOAT.0
	float                            MaxAimSweepHeadingAngleDegs;     // offset:0x008	type:FLOAT.0
	float                            MinAimSweepPitchAngleDegs;       // offset:0x00C	type:FLOAT.0
	float                            MaxAimSweepPitchAngleDegs;       // offset:0x010	type:FLOAT.0
	float                            fHeadingOffset;                  // offset:0x014	type:FLOAT.0
	string                           ClipSet;                         // offset:0x018	type:STRING.ATFINALHASHSTRING
	string                           IdleCamera;                      // offset:0x01C	type:STRING.ATHASHVALUE
	string                           Camera;                          // offset:0x020	type:STRING.ATHASHVALUE
	bitset<enum _0x8B92195C>         Flags;                           // offset:0x024	type:BITSET.32BIT
};

struct CScriptedGunTaskMetadataMgr
{
	array<struct CScriptedGunTaskInfo>     ScriptedGunTaskInfos;            // offset:0x000	type:ARRAY.ATARRAY
};

struct CSeaPlaneHandlingData : CBaseSubHandlingData
{
	int                              fLeftPontoonComponentId;         // offset:0x008	type:INT.0
	int                              fRightPontoonComponentId;        // offset:0x00C	type:INT.0
	float                            fPontoonBuoyConst;               // offset:0x010	type:FLOAT.0
	float                            fPontoonSampleSizeFront;         // offset:0x014	type:FLOAT.0
	float                            fPontoonSampleSizeMiddle;        // offset:0x018	type:FLOAT.0
	float                            fPontoonSampleSizeRear;          // offset:0x01C	type:FLOAT.0
	float                            fPontoonLengthFractionForSamples; // offset:0x020	type:FLOAT.0
	float                            fPontoonDragCoefficient;         // offset:0x024	type:FLOAT.0
	float                            fPontoonVerticalDampingCoefficientUp; // offset:0x028	type:FLOAT.0
	float                            fPontoonVerticalDampingCoefficientDown; // offset:0x02C	type:FLOAT.0
	float                            fKeelSphereSize;                 // offset:0x030	type:FLOAT.0
};

struct CSeatOverrideAnimInfo
{
	string                                                         Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                                                         SeatOverrideClipSet;             // offset:0x004	type:STRING.ATHASHVALUE
	bitset<enum CSeatOverrideAnimInfo__eSeatOverrideAnimFlags>     SeatOverrideAnimFlags;           // offset:0x008	type:BITSET.32BIT
};

struct CSeatOverrideInfo
{
	struct void                      SeatAnimInfo;                    // offset:0x000	type:STRUCT.EXTERNAL_NAMED
	struct void                      SeatOverrideAnimInfo;            // offset:0x008	type:STRUCT.EXTERNAL_NAMED
};

struct CSettings
{
};

struct CSettingsManager
{
	struct Settings                  settings;                        // offset:0x008	type:STRUCT.STRUCTURE
};

struct CShaderVariableComponent
{
	uint                             pedcompID;                       // offset:0x008	type:UINT.0
	uint                             maskID;                          // offset:0x00C	type:UINT.0
	string                           shaderVariableHashString;        // offset:0x010	type:STRING.ATHASHVALUE
	array<uchar>                     tracks;                          // offset:0x018	type:ARRAY.ATARRAY
	array<ushort>                    ids;                             // offset:0x028	type:ARRAY.ATARRAY
	array<uchar>                     components;                      // offset:0x038	type:ARRAY.ATARRAY
};

struct CShopData
{
	string                           Name;                            // offset:0x008	type:STRING.ATSTRING
	float                            Price;                           // offset:0x018	type:FLOAT.0
	string                           Description;                     // offset:0x020	type:STRING.ATSTRING
};

struct CSimpleImpulseTest
{
	enum _0x1639985A                 Impulse;                         // offset:0x000	type:ENUM.32BIT
	enum _0x68AD7E0D                 State;                           // offset:0x004	type:ENUM.32BIT
	vec2                             AnalogRange;                     // offset:0x008	type:VECTOR2.0
	float                            Duration;                        // offset:0x010	type:FLOAT.0
};

struct CSimpleVariablesSaveStructure
{
	bool                             bClosestSaveHouseDataIsValid;    // offset:0x000	type:BOOL.0
	float                            fHeadingOfClosestSaveHouse;      // offset:0x004	type:FLOAT.0
	vec3                             vCoordsOfClosestSaveHouse;       // offset:0x010	type:VECTOR3.0
	bool                             bFadeInAfterLoad;                // offset:0x020	type:BOOL.0
	bool                             bPlayerShouldSnapToGroundOnSpawn; // offset:0x021	type:BOOL.0
	uint                             MillisecondsPerGameMinute;       // offset:0x024	type:UINT.0
	uint                             LastClockTick;                   // offset:0x028	type:UINT.0
	uint                             GameClockHour;                   // offset:0x02C	type:UINT.0
	uint                             GameClockMinute;                 // offset:0x030	type:UINT.0
	uint                             GameClockSecond;                 // offset:0x034	type:UINT.0
	uint                             GameClockDay;                    // offset:0x038	type:UINT.0
	uint                             GameClockMonth;                  // offset:0x03C	type:UINT.0
	uint                             GameClockYear;                   // offset:0x040	type:UINT.0
	uint                             moneyCheated;                    // offset:0x044	type:UINT.0
	uchar                            PlayerFlags;                     // offset:0x048	type:UCHAR.0
	uint                             TimeInMilliseconds;              // offset:0x04C	type:UINT.0
	uint                             FrameCounter;                    // offset:0x050	type:UINT.0
	int                              OldWeatherType;                  // offset:0x054	type:INT.0
	int                              NewWeatherType;                  // offset:0x058	type:INT.0
	int                              ForcedWeatherType;               // offset:0x05C	type:INT.0
	float                            InterpolationValue;              // offset:0x060	type:FLOAT.0
	int                              WeatherTypeInList;               // offset:0x064	type:INT.0
	float                            Rain;                            // offset:0x068	type:FLOAT.0
	enum eWantedLevel                MaximumWantedLevel;              // offset:0x06C	type:ENUM.32BIT
	int                              nMaximumWantedLevel;             // offset:0x070	type:INT.0
	int                              NumberOfTimesPickupHelpTextDisplayed; // offset:0x074	type:INT.0
	bool                             bHasDisplayedPlayerQuitEnterCarHelpText; // offset:0x078	type:BOOL.0
	bool                             bIncludeLastStationOnSinglePlayerStat; // offset:0x079	type:BOOL.0
	uint                             activationDataThing;             // offset:0x07C	type:UINT.0
	uint                             SpSessionIdHigh;                 // offset:0x080	type:UINT.0
	uint                             SpSessionIdLow;                  // offset:0x084	type:UINT.0
	array<uchar>                     fogOfWar;                        // offset:0x088	type:ARRAY.ATARRAY
};

struct CSituationalClipSetStreamer__Tunables : CTuning
{
	struct CSituationalClipSetStreamer__Tunables__Avoids            Avoids;                          // offset:0x010	type:STRUCT.STRUCTURE
	struct CSituationalClipSetStreamer__Tunables__FleeReactions     FleeReactions;                   // offset:0x028	type:STRUCT.STRUCTURE
};

struct CSituationalClipSetStreamer__Tunables__Avoids
{
	string                                                                     ClipSet;                         // offset:0x000	type:STRING.ATHASHVALUE
	string                                                                     ClipSetForCasual;                // offset:0x004	type:STRING.ATHASHVALUE
	array<struct CSituationalClipSetStreamer__Tunables__Avoids__Variation>     Variations;                      // offset:0x008	type:ARRAY.ATARRAY
};

struct CSituationalClipSetStreamer__Tunables__Avoids__Variation
{
	string                           ClipSet;                         // offset:0x000	type:STRING.ATHASHVALUE
	bool                             IsCasual;                        // offset:0x004	type:BOOL.0
	float                            Chances;                         // offset:0x008	type:FLOAT.0
};

struct CSituationalClipSetStreamer__Tunables__FleeReactions
{
	string                           ClipSetForIntro;                 // offset:0x000	type:STRING.ATHASHVALUE
	string                           ClipSetForIntroV1;               // offset:0x004	type:STRING.ATHASHVALUE
	string                           ClipSetForIntroV2;               // offset:0x008	type:STRING.ATHASHVALUE
	string                           ClipSetForRuns;                  // offset:0x00C	type:STRING.ATHASHVALUE
	string                           ClipSetForRunsV1;                // offset:0x010	type:STRING.ATHASHVALUE
	string                           ClipSetForRunsV2;                // offset:0x014	type:STRING.ATHASHVALUE
	float                            MinTimeInCombatToNotStreamIn;    // offset:0x018	type:FLOAT.0
};

struct CSlownessZone
{
	struct rage__spdAABB             bBox;                            // offset:0x000	type:STRUCT.STRUCTURE
};

struct CSlownessZoneManager
{
	array<struct CSlownessZone>      aSlownessZone;                   // offset:0x000	type:ARRAY.ATARRAY
};

struct CSpecialAbilityData
{
	int                              duration;                        // offset:0x000	type:INT.0
	int                              initialUnlockedCap;              // offset:0x004	type:INT.0
	int                              _0x7F62840A;                     // offset:0x008	type:INT.0
	bool                             _0x32630BCF;                     // offset:0x00C	type:BOOL.0
	bool                             _0x2DC9F5ED;                     // offset:0x00D	type:BOOL.0
	bool                             _0x0AD45F94;                     // offset:0x00E	type:BOOL.0
	float                            timeWarpScale;                   // offset:0x010	type:FLOAT.0
	float                            damageMultiplier;                // offset:0x014	type:FLOAT.0
	float                            defenseMultiplier;               // offset:0x018	type:FLOAT.0
	float                            staminaMultiplier;               // offset:0x01C	type:FLOAT.0
	float                            sprintMultiplier;                // offset:0x020	type:FLOAT.0
	float                            steeringMultiplier;              // offset:0x024	type:FLOAT.0
	float                            depletionMultiplier;             // offset:0x028	type:FLOAT.0
	float                            chargeMultiplier;                // offset:0x02C	type:FLOAT.0
	string                           fxName;                          // offset:0x030	type:STRING.ATHASHVALUE
	string                           outFxName;                       // offset:0x034	type:STRING.ATHASHVALUE
	string                           activeAnimSet;                   // offset:0x038	type:STRING.ATHASHVALUE
};

struct CSpecialFlightHandlingData : CBaseSubHandlingData
{
	vec3V                            vecAngularDamping;               // offset:0x010	type:VEC3V.0
	vec3V                            vecAngularDampingMin;            // offset:0x020	type:VEC3V.0
	vec3V                            vecLinearDamping;                // offset:0x030	type:VEC3V.0
	vec3V                            vecLinearDampingMin;             // offset:0x040	type:VEC3V.0
	float                            fLiftCoefficient;                // offset:0x050	type:FLOAT.0
	float                            _0xA91C4B57;                     // offset:0x054	type:FLOAT.0
	float                            _0x7EFA548C;                     // offset:0x058	type:FLOAT.0
	float                            _0xEA9F750B;                     // offset:0x05C	type:FLOAT.0
	float                            fDragCoefficient;                // offset:0x060	type:FLOAT.0
	float                            _0x9B6655A3;                     // offset:0x064	type:FLOAT.0
	float                            _0xBD412DB9;                     // offset:0x068	type:FLOAT.0
	float                            fMinLiftVelocity;                // offset:0x06C	type:FLOAT.0
	float                            fRollTorqueScale;                // offset:0x070	type:FLOAT.0
	float                            _0x6A3247B8;                     // offset:0x074	type:FLOAT.0
	float                            _0xA514ECFD;                     // offset:0x078	type:FLOAT.0
	float                            fYawTorqueScale;                 // offset:0x07C	type:FLOAT.0
	float                            _0x71141F47;                     // offset:0x080	type:FLOAT.0
	float                            fInitalOverheadAssist;           // offset:0x084	type:FLOAT.0
	float                            fMaxPitchTorque;                 // offset:0x088	type:FLOAT.0
	float                            fMaxSteeringRollTorque;          // offset:0x08C	type:FLOAT.0
	float                            fPitchTorqueScale;               // offset:0x090	type:FLOAT.0
	float                            _0xCB42B7A4;                     // offset:0x094	type:FLOAT.0
	float                            fMaxThrust;                      // offset:0x098	type:FLOAT.0
	float                            fTransitionDuration;             // offset:0x09C	type:FLOAT.0
	float                            fHoverVelocityScale;             // offset:0x0A0	type:FLOAT.0
	float                            fStabilityAssist;                // offset:0x0A4	type:FLOAT.0
	float                            fMinSpeedForThrustFalloff;       // offset:0x0A8	type:FLOAT.0
	float                            fBrakingThrustScale;             // offset:0x0AC	type:FLOAT.0
	int                              mode;                            // offset:0x0B0	type:INT.0
	string                           strFlags;                        // offset:0x0B4	type:STRING.ATFINALHASHSTRING
};

struct CSpinnerData : SGeneralMovieData
{
	array<vec2>                      Offsets;                         // offset:0x018	type:ARRAY.ATARRAY
};

struct CStatsSaveStructure : CBaseStatsSaveStructure
{
	array<uint>                              SpVehiclesDriven;                // offset:0x098	type:ARRAY.ATARRAY
	map<string, int>                         PedsKilledOfThisType;            // offset:0x0A8	type:MAP.ATBINARYMAP
	map<string, float>                       aStationPlayTime;                // offset:0x0C0	type:MAP.ATBINARYMAP
	uint                                     currCountAsFacebookDriven;       // offset:0x0D8	type:UINT.0
	array<struct CStatsVehicleUsage, 20>     vehicleRecords;                  // offset:0x0DC	type:ARRAY.ATFIXEDARRAY
};

struct CStatsSaveStructure_Migration : CBaseStatsSaveStructure
{
	array<uint>                              SpVehiclesDriven;                // offset:0x098	type:ARRAY.ATARRAY
	map<uint, int>                           PedsKilledOfThisType;            // offset:0x0A8	type:MAP.ATBINARYMAP
	map<uint, float>                         aStationPlayTime;                // offset:0x0C0	type:MAP.ATBINARYMAP
	uint                                     currCountAsFacebookDriven;       // offset:0x0D8	type:UINT.0
	array<struct CStatsVehicleUsage, 20>     vehicleRecords;                  // offset:0x0DC	type:ARRAY.ATFIXEDARRAY
};

struct CStatsVehicleUsage
{
	uint                             VehicleId;                       // offset:0x000	type:UINT.0
	uint                             CharacterId;                     // offset:0x004	type:UINT.0
	uint                             TimeDriven;                      // offset:0x008	type:UINT.0
	float                            DistDriven;                      // offset:0x00C	type:FLOAT.0
	float                            LastDistDriven;                  // offset:0x010	type:FLOAT.0
	uint                             NumDriven;                       // offset:0x014	type:UINT.0
	uint                             NumStolen;                       // offset:0x01C	type:UINT.0
	uint                             NumSpins;                        // offset:0x020	type:UINT.0
	uint                             NumFlips;                        // offset:0x024	type:UINT.0
	uint                             NumPlaneLandings;                // offset:0x028	type:UINT.0
	uint                             NumWheelies;                     // offset:0x02C	type:UINT.0
	uint                             NumAirLaunches;                  // offset:0x030	type:UINT.0
	uint                             NumAirLaunchesOver5s;            // offset:0x034	type:UINT.0
	uint                             NumAirLaunchesOver5m;            // offset:0x038	type:UINT.0
	uint                             NumAirLaunchesOver40m;           // offset:0x03C	type:UINT.0
	uint                             NumLargeAccidents;               // offset:0x040	type:UINT.0
	uint                             TimeSpentInVehicle;              // offset:0x044	type:UINT.0
	float                            HighestSpeed;                    // offset:0x048	type:FLOAT.0
	uint                             LongestWheelieTime;              // offset:0x04C	type:UINT.0
	float                            LongestWheelieDist;              // offset:0x050	type:FLOAT.0
	float                            HighestJumpDistance;             // offset:0x054	type:FLOAT.0
	uint                             LastTimeSpentInVehicle;          // offset:0x058	type:UINT.0
	uint                             NumPedsRundown;                  // offset:0x05C	type:UINT.0
	bool                             Online;                          // offset:0x064	type:BOOL.0
};

struct CStealVehicleCrime : CDefaultCrimeInfo
{
};

struct CStealthKillTest
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                           StealthKillAction;               // offset:0x004	type:STRING.ATHASHVALUE
	bitset<enum _0x2538A9CA>         ActionType;                      // offset:0x008	type:BITSET.32BIT
};

struct CStreamingRequestCommonSet
{
	array<string>                    Requests;                        // offset:0x000	type:ARRAY.ATARRAY
};

struct CStreamingRequestFrame
{
	array<string>                    AddList;                         // offset:0x000	type:ARRAY.ATARRAY
	array<string>                    RemoveList;                      // offset:0x010	type:ARRAY.ATARRAY
	array<string>                    _0x3569B859;                     // offset:0x020	type:ARRAY.ATARRAY
	vec3V                            CamPos;                          // offset:0x030	type:VEC3V.0
	vec3V                            CamDir;                          // offset:0x040	type:VEC3V.0
	array<uchar>                     _0x690CB1A7;                     // offset:0x050	type:ARRAY.ATARRAY
	uint                             Flags;                           // offset:0x060	type:UINT.0
};

struct CStreamingRequestMasterList
{
	array<string>                    Files;                           // offset:0x000	type:ARRAY.ATARRAY
};

struct CStreamingRequestRecord
{
	array<struct CStreamingRequestFrame>         Frames;                          // offset:0x000	type:ARRAY.ATARRAY
	array<struct CStreamingRequestCommonSet>     CommonSets;                      // offset:0x010	type:ARRAY.ATARRAY
	bool                                         NewStyle;                        // offset:0x020	type:BOOL.0
};

struct CStrikeBone
{
	float                            Radius;                          // offset:0x000	type:FLOAT.0
	enum eAnimBoneTag                StrikeBoneTag;                   // offset:0x004	type:ENUM.32BIT
};

struct CStrikeBoneSet
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CStrikeBone>        aStrikeBones;                    // offset:0x008	type:ARRAY.ATARRAY
};

struct CStuntJumpSaveStructure
{
	bool                             bActive;                         // offset:0x000	type:BOOL.0
};

struct CSubmarineHandlingData : CBaseSubHandlingData
{
	vec3V                            vTurnRes;                        // offset:0x010	type:VEC3V.0
	float                            fMoveResXY;                      // offset:0x020	type:FLOAT.0
	float                            fMoveResZ;                       // offset:0x024	type:FLOAT.0
	float                            fPitchMult;                      // offset:0x028	type:FLOAT.0
	float                            fPitchAngle;                     // offset:0x02C	type:FLOAT.0
	float                            fYawMult;                        // offset:0x030	type:FLOAT.0
	float                            fDiveSpeed;                      // offset:0x034	type:FLOAT.0
	float                            fRollMult;                       // offset:0x038	type:FLOAT.0
	float                            fRollStab;                       // offset:0x03C	type:FLOAT.0
};

struct CSystemSettings : CSettings
{
	int                              numBytesPerReplayBlock;          // offset:0x008	type:INT.0
	int                              numReplayBlocks;                 // offset:0x00C	type:INT.0
	int                              maxFileStoreSize;                // offset:0x010	type:INT.0
	int                              maxSizeOfStreamingReplay;        // offset:0x014	type:INT.0
};

struct CTVPlayList
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<string>                    TVPlayListSlotNames;             // offset:0x008	type:ARRAY.ATARRAY
};

struct CTVPlayListSlot
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<string>                    TVVideoInfoNames;                // offset:0x008	type:ARRAY.ATARRAY
};

struct CTVPlaylistContainer
{
	array<struct CTVVideoInfo>        Videos;                          // offset:0x000	type:ARRAY.ATARRAY
	array<struct CTVPlayListSlot>     PlayListSlots;                   // offset:0x010	type:ARRAY.ATARRAY
	array<struct CTVPlayList>         Playlists;                       // offset:0x020	type:ARRAY.ATARRAY
};

struct CTVVideoInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                           VideoFileName;                   // offset:0x008	type:STRING.ATSTRING
	float                            fDuration;                       // offset:0x01C	type:FLOAT.0
	bool                             bNotOnDisk;                      // offset:0x020	type:BOOL.0
};

struct CTacticalAnalysisCoverPointSearch__Tunables : CTuning
{
	struct CTacticalAnalysisCoverPointSearch__Tunables__Scoring     Scoring;                         // offset:0x010	type:STRUCT.STRUCTURE
	int                                                             ScoreCalculationsPerFrame;       // offset:0x028	type:INT.0
};

struct CTacticalAnalysisCoverPointSearch__Tunables__Scoring
{
	float                            Occupied;                        // offset:0x000	type:FLOAT.0
	float                            Scripted;                        // offset:0x004	type:FLOAT.0
	float                            PointOnMap;                      // offset:0x008	type:FLOAT.0
	float                            MinDistanceToBeConsideredOptimal; // offset:0x00C	type:FLOAT.0
	float                            MaxDistanceToBeConsideredOptimal; // offset:0x010	type:FLOAT.0
	float                            Optimal;                         // offset:0x014	type:FLOAT.0
};

struct CTacticalAnalysisCoverPoints__Tunables : CTuning
{
	float                            MinDistanceMovedToStartSearch;   // offset:0x010	type:FLOAT.0
	float                            MaxTimeBetweenSearches;          // offset:0x014	type:FLOAT.0
	float                            MinDistanceForSearch;            // offset:0x018	type:FLOAT.0
	float                            MaxDistanceForSearch;            // offset:0x01C	type:FLOAT.0
	float                            MinTimeBetweenLineOfSightTests;  // offset:0x020	type:FLOAT.0
	float                            MinTimeBetweenAttemptsToFindNearby; // offset:0x024	type:FLOAT.0
	float                            MinTimeBetweenStatusUpdates;     // offset:0x028	type:FLOAT.0
	float                            RadiusForFindNearby;             // offset:0x02C	type:FLOAT.0
	int                              MaxNearbyToFindPerFrame;         // offset:0x030	type:INT.0
};

struct CTacticalAnalysisNavMeshPoints__Tunables : CTuning
{
	float                            MinDistance;                     // offset:0x010	type:FLOAT.0
	float                            MaxDistance;                     // offset:0x014	type:FLOAT.0
	float                            BufferDistance;                  // offset:0x018	type:FLOAT.0
	float                            MinTimeBetweenAttemptsToFindNewPosition; // offset:0x01C	type:FLOAT.0
	float                            MinTimeBetweenLineOfSightTests;  // offset:0x020	type:FLOAT.0
	float                            MinTimeBetweenAttemptsToFindNearby; // offset:0x024	type:FLOAT.0
	float                            MaxSearchRadiusForNavMesh;       // offset:0x028	type:FLOAT.0
	float                            RadiusForFindNearby;             // offset:0x02C	type:FLOAT.0
	float                            MinDistanceBetweenPositionsWithClearLineOfSight; // offset:0x030	type:FLOAT.0
	float                            MinDistanceBetweenPositionsWithoutClearLineOfSightInExteriors; // offset:0x034	type:FLOAT.0
	float                            MinDistanceBetweenPositionsWithoutClearLineOfSightInInteriors; // offset:0x038	type:FLOAT.0
	float                            MaxXYDistanceForNewPosition;     // offset:0x03C	type:FLOAT.0
	int                              MaxNearbyToFindPerFrame;         // offset:0x040	type:INT.0
};

struct CTacticalAnalysis__Tunables : CTuning
{
	struct CTacticalAnalysis__Tunables__BadRoute      BadRoute;                        // offset:0x010	type:STRUCT.STRUCTURE
	struct CTacticalAnalysis__Tunables__Rendering     Rendering;                       // offset:0x020	type:STRUCT.STRUCTURE
	float                                             MaxSpeedToActivate;              // offset:0x02C	type:FLOAT.0
	float                                             MinSpeedToDeactivate;            // offset:0x030	type:FLOAT.0
	float                                             MaxTimeWithNoReferences;         // offset:0x034	type:FLOAT.0
	bool                                              Enabled;                         // offset:0x038	type:BOOL.0
};

struct CTacticalAnalysis__Tunables__BadRoute
{
	float                            ValueForUnableToFind;            // offset:0x000	type:FLOAT.0
	float                            ValueForTooCloseToTarget;        // offset:0x004	type:FLOAT.0
	float                            MaxDistanceForTaint;             // offset:0x008	type:FLOAT.0
	float                            DecayRate;                       // offset:0x00C	type:FLOAT.0
};

struct CTacticalAnalysis__Tunables__Rendering
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	bool                             CoverPoints;                     // offset:0x001	type:BOOL.0
	bool                             NavMeshPoints;                   // offset:0x002	type:BOOL.0
	bool                             Position;                        // offset:0x003	type:BOOL.0
	bool                             LineOfSightStatus;               // offset:0x004	type:BOOL.0
	bool                             ArcStatus;                       // offset:0x005	type:BOOL.0
	bool                             Reserved;                        // offset:0x006	type:BOOL.0
	bool                             Nearby;                          // offset:0x007	type:BOOL.0
	bool                             BadRouteValue;                   // offset:0x008	type:BOOL.0
	bool                             Reservations;                    // offset:0x009	type:BOOL.0
	bool                             LineOfSightTests;                // offset:0x00A	type:BOOL.0
};

struct CTargettingDifficultyInfo
{
	enum LockType                    LockType;                        // offset:0x008	type:ENUM.32BIT
	bool                             UseFirstPersonStickyAim;         // offset:0x00C	type:BOOL.0
	bool                             UseLockOnTargetSwitching;        // offset:0x00D	type:BOOL.0
	bool                             UseReticuleSlowDown;             // offset:0x00E	type:BOOL.0
	bool                             UseReticuleSlowDownForRunAndGun; // offset:0x00F	type:BOOL.0
	bool                             EnableBulletBending;             // offset:0x010	type:BOOL.0
	bool                             AllowSoftLockFineAim;            // offset:0x011	type:BOOL.0
	bool                             UseFineAimSpring;                // offset:0x012	type:BOOL.0
	bool                             UseNewSlowDownCode;              // offset:0x013	type:BOOL.0
	bool                             UseCapsuleTests;                 // offset:0x014	type:BOOL.0
	bool                             UseDriveByAssistedAim;           // offset:0x015	type:BOOL.0
	bool                             CanPauseSoftLockTimer;           // offset:0x016	type:BOOL.0
	float                            LockOnRangeModifier;             // offset:0x018	type:FLOAT.0
	float                            ReticuleSlowDownRadius;          // offset:0x01C	type:FLOAT.0
	float                            ReticuleSlowDownCapsuleRadius;   // offset:0x020	type:FLOAT.0
	float                            ReticuleSlowDownCapsuleLength;   // offset:0x024	type:FLOAT.0
	float                            DefaultTargetAngularLimit;       // offset:0x028	type:FLOAT.0
	float                            DefaultTargetAngularLimitClose;  // offset:0x02C	type:FLOAT.0
	float                            DefaultTargetAngularLimitCloseDistMin; // offset:0x030	type:FLOAT.0
	float                            DefaultTargetAngularLimitCloseDistMax; // offset:0x034	type:FLOAT.0
	float                            WideTargetAngularLimit;          // offset:0x038	type:FLOAT.0
	float                            CycleTargetAngularLimit;         // offset:0x03C	type:FLOAT.0
	float                            CycleTargetAngularLimitMelee;    // offset:0x040	type:FLOAT.0
	float                            DefaultTargetAimPitchMin;        // offset:0x044	type:FLOAT.0
	float                            DefaultTargetAimPitchMax;        // offset:0x048	type:FLOAT.0
	float                            NoReticuleLockOnRangeModifier;   // offset:0x04C	type:FLOAT.0
	float                            NoReticuleMaxLockOnRange;        // offset:0x050	type:FLOAT.0
	float                            NoReticuleTargetAngularLimit;    // offset:0x054	type:FLOAT.0
	float                            NoReticuleTargetAngularLimitClose; // offset:0x058	type:FLOAT.0
	float                            NoReticuleTargetAngularLimitCloseDistMin; // offset:0x05C	type:FLOAT.0
	float                            NoReticuleTargetAngularLimitCloseDistMax; // offset:0x060	type:FLOAT.0
	float                            NoReticuleTargetAimPitchLimit;   // offset:0x064	type:FLOAT.0
	float                            MinVelocityForDriveByAssistedAim; // offset:0x068	type:FLOAT.0
	float                            LockOnDistanceRejectionModifier; // offset:0x06C	type:FLOAT.0
	float                            FineAimVerticalMovement;         // offset:0x070	type:FLOAT.0
	float                            FineAimDownwardsVerticalMovement; // offset:0x074	type:FLOAT.0
	float                            FineAimSidewaysScale;            // offset:0x078	type:FLOAT.0
	float                            MinSoftLockBreakTime;            // offset:0x07C	type:FLOAT.0
	float                            MinSoftLockBreakTimeCloseRange;  // offset:0x080	type:FLOAT.0
	float                            MinSoftLockBreakAtMaxXStickTime; // offset:0x084	type:FLOAT.0
	float                            SoftLockBreakDistanceMin;        // offset:0x088	type:FLOAT.0
	float                            SoftLockBreakDistanceMax;        // offset:0x08C	type:FLOAT.0
	float                            MinFineAimTime;                  // offset:0x090	type:FLOAT.0
	float                            MinFineAimTimeHoldingStick;      // offset:0x094	type:FLOAT.0
	float                            MinNoReticuleAimTime;            // offset:0x098	type:FLOAT.0
	float                            AimAssistCapsuleRadius;          // offset:0x09C	type:FLOAT.0
	float                            AimAssistCapsuleRadiusInVehicle; // offset:0x0A0	type:FLOAT.0
	float                            AimAssistCapsuleMaxLength;       // offset:0x0A4	type:FLOAT.0
	float                            AimAssistCapsuleMaxLengthInVehicle; // offset:0x0A8	type:FLOAT.0
	float                            _0xBF716F5A;                     // offset:0x0AC	type:FLOAT.0
	float                            _0x2D401380;                     // offset:0x0B0	type:FLOAT.0
	float                            AimAssistBlendInTime;            // offset:0x0B4	type:FLOAT.0
	float                            AimAssistBlendOutTime;           // offset:0x0B8	type:FLOAT.0
	float                            SoftLockFineAimBreakXYValue;     // offset:0x0BC	type:FLOAT.0
	float                            SoftLockFineAimBreakZValue;      // offset:0x0C0	type:FLOAT.0
	float                            SoftLockFineAimXYAbsoluteValue;  // offset:0x0C4	type:FLOAT.0
	float                            SoftLockFineAimXYAbsoluteValueClose; // offset:0x0C8	type:FLOAT.0
	float                            SoftLockBreakValue;              // offset:0x0CC	type:FLOAT.0
	float                            SoftLockTime;                    // offset:0x0D0	type:FLOAT.0
	float                            SoftLockTimeToAcquireTarget;     // offset:0x0D4	type:FLOAT.0
	float                            SoftLockTimeToAcquireTargetInCover; // offset:0x0D8	type:FLOAT.0
	float                            FineAimHorSpeedMin;              // offset:0x0DC	type:FLOAT.0
	float                            FineAimHorSpeedMax;              // offset:0x0E0	type:FLOAT.0
	float                            FineAimVerSpeed;                 // offset:0x0E4	type:FLOAT.0
	float                            FineAimSpeedMultiplier;          // offset:0x0E8	type:FLOAT.0
	float                            FineAimHorWeightSpeedMultiplier; // offset:0x0EC	type:FLOAT.0
	float                            FineAimHorSpeedPower;            // offset:0x0F0	type:FLOAT.0
	float                            FineAimSpeedMultiplierClose;     // offset:0x0F4	type:FLOAT.0
	float                            FineAimSpeedMultiplierCloseDistMin; // offset:0x0F8	type:FLOAT.0
	float                            FineAimSpeedMultiplierCloseDistMax; // offset:0x0FC	type:FLOAT.0
	float                            BulletBendingNearMultiplier;     // offset:0x100	type:FLOAT.0
	float                            BulletBendingFarMultiplier;      // offset:0x104	type:FLOAT.0
	float                            BulletBendingZoomMultiplier;     // offset:0x108	type:FLOAT.0
	float                            InVehicleBulletBendingNearMinVelocity; // offset:0x10C	type:FLOAT.0
	float                            InVehicleBulletBendingFarMinVelocity; // offset:0x110	type:FLOAT.0
	float                            InVehicleBulletBendingNearMaxVelocity; // offset:0x114	type:FLOAT.0
	float                            InVehicleBulletBendingFarMaxVelocity; // offset:0x118	type:FLOAT.0
	float                            InVehicleBulletBendingMaxVelocity; // offset:0x11C	type:FLOAT.0
	float                            XYDistLimitFromAimVector;        // offset:0x120	type:FLOAT.0
	float                            ZDistLimitFromAimVector;         // offset:0x124	type:FLOAT.0
	uint                             LockOnSwitchTimeExtensionBreakLock; // offset:0x128	type:UINT.0
	uint                             LockOnSwitchTimeExtensionKillTarget; // offset:0x12C	type:UINT.0
	array<struct CCurveSet, 4>       CurveSets;                       // offset:0x130	type:ARRAY.ATFIXEDARRAY
	struct CCurveSet                 AimAssistDistanceCurve;          // offset:0x1B8	type:STRUCT.STRUCTURE
};

struct CTaskAdvance__Tunables : CTuning
{
	float                            TimeToWaitAtPosition;            // offset:0x010	type:FLOAT.0
	float                            TimeBetweenPointUpdates;         // offset:0x014	type:FLOAT.0
	float                            TimeBetweenSeekChecksAtTacticalPoint; // offset:0x018	type:FLOAT.0
};

struct CTaskAgitated__Tunables : CTuning
{
	struct CTaskAgitated__Tunables__Rendering     Rendering;                       // offset:0x010	type:STRUCT.STRUCTURE
	float                                         TimeBetweenLookAts;              // offset:0x014	type:FLOAT.0
	float                                         MovingAwayVelocityMSThreshold;   // offset:0x018	type:FLOAT.0
};

struct CTaskAgitated__Tunables__Rendering
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	bool                             Info;                            // offset:0x001	type:BOOL.0
	bool                             Hashes;                          // offset:0x002	type:BOOL.0
	bool                             History;                         // offset:0x003	type:BOOL.0
};

struct CTaskAimAndThrowProjectile__Tunables : CTuning
{
	bool                             bEnableGaitAdditive;             // offset:0x010	type:BOOL.0
	float                            fMinHoldThrowPitch;              // offset:0x014	type:FLOAT.0
	uint                             iMaxRandomExplosionTime;         // offset:0x018	type:UINT.0
};

struct CTaskAimFromGround__Tunables : CTuning
{
	float                            MaxAimFromGroundTime;            // offset:0x010	type:FLOAT.0
};

struct CTaskAimGunBlindFire__BlindFireAnimStateInfoNew
{
	string                                                    IntroClip0Id;                    // offset:0x000	type:STRING.ATHASHVALUE
	string                                                    IntroClip1Id;                    // offset:0x004	type:STRING.ATHASHVALUE
	string                                                    SweepClip0Id;                    // offset:0x008	type:STRING.ATHASHVALUE
	string                                                    SweepClip1Id;                    // offset:0x00C	type:STRING.ATHASHVALUE
	string                                                    SweepClip2Id;                    // offset:0x010	type:STRING.ATHASHVALUE
	string                                                    OutroClip0Id;                    // offset:0x014	type:STRING.ATHASHVALUE
	string                                                    OutroClip1Id;                    // offset:0x018	type:STRING.ATHASHVALUE
	string                                                    CockGunClip0Id;                  // offset:0x01C	type:STRING.ATHASHVALUE
	string                                                    CockGunClip1Id;                  // offset:0x020	type:STRING.ATHASHVALUE
	string                                                    CockGunWeaponClipId;             // offset:0x024	type:STRING.ATHASHVALUE
	bitset<enum CTaskCover__eAnimFlags>                       Flags;                           // offset:0x028	type:BITSET.32BIT
	float                                                     MinHeadingAngle;                 // offset:0x02C	type:FLOAT.0
	float                                                     MaxHeadingAngle;                 // offset:0x030	type:FLOAT.0
	struct CTaskAimGunBlindFire__BlindFirePitchAnimAngles     ThirdPersonBlindFirePitchAngles; // offset:0x034	type:STRUCT.STRUCTURE
	struct CTaskAimGunBlindFire__BlindFirePitchAnimAngles     FirstPersonPersonBlindFirePitchAngles; // offset:0x044	type:STRUCT.STRUCTURE
};

struct CTaskAimGunBlindFire__BlindFirePitchAnimAngles
{
	float                            MinPitchAngle;                   // offset:0x000	type:FLOAT.0
	float                            MaxPitchAngle;                   // offset:0x004	type:FLOAT.0
	float                            MinPitchAngle2H;                 // offset:0x008	type:FLOAT.0
	float                            MaxPitchAngle2H;                 // offset:0x00C	type:FLOAT.0
};

struct CTaskAimGunBlindFire__Tunables : CTuning
{
	float                                                             LowBlindFireAimingDirectlyLimitAngle; // offset:0x010	type:FLOAT.0
	float                                                             HighBlindFireAimingDirectlyLimitAngle; // offset:0x014	type:FLOAT.0
	bool                                                              RemoveReticuleDuringBlindFire;   // offset:0x018	type:BOOL.0
	bool                                                              DontRemoveReticuleDuringBlindFireNew; // offset:0x019	type:BOOL.0
	array<struct CTaskAimGunBlindFire__BlindFireAnimStateInfoNew>     BlindFireAnimStateNewInfos;      // offset:0x020	type:ARRAY.ATARRAY
};

struct CTaskAimGunFromCoverIntro__AimIntroClip
{
	array<string>                           Clips;                           // offset:0x000	type:ARRAY.ATARRAY
	bitset<enum CTaskCover__eAnimFlags>     Flags;                           // offset:0x010	type:BITSET.32BIT
};

struct CTaskAimGunFromCoverIntro__AimStepInfo
{
	float                            StepOutX;                        // offset:0x000	type:FLOAT.0
	float                            StepOutY;                        // offset:0x004	type:FLOAT.0
	float                            StepTransitionMinAngle;          // offset:0x008	type:FLOAT.0
	float                            StepTransitionMaxAngle;          // offset:0x00C	type:FLOAT.0
	float                            PreviousTransitionExtraScalar;   // offset:0x010	type:FLOAT.0
	float                            NextTransitionExtraScalar;       // offset:0x014	type:FLOAT.0
	string                           PreviousTransitionClipId;        // offset:0x018	type:STRING.ATHASHVALUE
	string                           NextTransitionClipId;            // offset:0x01C	type:STRING.ATHASHVALUE
};

struct CTaskAimGunFromCoverIntro__AimStepInfoSet
{
	array<struct CTaskAimGunFromCoverIntro__AimStepInfo>     StepInfos;                       // offset:0x000	type:ARRAY.ATARRAY
};

struct CTaskAimGunFromCoverIntro__Tunables : CTuning
{
	float                                                     UpperBodyAimBlendInDuration;     // offset:0x010	type:FLOAT.0
	float                                                     IntroMovementDuration;           // offset:0x014	type:FLOAT.0
	bool                                                      DisableIntroScaling;             // offset:0x018	type:BOOL.0
	bool                                                      DisableTranslationScaling;       // offset:0x019	type:BOOL.0
	bool                                                      DisableRotationScaling;          // offset:0x01A	type:BOOL.0
	bool                                                      DisableIntroOverShootCheck;      // offset:0x01B	type:BOOL.0
	bool                                                      UseConstantIntroScaling;         // offset:0x01C	type:BOOL.0
	bool                                                      RenderArcsAtCoverPosition;       // offset:0x01D	type:BOOL.0
	bool                                                      RenderAimArcDebug;               // offset:0x01E	type:BOOL.0
	bool                                                      UseMoverPositionWhilePeeking;    // offset:0x01F	type:BOOL.0
	bool                                                      DisableWeaponBlocking;           // offset:0x020	type:BOOL.0
	float                                                     ArcRadius;                       // offset:0x024	type:FLOAT.0
	float                                                     IntroScalingDefaultStartPhase;   // offset:0x028	type:FLOAT.0
	float                                                     IntroScalingDefaultEndPhase;     // offset:0x02C	type:FLOAT.0
	float                                                     IntroRotScalingDefaultStartPhase; // offset:0x030	type:FLOAT.0
	float                                                     IntroRotScalingDefaultEndPhase;  // offset:0x034	type:FLOAT.0
	float                                                     IntroMaxScale;                   // offset:0x038	type:FLOAT.0
	float                                                     SteppingApproachRateSlow;        // offset:0x03C	type:FLOAT.0
	float                                                     SteppingApproachRate;            // offset:0x040	type:FLOAT.0
	float                                                     SteppingApproachRateFast;        // offset:0x044	type:FLOAT.0
	float                                                     SteppingHeadingApproachRate;     // offset:0x048	type:FLOAT.0
	float                                                     AiAimIntroCloseEnoughTolerance;  // offset:0x04C	type:FLOAT.0
	float                                                     MaxStepBackDist;                 // offset:0x050	type:FLOAT.0
	float                                                     MinStepOutDist;                  // offset:0x054	type:FLOAT.0
	float                                                     MaxStepOutDist;                  // offset:0x058	type:FLOAT.0
	float                                                     IntroRate;                       // offset:0x05C	type:FLOAT.0
	float                                                     IntroRateToPeekFPS;              // offset:0x060	type:FLOAT.0
	float                                                     OutroRate;                       // offset:0x064	type:FLOAT.0
	float                                                     OutroRateFromPeekFPS;            // offset:0x068	type:FLOAT.0
	float                                                     MinRotationalSpeedScale;         // offset:0x06C	type:FLOAT.0
	float                                                     MaxRotationalSpeedScale;         // offset:0x070	type:FLOAT.0
	float                                                     HeadingReachedTolerance;         // offset:0x074	type:FLOAT.0
	float                                                     StepOutCapsuleRadiusScale;       // offset:0x078	type:FLOAT.0
	float                                                     AimDirectlyMaxAngle;             // offset:0x07C	type:FLOAT.0
	float                                                     StepOutLeftX;                    // offset:0x080	type:FLOAT.0
	float                                                     StepOutRightX;                   // offset:0x084	type:FLOAT.0
	float                                                     StepOutY;                        // offset:0x088	type:FLOAT.0
	float                                                     LowXClearOffsetCapsuleTest;      // offset:0x08C	type:FLOAT.0
	float                                                     LowXOffsetCapsuleTest;           // offset:0x090	type:FLOAT.0
	float                                                     LowYOffsetCapsuleTest;           // offset:0x094	type:FLOAT.0
	float                                                     LowZOffsetCapsuleTest;           // offset:0x098	type:FLOAT.0
	float                                                     LowOffsetCapsuleLength;          // offset:0x09C	type:FLOAT.0
	float                                                     LowOffsetCapsuleRadius;          // offset:0x0A0	type:FLOAT.0
	float                                                     LowSideZOffset;                  // offset:0x0A4	type:FLOAT.0
	vec2                                                      LowLeftStep;                     // offset:0x0A8	type:VECTOR2.0
	vec2                                                      LowRightStep;                    // offset:0x0B0	type:VECTOR2.0
	float                                                     LowBlockedBlend;                 // offset:0x0B8	type:FLOAT.0
	float                                                     LowStepOutLeftXBlocked;          // offset:0x0BC	type:FLOAT.0
	float                                                     LowStepOutLeftYBlocked;          // offset:0x0C0	type:FLOAT.0
	float                                                     LowStepBackLeftXBlocked;         // offset:0x0C4	type:FLOAT.0
	float                                                     LowStepBackLeftYBlocked;         // offset:0x0C8	type:FLOAT.0
	float                                                     LowStepOutRightXBlocked;         // offset:0x0CC	type:FLOAT.0
	float                                                     LowStepOutRightYBlocked;         // offset:0x0D0	type:FLOAT.0
	float                                                     LowStepBackRightXBlocked;        // offset:0x0D4	type:FLOAT.0
	float                                                     LowStepBackRightYBlocked;        // offset:0x0D8	type:FLOAT.0
	float                                                     DistConsideredAtAimPosition;     // offset:0x0DC	type:FLOAT.0
	float                                                     MinPhaseToApplyExtraHeadingAi;   // offset:0x0E0	type:FLOAT.0
	float                                                     MinPhaseToApplyExtraHeadingPlayer; // offset:0x0E4	type:FLOAT.0
	float                                                     MaxAngularHeadingVelocityAi;     // offset:0x0E8	type:FLOAT.0
	float                                                     MaxAngularHeadingVelocityPlayer; // offset:0x0EC	type:FLOAT.0
	float                                                     MaxAngularHeadingVelocityPlayerForcedStandAim; // offset:0x0F0	type:FLOAT.0
	struct CTaskAimGunFromCoverIntro__AimStepInfoSet          HighLeftAimStepInfoSet;          // offset:0x0F8	type:STRUCT.STRUCTURE
	struct CTaskAimGunFromCoverIntro__AimStepInfoSet          HighRightAimStepInfoSet;         // offset:0x108	type:STRUCT.STRUCTURE
	array<struct CTaskAimGunFromCoverIntro__AimIntroClip>     AimIntroClips;                   // offset:0x118	type:ARRAY.ATARRAY
};

struct CTaskAimGunFromCoverOutro__Tunables : CTuning
{
	bool                                                           DisableOutroScaling;             // offset:0x010	type:BOOL.0
	bool                                                           DisableRotationScaling;          // offset:0x011	type:BOOL.0
	bool                                                           DisableOutroOverShootCheck;      // offset:0x012	type:BOOL.0
	bool                                                           UseConstantOutroScaling;         // offset:0x013	type:BOOL.0
	float                                                          OutroScalingDefaultStartPhase;   // offset:0x014	type:FLOAT.0
	float                                                          OutroScalingDefaultEndPhase;     // offset:0x018	type:FLOAT.0
	float                                                          OutroRotationScalingDefaultStartPhase; // offset:0x01C	type:FLOAT.0
	float                                                          OutroRotationScalingDefaultEndPhase; // offset:0x020	type:FLOAT.0
	float                                                          OutroMaxScale;                   // offset:0x024	type:FLOAT.0
	float                                                          AdditionalModifier;              // offset:0x028	type:FLOAT.0
	float                                                          EndHeadingTolerance;             // offset:0x02C	type:FLOAT.0
	float                                                          DesiredDistanceToCover;          // offset:0x030	type:FLOAT.0
	float                                                          InCoverMovementSpeed;            // offset:0x034	type:FLOAT.0
	float                                                          OutroMovementDuration;           // offset:0x038	type:FLOAT.0
	float                                                          UpperBodyAimBlendOutDuration;    // offset:0x03C	type:FLOAT.0
	float                                                          MaxAngularHeadingVelocityAi;     // offset:0x040	type:FLOAT.0
	float                                                          MaxAngularHeadingVelocityPlayer; // offset:0x044	type:FLOAT.0
	float                                                          MaxAngularHeadingVelocityPlayerFPS; // offset:0x048	type:FLOAT.0
	float                                                          MaxAngularHeadingVelocityPlayerForcedStandAim; // offset:0x04C	type:FLOAT.0
	struct CTaskAimGunFromCoverOutro__Tunables__AnimStateInfos     ThirdPersonAnimStateInfos;       // offset:0x050	type:STRUCT.STRUCTURE
	struct CTaskAimGunFromCoverOutro__Tunables__AnimStateInfos     FirstPersonAnimStateInfos;       // offset:0x060	type:STRUCT.STRUCTURE
};

struct CTaskAimGunFromCoverOutro__Tunables__AnimStateInfos
{
	array<struct CTaskCover__CoverAnimStateInfo>     AimOutroAnimStateInfos;          // offset:0x000	type:ARRAY.ATARRAY
};

struct CTaskAimGunOnFoot__Tunables : CTuning
{
	float                            MinTimeBetweenFiringVariations;  // offset:0x010	type:FLOAT.0
	float                            IdealPitchForFiringVariation;    // offset:0x014	type:FLOAT.0
	float                            MaxPitchDifferenceForFiringVariation; // offset:0x018	type:FLOAT.0
	float                            AssistedAimOutroTime;            // offset:0x01C	type:FLOAT.0
	float                            RunAndGunOutroTime;              // offset:0x020	type:FLOAT.0
	float                            AimOutroTime;                    // offset:0x024	type:FLOAT.0
	float                            AimOutroTimeIfAimingOnStick;     // offset:0x028	type:FLOAT.0
	float                            AimOutroMinTaskTimeWhenRunPressed; // offset:0x02C	type:FLOAT.0
	float                            AimingOnStickExitCooldown;       // offset:0x030	type:FLOAT.0
	float                            TimeForRunAndGunOutroDelays;     // offset:0x034	type:FLOAT.0
	float                            DampenRootTargetWeight;          // offset:0x038	type:FLOAT.0
	float                            DampenRootTargetHeight;          // offset:0x03C	type:FLOAT.0
	float                            AlternativeAnimBlockedHeight;    // offset:0x040	type:FLOAT.0
	vec3                             CoverAimOffsetFromBlocked;       // offset:0x050	type:VECTOR3.0
	uint                             DelayTimeWhenOutOfAmmoInScope;   // offset:0x060	type:UINT.0
};

struct CTaskAimGunVehicleDriveBy__Tunables : CTuning
{
	float                            MinTimeBetweenInsults;           // offset:0x010	type:FLOAT.0
	float                            MaxDistanceToInsult;             // offset:0x014	type:FLOAT.0
	float                            MinDotToInsult;                  // offset:0x018	type:FLOAT.0
	uint                             MinAimTimeMs;                    // offset:0x01C	type:UINT.0
	uint                             MaxAimTimeOnStickMs;             // offset:0x020	type:UINT.0
	uint                             AimingOnStickCooldownMs;         // offset:0x024	type:UINT.0
	string                           BicycleDrivebyFilterId;          // offset:0x028	type:STRING.ATHASHVALUE
	string                           BikeDrivebyFilterId;             // offset:0x02C	type:STRING.ATHASHVALUE
	string                           JetskiDrivebyFilterId;           // offset:0x030	type:STRING.ATHASHVALUE
	string                           ParachutingFilterId;             // offset:0x034	type:STRING.ATHASHVALUE
	string                           FirstPersonGripLeftClipId;       // offset:0x038	type:STRING.ATHASHVALUE
	string                           FirstPersonGripRightClipId;      // offset:0x03C	type:STRING.ATHASHVALUE
	string                           FirstPersonFireLeftClipId;       // offset:0x040	type:STRING.ATHASHVALUE
	string                           FirstPersonFireRightClipId;      // offset:0x044	type:STRING.ATHASHVALUE
};

struct CTaskAmbientClips__Tunables : CTuning
{
	string                           LowLodBaseClipSetId;             // offset:0x010	type:STRING.ATHASHVALUE
	float                            DefaultChanceOfStandingWhileMoving; // offset:0x014	type:FLOAT.0
	float                            DefaultTimeBetweenIdles;         // offset:0x018	type:FLOAT.0
	float                            TimeAfterGunshotToPlayIdles;     // offset:0x01C	type:FLOAT.0
	float                            TimeAfterGunshotForPlayerToPlayIdles; // offset:0x020	type:FLOAT.0
	float                            playerNearToHangoutDistanceInMetersSquared; // offset:0x024	type:FLOAT.0
	float                            minSecondsNearPlayerUntilHangoutQuit; // offset:0x028	type:FLOAT.0
	float                            maxSecondsNearPlayerUntilHangoutQuit; // offset:0x02C	type:FLOAT.0
	float                            maxHangoutChatDistSq;            // offset:0x030	type:FLOAT.0
	float                            VFXCullRangeScaleNotVisible;     // offset:0x034	type:FLOAT.0
	float                            SecondsSinceInWaterThatCountsAsWet; // offset:0x038	type:FLOAT.0
	float                            MaxVehicleVelocityForAmbientIdles; // offset:0x03C	type:FLOAT.0
	float                            MaxBikeVelocityForAmbientIdles;  // offset:0x040	type:FLOAT.0
	float                            MaxSteeringAngleForAmbientIdles; // offset:0x044	type:FLOAT.0
	uint                             MaxTimeSinceGetUpForAmbientIdles; // offset:0x048	type:UINT.0
	float                            fArgumentDistanceMinSq;          // offset:0x04C	type:FLOAT.0
	float                            fArgumentDistanceMaxSq;          // offset:0x050	type:FLOAT.0
	float                            fArgumentProbability;            // offset:0x054	type:FLOAT.0
};

struct CTaskAnimatedHitByExplosion__Tunables : CTuning
{
	bool                             AllowPitchAndRoll;               // offset:0x010	type:BOOL.0
	float                            InitialRagdollDelay;             // offset:0x014	type:FLOAT.0
};

struct CTaskArrestPed__Tunables : CTuning
{
	float                            AimDistance;                     // offset:0x010	type:FLOAT.0
	float                            ArrestDistance;                  // offset:0x014	type:FLOAT.0
	float                            ArrestInVehicleDistance;         // offset:0x018	type:FLOAT.0
	float                            MoveToDistanceInVehicle;         // offset:0x01C	type:FLOAT.0
	float                            TargetDistanceFromVehicleEntry;  // offset:0x020	type:FLOAT.0
	float                            ArrestingCopMaxDistanceFromTarget; // offset:0x024	type:FLOAT.0
	float                            BackupCopMaxDistanceFromTarget;  // offset:0x028	type:FLOAT.0
	float                            MinTimeOnFootTargetStillForArrest; // offset:0x02C	type:FLOAT.0
	uint                             RegainComet;                     // offset:0x030	type:UINT.0
};

struct CTaskBirdLocomotion__Tunables : CTuning
{
	uint                             MinWaitTimeBetweenTakeOffsMS;    // offset:0x010	type:UINT.0
	uint                             MaxWaitTimeBetweenTakeOffsMS;    // offset:0x014	type:UINT.0
	float                            MinTakeOffRate;                  // offset:0x018	type:FLOAT.0
	float                            MaxTakeOffRate;                  // offset:0x01C	type:FLOAT.0
	float                            MinTakeOffHeadingChangeRate;     // offset:0x020	type:FLOAT.0
	float                            MaxTakeOffHeadingChangeRate;     // offset:0x024	type:FLOAT.0
	float                            DefaultTakeoffBlendoutPhase;     // offset:0x028	type:FLOAT.0
	float                            TimeToFlapMin;                   // offset:0x02C	type:FLOAT.0
	float                            TimeToFlapMax;                   // offset:0x030	type:FLOAT.0
	float                            NoAnimTimeslicingShadowRange;    // offset:0x034	type:FLOAT.0
	float                            ForceNoTimeslicingHeadingDiff;   // offset:0x038	type:FLOAT.0
	float                            MinDistanceFromPlayerToDeleteStuckBird; // offset:0x03C	type:FLOAT.0
	float                            TimeUntilDeletionWhenStuckOffscreen; // offset:0x040	type:FLOAT.0
	float                            TimeWhenStuckToIgnoreBird;       // offset:0x044	type:FLOAT.0
	float                            HighLodWalkHeadingLerpRate;      // offset:0x048	type:FLOAT.0
	float                            LowLodWalkHeadingLerpRate;       // offset:0x04C	type:FLOAT.0
	float                            PlayerWalkCapsuleRadius;         // offset:0x050	type:FLOAT.0
	float                            AIBirdTurnApproachRate;          // offset:0x054	type:FLOAT.0
	float                            PlayerGlideIdealTurnRate;        // offset:0x058	type:FLOAT.0
	float                            PlayerGlideTurnAcceleration;     // offset:0x060	type:FLOAT.0
	float                            PlayerHeadingDeadZoneThresholdDegrees; // offset:0x064	type:FLOAT.0
	float                            PlayerFlappingTurnAcceleration;  // offset:0x068	type:FLOAT.0
	float                            PlayerFlappingIdealTurnRate;     // offset:0x06C	type:FLOAT.0
	float                            AIPitchTurnApproachRate;         // offset:0x074	type:FLOAT.0
	float                            PlayerPitchIdealRate;            // offset:0x078	type:FLOAT.0
	float                            PlayerPitchAcceleration;         // offset:0x07C	type:FLOAT.0
	float                            PlayerTiltedDownToleranceDegrees; // offset:0x080	type:FLOAT.0
	float                            PlayerTiltedDownSpeedBoost;      // offset:0x084	type:FLOAT.0
	float                            PlayerTiltedSpeedCap;            // offset:0x088	type:FLOAT.0
	string                           PlayerControlCamera;             // offset:0x08C	type:STRING.ATHASHVALUE
};

struct CTaskBoatChase__Tunables : CTuning
{
	float                            IdealDistanceForPursue;          // offset:0x010	type:FLOAT.0
};

struct CTaskBoatCombat__Tunables : CTuning
{
	struct CTaskBoatCombat__Tunables__Rendering     Rendering;                       // offset:0x010	type:STRUCT.STRUCTURE
	float                                           MinSpeedForChase;                // offset:0x014	type:FLOAT.0
	float                                           TimeToLookAheadForCollision;     // offset:0x018	type:FLOAT.0
	float                                           DepthForLandProbe;               // offset:0x01C	type:FLOAT.0
	float                                           TimeToWait;                      // offset:0x020	type:FLOAT.0
};

struct CTaskBoatCombat__Tunables__Rendering
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	bool                             CollisionProbe;                  // offset:0x001	type:BOOL.0
	bool                             LandProbe;                       // offset:0x002	type:BOOL.0
};

struct CTaskBoatStrafe__Tunables : CTuning
{
	float                            AdditionalDistanceForApproach;   // offset:0x010	type:FLOAT.0
	float                            AdditionalDistanceForStrafe;     // offset:0x014	type:FLOAT.0
	float                            CruiseSpeedForStrafe;            // offset:0x018	type:FLOAT.0
	float                            RotationLookAhead;               // offset:0x01C	type:FLOAT.0
	float                            MaxAdjustmentLookAhead;          // offset:0x020	type:FLOAT.0
};

struct CTaskCallPolice__Tunables : CTuning
{
	float                            MinTimeMovingAwayToGiveToWitness; // offset:0x010	type:FLOAT.0
	float                            MinTimeSinceTalkingEndedToMakeCall; // offset:0x014	type:FLOAT.0
	float                            MinTimeSinceTargetTalkingEndedToMakeCall; // offset:0x018	type:FLOAT.0
	float                            MinTimeTargetHasBeenTalkingToMakeCall; // offset:0x01C	type:FLOAT.0
	float                            MinTimeSinceTalkingEndedToSayContextForCall; // offset:0x020	type:FLOAT.0
	float                            MinTimeSpentInEarLoopToSayContextForCall; // offset:0x024	type:FLOAT.0
	float                            MinTimeToSpendInEarLoopToPutDownPhone; // offset:0x028	type:FLOAT.0
	float                            MaxTimeToSpendInEarLoopToPutDownPhone; // offset:0x02C	type:FLOAT.0
};

struct CTaskCarReactToVehicleCollision__Tunables : CTuning
{
	struct CTaskCarReactToVehicleCollision__Tunables__SlowDown     SlowDown;                        // offset:0x010	type:STRUCT.STRUCTURE
	float                                                          MaxDamageToIgnore;               // offset:0x030	type:FLOAT.0
};

struct CTaskCarReactToVehicleCollision__Tunables__SlowDown
{
	float                            MinTimeToReact;                  // offset:0x000	type:FLOAT.0
	float                            MaxTimeToReact;                  // offset:0x004	type:FLOAT.0
	float                            MaxCruiseSpeed;                  // offset:0x008	type:FLOAT.0
	float                            ChancesToHonk;                   // offset:0x00C	type:FLOAT.0
	float                            ChancesToHonkHeldDown;           // offset:0x010	type:FLOAT.0
	float                            ChancesToFlipOff;                // offset:0x014	type:FLOAT.0
	float                            MinTime;                         // offset:0x018	type:FLOAT.0
	float                            MaxTime;                         // offset:0x01C	type:FLOAT.0
};

struct CTaskChat__Tunables : CTuning
{
	float                            HeadingToleranceDegrees;         // offset:0x010	type:FLOAT.0
	float                            MaxWaitTime;                     // offset:0x014	type:FLOAT.0
};

struct CTaskCloseVehicleDoorFromInside__Tunables : CTuning
{
	bool                             EnableCloseDoorHandIk;           // offset:0x010	type:BOOL.0
	float                            CloseDoorForceMultiplier;        // offset:0x014	type:FLOAT.0
	float                            DefaultCloseDoorStartPhase;      // offset:0x018	type:FLOAT.0
	float                            DefaultCloseDoorEndPhase;        // offset:0x01C	type:FLOAT.0
	float                            DefaultCloseDoorStartIkPhase;    // offset:0x020	type:FLOAT.0
	float                            DefaultCloseDoorEndIkPhase;      // offset:0x024	type:FLOAT.0
	float                            MinBlendWeightToUseFarClipEvents; // offset:0x028	type:FLOAT.0
	float                            VehicleSpeedToAbortCloseDoor;    // offset:0x02C	type:FLOAT.0
	float                            PedTestXOffset;                  // offset:0x030	type:FLOAT.0
	float                            PedTestYOffset;                  // offset:0x034	type:FLOAT.0
	float                            PedTestZStartOffset;             // offset:0x038	type:FLOAT.0
	float                            PedTestZOffset;                  // offset:0x03C	type:FLOAT.0
	float                            PedTestRadius;                   // offset:0x040	type:FLOAT.0
	float                            MinOpenDoorRatioToUseArmIk;      // offset:0x044	type:FLOAT.0
};

struct CTaskCombatAdditionalTask__Tunables : CTuning
{
	int                              iBulletEventResponseLengthMs;    // offset:0x010	type:INT.0
	float                            fChanceOfDynamicRun;             // offset:0x014	type:FLOAT.0
	float                            fMaxDynamicStrafeDistance;       // offset:0x018	type:FLOAT.0
	float                            fMinTimeInState;                 // offset:0x01C	type:FLOAT.0
	float                            fMoveBlendRatioLerpTime;         // offset:0x020	type:FLOAT.0
	float                            fMinDistanceToClearCorner;       // offset:0x024	type:FLOAT.0
	float                            fMaxDistanceFromCorner;          // offset:0x028	type:FLOAT.0
	float                            fMaxLeavingCornerDistance;       // offset:0x02C	type:FLOAT.0
	float                            fBlockedLosAimTime;              // offset:0x030	type:FLOAT.0
	float                            fStartAimingDistance;            // offset:0x034	type:FLOAT.0
	float                            fStopAimingDistance;             // offset:0x038	type:FLOAT.0
	float                            fMinOtherPedDistanceDiff;        // offset:0x03C	type:FLOAT.0
	float                            fMinTimeBetweenRunDirectlyChecks; // offset:0x040	type:FLOAT.0
	float                            fMaxTimeStrafing;                // offset:0x044	type:FLOAT.0
	float                            fMinTimeRunning;                 // offset:0x048	type:FLOAT.0
	float                            fForceStrafeDistance;            // offset:0x04C	type:FLOAT.0
	float                            fMaxLosBlockedTimeToForceClearLos; // offset:0x050	type:FLOAT.0
};

struct CTaskCombatFlank__Tunables : CTuning
{
	float                            fInfluenceSphereInnerWeight;     // offset:0x010	type:FLOAT.0
	float                            fInfluenceSphereOuterWeight;     // offset:0x014	type:FLOAT.0
	float                            fInfluenceSphereRequestRadius;   // offset:0x018	type:FLOAT.0
	float                            fInfluenceSphereCheckRouteRadius; // offset:0x01C	type:FLOAT.0
	float                            fSmallInfluenceSphereRadius;     // offset:0x020	type:FLOAT.0
	float                            fDistanceBetweenInfluenceSpheres; // offset:0x024	type:FLOAT.0
	float                            fAbsoluteMinDistanceToTarget;    // offset:0x028	type:FLOAT.0
	float                            fCoverPointScoreMultiplier;      // offset:0x02C	type:FLOAT.0
};

struct CTaskCombat__Tunables : CTuning
{
	struct CTaskCombat__Tunables__BuddyShot                   BuddyShot;                       // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskCombat__Tunables__LackOfHostility             LackOfHostility;                 // offset:0x024	type:STRUCT.STRUCTURE
	struct CTaskCombat__Tunables__EnemyAccuracyScaling        EnemyAccuracyScaling;            // offset:0x050	type:STRUCT.STRUCTURE
	struct CTaskCombat__Tunables__ChargeTuning                ChargeTuning;                    // offset:0x05C	type:STRUCT.STRUCTURE
	struct CTaskCombat__Tunables__ThrowSmokeGrenadeTuning     ThrowSmokeGrenadeTuning;         // offset:0x098	type:STRUCT.STRUCTURE
	float                                                     MaxDistToCoverZ;                 // offset:0x0BC	type:FLOAT.0
	float                                                     MaxDistToCoverXY;                // offset:0x0C0	type:FLOAT.0
	float                                                     fAmbientAnimsMinDistToTargetSq;  // offset:0x0C4	type:FLOAT.0
	float                                                     fAmbientAnimsMaxDistToTargetSq;  // offset:0x0C8	type:FLOAT.0
	float                                                     fGoToDefAreaTimeOut;             // offset:0x0CC	type:FLOAT.0
	float                                                     fFireContinuouslyDistMin;        // offset:0x0D0	type:FLOAT.0
	float                                                     fFireContinuouslyDistMax;        // offset:0x0D4	type:FLOAT.0
	float                                                     fLostTargetTime;                 // offset:0x0D8	type:FLOAT.0
	float                                                     fMinTimeAfterAimPoseForStateChange; // offset:0x0DC	type:FLOAT.0
	float                                                     fMaxAttemptMoveToCoverDelay;     // offset:0x0E0	type:FLOAT.0
	float                                                     fMaxAttemptMoveToCoverDelayGlobal; // offset:0x0E4	type:FLOAT.0
	float                                                     fMinAttemptMoveToCoverDelay;     // offset:0x0E8	type:FLOAT.0
	float                                                     fMinAttemptMoveToCoverDelayGlobal; // offset:0x0EC	type:FLOAT.0
	float                                                     fMinDistanceForAltCover;         // offset:0x0F0	type:FLOAT.0
	float                                                     fMinTimeStandingAtCover;         // offset:0x0F4	type:FLOAT.0
	float                                                     fMinTimeBetweenFrustratedPeds;   // offset:0x0F8	type:FLOAT.0
	float                                                     fMaxTimeBetweenFrustratedPeds;   // offset:0x0FC	type:FLOAT.0
	float                                                     fMaxWaitForCoverExitTime;        // offset:0x100	type:FLOAT.0
	float                                                     fRetreatTime;                    // offset:0x104	type:FLOAT.0
	float                                                     fTargetTooCloseDistance;         // offset:0x108	type:FLOAT.0
	float                                                     fTimeBetweenCoverSearchesMax;    // offset:0x10C	type:FLOAT.0
	float                                                     fTimeBetweenCoverSearchesMin;    // offset:0x110	type:FLOAT.0
	float                                                     fTimeBetweenAltCoverSearches;    // offset:0x114	type:FLOAT.0
	float                                                     fTimeBetweenJackingAttempts;     // offset:0x118	type:FLOAT.0
	float                                                     fShoutTargetPositionInterval;    // offset:0x11C	type:FLOAT.0
	float                                                     fShoutBlockingLosInterval;       // offset:0x120	type:FLOAT.0
	float                                                     fTimeBetweenDragsMin;            // offset:0x124	type:FLOAT.0
	float                                                     fTimeBetweenSecondaryTargetUsesMin; // offset:0x128	type:FLOAT.0
	float                                                     fTimeBetweenSecondaryTargetUsesMax; // offset:0x12C	type:FLOAT.0
	float                                                     fTimeToUseSecondaryTargetMin;    // offset:0x130	type:FLOAT.0
	float                                                     fTimeToUseSecondaryTargetMax;    // offset:0x134	type:FLOAT.0
	float                                                     fTimeBetweenCombatDirectorUpdates; // offset:0x138	type:FLOAT.0
	float                                                     fTimeBetweenPassiveAnimsMin;     // offset:0x13C	type:FLOAT.0
	float                                                     fTimeBetweenPassiveAnimsMax;     // offset:0x140	type:FLOAT.0
	float                                                     fTimeBetweenQuickGlancesMin;     // offset:0x144	type:FLOAT.0
	float                                                     fTimeBetweenQuickGlancesMax;     // offset:0x148	type:FLOAT.0
	float                                                     fTimeBetweenGestureAnimsMin;     // offset:0x14C	type:FLOAT.0
	float                                                     fTimeBetweenGestureAnimsMax;     // offset:0x150	type:FLOAT.0
	float                                                     fTimeBetweenFailedGestureMin;    // offset:0x154	type:FLOAT.0
	float                                                     fTimeBetweenFailedGestureMax;    // offset:0x158	type:FLOAT.0
	float                                                     fTimeBetweenGesturesMinGlobal;   // offset:0x15C	type:FLOAT.0
	float                                                     fTimeBetweenGesturesMaxGlobal;   // offset:0x160	type:FLOAT.0
	float                                                     fTimeSinceLastAimedAtForGesture; // offset:0x164	type:FLOAT.0
	float                                                     fMinTimeBeforeReactToExplosion;  // offset:0x168	type:FLOAT.0
	float                                                     fMaxTimeBeforeReactToExplosion;  // offset:0x16C	type:FLOAT.0
	float                                                     TargetInfluenceSphereRadius;     // offset:0x170	type:FLOAT.0
	float                                                     TargetMinDistanceToRoute;        // offset:0x174	type:FLOAT.0
	float                                                     TargetMinDistanceToAwayFacingNavLink; // offset:0x178	type:FLOAT.0
	float                                                     fMaxDstanceToMoveAwayFromAlly;   // offset:0x17C	type:FLOAT.0
	float                                                     fTimeBetweenAllyProximityChecks; // offset:0x180	type:FLOAT.0
	float                                                     fMinDistanceFromPrimaryTarget;   // offset:0x184	type:FLOAT.0
	float                                                     fMaxAngleBetweenTargets;         // offset:0x188	type:FLOAT.0
	float                                                     MaxDistanceFromPedToHelpPed;     // offset:0x18C	type:FLOAT.0
	float                                                     MaxDotToTargetToHelpPed;         // offset:0x190	type:FLOAT.0
	float                                                     MaxHeadingDifferenceForQuickGlanceInSameDirection; // offset:0x194	type:FLOAT.0
	float                                                     MinTimeBetweenQuickGlancesInSameDirection; // offset:0x198	type:FLOAT.0
	float                                                     MaxSpeedToStartJackingVehicle;   // offset:0x19C	type:FLOAT.0
	float                                                     MaxSpeedToContinueJackingVehicle; // offset:0x1A0	type:FLOAT.0
	float                                                     TargetJackRadius;                // offset:0x1A4	type:FLOAT.0
	float                                                     SafetyProportionInDefensiveAreaMin; // offset:0x1A8	type:FLOAT.0
	float                                                     SafetyProportionInDefensiveAreaMax; // offset:0x1AC	type:FLOAT.0
	float                                                     MaxMoveToDefensiveAreaAngleVariation; // offset:0x1B0	type:FLOAT.0
	float                                                     MinDistanceToEnterVehicleIfTargetEntersVehicle; // offset:0x1B4	type:FLOAT.0
	float                                                     MaxDistanceToMyVehicleToChase;   // offset:0x1B8	type:FLOAT.0
	float                                                     MaxDistanceToVehicleForCommandeer; // offset:0x1BC	type:FLOAT.0
	uchar                                                     NumEarlyVehicleEntryDriversAllowed; // offset:0x1C0	type:UCHAR.0
	uint                                                      SafeTimeBeforeLeavingCover;      // offset:0x1C4	type:UINT.0
	uint                                                      WaitTimeForJackingSlowedVehicle; // offset:0x1C8	type:UINT.0
	float                                                     MaxInjuredTargetTimerVariation;  // offset:0x1CC	type:FLOAT.0
	uchar                                                     MaxNumPedsChasingOnFoot;         // offset:0x1D0	type:UCHAR.0
	float                                                     FireTimeAfterStaticMovementAbort; // offset:0x1D4	type:FLOAT.0
	float                                                     MinMovingToCoverTimeToStop;      // offset:0x1D8	type:FLOAT.0
	float                                                     MinDistanceToCoverToStop;        // offset:0x1DC	type:FLOAT.0
	float                                                     FireTimeAfterStoppingMoveToCover; // offset:0x1E0	type:FLOAT.0
	float                                                     ApproachingTargetVehicleHoldFireDistance; // offset:0x1E4	type:FLOAT.0
	float                                                     MinDefensiveAreaRadiusForWillAdvance; // offset:0x1E8	type:FLOAT.0
	float                                                     MaxDistanceToHoldFireForArrest;  // offset:0x1EC	type:FLOAT.0
	float                                                     TimeToDelayChaseOnFoot;          // offset:0x1F0	type:FLOAT.0
	float                                                     FireTimeAfterChaseOnFoot;        // offset:0x1F4	type:FLOAT.0
	uint                                                      MinTimeToChangeChaseOnFootSpeed; // offset:0x1F8	type:UINT.0
	bool                                                      EnableForcedFireForTargetProximity; // offset:0x1FC	type:BOOL.0
	float                                                     MinForceFiringStateTime;         // offset:0x200	type:FLOAT.0
	float                                                     MaxForceFiringStateTime;         // offset:0x204	type:FLOAT.0
	float                                                     TimeBeforeInitialForcedFire;     // offset:0x208	type:FLOAT.0
	float                                                     TimeBetweenForcedFireStates;     // offset:0x20C	type:FLOAT.0
	float                                                     MinTimeInStateForForcedFire;     // offset:0x210	type:FLOAT.0
	float                                                     MinForceFiringDistance;          // offset:0x214	type:FLOAT.0
	float                                                     MaxForceFiringDistance;          // offset:0x218	type:FLOAT.0
	float                                                     MinDistanceForAimIntro;          // offset:0x21C	type:FLOAT.0
	float                                                     MinDistanceToBlockAimIntro;      // offset:0x220	type:FLOAT.0
	float                                                     MinBlockedLOSTimeToBlockAimIntro; // offset:0x224	type:FLOAT.0
	float                                                     AmbientAnimLengthBuffer;         // offset:0x228	type:FLOAT.0
	uint                                                      TimeBetweenPlayerArrestAttempts; // offset:0x22C	type:UINT.0
	uint                                                      TimeBetweenArmedMeleeAttemptsInMs; // offset:0x230	type:UINT.0
	bool                                                      AllowMovingArmedMeleeAttack;     // offset:0x234	type:BOOL.0
	float                                                     TimeToHoldFireAfterJack;         // offset:0x238	type:FLOAT.0
	uint                                                      MinTimeBetweenMeleeJackAttempts; // offset:0x23C	type:UINT.0
	uint                                                      MinTimeBetweenMeleeJackAttemptsOnNetworkClone; // offset:0x240	type:UINT.0
	float                                                     MaxTimeToHoldFireAtTaskInitialization; // offset:0x244	type:FLOAT.0
	uint                                                      MaxTimeToRejectRespawnedTarget;  // offset:0x248	type:UINT.0
	float                                                     MinDistanceForLawToFleeFromCombat; // offset:0x24C	type:FLOAT.0
	float                                                     MaxDistanceForLawToReturnToCombatFromFlee; // offset:0x250	type:FLOAT.0
	float                                                     fTimeLosBlockedForReturnToInitialPosition; // offset:0x254	type:FLOAT.0
};

struct CTaskCombat__Tunables__BuddyShot
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	float                            MinTimeBeforeReact;              // offset:0x004	type:FLOAT.0
	float                            MaxTimeBeforeReact;              // offset:0x008	type:FLOAT.0
	float                            MaxTimeSinceShot;                // offset:0x00C	type:FLOAT.0
	float                            MaxDistance;                     // offset:0x010	type:FLOAT.0
};

struct CTaskCombat__Tunables__ChargeTuning
{
	bool                             bChargeTargetEnabled;            // offset:0x000	type:BOOL.0
	uchar                            uMaxNumActiveChargers;           // offset:0x001	type:UCHAR.0
	uint                             uConsiderRecentChargeAsActiveTimeoutMS; // offset:0x004	type:UINT.0
	uint                             uMinTimeBetweenChargesAtSameTargetMS; // offset:0x008	type:UINT.0
	uint                             uMinTimeForSamePedToChargeAgainMS; // offset:0x00C	type:UINT.0
	uint                             uCheckForChargeTargetPeriodMS;   // offset:0x010	type:UINT.0
	float                            fMinTimeInCombatSeconds;         // offset:0x014	type:FLOAT.0
	float                            fMinDistanceToTarget;            // offset:0x018	type:FLOAT.0
	float                            fMaxDistanceToTarget;            // offset:0x01C	type:FLOAT.0
	float                            fMinDistToNonTargetEnemy;        // offset:0x020	type:FLOAT.0
	float                            fMinDistBetweenTargetAndOtherEnemies; // offset:0x024	type:FLOAT.0
	float                            fDistToHidingTarget_Outer;       // offset:0x028	type:FLOAT.0
	float                            fDistToHidingTarget_Inner;       // offset:0x02C	type:FLOAT.0
	float                            fChargeGoalCompletionRadius;     // offset:0x030	type:FLOAT.0
	float                            fCancelTargetOutOfCoverMovedDist; // offset:0x034	type:FLOAT.0
	float                            fCancelTargetInCoverMovedDist;   // offset:0x038	type:FLOAT.0
};

struct CTaskCombat__Tunables__EnemyAccuracyScaling
{
	int                              iMinNumEnemiesForScaling;        // offset:0x000	type:INT.0
	float                            fAccuracyReductionPerEnemy;      // offset:0x004	type:FLOAT.0
	float                            fAccuracyReductionFloor;         // offset:0x008	type:FLOAT.0
};

struct CTaskCombat__Tunables__LackOfHostility
{
	struct CTaskCombat__Tunables__LackOfHostility__WantedLevel     WantedLevel1;                    // offset:0x000	type:STRUCT.STRUCTURE
	struct CTaskCombat__Tunables__LackOfHostility__WantedLevel     WantedLevel2;                    // offset:0x008	type:STRUCT.STRUCTURE
	struct CTaskCombat__Tunables__LackOfHostility__WantedLevel     WantedLevel3;                    // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskCombat__Tunables__LackOfHostility__WantedLevel     WantedLevel4;                    // offset:0x018	type:STRUCT.STRUCTURE
	struct CTaskCombat__Tunables__LackOfHostility__WantedLevel     WantedLevel5;                    // offset:0x020	type:STRUCT.STRUCTURE
	float                                                          MaxSpeedForVehicle;              // offset:0x028	type:FLOAT.0
};

struct CTaskCombat__Tunables__LackOfHostility__WantedLevel
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	float                            MinTimeSinceLastHostileAction;   // offset:0x004	type:FLOAT.0
};

struct CTaskCombat__Tunables__ThrowSmokeGrenadeTuning
{
	bool                             bThrowSmokeGrenadeEnabled;       // offset:0x000	type:BOOL.0
	uchar                            uMaxNumActiveThrowers;           // offset:0x001	type:UCHAR.0
	uint                             uConsiderRecentThrowAsActiveTimeoutMS; // offset:0x004	type:UINT.0
	uint                             uMinTimeBetweenThrowsAtSameTargetMS; // offset:0x008	type:UINT.0
	uint                             uMinTimeForSamePedToThrowAgainMS; // offset:0x00C	type:UINT.0
	uint                             uCheckForSmokeThrowPeriodMS;     // offset:0x010	type:UINT.0
	float                            fMinDistanceToTarget;            // offset:0x014	type:FLOAT.0
	float                            fMaxDistanceToTarget;            // offset:0x018	type:FLOAT.0
	float                            fDotMinThrowerToTarget;          // offset:0x01C	type:FLOAT.0
	float                            fMinLoiteringTimeSeconds;        // offset:0x020	type:FLOAT.0
};

struct CTaskComplexEvasiveStep__Tunables : CTuning
{
	float                            BlendOutDelta;                   // offset:0x010	type:FLOAT.0
};

struct CTaskConfront__Tunables : CTuning
{
	float                            IdealDistanceIfUnarmed;          // offset:0x010	type:FLOAT.0
	float                            IdealDistanceIfArmed;            // offset:0x014	type:FLOAT.0
	float                            MinDistanceToMove;               // offset:0x018	type:FLOAT.0
	float                            MaxRadius;                       // offset:0x01C	type:FLOAT.0
	float                            ChancesToIntimidateArmedTarget;  // offset:0x020	type:FLOAT.0
	float                            ChancesToIntimidateUnarmedTarget; // offset:0x024	type:FLOAT.0
};

struct CTaskConversationHelper__Tunables : CTuning
{
	float                            fMinSecondsDelayBetweenPhoneLines; // offset:0x010	type:FLOAT.0
	float                            fMaxSecondsDelayBetweenPhoneLines; // offset:0x014	type:FLOAT.0
	float                            fMinSecondsDelayBetweenChatLines; // offset:0x018	type:FLOAT.0
	float                            fMaxSecondsDelayBetweenChatLines; // offset:0x01C	type:FLOAT.0
	float                            fMinDistanceSquaredToPlayerForAudio; // offset:0x020	type:FLOAT.0
	float                            fChanceOfConversationRant;       // offset:0x024	type:FLOAT.0
	float                            fChanceOfArgumentChallenge;      // offset:0x028	type:FLOAT.0
	float                            fChanceOfArgumentChallengeBeingAccepted; // offset:0x02C	type:FLOAT.0
	uint                             uTimeInMSUntilNewWeirdPedComment; // offset:0x030	type:UINT.0
	uint                             uMaxTimeInMSToPlayRingTone;      // offset:0x034	type:UINT.0
	uchar                            uTimeToWaitAfterNewSayFailureInSeconds; // offset:0x038	type:UCHAR.0
	uchar                            uTicksUntilHangoutConversationCheck; // offset:0x039	type:UCHAR.0
};

struct CTaskCoupleScenario__Tunables : CTuning
{
	float                            ResumeDistSq;                    // offset:0x010	type:FLOAT.0
	float                            StopDistSq;                      // offset:0x014	type:FLOAT.0
	float                            TargetDistance;                  // offset:0x018	type:FLOAT.0
};

struct CTaskCover__CoverAnimStateInfo
{
	array<string>                           Clips;                           // offset:0x000	type:ARRAY.ATARRAY
	bitset<enum CTaskCover__eAnimFlags>     Flags;                           // offset:0x010	type:BITSET.32BIT
};

struct CTaskCover__Tunables : CTuning
{
	float                            FPSBlindFireOutroBlendOutPelvisOffsetTime; // offset:0x010	type:FLOAT.0
	float                            FPSAimOutroBlendOutPelvisOffsetTime; // offset:0x014	type:FLOAT.0
	float                            FPSPeekToAimBlendDurationHigh;   // offset:0x018	type:FLOAT.0
	float                            FPSPeekToAimBlendDurationLow;    // offset:0x01C	type:FLOAT.0
	float                            FPSPeekToBlindFireBlendDurationHigh; // offset:0x020	type:FLOAT.0
	float                            FPSPeekToBlindFireBlendDurationLow; // offset:0x024	type:FLOAT.0
	float                            FPSDefaultBlendDurationHigh;     // offset:0x028	type:FLOAT.0
	float                            FPSDefaultBlendDurationLow;      // offset:0x02C	type:FLOAT.0
	float                            AngleToCameraWeighting;          // offset:0x030	type:FLOAT.0
	float                            AngleToDynamicCoverWeighting;    // offset:0x034	type:FLOAT.0
	float                            PriorityCoverWeighting;          // offset:0x038	type:FLOAT.0
	float                            DistanceWeighting;               // offset:0x03C	type:FLOAT.0
	float                            AngleToCoverWeighting;           // offset:0x040	type:FLOAT.0
	float                            AngleOfCoverWeighting;           // offset:0x044	type:FLOAT.0
	float                            EdgeWeighting;                   // offset:0x048	type:FLOAT.0
	float                            NetworkBlendOutDurationRun;      // offset:0x04C	type:FLOAT.0
	float                            NetworkBlendOutDurationRunStart; // offset:0x050	type:FLOAT.0
	float                            NetworkBlendOutDuration;         // offset:0x054	type:FLOAT.0
	float                            MaxAngularDiffBetweenDynamicAndStaticCover; // offset:0x058	type:FLOAT.0
	float                            RangeToUseDynamicCoverPointMin;  // offset:0x05C	type:FLOAT.0
	float                            RangeToUseDynamicCoverPointMax;  // offset:0x060	type:FLOAT.0
	float                            MinDistToCoverAnyDir;            // offset:0x068	type:FLOAT.0
	float                            MinDistToPriorityCoverToForce;   // offset:0x06C	type:FLOAT.0
	float                            MinDistToCoverSpecificDir;       // offset:0x070	type:FLOAT.0
	float                            BehindPedToCoverCosTolerance;    // offset:0x074	type:FLOAT.0
	float                            SearchToCoverCosTolerance;       // offset:0x078	type:FLOAT.0
	float                            CapsuleZOffset;                  // offset:0x07C	type:FLOAT.0
	float                            TimeBetweenTestSpheresIntersectingRoute; // offset:0x080	type:FLOAT.0
	float                            MaxDistToCoverWhenPlayerIsClose; // offset:0x084	type:FLOAT.0
	float                            MinCoverToPlayerCoverDist;       // offset:0x088	type:FLOAT.0
	float                            MinMoveToCoverDistForCoverMeAudio; // offset:0x08C	type:FLOAT.0
	float                            MaxSecondsAsTopLevelTask;        // offset:0x090	type:FLOAT.0
	bool                             ForceStreamingFailure;           // offset:0x094	type:BOOL.0
	string                           StreamedOneHandedCoverMovementClipSetId; // offset:0x098	type:STRING.ATHASHVALUE
	string                           AIOneHandedAimingClipSetId;      // offset:0x09C	type:STRING.ATHASHVALUE
	string                           AITwoHandedAimingClipSetId;      // offset:0x0A0	type:STRING.ATHASHVALUE
	string                           CoreWeaponClipSetId;             // offset:0x0A4	type:STRING.ATHASHVALUE
	string                           StreamedUnarmedCoverMovementClipSetId; // offset:0x0A8	type:STRING.ATHASHVALUE
	string                           StreamedUnarmedCoverMovementFPSClipSetId; // offset:0x0AC	type:STRING.ATHASHVALUE
	string                           CoreWeaponAimingClipSetId;       // offset:0x0B0	type:STRING.ATHASHVALUE
	string                           CoreWeaponAimingFPSClipSetId;    // offset:0x0B4	type:STRING.ATHASHVALUE
	float                            MaxPlayerToCoverDist;            // offset:0x0B8	type:FLOAT.0
	float                            MaxPlayerToCoverDistFPS;         // offset:0x0BC	type:FLOAT.0
};

struct CTaskCowerScenario__Tunables : CTuning
{
	uint                             EventDecayTimeMS;                // offset:0x010	type:UINT.0
	float                            ReturnToNormalDistanceSq;        // offset:0x014	type:FLOAT.0
	float                            BackHeadingInterpRate;           // offset:0x018	type:FLOAT.0
	float                            EventlessSwitchStateTimeRequirement; // offset:0x01C	type:FLOAT.0
	uint                             EventlessSwitchInactivityTimeRequirement; // offset:0x020	type:UINT.0
	float                            EventlessSwitchDistanceRequirement; // offset:0x024	type:FLOAT.0
	float                            MinDistFromPlayerToDeleteCoweringForever; // offset:0x028	type:FLOAT.0
	float                            _0xDCCEB99E;                     // offset:0x02C	type:FLOAT.0
	uint                             CoweringForeverDeleteOffscreenTimeMS_MIN; // offset:0x030	type:UINT.0
	uint                             CoweringForeverDeleteOffscreenTimeMS_MAX; // offset:0x034	type:UINT.0
	uint                             FlinchDecayTime;                 // offset:0x038	type:UINT.0
	uint                             MinTimeBetweenFlinches;          // offset:0x03C	type:UINT.0
};

struct CTaskDamageElectric__Tunables : CTuning
{
	float                            FallsOutofVehicleVelocity;       // offset:0x010	type:FLOAT.0
};

struct CTaskDataInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                           TaskWanderConditionalAnimsGroup; // offset:0x004	type:STRING.ATHASHVALUE
	float                            ScenarioAttractionDistance;      // offset:0x008	type:FLOAT.0
	float                            SurfaceSwimmingDepthOffset;      // offset:0x00C	type:FLOAT.0
	float                            SwimmingWanderPointRange;        // offset:0x010	type:FLOAT.0
	bitset<enum _0x982F0A37>         Flags;                           // offset:0x018	type:BITSET.32BIT
};

struct CTaskDataInfoManager
{
	array<struct CTaskDataInfo>      aTaskData;                       // offset:0x000	type:ARRAY.ATARRAY
	struct void                      DefaultSet;                      // offset:0x010	type:STRUCT.EXTERNAL_NAMED
};

struct CTaskDraggingToSafety__Tunables : CTuning
{
	struct CTaskDraggingToSafety__Tunables__ObstructionProbe     ObstructionProbe;                // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskDraggingToSafety__Tunables__Rendering            Rendering;                       // offset:0x01C	type:STRUCT.STRUCTURE
	float                                                        MaxTimeForStream;                // offset:0x020	type:FLOAT.0
	float                                                        CoverMinDistance;                // offset:0x024	type:FLOAT.0
	float                                                        CoverMaxDistance;                // offset:0x028	type:FLOAT.0
	float                                                        LookAtUpdateTime;                // offset:0x02C	type:FLOAT.0
	int                                                          LookAtTime;                      // offset:0x030	type:INT.0
	float                                                        CoverWeightDistance;             // offset:0x034	type:FLOAT.0
	float                                                        CoverWeightUsage;                // offset:0x038	type:FLOAT.0
	float                                                        CoverWeightValue;                // offset:0x03C	type:FLOAT.0
	vec3                                                         SeparationPickup;                // offset:0x040	type:VECTOR3.0
	vec3                                                         SeparationDrag;                  // offset:0x050	type:VECTOR3.0
	vec3                                                         SeparationPutdown;               // offset:0x060	type:VECTOR3.0
	float                                                        AbortAimedAtMinDistance;         // offset:0x070	type:FLOAT.0
	float                                                        CoverResponseTimeout;            // offset:0x074	type:FLOAT.0
	float                                                        MinDotForPickupDirection;        // offset:0x078	type:FLOAT.0
	float                                                        MaxDistanceForHolster;           // offset:0x07C	type:FLOAT.0
	float                                                        MaxDistanceForPedToBeVeryCloseToCover; // offset:0x080	type:FLOAT.0
	int                                                          MaxNumPedsAllowedToBeVeryCloseToCover; // offset:0x084	type:INT.0
	float                                                        TimeBetweenCoverPointSearches;   // offset:0x088	type:FLOAT.0
	float                                                        MinDistanceToSetApproachPosition; // offset:0x08C	type:FLOAT.0
	float                                                        MaxDistanceToConsiderTooClose;   // offset:0x090	type:FLOAT.0
	float                                                        MaxDistanceToAlwaysLookAtTarget; // offset:0x094	type:FLOAT.0
	float                                                        MaxHeightDifferenceToApproachTarget; // offset:0x098	type:FLOAT.0
	float                                                        MaxXYDistanceToApproachTarget;   // offset:0x09C	type:FLOAT.0
	float                                                        MaxTimeToBeObstructed;           // offset:0x0A0	type:FLOAT.0
};

struct CTaskDraggingToSafety__Tunables__ObstructionProbe
{
	float                            Height;                          // offset:0x000	type:FLOAT.0
	float                            Radius;                          // offset:0x004	type:FLOAT.0
	float                            ExtraHeightForGround;            // offset:0x008	type:FLOAT.0
};

struct CTaskDraggingToSafety__Tunables__Rendering
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	bool                             ObstructionProbe;                // offset:0x001	type:BOOL.0
};

struct CTaskDyingDead__Tunables : CTuning
{
	float                            VehicleForwardInitialScale;      // offset:0x010	type:FLOAT.0
	float                            VehicleForwardScale;             // offset:0x014	type:FLOAT.0
	float                            TimeToApplyPushFromVehicleForce; // offset:0x018	type:FLOAT.0
	float                            ForceToApply;                    // offset:0x01C	type:FLOAT.0
	float                            MinFallingSpeedForAnimatedDyingFall; // offset:0x020	type:FLOAT.0
	float                            SphereTestRadiusForDeadWaterSettle; // offset:0x024	type:FLOAT.0
	float                            RagdollAbortPoseDistanceThreshold; // offset:0x028	type:FLOAT.0
	float                            RagdollAbortPoseMaxVelocity;     // offset:0x02C	type:FLOAT.0
	uint                             TimeToThrowWeaponMS;             // offset:0x030	type:UINT.0
	uint                             TimeToThrowWeaponPlayerMS;       // offset:0x034	type:UINT.0
};

struct CTaskEnterCover__EnterClip
{
	string                                  EnterClipId;                     // offset:0x000	type:STRING.ATHASHVALUE
	bitset<enum CTaskCover__eAnimFlags>     Flags;                           // offset:0x004	type:BITSET.32BIT
};

struct CTaskEnterCover__StandingEnterClips
{
	string                                  StandClip0Id;                    // offset:0x000	type:STRING.ATHASHVALUE
	string                                  StandClip1Id;                    // offset:0x004	type:STRING.ATHASHVALUE
	string                                  StandClip2Id;                    // offset:0x008	type:STRING.ATHASHVALUE
	bitset<enum CTaskCover__eAnimFlags>     Flags;                           // offset:0x00C	type:BITSET.32BIT
};

struct CTaskEnterCover__Tunables : CTuning
{
	float                                                 CoverEntryRatePlayer;            // offset:0x010	type:FLOAT.0
	float                                                 CoverEntryRateAI;                // offset:0x014	type:FLOAT.0
	float                                                 CoverEntryShortDistanceAI;       // offset:0x018	type:FLOAT.0
	float                                                 CoverEntryShortDistancePlayer;   // offset:0x01C	type:FLOAT.0
	float                                                 CoverEntryStandDistance;         // offset:0x020	type:FLOAT.0
	float                                                 CoverEntryStandStrafeDistance;   // offset:0x024	type:FLOAT.0
	float                                                 CoverEntryMinDistance;           // offset:0x028	type:FLOAT.0
	float                                                 CoverEntryMaxDistance;           // offset:0x02C	type:FLOAT.0
	float                                                 CoverEntryMinDistanceAI;         // offset:0x030	type:FLOAT.0
	float                                                 CoverEntryMaxDistanceAI;         // offset:0x034	type:FLOAT.0
	float                                                 CoverEntryMaxDirectDistance;     // offset:0x038	type:FLOAT.0
	int                                                   CoverEntryMinTimeNavigatingAI;   // offset:0x03C	type:INT.0
	float                                                 CoverEntryMinAngleToScale;       // offset:0x040	type:FLOAT.0
	float                                                 CoverEntryHeadingReachedTol;     // offset:0x044	type:FLOAT.0
	float                                                 CoverEntryPositionReachedTol;    // offset:0x048	type:FLOAT.0
	float                                                 FromCoverExitDistance;           // offset:0x04C	type:FLOAT.0
	float                                                 DistFromCoverToAllowReloadCache; // offset:0x050	type:FLOAT.0
	float                                                 NetworkBlendInDuration;          // offset:0x054	type:FLOAT.0
	bool                                                  EnableFootTagSyncing;            // offset:0x058	type:BOOL.0
	bool                                                  ForceToTarget;                   // offset:0x059	type:BOOL.0
	bool                                                  EnableInitialHeadingBlend;       // offset:0x05A	type:BOOL.0
	bool                                                  EnableTranslationScaling;        // offset:0x05B	type:BOOL.0
	bool                                                  EnableRotationScaling;           // offset:0x05C	type:BOOL.0
	bool                                                  PreventTranslationOvershoot;     // offset:0x05D	type:BOOL.0
	bool                                                  PreventRotationOvershoot;        // offset:0x05E	type:BOOL.0
	bool                                                  DoInitialHeadingBlend;           // offset:0x05F	type:BOOL.0
	bool                                                  DoFinalHeadingFixUp;             // offset:0x060	type:BOOL.0
	float                                                 MinDistToScale;                  // offset:0x064	type:FLOAT.0
	float                                                 MaxSpeed;                        // offset:0x068	type:FLOAT.0
	float                                                 MinTransScale;                   // offset:0x06C	type:FLOAT.0
	float                                                 MaxTransScale;                   // offset:0x070	type:FLOAT.0
	float                                                 MinRotScale;                     // offset:0x074	type:FLOAT.0
	float                                                 MaxRotScale;                     // offset:0x078	type:FLOAT.0
	float                                                 DeltaTolerance;                  // offset:0x07C	type:FLOAT.0
	float                                                 MinRotDelta;                     // offset:0x080	type:FLOAT.0
	float                                                 MaxAngleToSetDirectly;           // offset:0x084	type:FLOAT.0
	float                                                 MaxRotSpeed;                     // offset:0x088	type:FLOAT.0
	float                                                 InCoverTolerance;                // offset:0x08C	type:FLOAT.0
	float                                                 DotThresholdForCenterEnter;      // offset:0x090	type:FLOAT.0
	bool                                                  WaitForFootPlant;                // offset:0x094	type:BOOL.0
	float                                                 MinDistToPlayEntryAnim;          // offset:0x098	type:FLOAT.0
	bool                                                  EnableNewAICoverEntry;           // offset:0x09C	type:BOOL.0
	bool                                                  EnableUseSwatClipSet;            // offset:0x09D	type:BOOL.0
	bool                                                  UseShortDistAngleRotation;       // offset:0x09E	type:BOOL.0
	bool                                                  DisableAiCoverEntryStreamCheck;  // offset:0x09F	type:BOOL.0
	float                                                 DistToUseShortestRotation;       // offset:0x0A0	type:FLOAT.0
	float                                                 AiEntryHalfAngleTolerance;       // offset:0x0A4	type:FLOAT.0
	float                                                 AiEntryMinRate;                  // offset:0x0A8	type:FLOAT.0
	float                                                 AiEntryMaxRate;                  // offset:0x0AC	type:FLOAT.0
	float                                                 PlayerSprintEntryRate;           // offset:0x0B0	type:FLOAT.0
	float                                                 DefaultPlayerStandEntryStartMovementPhase; // offset:0x0B4	type:FLOAT.0
	float                                                 DefaultPlayerStandEntryEndMovementPhase; // offset:0x0B8	type:FLOAT.0
	float                                                 MaxAngleToBeginRotationScale;    // offset:0x0BC	type:FLOAT.0
	float                                                 MaxDefaultAngularVelocity;       // offset:0x0C0	type:FLOAT.0
	float                                                 EnterCoverInterruptMinTime;      // offset:0x0C4	type:FLOAT.0
	float                                                 EnterCoverInterruptDistanceTolerance; // offset:0x0C8	type:FLOAT.0
	float                                                 EnterCoverInterruptHeadingTolerance; // offset:0x0CC	type:FLOAT.0
	float                                                 EnterCoverAimInterruptDistanceTolerance; // offset:0x0D0	type:FLOAT.0
	float                                                 EnterCoverAimInterruptHeadingTolerance; // offset:0x0D4	type:FLOAT.0
	array<struct CTaskEnterCover__EnterClip>              AIEnterCoverClips;               // offset:0x0D8	type:ARRAY.ATARRAY
	array<struct CTaskEnterCover__StandingEnterClips>     AIStandEnterCoverClips;          // offset:0x0E8	type:ARRAY.ATARRAY
	array<struct CTaskEnterCover__EnterClip>              AIEnterTransitionClips;          // offset:0x0F8	type:ARRAY.ATARRAY
	string                                                EnterCoverAIAimingBase1H;        // offset:0x108	type:STRING.ATHASHVALUE
	string                                                EnterCoverAIAimingBase2H;        // offset:0x10C	type:STRING.ATHASHVALUE
	string                                                EnterCoverAIAimingSwat1H;        // offset:0x110	type:STRING.ATHASHVALUE
	string                                                EnterCoverAIAimingSwat2H;        // offset:0x114	type:STRING.ATHASHVALUE
	string                                                EnterCoverAITransition1H;        // offset:0x118	type:STRING.ATHASHVALUE
	string                                                EnterCoverAITransition2H;        // offset:0x11C	type:STRING.ATHASHVALUE
	struct CTaskEnterCover__Tunables__AnimStateInfos      ThirdPersonAnimStateInfos;       // offset:0x120	type:STRUCT.STRUCTURE
	struct CTaskEnterCover__Tunables__AnimStateInfos      FirstPersonAnimStateInfos;       // offset:0x140	type:STRUCT.STRUCTURE
};

struct CTaskEnterCover__Tunables__AnimStateInfos
{
	array<struct CTaskCover__CoverAnimStateInfo>     SlidingEnterCoverAnimStateInfos; // offset:0x000	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>     PlayerStandEnterCoverAnimStateInfos; // offset:0x010	type:ARRAY.ATARRAY
};

struct CTaskEnterVehicleAlign__Tunables : CTuning
{
	bool                             UseAttachDuringAlign;            // offset:0x010	type:BOOL.0
	bool                             RenderDebugToTTY;                // offset:0x011	type:BOOL.0
	bool                             ApplyRotationScaling;            // offset:0x012	type:BOOL.0
	bool                             ApplyTranslationScaling;         // offset:0x013	type:BOOL.0
	bool                             DisableRotationOvershootCheck;   // offset:0x014	type:BOOL.0
	bool                             DisableTranslationOvershootCheck; // offset:0x015	type:BOOL.0
	bool                             ReverseLeftFootAlignAnims;       // offset:0x016	type:BOOL.0
	float                            TranslationChangeRate;           // offset:0x018	type:FLOAT.0
	float                            RotationChangeRate;              // offset:0x01C	type:FLOAT.0
	float                            DefaultAlignRate;                // offset:0x020	type:FLOAT.0
	float                            FastAlignRate;                   // offset:0x024	type:FLOAT.0
	float                            CombatAlignRate;                 // offset:0x028	type:FLOAT.0
	float                            ActionCombatAlignRate;           // offset:0x02C	type:FLOAT.0
	bool                             ForceStandEnterOnly;             // offset:0x030	type:BOOL.0
	float                            StandAlignMaxDist;               // offset:0x034	type:FLOAT.0
	float                            AlignSuccessMaxDist;             // offset:0x038	type:FLOAT.0
	float                            DefaultAlignStartFixupPhase;     // offset:0x03C	type:FLOAT.0
	float                            DefaultAlignEndFixupPhase;       // offset:0x040	type:FLOAT.0
	float                            TargetRadiusForOrientatedAlignWalk; // offset:0x044	type:FLOAT.0
	float                            TargetRadiusForOrientatedAlignRun; // offset:0x048	type:FLOAT.0
	float                            MinRotationalSpeedScale;         // offset:0x04C	type:FLOAT.0
	float                            MaxRotationalSpeedScale;         // offset:0x050	type:FLOAT.0
	float                            MaxRotationalSpeed;              // offset:0x054	type:FLOAT.0
	float                            MinTranslationalScale;           // offset:0x058	type:FLOAT.0
	float                            MaxTranslationalScale;           // offset:0x05C	type:FLOAT.0
	float                            MaxTranslationalStandSpeed;      // offset:0x060	type:FLOAT.0
	float                            MaxTranslationalMoveSpeed;       // offset:0x064	type:FLOAT.0
	float                            HeadingReachedTolerance;         // offset:0x068	type:FLOAT.0
	float                            MinSqdDistToSetPos;              // offset:0x06C	type:FLOAT.0
	float                            StdVehicleMinPhaseToStartRotFixup; // offset:0x070	type:FLOAT.0
	float                            BikeVehicleMinPhaseToStartRotFixup; // offset:0x074	type:FLOAT.0
	float                            MinDistAwayFromEntryPointToConsiderFinished; // offset:0x078	type:FLOAT.0
	float                            MinPedFwdToEntryDotToClampInitialOrientation; // offset:0x07C	type:FLOAT.0
	float                            MinDistToAlwaysClampInitialOrientation; // offset:0x080	type:FLOAT.0
	float                            VaultExtraZGroundTest;           // offset:0x084	type:FLOAT.0
};

struct CTaskEnterVehicleSeat__Tunables : CTuning
{
	float                            MinVelocityToRagdollPed;         // offset:0x010	type:FLOAT.0
	float                            MaxVelocityToEnterBike;          // offset:0x014	type:FLOAT.0
	string                           DefaultGetInClipId;              // offset:0x018	type:STRING.ATHASHVALUE
	string                           GetOnQuickClipId;                // offset:0x01C	type:STRING.ATHASHVALUE
	string                           GetInFromWaterClipId;            // offset:0x020	type:STRING.ATHASHVALUE
	string                           GetInStandOnClipId;              // offset:0x024	type:STRING.ATHASHVALUE
	string                           GetInCombatClipId;               // offset:0x028	type:STRING.ATHASHVALUE
};

struct CTaskEnterVehicle__Tunables : CTuning
{
	bool                             UseCombatEntryForAiJack;         // offset:0x010	type:BOOL.0
	bool                             EnableJackRateOverride;          // offset:0x011	type:BOOL.0
	bool                             DisableDoorHandleArmIk;          // offset:0x012	type:BOOL.0
	bool                             DisableBikeHandleArmIk;          // offset:0x013	type:BOOL.0
	bool                             DisableSeatBoneArmIk;            // offset:0x014	type:BOOL.0
	bool                             DisableTagSyncIntoAlign;         // offset:0x015	type:BOOL.0
	bool                             DisableMoverFixups;              // offset:0x016	type:BOOL.0
	bool                             DisableBikePickPullUpOffsetScale; // offset:0x017	type:BOOL.0
	bool                             EnableNewBikeEntry;              // offset:0x018	type:BOOL.0
	bool                             ForcedDoorHandleArmIk;           // offset:0x019	type:BOOL.0
	bool                             IgnoreRotationBlend;             // offset:0x01A	type:BOOL.0
	bool                             EnableBikePickUpAlign;           // offset:0x01B	type:BOOL.0
	float                            BikePickUpAlignBlendDuration;    // offset:0x01C	type:FLOAT.0
	float                            GetInRate;                       // offset:0x020	type:FLOAT.0
	float                            MPEntryPickUpPullUpRate;         // offset:0x024	type:FLOAT.0
	float                            CombatEntryPickUpPullUpRate;     // offset:0x028	type:FLOAT.0
	float                            MinMagForBikeToBeOnSide;         // offset:0x02C	type:FLOAT.0
	float                            DistanceToEvaluateDoors;         // offset:0x030	type:FLOAT.0
	float                            NetworkBlendDuration;            // offset:0x034	type:FLOAT.0
	float                            NetworkBlendDurationOpenDoorCombat; // offset:0x038	type:FLOAT.0
	float                            DoorRatioToConsiderDoorOpenSteps; // offset:0x03C	type:FLOAT.0
	float                            DoorRatioToConsiderDoorOpen;     // offset:0x040	type:FLOAT.0
	float                            DoorRatioToConsiderDoorOpenCombat; // offset:0x044	type:FLOAT.0
	float                            DoorRatioToConsiderDoorClosed;   // offset:0x048	type:FLOAT.0
	float                            DistToEntryToAllowForcedActionMode; // offset:0x04C	type:FLOAT.0
	float                            VaultDepth;                      // offset:0x050	type:FLOAT.0
	float                            VaultHorizClearance;             // offset:0x054	type:FLOAT.0
	float                            VaultVertClearance;              // offset:0x058	type:FLOAT.0
	float                            LeftPickUpTargetLerpPhaseStart;  // offset:0x05C	type:FLOAT.0
	float                            LeftPickUpTargetLerpPhaseEnd;    // offset:0x060	type:FLOAT.0
	float                            LeftPullUpTargetLerpPhaseStart;  // offset:0x064	type:FLOAT.0
	float                            LeftPullUpTargetLerpPhaseEnd;    // offset:0x068	type:FLOAT.0
	float                            RightPickUpTargetLerpPhaseStart; // offset:0x06C	type:FLOAT.0
	float                            RightPickUpTargetLerpPhaseEnd;   // offset:0x070	type:FLOAT.0
	float                            RightPullUpTargetLerpPhaseStart; // offset:0x074	type:FLOAT.0
	float                            RightPullUpTargetLerpPhaseEnd;   // offset:0x078	type:FLOAT.0
	float                            LeftPickUpTargetLerpPhaseStartBicycle; // offset:0x07C	type:FLOAT.0
	float                            LeftPickUpTargetLerpPhaseEndBicycle; // offset:0x080	type:FLOAT.0
	float                            LeftPullUpTargetLerpPhaseStartBicycle; // offset:0x084	type:FLOAT.0
	float                            LeftPullUpTargetLerpPhaseEndBicycle; // offset:0x088	type:FLOAT.0
	float                            RightPickUpTargetLerpPhaseStartBicycle; // offset:0x08C	type:FLOAT.0
	float                            RightPickUpTargetLerpPhaseEndBicycle; // offset:0x090	type:FLOAT.0
	float                            RightPullUpTargetLerpPhaseStartBicycle; // offset:0x094	type:FLOAT.0
	float                            RightPullUpTargetLerpPhaseEndBicycle; // offset:0x098	type:FLOAT.0
	float                            MinSpeedToAbortOpenDoor;         // offset:0x09C	type:FLOAT.0
	float                            MinSpeedToAbortOpenDoorCombat;   // offset:0x0A0	type:FLOAT.0
	float                            MinSpeedToAbortOpenDoorPlayer;   // offset:0x0A4	type:FLOAT.0
	float                            MinSpeedToRagdollOpenDoor;       // offset:0x0A8	type:FLOAT.0
	float                            MinSpeedToRagdollOpenDoorCombat; // offset:0x0AC	type:FLOAT.0
	float                            MinSpeedToRagdollOpenDoorPlayer; // offset:0x0B0	type:FLOAT.0
	float                            TimeBetweenPositionUpdates;      // offset:0x0B4	type:FLOAT.0
	float                            DefaultJackRate;                 // offset:0x0B8	type:FLOAT.0
	float                            BikeEnterForce;                  // offset:0x0BC	type:FLOAT.0
	float                            BicycleEnterForce;               // offset:0x0C0	type:FLOAT.0
	float                            FastEnterExitRate;               // offset:0x0C4	type:FLOAT.0
	float                            TargetRearDoorOpenRatio;         // offset:0x0C8	type:FLOAT.0
	float                            MaxOpenRatioForOpenDoorInitialOutside; // offset:0x0CC	type:FLOAT.0
	float                            MaxOpenRatioForOpenDoorOutside;  // offset:0x0D0	type:FLOAT.0
	float                            MaxOscillationDisplacementOutside; // offset:0x0D4	type:FLOAT.0
	float                            MaxOpenRatioForOpenDoorInitialInside; // offset:0x0D8	type:FLOAT.0
	float                            MaxOpenRatioForOpenDoorInside;   // offset:0x0DC	type:FLOAT.0
	float                            MaxOscillationDisplacementInside; // offset:0x0E0	type:FLOAT.0
	float                            BikeEnterLeanAngleOvershootAmt;  // offset:0x0E4	type:FLOAT.0
	float                            BikeEnterLeanAngleOvershootRate; // offset:0x0E8	type:FLOAT.0
	float                            MaxDistanceToCheckEntryCollisionWhenIgnoring; // offset:0x0EC	type:FLOAT.0
	float                            CombatEntryBlendDuration;        // offset:0x0F0	type:FLOAT.0
	float                            MaxDistanceToReactToJackForGoToDoor; // offset:0x0F4	type:FLOAT.0
	float                            MaxTimeStreamClipSetInBeforeWarpSP; // offset:0x0F8	type:FLOAT.0
	float                            MaxTimeStreamClipSetInBeforeWarpMP; // offset:0x0FC	type:FLOAT.0
	float                            MaxTimeStreamClipSetInBeforeSkippingCloseDoor; // offset:0x100	type:FLOAT.0
	float                            MaxTimeStreamShuffleClipSetInBeforeWarp; // offset:0x104	type:FLOAT.0
	bool                             UseSlowInOut;                    // offset:0x108	type:BOOL.0
	float                            ClimbAlignTolerance;             // offset:0x10C	type:FLOAT.0
	float                            OpenDoorBlendDurationFromNormalAlign; // offset:0x110	type:FLOAT.0
	float                            OpenDoorBlendDurationFromOnVehicleAlign; // offset:0x114	type:FLOAT.0
	float                            OpenDoorToJackBlendDuration;     // offset:0x118	type:FLOAT.0
	float                            GroupMemberWaitMinTime;          // offset:0x11C	type:FLOAT.0
	float                            GroupMemberSlowDownDistance;     // offset:0x120	type:FLOAT.0
	float                            GroupMemberWalkCloseDistance;    // offset:0x124	type:FLOAT.0
	float                            GroupMemberWaitDistance;         // offset:0x128	type:FLOAT.0
	float                            SecondsBeforeWarpToLeader;       // offset:0x12C	type:FLOAT.0
	float                            TimeBetweenDoorChecks;           // offset:0x130	type:FLOAT.0
	float                            MinVelocityToConsiderMoving;     // offset:0x134	type:FLOAT.0
	uint                             MinTimeStationaryToIgnorePlayerDriveTest; // offset:0x138	type:UINT.0
	uint                             DurationHeldDownEnterButtonToJackFriendly; // offset:0x13C	type:UINT.0
	string                           DefaultJackAlivePedFromOutsideClipId; // offset:0x140	type:STRING.ATHASHVALUE
	string                           DefaultJackAlivePedFromOutsideAltClipId; // offset:0x144	type:STRING.ATHASHVALUE
	string                           DefaultJackDeadPedFromOutsideClipId; // offset:0x148	type:STRING.ATHASHVALUE
	string                           DefaultJackDeadPedFromOutsideAltClipId; // offset:0x14C	type:STRING.ATHASHVALUE
	string                           DefaultJackAlivePedFromWaterClipId; // offset:0x150	type:STRING.ATHASHVALUE
	string                           DefaultJackDeadPedFromWaterClipId; // offset:0x154	type:STRING.ATHASHVALUE
	string                           DefaultJackPedFromOnVehicleClipId; // offset:0x158	type:STRING.ATHASHVALUE
	string                           DefaultJackDeadPedFromOnVehicleClipId; // offset:0x15C	type:STRING.ATHASHVALUE
	string                           DefaultJackPedOnVehicleIntoWaterClipId; // offset:0x160	type:STRING.ATHASHVALUE
	string                           DefaultJackDeadPedOnVehicleIntoWaterClipId; // offset:0x164	type:STRING.ATHASHVALUE
	string                           DefaultClimbUpClipId;            // offset:0x168	type:STRING.ATHASHVALUE
	string                           DefaultClimbUpNoDoorClipId;      // offset:0x16C	type:STRING.ATHASHVALUE
	string                           CustomShuffleJackDeadClipId;     // offset:0x170	type:STRING.ATHASHVALUE
	string                           CustomShuffleJackClipId;         // offset:0x174	type:STRING.ATHASHVALUE
	string                           CustomShuffleJackDead_180ClipId; // offset:0x178	type:STRING.ATHASHVALUE
	string                           CustomShuffleJack_180ClipId;     // offset:0x17C	type:STRING.ATHASHVALUE
	string                           ShuffleClipId;                   // offset:0x180	type:STRING.ATHASHVALUE
	string                           Shuffle_180ClipId;               // offset:0x184	type:STRING.ATHASHVALUE
	string                           Shuffle2ClipId;                  // offset:0x188	type:STRING.ATHASHVALUE
	string                           Shuffle2_180ClipId;              // offset:0x18C	type:STRING.ATHASHVALUE
	bool                             OnlyJackDeadPedsInTurret;        // offset:0x190	type:BOOL.0
	bool                             ChooseTurretSeatWhenOnGround;    // offset:0x191	type:BOOL.0
	float                            DuckShuffleBlendDuration;        // offset:0x194	type:FLOAT.0
};

struct CTaskExhaustedFlee__Tunables : CTuning
{
	float                            StartingEnergy;                  // offset:0x010	type:FLOAT.0
	float                            EnergyLostPerSecond;             // offset:0x014	type:FLOAT.0
	float                            OuterDistanceThreshold;          // offset:0x018	type:FLOAT.0
	float                            InnerDistanceThreshold;          // offset:0x01C	type:FLOAT.0
};

struct CTaskExitCover__ExitClip
{
	string                                  ExitClipId;                      // offset:0x000	type:STRING.ATHASHVALUE
	bitset<enum CTaskCover__eAnimFlags>     Flags;                           // offset:0x004	type:BITSET.32BIT
};

struct CTaskExitCover__Tunables : CTuning
{
	array<struct CTaskExitCover__ExitClip>              CornerExitClips;                 // offset:0x010	type:ARRAY.ATARRAY
	float                                               MinInputToInterruptIdle;         // offset:0x020	type:FLOAT.0
	float                                               CornerExitHeadingModifier;       // offset:0x024	type:FLOAT.0
	float                                               ExitCornerZOffset;               // offset:0x028	type:FLOAT.0
	float                                               ExitCornerYOffset;               // offset:0x02C	type:FLOAT.0
	float                                               ExitCornerDirOffset;             // offset:0x030	type:FLOAT.0
	struct CTaskExitCover__Tunables__AnimStateInfos     ThirdPersonAnimStateInfos;       // offset:0x038	type:STRUCT.STRUCTURE
	struct CTaskExitCover__Tunables__AnimStateInfos     FirstPersonAnimStateInfos;       // offset:0x048	type:STRUCT.STRUCTURE
	string                                              ExitCoverBaseClipSetId;          // offset:0x058	type:STRING.ATHASHVALUE
	string                                              ExitCoverBaseFPSClipSetId;       // offset:0x05C	type:STRING.ATHASHVALUE
	string                                              ExitCoverExtraClipSetId;         // offset:0x060	type:STRING.ATHASHVALUE
	string                                              ExitCoverExtraFPSClipSetId;      // offset:0x064	type:STRING.ATHASHVALUE
};

struct CTaskExitCover__Tunables__AnimStateInfos
{
	array<struct CTaskCover__CoverAnimStateInfo>     StandExitAnimStateInfos;         // offset:0x000	type:ARRAY.ATARRAY
};

struct CTaskExitVehicleSeat__ExitToAimClipSet
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<string>                    Clips;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct CTaskExitVehicleSeat__ExitToAimSeatInfo
{
	string                                       ExitToAimClipsName;              // offset:0x000	type:STRING.ATHASHVALUE
	string                                       OneHandedClipSetName;            // offset:0x004	type:STRING.ATHASHVALUE
	string                                       TwoHandedClipSetName;            // offset:0x008	type:STRING.ATHASHVALUE
	enum CTaskExitVehicleSeat__eSeatPosition     SeatPosition;                    // offset:0x00C	type:ENUM.32BIT
};

struct CTaskExitVehicleSeat__ExitToAimVehicleInfo
{
	string                                                    Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CTaskExitVehicleSeat__ExitToAimSeatInfo>     Seats;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct CTaskExitVehicleSeat__Tunables : CTuning
{
	float                                                        MinTimeInStateToAllowRagdollFleeExit; // offset:0x010	type:FLOAT.0
	float                                                        AdditionalWindscreenRagdollForceFwd; // offset:0x014	type:FLOAT.0
	float                                                        AdditionalWindscreenRagdollForceUp; // offset:0x018	type:FLOAT.0
	float                                                        SkyDiveProbeDistance;            // offset:0x01C	type:FLOAT.0
	float                                                        InAirProbeDistance;              // offset:0x020	type:FLOAT.0
	float                                                        ArrestProbeDistance;             // offset:0x024	type:FLOAT.0
	float                                                        InWaterExitDepth;                // offset:0x028	type:FLOAT.0
	float                                                        InWaterExitProbeLength;          // offset:0x02C	type:FLOAT.0
	float                                                        BikeVelocityToUseAnimatedJumpOff; // offset:0x030	type:FLOAT.0
	float                                                        BicycleVelocityToUseAnimatedJumpOff; // offset:0x034	type:FLOAT.0
	float                                                        BikeExitForce;                   // offset:0x038	type:FLOAT.0
	float                                                        RagdollIntoWaterVelocity;        // offset:0x03C	type:FLOAT.0
	float                                                        GroundFixupHeight;               // offset:0x040	type:FLOAT.0
	float                                                        GroundFixupHeightLarge;          // offset:0x044	type:FLOAT.0
	float                                                        GroundFixupHeightLargeOffset;    // offset:0x048	type:FLOAT.0
	float                                                        GroundFixupHeightBoatInWaterInitial; // offset:0x04C	type:FLOAT.0
	float                                                        GroundFixupHeightBoatInWater;    // offset:0x050	type:FLOAT.0
	float                                                        ExtraWaterZGroundFixup;          // offset:0x054	type:FLOAT.0
	float                                                        FleeExitExtraRotationSpeed;      // offset:0x058	type:FLOAT.0
	float                                                        FleeExitExtraTranslationSpeed;   // offset:0x05C	type:FLOAT.0
	float                                                        DefaultGetOutBlendDuration;      // offset:0x060	type:FLOAT.0
	float                                                        DefaultGetOutNoWindBlendDuration; // offset:0x064	type:FLOAT.0
	float                                                        MaxTimeForArrestBreakout;        // offset:0x068	type:FLOAT.0
	float                                                        ThroughWindscreenDamagePlayer;   // offset:0x06C	type:FLOAT.0
	float                                                        ThroughWindscreenDamageAi;       // offset:0x070	type:FLOAT.0
	string                                                       DefaultCrashExitOnSideClipId;    // offset:0x074	type:STRING.ATHASHVALUE
	string                                                       DefaultBeJackedAlivePedFromOutsideAltClipId; // offset:0x078	type:STRING.ATHASHVALUE
	string                                                       DefaultBeJackedAlivePedFromOutsideClipId; // offset:0x07C	type:STRING.ATHASHVALUE
	string                                                       DefaultBeJackedDeadPedFromOutsideClipId; // offset:0x080	type:STRING.ATHASHVALUE
	string                                                       DefaultBeJackedDeadPedFromOutsideAltClipId; // offset:0x084	type:STRING.ATHASHVALUE
	string                                                       DefaultBeJackedAlivePedFromWaterClipId; // offset:0x088	type:STRING.ATHASHVALUE
	string                                                       DefaultBeJackedDeadPedFromWaterClipId; // offset:0x08C	type:STRING.ATHASHVALUE
	string                                                       DefaultBeJackedAlivePedOnVehicleClipId; // offset:0x090	type:STRING.ATHASHVALUE
	string                                                       DefaultBeJackedDeadPedOnVehicleClipId; // offset:0x094	type:STRING.ATHASHVALUE
	string                                                       DefaultBeJackedAlivePedOnVehicleIntoWaterClipId; // offset:0x098	type:STRING.ATHASHVALUE
	string                                                       DefaultBeJackedDeadPedOnVehicleIntoWaterClipId; // offset:0x09C	type:STRING.ATHASHVALUE
	string                                                       DefaultFleeExitClipId;           // offset:0x0A0	type:STRING.ATHASHVALUE
	string                                                       DefaultGetOutClipId;             // offset:0x0A4	type:STRING.ATHASHVALUE
	string                                                       DefaultGetOutToWaterClipId;      // offset:0x0A8	type:STRING.ATHASHVALUE
	string                                                       DefaultGetOutOnToVehicleClipId;  // offset:0x0AC	type:STRING.ATHASHVALUE
	string                                                       DefaultGetOutNoWingId;           // offset:0x0B0	type:STRING.ATHASHVALUE
	string                                                       DefaultJumpOutClipId;            // offset:0x0B4	type:STRING.ATHASHVALUE
	string                                                       DeadFallOutClipId;               // offset:0x0B8	type:STRING.ATHASHVALUE
	array<struct CTaskExitVehicleSeat__ExitToAimClipSet>         ExitToAimClipSets;               // offset:0x0C0	type:ARRAY.ATARRAY
	array<struct CTaskExitVehicleSeat__ExitToAimVehicleInfo>     ExitToAimVehicleInfos;           // offset:0x0D0	type:ARRAY.ATARRAY
	string                                                       CustomShuffleBeJackedDeadClipId; // offset:0x0E0	type:STRING.ATHASHVALUE
	string                                                       CustomShuffleBeJackedClipId;     // offset:0x0E4	type:STRING.ATHASHVALUE
};

struct CTaskExitVehicle__Tunables : CTuning
{
	float                            TimeSinceLastSpottedToLeaveEngineOn; // offset:0x010	type:FLOAT.0
	float                            BeJackedBlendInDuration;         // offset:0x014	type:FLOAT.0
	float                            ExitVehicleBlendInDuration;      // offset:0x018	type:FLOAT.0
	float                            ThroughWindScreenBlendInDuration; // offset:0x01C	type:FLOAT.0
	float                            ExitVehicleBlendOutDuration;     // offset:0x020	type:FLOAT.0
	float                            ExitVehicleUnderWaterBlendOutDuration; // offset:0x024	type:FLOAT.0
	float                            ExitVehicleAttempToFireBlendOutDuration; // offset:0x028	type:FLOAT.0
	float                            FleeExitVehicleBlendOutDuration; // offset:0x02C	type:FLOAT.0
	float                            LeaderExitVehicleDistance;       // offset:0x030	type:FLOAT.0
	float                            ExitProbeDistance;               // offset:0x034	type:FLOAT.0
	float                            ExitDistance;                    // offset:0x038	type:FLOAT.0
	float                            RearExitSideOffset;              // offset:0x03C	type:FLOAT.0
	float                            MinVelocityToRagdollPed;         // offset:0x040	type:FLOAT.0
	float                            MaxTimeToReserveComponentBeforeWarp; // offset:0x044	type:FLOAT.0
	float                            _0x86AF3A98;                     // offset:0x048	type:FLOAT.0
	float                            ExtraOffsetForGroundCheck;       // offset:0x04C	type:FLOAT.0
	uint                             JumpOutofSubNeutralBuoyancyTime; // offset:0x050	type:UINT.0
	string                           DefaultClimbDownClipId;          // offset:0x054	type:STRING.ATHASHVALUE
	string                           DefaultClimbDownWaterClipId;     // offset:0x058	type:STRING.ATHASHVALUE
	string                           DefaultClimbDownNoDoorClipId;    // offset:0x05C	type:STRING.ATHASHVALUE
	string                           _0x982FB01E;                     // offset:0x060	type:STRING.ATHASHVALUE
};

struct CTaskFall__Tunables : CTuning
{
	float                            ImmediateHighFallSpeedPlayer;    // offset:0x010	type:FLOAT.0
	float                            ImmediateHighFallSpeedAi;        // offset:0x014	type:FLOAT.0
	float                            HighFallProbeLength;             // offset:0x018	type:FLOAT.0
	float                            ContinuousGapHighFallSpeed;      // offset:0x01C	type:FLOAT.0
	float                            ContinuousGapHighFallTime;       // offset:0x020	type:FLOAT.0
	float                            DeferFallBlockTestAngle;         // offset:0x024	type:FLOAT.0
	float                            DeferFallBlockTestDistance;      // offset:0x028	type:FLOAT.0
	float                            DeferFallBlockTestRadius;        // offset:0x02C	type:FLOAT.0
	float                            DeferHighFallTime;               // offset:0x030	type:FLOAT.0
	float                            LandHeadingModifier;             // offset:0x034	type:FLOAT.0
	float                            StandingLandHeadingModifier;     // offset:0x038	type:FLOAT.0
	float                            InAirHeadingRate;                // offset:0x03C	type:FLOAT.0
	float                            InAirMovementRate;               // offset:0x040	type:FLOAT.0
	float                            InAirMovementApproachRate;       // offset:0x044	type:FLOAT.0
	float                            FallLandThreshold;               // offset:0x048	type:FLOAT.0
	float                            ReenterFallLandThreshold;        // offset:0x04C	type:FLOAT.0
	float                            PadShakeMinIntensity;            // offset:0x050	type:FLOAT.0
	float                            PadShakeMaxIntensity;            // offset:0x054	type:FLOAT.0
	float                            PadShakeMinHeight;               // offset:0x058	type:FLOAT.0
	float                            PadShakeMaxHeight;               // offset:0x05C	type:FLOAT.0
	uint                             PadShakeMinDuration;             // offset:0x060	type:UINT.0
	uint                             PadShakeMaxDuration;             // offset:0x064	type:UINT.0
	float                            SuperJumpIntensityMult;          // offset:0x068	type:FLOAT.0
	float                            SuperJumpDurationMult;           // offset:0x06C	type:FLOAT.0
	float                            DiveControlMaxFallDistance;      // offset:0x070	type:FLOAT.0
	float                            DiveControlExtraDistanceForDiveFromVehicle; // offset:0x074	type:FLOAT.0
	float                            DiveControlExtraDistanceBlendOutSpeed; // offset:0x078	type:FLOAT.0
	float                            DiveWaterOffsetToHitFullyInControlWeight; // offset:0x07C	type:FLOAT.0
	float                            VaultFallTestAngle;              // offset:0x080	type:FLOAT.0
	float                            JumpFallTestAngle;               // offset:0x084	type:FLOAT.0
	float                            FallTestAngleBlendOutTime;       // offset:0x088	type:FLOAT.0
	float                            LandRollHeightFromVault;         // offset:0x08C	type:FLOAT.0
	float                            LandRollHeightFromJump;          // offset:0x090	type:FLOAT.0
	float                            LandRollHeight;                  // offset:0x094	type:FLOAT.0
	float                            LandRollSlopeThreshold;          // offset:0x098	type:FLOAT.0
	float                            HighFallWaterDepthMin;           // offset:0x09C	type:FLOAT.0
	float                            HighFallWaterDepthMax;           // offset:0x0A0	type:FLOAT.0
	float                            HighFallExtraHeightWaterDepthMin; // offset:0x0A4	type:FLOAT.0
	float                            HighFallExtraHeightWaterDepthMax; // offset:0x0A8	type:FLOAT.0
};

struct CTaskFishLocomotion__Tunables : CTuning
{
	float                            StartTurnThresholdDegrees;       // offset:0x010	type:FLOAT.0
	float                            StopTurnThresholdDegrees;        // offset:0x014	type:FLOAT.0
	float                            MinTurnApproachRate;             // offset:0x018	type:FLOAT.0
	float                            IdealTurnApproachRate;           // offset:0x01C	type:FLOAT.0
	float                            IdealTurnApproachRateSlow;       // offset:0x020	type:FLOAT.0
	float                            TurnAcceleration;                // offset:0x024	type:FLOAT.0
	float                            TurnAccelerationSlow;            // offset:0x028	type:FLOAT.0
	float                            AssistanceAngle;                 // offset:0x02C	type:FLOAT.0
	float                            ExtraHeadingRate;                // offset:0x030	type:FLOAT.0
	float                            FishOutOfWaterDelay;             // offset:0x034	type:FLOAT.0
	float                            PlayerOutOfWaterThreshold;       // offset:0x038	type:FLOAT.0
	float                            PitchAcceleration;               // offset:0x03C	type:FLOAT.0
	float                            PlayerPitchAcceleration;         // offset:0x040	type:FLOAT.0
	float                            HighLodPhysicsPitchIdealApproachRate; // offset:0x044	type:FLOAT.0
	float                            LowLodPhysicsPitchIdealApproachRate; // offset:0x048	type:FLOAT.0
	float                            FastPitchingApproachRate;        // offset:0x04C	type:FLOAT.0
	float                            SurfaceProbeHead;                // offset:0x050	type:FLOAT.0
	float                            SurfaceProbeTail;                // offset:0x054	type:FLOAT.0
	float                            SurfacePitchLerpRate;            // offset:0x058	type:FLOAT.0
	float                            SurfaceHeightFallingLerpRate;    // offset:0x05C	type:FLOAT.0
	float                            SurfaceHeightRisingLerpRate;     // offset:0x060	type:FLOAT.0
	float                            SurfaceHeightFollowingTriggerRange; // offset:0x064	type:FLOAT.0
	float                            LongStateTransitionBlendTime;    // offset:0x068	type:FLOAT.0
	float                            ShortStateTransitionBlendTime;   // offset:0x06C	type:FLOAT.0
	string                           PlayerControlCamera;             // offset:0x070	type:STRING.ATHASHVALUE
	float                            GaitlessRateBoost;               // offset:0x074	type:FLOAT.0
};

struct CTaskFlyToPoint__Tunables : CTuning
{
	float                            HeightMapDelta;                  // offset:0x010	type:FLOAT.0
	float                            HeightMapLookAheadDist;          // offset:0x014	type:FLOAT.0
	float                            InitialTerrainAvoidanceAngleD;   // offset:0x018	type:FLOAT.0
	float                            ProgressiveTerrainAvoidanceAngleD; // offset:0x01C	type:FLOAT.0
	float                            TimeBetweenIncreasingAvoidanceAngle; // offset:0x020	type:FLOAT.0
};

struct CTaskFlyingWander__Tunables : CTuning
{
	float                            RangeOffset;                     // offset:0x010	type:FLOAT.0
	float                            HeadingWanderChange;             // offset:0x014	type:FLOAT.0
	float                            TargetRadius;                    // offset:0x018	type:FLOAT.0
};

struct CTaskGetUp__Tunables : CTuning
{
	float                            fPreferInjuredGetupPlayerHealthThreshold; // offset:0x010	type:FLOAT.0
	float                            fInjuredGetupImpulseMag2;        // offset:0x014	type:FLOAT.0
	float                            fMinTimeInGetUpToAllowCover;     // offset:0x018	type:FLOAT.0
	bool                             AllowNonPlayerHighFallAbort;     // offset:0x01C	type:BOOL.0
	bool                             AllowOffScreenHighFallAbort;     // offset:0x01D	type:BOOL.0
	int                              FallTimeBeforeHighFallAbort;     // offset:0x020	type:INT.0
	float                            MinFallSpeedForHighFallAbort;    // offset:0x024	type:FLOAT.0
	float                            MinHeightAboveGroundForHighFallAbort; // offset:0x028	type:FLOAT.0
	float                            PlayerMoverFixupMaxExtraHeadingChange; // offset:0x02C	type:FLOAT.0
	float                            AiMoverFixupMaxExtraHeadingChange; // offset:0x030	type:FLOAT.0
	int                              StartClipWaitTimePlayer;         // offset:0x034	type:INT.0
	int                              StartClipWaitTime;               // offset:0x038	type:INT.0
	int                              StuckWaitTime;                   // offset:0x03C	type:INT.0
	int                              StuckWaitTimeMp;                 // offset:0x040	type:INT.0
};

struct CTaskGoToScenario__Tunables : CTuning
{
	float                            ClosePointDistanceSquared;       // offset:0x010	type:FLOAT.0
	float                            ClosePointCounterMax;            // offset:0x014	type:FLOAT.0
	float                            HeadingDiffStartBlendDegrees;    // offset:0x018	type:FLOAT.0
	float                            PositionDiffStartBlend;          // offset:0x01C	type:FLOAT.0
	float                            ExactStopTargetRadius;           // offset:0x020	type:FLOAT.0
	float                            PreferNearWaterSurfaceArrivalRadius; // offset:0x024	type:FLOAT.0
	float                            TimeBetweenBrokenPointChecks;    // offset:0x028	type:FLOAT.0
};

struct CTaskGrowlAndFlee__Tunables : CTuning
{
	float                            FleeMBR;                         // offset:0x010	type:FLOAT.0
};

struct CTaskGun__Tunables : CTuning
{
	int                              iMinLookAtTime;                  // offset:0x010	type:INT.0
	int                              iMaxLookAtTime;                  // offset:0x014	type:INT.0
	float                            fMinTimeBetweenBulletReactions;  // offset:0x018	type:FLOAT.0
	float                            fMaxTimeBetweenBulletReactions;  // offset:0x01C	type:FLOAT.0
	float                            fMaxDistForOverheadReactions;    // offset:0x020	type:FLOAT.0
	float                            fMaxAboveHeadForOverheadReactions; // offset:0x024	type:FLOAT.0
	float                            fBulletReactionPosAdjustmentZ;   // offset:0x028	type:FLOAT.0
	float                            fMinTimeBetweenLookAt;           // offset:0x02C	type:FLOAT.0
	float                            fMaxTimeBetweenLookAt;           // offset:0x030	type:FLOAT.0
	bool                             bDisable2HandedGetups;           // offset:0x034	type:BOOL.0
	float                            TimeForEyeIk;                    // offset:0x038	type:FLOAT.0
	float                            MinTimeBetweenEyeIkProcesses;    // offset:0x03C	type:FLOAT.0
	float                            MinDotToPointGunAtPositionWhenUnableToTurn; // offset:0x040	type:FLOAT.0
	string                           AssistedAimCamera;               // offset:0x044	type:STRING.ATHASHVALUE
	string                           RunAndGunAimCamera;              // offset:0x048	type:STRING.ATHASHVALUE
	uint                             AssistedAimInterpolateInDuration; // offset:0x04C	type:UINT.0
	uint                             RunAndGunInterpolateInDuration;  // offset:0x050	type:UINT.0
	uint                             MinTimeBetweenOverheadBulletReactions; // offset:0x054	type:UINT.0
	float                            MaxTimeInBulletReactionState;    // offset:0x058	type:FLOAT.0
	uint                             uFirstPersonRunAndGunWhileSprintTime; // offset:0x05C	type:UINT.0
	uint                             uFirstPersonMinTimeToSprint;     // offset:0x060	type:UINT.0
};

struct CTaskHeliChase__Tunables : CTuning
{
	struct CTaskHeliChase__Tunables__Drift     DriftX;                          // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskHeliChase__Tunables__Drift     DriftY;                          // offset:0x020	type:STRUCT.STRUCTURE
	struct CTaskHeliChase__Tunables__Drift     DriftZ;                          // offset:0x030	type:STRUCT.STRUCTURE
	int                                        MinHeightAboveTerrain;           // offset:0x040	type:INT.0
	float                                      SlowDownDistanceMin;             // offset:0x044	type:FLOAT.0
	float                                      SlowDownDistanceMax;             // offset:0x048	type:FLOAT.0
	float                                      CruiseSpeed;                     // offset:0x04C	type:FLOAT.0
	float                                      MaxDistanceForOrientation;       // offset:0x050	type:FLOAT.0
	float                                      NearDistanceForOrientation;      // offset:0x054	type:FLOAT.0
};

struct CTaskHeliChase__Tunables__Drift
{
	float                            MinValueForCorrection;           // offset:0x000	type:FLOAT.0
	float                            MaxValueForCorrection;           // offset:0x004	type:FLOAT.0
	float                            MinRate;                         // offset:0x008	type:FLOAT.0
	float                            MaxRate;                         // offset:0x00C	type:FLOAT.0
};

struct CTaskHeliCombat__Tunables : CTuning
{
	struct CTaskHeliCombat__Tunables__Chase     Chase;                           // offset:0x010	type:STRUCT.STRUCTURE
};

struct CTaskHeliCombat__Tunables__Chase
{
	float                            MinSpeed;                        // offset:0x000	type:FLOAT.0
	float                            MinTargetOffsetX;                // offset:0x004	type:FLOAT.0
	float                            MaxTargetOffsetX;                // offset:0x008	type:FLOAT.0
	float                            MinTargetOffsetY;                // offset:0x00C	type:FLOAT.0
	float                            MaxTargetOffsetY;                // offset:0x010	type:FLOAT.0
	float                            MinTargetOffsetZ;                // offset:0x014	type:FLOAT.0
	float                            MaxTargetOffsetZ;                // offset:0x018	type:FLOAT.0
	float                            MinTargetOffsetZ_TargetInAir;    // offset:0x01C	type:FLOAT.0
	float                            MaxTargetOffsetZ_TargetInAir;    // offset:0x020	type:FLOAT.0
};

struct CTaskHeliOrderResponse__Tunables : CTuning
{
	float                            MaxTimeSpentLandedBeforeFlee;    // offset:0x010	type:FLOAT.0
	float                            MaxTimeAfterDropOffBeforeFlee;   // offset:0x014	type:FLOAT.0
	float                            MinTimeSpentLandedBeforeExit;    // offset:0x018	type:FLOAT.0
	float                            MaxTimeSpentLandedBeforeExit;    // offset:0x01C	type:FLOAT.0
	float                            MaxTimeCollidingBeforeExit;      // offset:0x020	type:FLOAT.0
	float                            MinTimeBeforeOrderChangeDueToBlockedLocation; // offset:0x024	type:FLOAT.0
};

struct CTaskHeliPassengerRappel__Tunables : CTuning
{
	float                            fDefaultRopeLength;              // offset:0x010	type:FLOAT.0
	float                            fExtraRopeLength;                // offset:0x014	type:FLOAT.0
	float                            fExitDescendRate;                // offset:0x018	type:FLOAT.0
	float                            fDefaultDescendRate;             // offset:0x01C	type:FLOAT.0
	float                            fStartDescendingDistToTargetSq;  // offset:0x020	type:FLOAT.0
	float                            fRopeUnwindRate;                 // offset:0x024	type:FLOAT.0
	float                            fMinHeightToRappel;              // offset:0x028	type:FLOAT.0
	float                            fMaxHeliSpeedForRappel;          // offset:0x02C	type:FLOAT.0
};

struct CTaskHelicopterStrafe__Tunables : CTuning
{
	int                              FlightHeightAboveTarget;         // offset:0x010	type:INT.0
	int                              MinHeightAboveTerrain;           // offset:0x014	type:INT.0
	float                            TargetDirectionMinDot;           // offset:0x018	type:FLOAT.0
	float                            TargetOffset;                    // offset:0x01C	type:FLOAT.0
	float                            TargetMinSpeedToIgnore;          // offset:0x020	type:FLOAT.0
	float                            TargetMaxSpeedToStrafe;          // offset:0x024	type:FLOAT.0
	float                            TimeToAvoidTargetAfterDamaged;   // offset:0x028	type:FLOAT.0
	float                            AvoidOffsetXY;                   // offset:0x02C	type:FLOAT.0
	float                            AvoidOffsetZ;                    // offset:0x030	type:FLOAT.0
	float                            MinDotToBeConsideredInFront;     // offset:0x034	type:FLOAT.0
	float                            BehindRotateAngleLookAhead;      // offset:0x038	type:FLOAT.0
	float                            SearchRotateAngleLookAhead;      // offset:0x03C	type:FLOAT.0
	float                            CircleRotateAngleLookAhead;      // offset:0x040	type:FLOAT.0
	float                            BehindTargetAngle;               // offset:0x044	type:FLOAT.0
	float                            TargetOffsetFilter;              // offset:0x048	type:FLOAT.0
	float                            MinTimeBetweenStrafeDirectionChanges; // offset:0x04C	type:FLOAT.0
};

struct CTaskHumanLocomotion__Tunables : CTuning
{
	float                                                               Player_MBRAcceleration;          // offset:0x010	type:FLOAT.0
	float                                                               Player_MBRDeceleration;          // offset:0x014	type:FLOAT.0
	float                                                               AI_MBRAcceleration;              // offset:0x018	type:FLOAT.0
	float                                                               AI_MBRDeceleration;              // offset:0x01C	type:FLOAT.0
	float                                                               FromStrafeAccelerationMod;       // offset:0x020	type:FLOAT.0
	float                                                               FastWalkRateMin;                 // offset:0x024	type:FLOAT.0
	float                                                               FastWalkRateMax;                 // offset:0x028	type:FLOAT.0
	float                                                               SlowRunRateMin;                  // offset:0x02C	type:FLOAT.0
	float                                                               SlowRunRateMax;                  // offset:0x030	type:FLOAT.0
	float                                                               FastRunRateMin;                  // offset:0x034	type:FLOAT.0
	float                                                               FastRunRateMax;                  // offset:0x038	type:FLOAT.0
	float                                                               Turn180ActivationAngle;          // offset:0x03C	type:FLOAT.0
	float                                                               Turn180ConsistentAngleTolerance; // offset:0x040	type:FLOAT.0
	float                                                               IdleHeadingLerpRate;             // offset:0x044	type:FLOAT.0
	float                                                               Player_IdleTurnRate;             // offset:0x048	type:FLOAT.0
	float                                                               AI_IdleTurnRate;                 // offset:0x04C	type:FLOAT.0
	float                                                               FromStrafe_WeightRate;           // offset:0x050	type:FLOAT.0
	float                                                               FromStrafe_MovingBlendOutTime;   // offset:0x054	type:FLOAT.0
	float                                                               IdleTransitionBlendTimeFromActionMode; // offset:0x058	type:FLOAT.0
	float                                                               IdleTransitionBlendTimeFromStealth; // offset:0x05C	type:FLOAT.0
	array<struct CTaskHumanLocomotion__Tunables__sMovingVarsSet, 3>     MovingVarsSet;                   // offset:0x060	type:ARRAY.MEMBER
};

struct CTaskHumanLocomotion__Tunables__sMovingVars
{
	float                            MovingDirectionSmoothingAngleMin; // offset:0x000	type:FLOAT.0
	float                            MovingDirectionSmoothingAngleMax; // offset:0x004	type:FLOAT.0
	float                            MovingDirectionSmoothingRateMin; // offset:0x008	type:FLOAT.0
	float                            MovingDirectionSmoothingRateMaxWalk; // offset:0x00C	type:FLOAT.0
	float                            MovingDirectionSmoothingRateMaxRun; // offset:0x010	type:FLOAT.0
	float                            MovingDirectionSmoothingRateAccelerationMin; // offset:0x014	type:FLOAT.0
	float                            MovingDirectionSmoothingRateAccelerationMax; // offset:0x018	type:FLOAT.0
	float                            MovingDirectionSmoothingForwardAngleWalk; // offset:0x01C	type:FLOAT.0
	float                            MovingDirectionSmoothingForwardAngleRun; // offset:0x020	type:FLOAT.0
	float                            MovingDirectionSmoothingForwardRateMod; // offset:0x024	type:FLOAT.0
	float                            MovingDirectionSmoothingForwardRateAccelerationMod; // offset:0x028	type:FLOAT.0
	float                            MovingExtraHeadingChangeAngleMin; // offset:0x02C	type:FLOAT.0
	float                            MovingExtraHeadingChangeAngleMax; // offset:0x030	type:FLOAT.0
	float                            MovingExtraHeadingChangeRateWalk; // offset:0x034	type:FLOAT.0
	float                            MovingExtraHeadingChangeRateRun; // offset:0x038	type:FLOAT.0
	float                            MovingExtraHeadingChangeRateAccelerationMin; // offset:0x03C	type:FLOAT.0
	float                            MovingExtraHeadingChangeRateAccelerationMax; // offset:0x040	type:FLOAT.0
	bool                             UseExtraHeading;                 // offset:0x044	type:BOOL.0
	bool                             UseMovingDirectionDiff;          // offset:0x045	type:BOOL.0
};

struct CTaskHumanLocomotion__Tunables__sMovingVarsSet
{
	string                                                 Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	struct CTaskHumanLocomotion__Tunables__sMovingVars     Standard;                        // offset:0x004	type:STRUCT.STRUCTURE
	struct CTaskHumanLocomotion__Tunables__sMovingVars     StandardAI;                      // offset:0x04C	type:STRUCT.STRUCTURE
	struct CTaskHumanLocomotion__Tunables__sMovingVars     TighterTurn;                     // offset:0x094	type:STRUCT.STRUCTURE
};

struct CTaskInCover__ThrowProjectileClip
{
	string                                  IntroClipId;                     // offset:0x000	type:STRING.ATHASHVALUE
	string                                  PullPinClipId;                   // offset:0x004	type:STRING.ATHASHVALUE
	string                                  BaseClipId;                      // offset:0x008	type:STRING.ATHASHVALUE
	string                                  ThrowLongClipId;                 // offset:0x00C	type:STRING.ATHASHVALUE
	string                                  ThrowShortClipId;                // offset:0x010	type:STRING.ATHASHVALUE
	string                                  ThrowLongFaceCoverClipId;        // offset:0x014	type:STRING.ATHASHVALUE
	string                                  ThrowShortFaceCoverClipId;       // offset:0x018	type:STRING.ATHASHVALUE
	bitset<enum CTaskCover__eAnimFlags>     Flags;                           // offset:0x01C	type:BITSET.32BIT
};

struct CTaskInCover__Tunables : CTuning
{
	float                                               MovementClipRate;                // offset:0x010	type:FLOAT.0
	float                                               TurnClipRate;                    // offset:0x014	type:FLOAT.0
	float                                               ControlDebugXPos;                // offset:0x018	type:FLOAT.0
	float                                               ControlDebugYPos;                // offset:0x01C	type:FLOAT.0
	float                                               ControlDebugRadius;              // offset:0x020	type:FLOAT.0
	float                                               ControlDebugBeginAngle;          // offset:0x024	type:FLOAT.0
	float                                               ControlDebugEndAngle;            // offset:0x028	type:FLOAT.0
	float                                               MinStickInputToMoveInCover;      // offset:0x02C	type:FLOAT.0
	float                                               MinStickInputXAxisToTurnInCover; // offset:0x030	type:FLOAT.0
	float                                               MaxInputForIdleExit;             // offset:0x034	type:FLOAT.0
	float                                               InputYAxisCornerExitValue;       // offset:0x038	type:FLOAT.0
	float                                               InputYAxisQuitValueAimDirect;    // offset:0x03C	type:FLOAT.0
	float                                               InputYAxisQuitValue;             // offset:0x040	type:FLOAT.0
	float                                               StartExtendedProbeTime;          // offset:0x044	type:FLOAT.0
	float                                               MinTimeToSpendInTask;            // offset:0x048	type:FLOAT.0
	float                                               DesiredDistanceToCover;          // offset:0x04C	type:FLOAT.0
	float                                               DesiredDistanceToCoverToRequestStep; // offset:0x050	type:FLOAT.0
	float                                               OptimumDistToRightCoverEdgeCrouched; // offset:0x054	type:FLOAT.0
	float                                               OptimumDistToLeftCoverEdgeCrouched; // offset:0x058	type:FLOAT.0
	float                                               OptimumDistToRightCoverEdge;     // offset:0x05C	type:FLOAT.0
	float                                               OptimumDistToLeftCoverEdge;      // offset:0x060	type:FLOAT.0
	float                                               MinMovingProbeOffset;            // offset:0x064	type:FLOAT.0
	float                                               MaxMovingProbeOffset;            // offset:0x068	type:FLOAT.0
	float                                               MinTurnProbeOffset;              // offset:0x06C	type:FLOAT.0
	float                                               MaxTurnProbeOffset;              // offset:0x070	type:FLOAT.0
	float                                               DefaultProbeOffset;              // offset:0x074	type:FLOAT.0
	float                                               MinStoppingEdgeCheckProbeOffset; // offset:0x078	type:FLOAT.0
	float                                               MaxStoppingEdgeCheckProbeOffset; // offset:0x07C	type:FLOAT.0
	float                                               MinStoppingProbeOffset;          // offset:0x080	type:FLOAT.0
	float                                               MaxStoppingProbeOffset;          // offset:0x084	type:FLOAT.0
	float                                               HeadingChangeRate;               // offset:0x088	type:FLOAT.0
	float                                               MinTimeBeforeAllowingCornerMove; // offset:0x08C	type:FLOAT.0
	float                                               CrouchedLeftFireOffset;          // offset:0x090	type:FLOAT.0
	float                                               CrouchedRightFireOffset;         // offset:0x094	type:FLOAT.0
	float                                               CoverLeftFireModifier;           // offset:0x098	type:FLOAT.0
	float                                               CoverRightFireModifier;          // offset:0x09C	type:FLOAT.0
	float                                               CoverLeftFireModifierLow;        // offset:0x0A0	type:FLOAT.0
	float                                               CoverRightFireModifierLow;       // offset:0x0A4	type:FLOAT.0
	float                                               CoverLeftFireModifierCloseToEdge; // offset:0x0A8	type:FLOAT.0
	float                                               CFriendlyIssues;                 // offset:0x0AC	type:FLOAT.0
	float                                               CoverLeftIncreaseModifier;       // offset:0x0B0	type:FLOAT.0
	float                                               CoverRightIncreaseModifier;      // offset:0x0B4	type:FLOAT.0
	float                                               AimTurnCosAngleTolerance;        // offset:0x0B8	type:FLOAT.0
	float                                               SteppingMovementSpeed;           // offset:0x0BC	type:FLOAT.0
	float                                               InCoverMovementSpeedEnterCover;  // offset:0x0C0	type:FLOAT.0
	float                                               InCoverMovementSpeed;            // offset:0x0C4	type:FLOAT.0
	bool                                                UseAutoPeekAimFromCoverControls; // offset:0x0C8	type:BOOL.0
	bool                                                ComeBackInWhenAimDirectChangeInHighCover; // offset:0x0C9	type:BOOL.0
	float                                               AlternateControlStickInputThreshold; // offset:0x0CC	type:FLOAT.0
	float                                               EdgeCapsuleRadius;               // offset:0x0D0	type:FLOAT.0
	float                                               EdgeStartXOffset;                // offset:0x0D4	type:FLOAT.0
	float                                               EdgeEndXOffset;                  // offset:0x0D8	type:FLOAT.0
	float                                               EdgeStartYOffset;                // offset:0x0DC	type:FLOAT.0
	float                                               EdgeEndYOffset;                  // offset:0x0E0	type:FLOAT.0
	float                                               InsideEdgeStartYOffset;          // offset:0x0E4	type:FLOAT.0
	float                                               InsideEdgeEndYOffset;            // offset:0x0E8	type:FLOAT.0
	float                                               InsideEdgeStartXOffset;          // offset:0x0EC	type:FLOAT.0
	float                                               InsideEdgeEndXOffset;            // offset:0x0F0	type:FLOAT.0
	float                                               WallTestYOffset;                 // offset:0x0F4	type:FLOAT.0
	float                                               InitialLowEdgeWallTestYOffset;   // offset:0x0F8	type:FLOAT.0
	float                                               HighCloseEdgeWallTestYOffset;    // offset:0x0FC	type:FLOAT.0
	float                                               WallTestStartXOffset;            // offset:0x100	type:FLOAT.0
	float                                               WallTestEndXOffset;              // offset:0x104	type:FLOAT.0
	float                                               WallHighTestZOffset;             // offset:0x108	type:FLOAT.0
	float                                               EdgeHighZOffset;                 // offset:0x10C	type:FLOAT.0
	float                                               MovingEdgeTestStartYOffset;      // offset:0x110	type:FLOAT.0
	float                                               MovingEdgeTestEndYOffset;        // offset:0x114	type:FLOAT.0
	float                                               CoverToCoverEdgeTestStartYOffset; // offset:0x118	type:FLOAT.0
	float                                               CoverToCoverEdgeTestEndYOffset;  // offset:0x11C	type:FLOAT.0
	float                                               SteppingEdgeTestStartYOffset;    // offset:0x120	type:FLOAT.0
	float                                               SteppingEdgeTestEndYOffset;      // offset:0x124	type:FLOAT.0
	float                                               InitialLowEdgeTestStartYOffset;  // offset:0x128	type:FLOAT.0
	float                                               InitialLowEdgeTestEndYOffset;    // offset:0x12C	type:FLOAT.0
	float                                               EdgeLowZOffset;                  // offset:0x130	type:FLOAT.0
	float                                               EdgeMinimumOffsetDiff;           // offset:0x134	type:FLOAT.0
	float                                               EdgeMaximumOffsetDiff;           // offset:0x138	type:FLOAT.0
	float                                               PinnedDownPeekChance;            // offset:0x13C	type:FLOAT.0
	float                                               PinnedDownBlindFireChance;       // offset:0x140	type:FLOAT.0
	float                                               MinTimeBeforeAllowingAutoPeek;   // offset:0x144	type:FLOAT.0
	bool                                                EnableAimDirectlyIntros;         // offset:0x148	type:BOOL.0
	float                                               BlindFireHighCoverMinPitchLimit; // offset:0x14C	type:FLOAT.0
	float                                               BlindFireHighCoverMaxPitchLimit; // offset:0x150	type:FLOAT.0
	float                                               PedDirToPedCoverCosAngleTol;     // offset:0x154	type:FLOAT.0
	float                                               CamToPedDirCosAngleTol;          // offset:0x158	type:FLOAT.0
	float                                               CamToCoverDirCosAngleTol;        // offset:0x15C	type:FLOAT.0
	float                                               MinDistanceToTargetForPeek;      // offset:0x160	type:FLOAT.0
	float                                               TimeBetweenPeeksWithoutLOS;      // offset:0x164	type:FLOAT.0
	int                                                 RecreateWeaponTime;              // offset:0x168	type:INT.0
	array<struct CTaskInCover__ThrowProjectileClip>     ThrowProjectileClips;            // offset:0x170	type:ARRAY.ATARRAY
	bool                                                EnableLeftHandIkInCover;         // offset:0x180	type:BOOL.0
	bool                                                EnableReloadingWhilstMovingInCover; // offset:0x181	type:BOOL.0
	float                                               AimIntroRateForAi;               // offset:0x184	type:FLOAT.0
	float                                               AimOutroRateForAi;               // offset:0x188	type:FLOAT.0
	float                                               MinReactToFireRate;              // offset:0x18C	type:FLOAT.0
	float                                               MaxReactToFireRate;              // offset:0x190	type:FLOAT.0
	float                                               MaxReactToFireDelay;             // offset:0x194	type:FLOAT.0
	float                                               MinTimeUntilReturnToIdleFromAimAfterAimedAt; // offset:0x198	type:FLOAT.0
	float                                               MaxTimeUntilReturnToIdleFromAimAfterAimedAt; // offset:0x19C	type:FLOAT.0
	float                                               MinTimeUntilReturnToIdleFromAimDefault; // offset:0x1A0	type:FLOAT.0
	float                                               MaxTimeUntilReturnToIdleFromAimDefault; // offset:0x1A4	type:FLOAT.0
	float                                               GlobalLateralTorsoOffsetInLeftCover; // offset:0x1A8	type:FLOAT.0
	float                                               WeaponLongBlockingOffsetInLeftCover; // offset:0x1AC	type:FLOAT.0
	float                                               WeaponLongBlockingOffsetInLeftCoverFPS; // offset:0x1B0	type:FLOAT.0
	float                                               WeaponLongBlockingOffsetInHighLeftCover; // offset:0x1B4	type:FLOAT.0
	float                                               WeaponBlockingOffsetInLeftCover; // offset:0x1B8	type:FLOAT.0
	float                                               WeaponBlockingOffsetInLeftCoverFPS; // offset:0x1BC	type:FLOAT.0
	float                                               WeaponBlockingOffsetInRightCover; // offset:0x1C0	type:FLOAT.0
	float                                               WeaponBlockingOffsetInRightCoverFPS; // offset:0x1C4	type:FLOAT.0
	float                                               WeaponBlockingLengthOffset;      // offset:0x1C8	type:FLOAT.0
	float                                               WeaponBlockingLengthOffsetFPS;   // offset:0x1CC	type:FLOAT.0
	float                                               WeaponBlockingLengthLongWeaponOffset; // offset:0x1D0	type:FLOAT.0
	float                                               WeaponBlockingLengthLongWeaponOffsetFPS; // offset:0x1D4	type:FLOAT.0
	string                                              CoverStepClipSetId;              // offset:0x1D8	type:STRING.ATHASHVALUE
	float                                               PinnedDownTakeCoverAmount;       // offset:0x1DC	type:FLOAT.0
	float                                               AmountPinnedDownByDamage;        // offset:0x1E0	type:FLOAT.0
	float                                               AmountPinnedDownByBullet;        // offset:0x1E4	type:FLOAT.0
	float                                               AmountPinnedDownByWitnessKill;   // offset:0x1E8	type:FLOAT.0
	float                                               PinnedDownByBulletRange;         // offset:0x1EC	type:FLOAT.0
	float                                               PinnedDownDecreaseAmountPerSecond; // offset:0x1F0	type:FLOAT.0
	float                                               AimIntroTaskBlendOutDuration;    // offset:0x1F4	type:FLOAT.0
	uint                                                MinTimeToBePinnedDown;           // offset:0x1F8	type:UINT.0
	float                                               TimeBetweenBurstsMaxRandomPercent; // offset:0x1FC	type:FLOAT.0
	uint                                                AimOutroDelayTime;               // offset:0x200	type:UINT.0
	uint                                                AimOutroDelayTimeFPS;            // offset:0x204	type:UINT.0
	uint                                                AimOutroDelayTimeFPSScope;       // offset:0x208	type:UINT.0
	bool                                                AimOutroDelayWhenPeekingOnly;    // offset:0x20C	type:BOOL.0
	bool                                                EnableAimOutroDelay;             // offset:0x20D	type:BOOL.0
	string                                              ThrowProjectileClipSetId;        // offset:0x210	type:STRING.ATHASHVALUE
	string                                              ThrowProjectileFPSClipSetId;     // offset:0x214	type:STRING.ATHASHVALUE
};

struct CTaskInVehicleBasic__Tunables : CTuning
{
	float                            fSecondsInAirBeforePassengerComment; // offset:0x010	type:FLOAT.0
};

struct CTaskIntimidate__Tunables : CTuning
{
	bool                             UseArmsOutForCops;               // offset:0x010	type:BOOL.0
};

struct CTaskInvestigate__Tunables : CTuning
{
	int                              iTimeToStandAtSearchPoint;       // offset:0x010	type:INT.0
	float                            fMinDistanceToUseVehicle;        // offset:0x014	type:FLOAT.0
	float                            fMinDistanceSavingToUseVehicle;  // offset:0x018	type:FLOAT.0
	float                            fTimeToStandAtPerimeter;         // offset:0x01C	type:FLOAT.0
	float                            fNewPositionThreshold;           // offset:0x020	type:FLOAT.0
};

struct CTaskJump__Tunables : CTuning
{
	float                            MinSuperJumpInitialVelocity;     // offset:0x010	type:FLOAT.0
	float                            MaxSuperJumpInitialVelocity;     // offset:0x014	type:FLOAT.0
	float                            MinBeastJumpInitialVelocity;     // offset:0x018	type:FLOAT.0
	float                            MaxBeastJumpInitialVelocity;     // offset:0x01C	type:FLOAT.0
	float                            HighJumpMinAngleForVelScale;     // offset:0x020	type:FLOAT.0
	float                            HighJumpMaxAngleForVelScale;     // offset:0x024	type:FLOAT.0
	float                            HighJumpMinVelScale;             // offset:0x028	type:FLOAT.0
	float                            HighJumpMaxVelScale;             // offset:0x02C	type:FLOAT.0
	bool                             DisableJumpOnSteepStairs;        // offset:0x030	type:BOOL.0
	float                            MaxStairsJumpAngle;              // offset:0x034	type:FLOAT.0
	bool                             bEnableJumpCollisions;           // offset:0x038	type:BOOL.0
	bool                             bEnableJumpCollisionsMp;         // offset:0x039	type:BOOL.0
	bool                             bBlockJumpCollisionAgainstRagdollBlocked; // offset:0x03A	type:BOOL.0
	float                            PredictiveProbeZOffset;          // offset:0x03C	type:FLOAT.0
	float                            PredictiveBraceStartDelay;       // offset:0x040	type:FLOAT.0
	float                            PredictiveBraceProbeLength;      // offset:0x044	type:FLOAT.0
	float                            PredictiveBraceBlendInDuration;  // offset:0x048	type:FLOAT.0
	float                            PredictiveBraceBlendOutDuration; // offset:0x04C	type:FLOAT.0
	float                            PredictiveBraceMaxUpDotSlope;    // offset:0x050	type:FLOAT.0
	float                            PredictiveRagdollIntersectionDot; // offset:0x054	type:FLOAT.0
	float                            PredictiveRagdollStartDelay;     // offset:0x058	type:FLOAT.0
	float                            PredictiveRagdollProbeLength;    // offset:0x05C	type:FLOAT.0
	float                            PredictiveRagdollProbeRadius;    // offset:0x060	type:FLOAT.0
	float                            PredictiveRagdollRequiredVelocityMag; // offset:0x064	type:FLOAT.0
};

struct CTaskMeleeActionResult__Tunables : CTuning
{
	float                            ActionModeTime;                  // offset:0x010	type:FLOAT.0
	float                            ForceRunDelayTime;               // offset:0x014	type:FLOAT.0
	uint                             _0x1FC45FDA;                     // offset:0x018	type:UINT.0
};

struct CTaskMotionAiming__Tunables : CTuning
{
	float                                        PlayerMoveAccel;                 // offset:0x010	type:FLOAT.0
	float                                        PlayerMoveDecel;                 // offset:0x014	type:FLOAT.0
	float                                        PedMoveAccel;                    // offset:0x018	type:FLOAT.0
	float                                        PedMoveDecel;                    // offset:0x01C	type:FLOAT.0
	float                                        FromOnFootAccelerationMod;       // offset:0x020	type:FLOAT.0
	float                                        WalkAngAccel;                    // offset:0x024	type:FLOAT.0
	float                                        RunAngAccel;                     // offset:0x028	type:FLOAT.0
	float                                        WalkAngAccelDirectBlend;         // offset:0x02C	type:FLOAT.0
	float                                        RunAngAccelDirectBlend;          // offset:0x030	type:FLOAT.0
	float                                        WalkAngAccelLookBehindTransition; // offset:0x034	type:FLOAT.0
	float                                        RunAngAccelLookBehindTransition; // offset:0x038	type:FLOAT.0
	float                                        Turn180ActivationAngle;          // offset:0x03C	type:FLOAT.0
	float                                        Turn180ConsistentAngleTolerance; // offset:0x040	type:FLOAT.0
	struct CTaskMotionAiming__Tunables__Turn     Turn;                            // offset:0x044	type:STRUCT.STRUCTURE
	float                                        PitchChangeRate;                 // offset:0x04C	type:FLOAT.0
	float                                        PitchChangeRateAcceleration;     // offset:0x050	type:FLOAT.0
	float                                        OverwriteMaxPitch;               // offset:0x054	type:FLOAT.0
	float                                        AimIntroMaxAngleChangeRate;      // offset:0x058	type:FLOAT.0
	float                                        AimIntroMinPhaseChangeRate;      // offset:0x05C	type:FLOAT.0
	float                                        AimIntroMaxPhaseChangeRate;      // offset:0x060	type:FLOAT.0
	float                                        AimIntroMaxTimedOutPhaseChangeRate; // offset:0x064	type:FLOAT.0
	float                                        PlayerIdleIntroAnimRate;         // offset:0x068	type:FLOAT.0
	float                                        MovingWalkAnimRateMin;           // offset:0x06C	type:FLOAT.0
	float                                        MovingWalkAnimRateMax;           // offset:0x070	type:FLOAT.0
	float                                        MovingWalkAnimRateAcceleration;  // offset:0x074	type:FLOAT.0
	bool                                         DoPostCameraClipUpdateForPlayer; // offset:0x078	type:BOOL.0
	bool                                         EnableIkForAI;                   // offset:0x079	type:BOOL.0
	bool                                         FPSForceUseStarts;               // offset:0x07A	type:BOOL.0
	bool                                         FPSForceUseStops;                // offset:0x07B	type:BOOL.0
	float                                        FPSForceUseStopsMinTimeInStartState; // offset:0x07C	type:FLOAT.0
	bool                                         FPSForceUse180s;                 // offset:0x080	type:BOOL.0
};

struct CTaskMotionAiming__Tunables__Turn
{
	float                            MaxVariationForCurrentPitch;     // offset:0x000	type:FLOAT.0
	float                            MaxVariationForDesiredPitch;     // offset:0x004	type:FLOAT.0
};

struct CTaskMotionBasicLocomotionLowLod__Tunables : CTuning
{
	float                            MovingExtraHeadingChangeRate;    // offset:0x010	type:FLOAT.0
	float                            MovingExtraHeadingChangeRateAcceleration; // offset:0x014	type:FLOAT.0
	float                            ForceUpdatesWhenTurningStartThresholdRadians; // offset:0x018	type:FLOAT.0
	float                            ForceUpdatesWhenTurningStopThresholdRadians; // offset:0x01C	type:FLOAT.0
};

struct CTaskMotionInAutomobile__Tunables : CTuning
{
	bool                             TestLowLodIdle;                  // offset:0x010	type:BOOL.0
	float                            DefaultShuntToIdleBlendDuration; // offset:0x014	type:FLOAT.0
	float                            PanicShuntToIdleBlendDuration;   // offset:0x018	type:FLOAT.0
	float                            MaxVelocityForSitIdles;          // offset:0x01C	type:FLOAT.0
	float                            MaxSteeringAngleForSitIdles;     // offset:0x020	type:FLOAT.0
	uint                             MinCentredSteeringAngleTimeForSitIdles; // offset:0x024	type:UINT.0
	float                            MinTimeInHornState;              // offset:0x028	type:FLOAT.0
	float                            LeanSidewaysAngleSmoothingRateMin; // offset:0x02C	type:FLOAT.0
	float                            LeanSidewaysAngleSmoothingRateMax; // offset:0x030	type:FLOAT.0
	float                            LeanSidewaysAngleSmoothingAcc;   // offset:0x034	type:FLOAT.0
	float                            LeanSidewaysAngleMinAccAngle;    // offset:0x038	type:FLOAT.0
	float                            LeanSidewaysAngleMaxAccAngle;    // offset:0x03C	type:FLOAT.0
	float                            LeftRightStickInputSmoothingRate; // offset:0x040	type:FLOAT.0
	float                            LeftRightStickInputMin;          // offset:0x044	type:FLOAT.0
	float                            LeanForwardsAngleSmoothingRate;  // offset:0x048	type:FLOAT.0
	float                            UpDownStickInputSmoothingRate;   // offset:0x04C	type:FLOAT.0
	float                            UpDownStickInputMin;             // offset:0x050	type:FLOAT.0
	float                            ZAccForLowImpact;                // offset:0x054	type:FLOAT.0
	float                            ZAccForMedImpact;                // offset:0x058	type:FLOAT.0
	float                            ZAccForHighImpact;               // offset:0x05C	type:FLOAT.0
	float                            StartEngineForce;                // offset:0x060	type:FLOAT.0
	bool                             UseLegIkOnBikes;                 // offset:0x064	type:BOOL.0
	float                            LargeVerticalAccelerationDelta;  // offset:0x068	type:FLOAT.0
	int                              NumFramesToPersistLargeVerticalAcceleration; // offset:0x06C	type:INT.0
	string                           LowLodIdleClipSetId;             // offset:0x070	type:STRING.ATHASHVALUE
	float                            SeatDisplacementSmoothingRateDriver; // offset:0x074	type:FLOAT.0
	float                            SeatDisplacementSmoothingRatePassenger; // offset:0x078	type:FLOAT.0
	float                            SeatDisplacementSmoothingStandUpOnJetski; // offset:0x07C	type:FLOAT.0
	float                            TimeInWheelieToEnforceMinPitch;  // offset:0x080	type:FLOAT.0
	float                            MinForwardsPitchSlope;           // offset:0x084	type:FLOAT.0
	float                            MaxForwardsPitchSlope;           // offset:0x088	type:FLOAT.0
	float                            MinForwardsPitchSlopeBalance;    // offset:0x08C	type:FLOAT.0
	float                            MaxForwardsPitchSlopeBalance;    // offset:0x090	type:FLOAT.0
	float                            MinForwardsPitchWheelieBalance;  // offset:0x094	type:FLOAT.0
	float                            MinForwardsPitchWheelieBegin;    // offset:0x098	type:FLOAT.0
	float                            MaxForwardsPitchWheelieBalance;  // offset:0x09C	type:FLOAT.0
	float                            SlowFastSpeedThreshold;          // offset:0x0A0	type:FLOAT.0
	float                            MinForwardsPitchSlowSpeed;       // offset:0x0A4	type:FLOAT.0
	float                            MaxForwardsPitchSlowSpeed;       // offset:0x0A8	type:FLOAT.0
	float                            MinForwardsPitchFastSpeed;       // offset:0x0AC	type:FLOAT.0
	float                            MaxForwardsPitchFastSpeed;       // offset:0x0B0	type:FLOAT.0
	float                            SlowApproachRate;                // offset:0x0B4	type:FLOAT.0
	float                            FastApproachRate;                // offset:0x0B8	type:FLOAT.0
	float                            WheelieApproachRate;             // offset:0x0BC	type:FLOAT.0
	float                            NewLeanSteerApproachRate;        // offset:0x0C0	type:FLOAT.0
	float                            MinTimeBetweenCloseDoorAttempts; // offset:0x0C4	type:FLOAT.0
	float                            ShuntDamageMultiplierAI;         // offset:0x0C8	type:FLOAT.0
	float                            ShuntDamageMultiplierPlayer;     // offset:0x0CC	type:FLOAT.0
	float                            MinDamageTakenToApplyDamageAI;   // offset:0x0D0	type:FLOAT.0
	float                            MinDamageTakenToApplyDamagePlayer; // offset:0x0D4	type:FLOAT.0
	float                            MinTimeInTaskToCheckForDamage;   // offset:0x0D8	type:FLOAT.0
	float                            MinDamageToCheckForRandomDeath;  // offset:0x0DC	type:FLOAT.0
	float                            MaxDamageToCheckForRandomDeath;  // offset:0x0E0	type:FLOAT.0
	float                            MinHeavyCrashDeathChance;        // offset:0x0E4	type:FLOAT.0
	float                            MaxHeavyCrashDeathChance;        // offset:0x0E8	type:FLOAT.0
	float                            MinDisplacementScale;            // offset:0x0EC	type:FLOAT.0
	float                            DisplacementScaleApproachRateIn; // offset:0x0F0	type:FLOAT.0
	float                            DisplacementScaleApproachRateOut; // offset:0x0F4	type:FLOAT.0
	uint                             SteeringDeadZoneCentreTimeMS;    // offset:0x0F8	type:UINT.0
	uint                             SteeringDeadZoneTimeMS;          // offset:0x0FC	type:UINT.0
	float                            SteeringDeadZone;                // offset:0x100	type:FLOAT.0
	float                            SteeringChangeToStartProcessMoveSignals; // offset:0x104	type:FLOAT.0
	float                            SteeringChangeToStopProcessMoveSignals; // offset:0x108	type:FLOAT.0
	float                            SeatBlendLinSpeed;               // offset:0x10C	type:FLOAT.0
	float                            SeatBlendAngSpeed;               // offset:0x110	type:FLOAT.0
	float                            HoldLegOutVelocity;              // offset:0x114	type:FLOAT.0
	float                            ForcedLegUpVelocity;             // offset:0x118	type:FLOAT.0
	float                            MinVelStillStart;                // offset:0x11C	type:FLOAT.0
	float                            MinVelStillStop;                 // offset:0x120	type:FLOAT.0
	float                            BurnOutBlendInTol;               // offset:0x124	type:FLOAT.0
	float                            BurnOutBlendInSpeed;             // offset:0x128	type:FLOAT.0
	float                            BurnOutBlendOutSpeed;            // offset:0x12C	type:FLOAT.0
	float                            BikeInAirDriveToStandUpTimeMin;  // offset:0x130	type:FLOAT.0
	float                            BikeInAirDriveToStandUpTimeMax;  // offset:0x134	type:FLOAT.0
	float                            MinSpeedToBlendInDriveFastFacial; // offset:0x138	type:FLOAT.0
	float                            SteeringWheelBlendInApproachSpeed; // offset:0x13C	type:FLOAT.0
	float                            SteeringWheelBlendOutApproachSpeed; // offset:0x140	type:FLOAT.0
	float                            FirstPersonSteeringWheelAngleApproachSpeed; // offset:0x144	type:FLOAT.0
	float                            FirstPersonSteeringTangentT0;    // offset:0x148	type:FLOAT.0
	float                            FirstPersonSteeringTangentT1;    // offset:0x14C	type:FLOAT.0
	float                            FirstPersonSteeringSplineStart;  // offset:0x150	type:FLOAT.0
	float                            FirstPersonSteeringSplineEnd;    // offset:0x154	type:FLOAT.0
	float                            FirstPersonSteeringSafeZone;     // offset:0x158	type:FLOAT.0
	float                            FirstPersonSmoothRateToFastSteering; // offset:0x15C	type:FLOAT.0
	float                            FirstPersonSmoothRateToSlowSteering; // offset:0x160	type:FLOAT.0
	float                            FirstPersonMaxSteeringRate;      // offset:0x164	type:FLOAT.0
	float                            FirstPersonMinSteeringRate;      // offset:0x168	type:FLOAT.0
	float                            FirstPersonMinVelocityToModifyRate; // offset:0x16C	type:FLOAT.0
	float                            FirstPersonMaxVelocityToModifyRate; // offset:0x170	type:FLOAT.0
	float                            SitToStillForceTriggerVelocity;  // offset:0x174	type:FLOAT.0
	float                            MinVelocityToAllowAltClipSet;    // offset:0x178	type:FLOAT.0
	float                            MaxVelocityToAllowAltClipSet;    // offset:0x17C	type:FLOAT.0
	float                            MaxVelocityToAllowAltClipSetWheelie; // offset:0x180	type:FLOAT.0
	float                            LeanThresholdToAllowAltClipSet;  // offset:0x184	type:FLOAT.0
	float                            AltLowRiderBlendDuration;        // offset:0x188	type:FLOAT.0
	float                            MaxThrottleForAltLowRiderPose;   // offset:0x18C	type:FLOAT.0
	float                            TimeSinceLastDamageToAllowAltLowRiderPoseLowRiderPose; // offset:0x190	type:FLOAT.0
	float                            MaxPitchForBikeAltAnims;         // offset:0x194	type:FLOAT.0
	float                            MinTimeInLowRiderClipset;        // offset:0x198	type:FLOAT.0
	uint                             FirstPersonTimeToAllowFastSteering; // offset:0x19C	type:UINT.0
	uint                             FirstPersonTimeToAllowSlowSteering; // offset:0x1A0	type:UINT.0
	uint                             MinTimeSinceDriveByForAgitate;   // offset:0x1A4	type:UINT.0
	uint                             MinTimeSinceDriveByForCloseDoor; // offset:0x1A8	type:UINT.0
	string                           StartEngineClipId;               // offset:0x1AC	type:STRING.ATHASHVALUE
	string                           FirstPersonStartEngineClipId;    // offset:0x1B0	type:STRING.ATHASHVALUE
	string                           HotwireClipId;                   // offset:0x1B4	type:STRING.ATHASHVALUE
	string                           FirstPersonHotwireClipId;        // offset:0x1B8	type:STRING.ATHASHVALUE
	string                           PutOnHelmetClipId;               // offset:0x1BC	type:STRING.ATHASHVALUE
	string                           PutOnHelmetFPSClipId;            // offset:0x1C0	type:STRING.ATHASHVALUE
	string                           PutHelmetVisorUpClipId;          // offset:0x1C4	type:STRING.ATHASHVALUE
	string                           PutHelmetVisorDownClipId;        // offset:0x1C8	type:STRING.ATHASHVALUE
	string                           PutHelmetVisorUpPOVClipId;       // offset:0x1CC	type:STRING.ATHASHVALUE
	string                           PutHelmetVisorDownPOVClipId;     // offset:0x1D0	type:STRING.ATHASHVALUE
	string                           ChangeStationClipId;             // offset:0x1D4	type:STRING.ATHASHVALUE
	string                           StillToSitClipId;                // offset:0x1D8	type:STRING.ATHASHVALUE
	string                           SitToStillClipId;                // offset:0x1DC	type:STRING.ATHASHVALUE
	string                           BurnOutClipId;                   // offset:0x1E0	type:STRING.ATHASHVALUE
	string                           BikeHornIntroClipId;             // offset:0x1E4	type:STRING.ATHASHVALUE
	string                           BikeHornClipId;                  // offset:0x1E8	type:STRING.ATHASHVALUE
	string                           BikeHornOutroClipId;             // offset:0x1EC	type:STRING.ATHASHVALUE
	float                            RestartIdleBlendDuration;        // offset:0x1F0	type:FLOAT.0
	float                            RestartIdleBlendDurationpassenger; // offset:0x1F4	type:FLOAT.0
	float                            DriveByToDuckBlendDuration;      // offset:0x1F8	type:FLOAT.0
	float                            MinTimeDucked;                   // offset:0x1FC	type:FLOAT.0
	float                            DuckControlThreshold;            // offset:0x200	type:FLOAT.0
	float                            DuckBikeSteerThreshold;          // offset:0x204	type:FLOAT.0
	float                            MinTimeToNextFirstPersonAdditiveIdle; // offset:0x208	type:FLOAT.0
	float                            MaxTimeToNextFirstPersonAdditiveIdle; // offset:0x20C	type:FLOAT.0
	float                            FirstPersonAdditiveIdleSteeringCentreThreshold; // offset:0x210	type:FLOAT.0
	float                            MaxDuckBreakLockOnTime;          // offset:0x214	type:FLOAT.0
};

struct CTaskMotionInCover__Tunables : CTuning
{
	float                                                   CoverToCoverClipRate;            // offset:0x010	type:FLOAT.0
	bool                                                    UseButtonToMoveAroundCorner;     // offset:0x014	type:BOOL.0
	bool                                                    DisableCoverToCoverTranslationScaling; // offset:0x015	type:BOOL.0
	bool                                                    DisableCoverToCoverRotationScaling; // offset:0x016	type:BOOL.0
	bool                                                    EnableCoverPeekingVariations;    // offset:0x017	type:BOOL.0
	bool                                                    EnableCoverPinnedVariations;     // offset:0x018	type:BOOL.0
	bool                                                    EnableCoverIdleVariations;       // offset:0x019	type:BOOL.0
	float                                                   CoverToCoverDuration;            // offset:0x01C	type:FLOAT.0
	float                                                   CoverToCoverMinScalePhase;       // offset:0x020	type:FLOAT.0
	float                                                   CoverToCoverMaxScalePhase;       // offset:0x024	type:FLOAT.0
	float                                                   CoverToCoverMinRotScalePhase;    // offset:0x028	type:FLOAT.0
	float                                                   CoverToCoverMaxRotScalePhase;    // offset:0x02C	type:FLOAT.0
	bool                                                    EnableWalkStops;                 // offset:0x030	type:BOOL.0
	bool                                                    EnableCoverToCover;              // offset:0x031	type:BOOL.0
	bool                                                    UseSprintButtonForCoverToCover;  // offset:0x032	type:BOOL.0
	uchar                                                   VerifyCoverInterval;             // offset:0x033	type:UCHAR.0
	uint                                                    MinTimeForCornerMove;            // offset:0x034	type:UINT.0
	float                                                   DefaultSettleBlendDuration;      // offset:0x038	type:FLOAT.0
	float                                                   HeightChangeSettleBlendDuration; // offset:0x03C	type:FLOAT.0
	float                                                   MaxRotationalSpeedScale;         // offset:0x040	type:FLOAT.0
	float                                                   MaxRotationalSpeed;              // offset:0x044	type:FLOAT.0
	float                                                   MinStickInputToEnableMoveAroundCorner; // offset:0x048	type:FLOAT.0
	float                                                   MinStickInputToEnableCoverToCover; // offset:0x04C	type:FLOAT.0
	float                                                   MinStickInputToMoveAroundCorner; // offset:0x050	type:FLOAT.0
	float                                                   MaxStoppingDuration;             // offset:0x054	type:FLOAT.0
	float                                                   MinStoppingDist;                 // offset:0x058	type:FLOAT.0
	float                                                   MinTimeToScale;                  // offset:0x05C	type:FLOAT.0
	float                                                   CTCDepthDistanceCompletionOffset; // offset:0x060	type:FLOAT.0
	float                                                   EdgeLowCoverMoveTime;            // offset:0x064	type:FLOAT.0
	float                                                   MinTimeToStandUp;                // offset:0x068	type:FLOAT.0
	float                                                   CoverToCoverMinDistToScale;      // offset:0x06C	type:FLOAT.0
	float                                                   CoverToCoverMinAngToScale;       // offset:0x070	type:FLOAT.0
	float                                                   CoverToCoverMinAng;              // offset:0x074	type:FLOAT.0
	float                                                   CoverToCoverDistTol;             // offset:0x078	type:FLOAT.0
	float                                                   CoverToCoverMaxDistToStep;       // offset:0x07C	type:FLOAT.0
	float                                                   CoverToCoverAngTol;              // offset:0x080	type:FLOAT.0
	float                                                   CoverToCoverMaxAngToStep;        // offset:0x084	type:FLOAT.0
	float                                                   CoverToCoverMaxAccel;            // offset:0x088	type:FLOAT.0
	float                                                   ForwardDistToStartSideScale;     // offset:0x08C	type:FLOAT.0
	float                                                   CoverToCoverMinDepthToScale;     // offset:0x090	type:FLOAT.0
	float                                                   CoverToCoverSmallAnimDist;       // offset:0x094	type:FLOAT.0
	float                                                   HeadingReachedTolerance;         // offset:0x098	type:FLOAT.0
	float                                                   BlendToIdleTime;                 // offset:0x09C	type:FLOAT.0
	float                                                   InsideCornerStopDistance;        // offset:0x0A0	type:FLOAT.0
	float                                                   MinTimeStayPinned;               // offset:0x0A4	type:FLOAT.0
	float                                                   MaxTimeStayPinned;               // offset:0x0A8	type:FLOAT.0
	uint                                                    PinnedDownThreshold;             // offset:0x0AC	type:UINT.0
	bool                                                    ForcePinnedDown;                 // offset:0x0B0	type:BOOL.0
	float                                                   MinDistanceToTargetForIdleVariations; // offset:0x0B4	type:FLOAT.0
	float                                                   MinTimeBetweenIdleVariations;    // offset:0x0B8	type:FLOAT.0
	float                                                   MaxTimeBetweenIdleVariations;    // offset:0x0BC	type:FLOAT.0
	float                                                   MinWaitTimeToPlayPlayerIdleVariations; // offset:0x0C0	type:FLOAT.0
	float                                                   MinTimeBetweenPlayerIdleVariations; // offset:0x0C4	type:FLOAT.0
	float                                                   MaxTimeBetweenPlayerIdleVariations; // offset:0x0C8	type:FLOAT.0
	float                                                   CoverHeadingCloseEnough;         // offset:0x0CC	type:FLOAT.0
	float                                                   CoverHeadingCloseEnoughTurn;     // offset:0x0D0	type:FLOAT.0
	float                                                   CoverPositionCloseEnough;        // offset:0x0D4	type:FLOAT.0
	float                                                   DefaultStillToTurnBlendDuration; // offset:0x0D8	type:FLOAT.0
	float                                                   DefaultEdgeTurnBlendDuration;    // offset:0x0DC	type:FLOAT.0
	float                                                   PeekToEdgeTurnBlendDuration;     // offset:0x0E0	type:FLOAT.0
	float                                                   MaxMoveSpeedInCover;             // offset:0x0E4	type:FLOAT.0
	float                                                   MinEdgeDistanceForStoppingAnim;  // offset:0x0E8	type:FLOAT.0
	bool                                                    UseNewStepAndWalkStarts;         // offset:0x0EC	type:BOOL.0
	bool                                                    UseNewTurns;                     // offset:0x0ED	type:BOOL.0
	bool                                                    UseNewTurnWalkStarts;            // offset:0x0EE	type:BOOL.0
	string                                                  CoreAIMotionClipSetId;           // offset:0x0F0	type:STRING.ATHASHVALUE
	array<string>                                           PeekingLow1HVariationClipsets;   // offset:0x0F8	type:ARRAY.ATARRAY
	array<string>                                           PeekingLow2HVariationClipsets;   // offset:0x108	type:ARRAY.ATARRAY
	array<string>                                           PeekingHigh1HVariationClipsets;  // offset:0x118	type:ARRAY.ATARRAY
	array<string>                                           PeekingHigh2HVariationClipsets;  // offset:0x128	type:ARRAY.ATARRAY
	array<string>                                           PinnedLow1HVariationClipsets;    // offset:0x138	type:ARRAY.ATARRAY
	array<string>                                           PinnedLow2HVariationClipsets;    // offset:0x148	type:ARRAY.ATARRAY
	array<string>                                           PinnedHigh1HVariationClipsets;   // offset:0x158	type:ARRAY.ATARRAY
	array<string>                                           PinnedHigh2HVariationClipsets;   // offset:0x168	type:ARRAY.ATARRAY
	array<string>                                           OutroReact1HVariationClipsets;   // offset:0x178	type:ARRAY.ATARRAY
	array<string>                                           OutroReact2HVariationClipsets;   // offset:0x188	type:ARRAY.ATARRAY
	array<string>                                           IdleLow1HVariationClipsets;      // offset:0x198	type:ARRAY.ATARRAY
	array<string>                                           IdleLow2HVariationClipsets;      // offset:0x1A8	type:ARRAY.ATARRAY
	array<string>                                           IdleHigh1HVariationClipsets;     // offset:0x1B8	type:ARRAY.ATARRAY
	array<string>                                           IdleHigh2HVariationClipsets;     // offset:0x1C8	type:ARRAY.ATARRAY
	array<string>                                           PlayerIdleLow0HVariationClipsets; // offset:0x1D8	type:ARRAY.ATARRAY
	array<string>                                           PlayerIdleLow1HVariationClipsets; // offset:0x1E8	type:ARRAY.ATARRAY
	array<string>                                           PlayerIdleLow2HVariationClipsets; // offset:0x1F8	type:ARRAY.ATARRAY
	array<string>                                           PlayerIdleHigh0HVariationClipsets; // offset:0x208	type:ARRAY.ATARRAY
	array<string>                                           PlayerIdleHigh1HVariationClipsets; // offset:0x218	type:ARRAY.ATARRAY
	array<string>                                           PlayerIdleHigh2HVariationClipsets; // offset:0x228	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>            PeekingVariationAnimStateInfos;  // offset:0x238	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>            PinnedIntroAnimStateInfos;       // offset:0x248	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>            PinnedIdleAnimStateInfos;        // offset:0x258	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>            PinnedOutroAnimStateInfos;       // offset:0x268	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>            IdleVariationAnimStateInfos;     // offset:0x278	type:ARRAY.ATARRAY
	bool                                                    EnableFirstPersonLocoAnimations; // offset:0x288	type:BOOL.0
	bool                                                    EnableFirstPersonAimingAnimations; // offset:0x289	type:BOOL.0
	bool                                                    EnableAimOutroToPeekAnims;       // offset:0x28A	type:BOOL.0
	bool                                                    EnableBlindFireToPeek;           // offset:0x28B	type:BOOL.0
	struct CTaskMotionInCover__Tunables__AnimStateInfos     ThirdPersonAnimStateInfos;       // offset:0x290	type:STRUCT.STRUCTURE
	struct CTaskMotionInCover__Tunables__AnimStateInfos     FirstPersonAnimStateInfos;       // offset:0x368	type:STRUCT.STRUCTURE
	string                                                  CoreMotionClipSetId;             // offset:0x440	type:STRING.ATHASHVALUE
	string                                                  CoreMotionFPSClipSetId;          // offset:0x444	type:STRING.ATHASHVALUE
};

struct CTaskMotionInCover__Tunables__AnimStateInfos
{
	array<struct CTaskCover__CoverAnimStateInfo>     IdleAnimStateInfos;              // offset:0x000	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>     AtEdgeAnimStateInfos;            // offset:0x010	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>     PeekingAnimStateInfos;           // offset:0x020	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>     StoppingAnimStateInfos;          // offset:0x030	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>     MovingAnimStateInfos;            // offset:0x040	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>     EdgeTurnAnimStateInfos;          // offset:0x050	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>     CoverToCoverAnimStateInfos;      // offset:0x060	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>     SteppingAnimStateInfos;          // offset:0x070	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>     WalkStartAnimStateInfos;         // offset:0x080	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>     SettleAnimStateInfos;            // offset:0x090	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>     TurnEnterAnimStateInfos;         // offset:0x0A0	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>     TurnEndAnimStateInfos;           // offset:0x0B0	type:ARRAY.ATARRAY
	array<struct CTaskCover__CoverAnimStateInfo>     TurnWalkStartAnimStateInfos;     // offset:0x0C0	type:ARRAY.ATARRAY
	string                                           WeaponHoldingFilterId;           // offset:0x0D0	type:STRING.ATHASHVALUE
};

struct CTaskMotionInTurret__Tunables : CTuning
{
	float                            MinAnimPitch;                    // offset:0x010	type:FLOAT.0
	float                            MaxAnimPitch;                    // offset:0x014	type:FLOAT.0
	float                            DeltaHeadingDirectionChange;     // offset:0x018	type:FLOAT.0
	float                            DeltaHeadingTurnThreshold;       // offset:0x01C	type:FLOAT.0
	float                            MinHeadingDeltaTurnSpeed;        // offset:0x020	type:FLOAT.0
	float                            MaxHeadingDeltaTurnSpeed;        // offset:0x024	type:FLOAT.0
	float                            PitchApproachRate;               // offset:0x028	type:FLOAT.0
	float                            TurnSpeedApproachRate;           // offset:0x02C	type:FLOAT.0
	float                            MinTimeInTurnState;              // offset:0x030	type:FLOAT.0
	float                            MinTimeInIdleState;              // offset:0x034	type:FLOAT.0
	float                            MinTimeInTurnStateAiOrRemote;    // offset:0x038	type:FLOAT.0
	float                            MinTimeInIdleStateAiOrRemote;    // offset:0x03C	type:FLOAT.0
	float                            MinHeadingDeltaToAdjust;         // offset:0x040	type:FLOAT.0
	float                            PlayerTurnControlThreshold;      // offset:0x044	type:FLOAT.0
	float                            RemoteOrAiTurnControlThreshold;  // offset:0x048	type:FLOAT.0
	float                            RemoteOrAiPedTurnDelta;          // offset:0x04C	type:FLOAT.0
	float                            RemoteOrAiPedStuckThreshold;     // offset:0x050	type:FLOAT.0
	float                            TurnVelocityThreshold;           // offset:0x054	type:FLOAT.0
	float                            TurnDecelerationThreshold;       // offset:0x058	type:FLOAT.0
	float                            NoTurnControlThreshold;          // offset:0x05C	type:FLOAT.0
	float                            MinTimeTurningForWobble;         // offset:0x060	type:FLOAT.0
	float                            SweepHeadingChangeRate;          // offset:0x064	type:FLOAT.0
	float                            MinMvPitchToPlayAimUpShunt;      // offset:0x068	type:FLOAT.0
	float                            MaxMvPitchToPlayAimDownShunt;    // offset:0x06C	type:FLOAT.0
	float                            MaxAngleToUseDesiredAngle;       // offset:0x070	type:FLOAT.0
	float                            EnterPitchSpeedModifier;         // offset:0x074	type:FLOAT.0
	float                            EnterHeadingSpeedModifier;       // offset:0x078	type:FLOAT.0
	float                            ExitPitchSpeedModifier;          // offset:0x07C	type:FLOAT.0
	float                            DelayMovementDuration;           // offset:0x080	type:FLOAT.0
	float                            InitialAdjustFinishedHeadingTolerance; // offset:0x084	type:FLOAT.0
	float                            InitialAdjustFinishedPitchTolerance; // offset:0x088	type:FLOAT.0
	float                            LookBehindSpeedModifier;         // offset:0x08C	type:FLOAT.0
	float                            RestartIdleBlendDuration;        // offset:0x090	type:FLOAT.0
	string                           AdjustStep0LClipId;              // offset:0x094	type:STRING.ATHASHVALUE
	string                           AdjustStep90LClipId;             // offset:0x098	type:STRING.ATHASHVALUE
	string                           AdjustStep180LClipId;            // offset:0x09C	type:STRING.ATHASHVALUE
	string                           AdjustStep0RClipId;              // offset:0x0A0	type:STRING.ATHASHVALUE
	string                           AdjustStep90RClipId;             // offset:0x0A4	type:STRING.ATHASHVALUE
	string                           AdjustStep180RClipId;            // offset:0x0A8	type:STRING.ATHASHVALUE
	string                           TurnLeftSlowDownClipId;          // offset:0x0AC	type:STRING.ATHASHVALUE
	string                           TurnLeftFastDownClipId;          // offset:0x0B0	type:STRING.ATHASHVALUE
	string                           TurnLeftSlowClipId;              // offset:0x0B4	type:STRING.ATHASHVALUE
	string                           TurnLeftFastClipId;              // offset:0x0B8	type:STRING.ATHASHVALUE
	string                           TurnLeftSlowUpClipId;            // offset:0x0BC	type:STRING.ATHASHVALUE
	string                           TurnLeftFastUpClipId;            // offset:0x0C0	type:STRING.ATHASHVALUE
	string                           TurnRightSlowDownClipId;         // offset:0x0C4	type:STRING.ATHASHVALUE
	string                           TurnRightFastDownClipId;         // offset:0x0C8	type:STRING.ATHASHVALUE
	string                           TurnRightSlowClipId;             // offset:0x0CC	type:STRING.ATHASHVALUE
	string                           TurnRightFastClipId;             // offset:0x0D0	type:STRING.ATHASHVALUE
	string                           TurnRightSlowUpClipId;           // offset:0x0D4	type:STRING.ATHASHVALUE
	string                           TurnRightFastUpClipId;           // offset:0x0D8	type:STRING.ATHASHVALUE
	string                           ShuntLeftClipId;                 // offset:0x0DC	type:STRING.ATHASHVALUE
	string                           ShuntRightClipId;                // offset:0x0E0	type:STRING.ATHASHVALUE
	string                           ShuntFrontClipId;                // offset:0x0E4	type:STRING.ATHASHVALUE
	string                           ShuntBackClipId;                 // offset:0x0E8	type:STRING.ATHASHVALUE
	string                           ShuntUpClipId;                   // offset:0x0EC	type:STRING.ATHASHVALUE
	string                           ShuntDownClipId;                 // offset:0x0F0	type:STRING.ATHASHVALUE
	string                           TurretFireClipId;                // offset:0x0F4	type:STRING.ATHASHVALUE
};

struct CTaskMotionInVehicle__Tunables : CTuning
{
	bool                             DisableCloseDoor;                // offset:0x010	type:BOOL.0
	float                            MaxVehVelocityToKeepStairsDown;  // offset:0x014	type:FLOAT.0
	float                            StillPitchAngleTol;              // offset:0x018	type:FLOAT.0
	float                            MinSpeedForVehicleToBeConsideredStillSqr; // offset:0x01C	type:FLOAT.0
	float                            VelocityDeltaThrownOut;          // offset:0x020	type:FLOAT.0
	float                            VelocityDeltaThrownOutPlayerSP;  // offset:0x024	type:FLOAT.0
	float                            VelocityDeltaThrownOutPlayerMP;  // offset:0x028	type:FLOAT.0
	float                            MinRateForInVehicleAnims;        // offset:0x02C	type:FLOAT.0
	float                            MaxRateForInVehicleAnims;        // offset:0x030	type:FLOAT.0
	float                            HeavyBrakeYAcceleration;         // offset:0x034	type:FLOAT.0
	float                            MinRatioForClosingDoor;          // offset:0x038	type:FLOAT.0
	float                            InAirZAccelTrigger;              // offset:0x03C	type:FLOAT.0
	float                            InAirProbeDistance;              // offset:0x040	type:FLOAT.0
	float                            InAirProbeForwardOffset;         // offset:0x044	type:FLOAT.0
	float                            MinPitchDefault;                 // offset:0x048	type:FLOAT.0
	float                            MaxPitchDefault;                 // offset:0x04C	type:FLOAT.0
	float                            MinPitchInAir;                   // offset:0x050	type:FLOAT.0
	float                            MaxPitchInAir;                   // offset:0x054	type:FLOAT.0
	float                            DefaultPitchSmoothingRate;       // offset:0x058	type:FLOAT.0
	float                            BikePitchSmoothingRate;          // offset:0x05C	type:FLOAT.0
	float                            BikePitchSmoothingPassengerRate; // offset:0x060	type:FLOAT.0
	float                            WheelieAccelerateControlThreshold; // offset:0x068	type:FLOAT.0
	float                            WheelieUpDownControlThreshold;   // offset:0x06C	type:FLOAT.0
	float                            WheelieMaxSpeedThreshold;        // offset:0x070	type:FLOAT.0
	float                            WheelieDesiredLeanAngleTol;      // offset:0x074	type:FLOAT.0
	float                            StillAccTol;                     // offset:0x078	type:FLOAT.0
	float                            AccelerationSmoothing;           // offset:0x07C	type:FLOAT.0
	float                            AccelerationSmoothingBike;       // offset:0x080	type:FLOAT.0
	float                            AccelerationScaleBike;           // offset:0x084	type:FLOAT.0
	float                            MinTimeInCurrentStateForStill;   // offset:0x088	type:FLOAT.0
	float                            AccelerationToStartLeaning;      // offset:0x08C	type:FLOAT.0
	float                            ZAccelerationToStartLeaning;     // offset:0x090	type:FLOAT.0
	float                            MaxAccelerationForLean;          // offset:0x094	type:FLOAT.0
	float                            MaxXYAccelerationForLeanBike;    // offset:0x098	type:FLOAT.0
	float                            MaxZAccelerationForLeanBike;     // offset:0x09C	type:FLOAT.0
	float                            StillDelayTime;                  // offset:0x0A0	type:FLOAT.0
	float                            ShuntAccelerateMag;              // offset:0x0A4	type:FLOAT.0
	float                            ShuntAccelerateMagBike;          // offset:0x0A8	type:FLOAT.0
	float                            MinTimeInShuntStateBeforeRestart; // offset:0x0AC	type:FLOAT.0
	float                            MaxAbsThrottleForCloseDoor;      // offset:0x0B0	type:FLOAT.0
	float                            MaxVehSpeedToConsiderClosingDoor; // offset:0x0B4	type:FLOAT.0
	float                            MaxDoorSpeedToConsiderClosingDoor; // offset:0x0B8	type:FLOAT.0
	float                            MinVehVelocityToGoThroughWindscreen; // offset:0x0BC	type:FLOAT.0
	float                            MinVehVelocityToGoThroughWindscreenMP; // offset:0x0C0	type:FLOAT.0
	float                            MaxZComponentForCollisionNormal; // offset:0x0C4	type:FLOAT.0
	float                            MaxTimeStreamInVehicleClipSetBeforeStartingEngine; // offset:0x0C8	type:FLOAT.0
	uint                             MinTimeSinceDriverValidToShuffle; // offset:0x0CC	type:UINT.0
};

struct CTaskMotionOnBicycleController__Tunables : CTuning
{
	float                            TimeStillToTransitionToTrackStand; // offset:0x010	type:FLOAT.0
	float                            MinTimeInPedalState;             // offset:0x014	type:FLOAT.0
	float                            MinTimeInFreewheelState;         // offset:0x018	type:FLOAT.0
	float                            MinAiSpeedForStandingUp;         // offset:0x01C	type:FLOAT.0
	float                            MaxSpeedToTriggerTrackStandTransition; // offset:0x020	type:FLOAT.0
	float                            MaxSpeedToTriggerFixieSkidTransition; // offset:0x024	type:FLOAT.0
	float                            MinTimeInStateToAllowTransitionFromFixieSkid; // offset:0x028	type:FLOAT.0
	string                           CruiseDuckPrepLeftCharClipId;    // offset:0x02C	type:STRING.ATHASHVALUE
	string                           CruiseDuckPrepRightCharClipId;   // offset:0x030	type:STRING.ATHASHVALUE
	string                           CruiseDuckPrepLeftBikeClipId;    // offset:0x034	type:STRING.ATHASHVALUE
	string                           CruiseDuckPrepRightBikeClipId;   // offset:0x038	type:STRING.ATHASHVALUE
	string                           FastDuckPrepLeftCharClipId;      // offset:0x03C	type:STRING.ATHASHVALUE
	string                           FastDuckPrepRightCharClipId;     // offset:0x040	type:STRING.ATHASHVALUE
	string                           FastDuckPrepLeftBikeClipId;      // offset:0x044	type:STRING.ATHASHVALUE
	string                           FastDuckPrepRightBikeClipId;     // offset:0x048	type:STRING.ATHASHVALUE
	string                           LaunchLeftCharClipId;            // offset:0x04C	type:STRING.ATHASHVALUE
	string                           LaunchRightCharClipId;           // offset:0x050	type:STRING.ATHASHVALUE
	string                           LaunchLeftBikeClipId;            // offset:0x054	type:STRING.ATHASHVALUE
	string                           LaunchRightBikeClipId;           // offset:0x058	type:STRING.ATHASHVALUE
	string                           TrackStandLeftCharClipId;        // offset:0x05C	type:STRING.ATHASHVALUE
	string                           TrackStandRightCharClipId;       // offset:0x060	type:STRING.ATHASHVALUE
	string                           TrackStandLeftBikeClipId;        // offset:0x064	type:STRING.ATHASHVALUE
	string                           TrackStandRightBikeClipId;       // offset:0x068	type:STRING.ATHASHVALUE
	string                           FixieSkidLeftCharClip0Id;        // offset:0x06C	type:STRING.ATHASHVALUE
	string                           FixieSkidLeftCharClip1Id;        // offset:0x070	type:STRING.ATHASHVALUE
	string                           FixieSkidRightCharClip0Id;       // offset:0x074	type:STRING.ATHASHVALUE
	string                           FixieSkidRightCharClip1Id;       // offset:0x078	type:STRING.ATHASHVALUE
	string                           FixieSkidLeftBikeClip0Id;        // offset:0x07C	type:STRING.ATHASHVALUE
	string                           FixieSkidLeftBikeClip1Id;        // offset:0x080	type:STRING.ATHASHVALUE
	string                           FixieSkidRightBikeClip0Id;       // offset:0x084	type:STRING.ATHASHVALUE
	string                           FixieSkidRightBikeClip1Id;       // offset:0x088	type:STRING.ATHASHVALUE
	string                           FixieSkidToBalanceLeftCharClip1Id; // offset:0x08C	type:STRING.ATHASHVALUE
	string                           FixieSkidToBalanceRightCharClip1Id; // offset:0x090	type:STRING.ATHASHVALUE
	string                           FixieSkidToBalanceLeftBikeClip1Id; // offset:0x094	type:STRING.ATHASHVALUE
	string                           FixieSkidToBalanceRightBikeClip1Id; // offset:0x098	type:STRING.ATHASHVALUE
	string                           CruisePedalCharClipId;           // offset:0x09C	type:STRING.ATHASHVALUE
	string                           InAirFreeWheelCharClipId;        // offset:0x0A0	type:STRING.ATHASHVALUE
	string                           InAirFreeWheelBikeClipId;        // offset:0x0A4	type:STRING.ATHASHVALUE
	string                           DownHillInAirFreeWheelCharClipId; // offset:0x0A8	type:STRING.ATHASHVALUE
	string                           DownHillInAirFreeWheelBikeClipId; // offset:0x0AC	type:STRING.ATHASHVALUE
	string                           TuckFreeWheelToTrackStandRightCharClipId; // offset:0x0B0	type:STRING.ATHASHVALUE
	string                           TuckFreeWheelToTrackStandRightBikeClipId; // offset:0x0B4	type:STRING.ATHASHVALUE
};

struct CTaskMotionOnBicycle__Tunables : CTuning
{
	float                            LeanAngleSmoothingRate;          // offset:0x010	type:FLOAT.0
	float                            StillToSitPedalGearApproachRate; // offset:0x014	type:FLOAT.0
	float                            PedalGearApproachRate;           // offset:0x018	type:FLOAT.0
	float                            MinXYVelForWantsToMove;          // offset:0x01C	type:FLOAT.0
	float                            MaxSpeedForStill;                // offset:0x020	type:FLOAT.0
	float                            MaxSpeedForStillReverse;         // offset:0x024	type:FLOAT.0
	float                            MaxThrottleForStill;             // offset:0x028	type:FLOAT.0
	float                            DefaultPedalToFreewheelBlendDuration; // offset:0x02C	type:FLOAT.0
	float                            SlowPedalToFreewheelBlendDuration; // offset:0x030	type:FLOAT.0
	float                            MaxRateForSlowBlendDuration;     // offset:0x034	type:FLOAT.0
	float                            StillToSitLeanRate;              // offset:0x038	type:FLOAT.0
	float                            StillToSitApproachRate;          // offset:0x03C	type:FLOAT.0
	float                            UpHillMinPitchToStandUp;         // offset:0x040	type:FLOAT.0
	float                            DownHillMinPitchToStandUp;       // offset:0x044	type:FLOAT.0
	float                            MinTimeInStandState;             // offset:0x048	type:FLOAT.0
	float                            MinTimeInStandStateFPS;          // offset:0x04C	type:FLOAT.0
	float                            MinSprintResultToStand;          // offset:0x050	type:FLOAT.0
	float                            MaxTimeSinceShiftedWeightForwardToAllowWheelie; // offset:0x054	type:FLOAT.0
	float                            WheelieShiftThreshold;           // offset:0x058	type:FLOAT.0
	float                            MinPitchDefault;                 // offset:0x05C	type:FLOAT.0
	float                            MaxPitchDefault;                 // offset:0x060	type:FLOAT.0
	float                            MinForwardsPitchSlope;           // offset:0x064	type:FLOAT.0
	float                            MaxForwardsPitchSlope;           // offset:0x068	type:FLOAT.0
	float                            OnSlopeThreshold;                // offset:0x06C	type:FLOAT.0
	float                            MaxJumpHeightForSmallImpact;     // offset:0x070	type:FLOAT.0
	float                            LongitudinalBodyLeanApproachRateSlope; // offset:0x074	type:FLOAT.0
	float                            LongitudinalBodyLeanApproachRate; // offset:0x078	type:FLOAT.0
	float                            LongitudinalBodyLeanApproachRateSlow; // offset:0x07C	type:FLOAT.0
	float                            SideZoneThreshold;               // offset:0x080	type:FLOAT.0
	float                            ReturnZoneThreshold;             // offset:0x084	type:FLOAT.0
	float                            MaxYIntentionToUseSlowApproach;  // offset:0x088	type:FLOAT.0
	float                            MinTimeToStayUprightAfterImpact; // offset:0x08C	type:FLOAT.0
	float                            DefaultSitToStandBlendDuration;  // offset:0x094	type:FLOAT.0
	float                            WheelieSitToStandBlendDuration;  // offset:0x098	type:FLOAT.0
	float                            WheelieStickPullBackMinIntention; // offset:0x09C	type:FLOAT.0
	float                            TimeSinceNotWantingToTrackStandToAllowStillTransition; // offset:0x0A0	type:FLOAT.0
	float                            MinTimeInSitToStillStateToReverse; // offset:0x0A4	type:FLOAT.0
	bool                             PreventDirectTransitionToReverseFromSit; // offset:0x0A8	type:BOOL.0
	string                           DefaultSmallImpactCharClipId;    // offset:0x0AC	type:STRING.ATHASHVALUE
	string                           DefaultImpactCharClipId;         // offset:0x0B0	type:STRING.ATHASHVALUE
	string                           DefaultSmallImpactBikeClipId;    // offset:0x0B4	type:STRING.ATHASHVALUE
	string                           DefaultImpactBikeClipId;         // offset:0x0B8	type:STRING.ATHASHVALUE
	string                           DownHillSmallImpactCharClipId;   // offset:0x0BC	type:STRING.ATHASHVALUE
	string                           DownHillImpactCharClipId;        // offset:0x0C0	type:STRING.ATHASHVALUE
	string                           DownHillSmallImpactBikeClipId;   // offset:0x0C4	type:STRING.ATHASHVALUE
	string                           DownHillImpactBikeClipId;        // offset:0x0C8	type:STRING.ATHASHVALUE
	string                           SitToStillCharClipId;            // offset:0x0CC	type:STRING.ATHASHVALUE
	string                           SitToStillBikeClipId;            // offset:0x0D0	type:STRING.ATHASHVALUE
	string                           TrackStandToStillLeftCharClipId; // offset:0x0D4	type:STRING.ATHASHVALUE
	string                           TrackStandToStillLeftBikeClipId; // offset:0x0D8	type:STRING.ATHASHVALUE
	string                           TrackStandToStillRightCharClipId; // offset:0x0DC	type:STRING.ATHASHVALUE
	string                           TrackStandToStillRightBikeClipId; // offset:0x0E0	type:STRING.ATHASHVALUE
};

struct CTaskMotionSwimming__PedVariation
{
	enum ePedVarComp                 Component;                       // offset:0x000	type:ENUM.32BIT
	uint                             DrawableId;                      // offset:0x004	type:UINT.0
	uint                             DrawableAltId;                   // offset:0x008	type:UINT.0
};

struct CTaskMotionSwimming__PedVariationSet
{
	enum ePedVarComp                 Component;                       // offset:0x000	type:ENUM.32BIT
	array<uint>                      DrawableIds;                     // offset:0x008	type:ARRAY.ATARRAY
};

struct CTaskMotionSwimming__ScubaGearVariation
{
	array<struct CTaskMotionSwimming__PedVariationSet>     Wearing;                         // offset:0x000	type:ARRAY.ATARRAY
	struct CTaskMotionSwimming__PedVariation               ScubaGearWithLightsOn;           // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskMotionSwimming__PedVariation               ScubaGearWithLightsOff;          // offset:0x01C	type:STRUCT.STRUCTURE
};

struct CTaskMotionSwimming__ScubaGearVariations
{
	string                                                    ModelName;                       // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CTaskMotionSwimming__ScubaGearVariation>     Variations;                      // offset:0x008	type:ARRAY.ATARRAY
};

struct CTaskMotionSwimming__Tunables : CTuning
{
	int                                                            MinStruggleTime;                 // offset:0x010	type:INT.0
	int                                                            MaxStruggleTime;                 // offset:0x014	type:INT.0
	array<struct CTaskMotionSwimming__ScubaGearVariations>         ScubaGearVariations;             // offset:0x018	type:ARRAY.ATARRAY
	array<struct CTaskMotionSwimming__Tunables__ScubaMaskProp>     ScubaMaskProps;                  // offset:0x028	type:ARRAY.ATARRAY
};

struct CTaskMotionSwimming__Tunables__ScubaMaskProp
{
	string                           ModelName;                       // offset:0x000	type:STRING.ATHASHVALUE
	int                              Index;                           // offset:0x004	type:INT.0
};

struct CTaskMotionTennis__Tunables : CTuning
{
	float                            StrafeDirectionLerpRateMinAI;    // offset:0x010	type:FLOAT.0
	float                            StrafeDirectionLerpRateMaxAI;    // offset:0x014	type:FLOAT.0
	float                            StrafeDirectionLerpRateMinPlayer; // offset:0x018	type:FLOAT.0
	float                            StrafeDirectionLerpRateMaxPlayer; // offset:0x01C	type:FLOAT.0
};

struct CTaskMoveCombatMounted__Tunables : CTuning
{
	array<float>                     CircleTestRadii;                 // offset:0x010	type:ARRAY.ATARRAY
	float                            CircleTestsMoveDistToTestNewPos; // offset:0x020	type:FLOAT.0
	float                            MinTimeSinceAnyCircleJoined;     // offset:0x024	type:FLOAT.0
	float                            MinTimeSinceSameCircleJoined;    // offset:0x028	type:FLOAT.0
	float                            TransitionReactionTime;          // offset:0x02C	type:FLOAT.0
	float                            VelStartCircling;                // offset:0x030	type:FLOAT.0
	float                            VelStopCircling;                 // offset:0x034	type:FLOAT.0
	uint                             MaxTimeWaitingForCircleMs;       // offset:0x038	type:UINT.0
};

struct CTaskMoveCrossRoadAtTrafficLights__Tunables : CTuning
{
	bool                                                               bTrafficLightPositioning;        // offset:0x010	type:BOOL.0
	array<struct CTaskMoveCrossRoadAtTrafficLights__WaitingOffset>     WaitingOffsets;                  // offset:0x018	type:ARRAY.ATARRAY
	uint                                                               iMaxPedsAtTrafficLights;         // offset:0x028	type:UINT.0
	float                                                              fMinDistanceBetweenPeds;         // offset:0x02C	type:FLOAT.0
	float                                                              fDecideToRunChance;              // offset:0x030	type:FLOAT.0
	float                                                              fPlayerObstructionCheckRadius;   // offset:0x034	type:FLOAT.0
	float                                                              fPlayerObstructionRadius;        // offset:0x038	type:FLOAT.0
	bool                                                               bDebugRender;                    // offset:0x03C	type:BOOL.0
};

struct CTaskMoveCrossRoadAtTrafficLights__WaitingOffset
{
	vec3                             Pos;                             // offset:0x000	type:VECTOR3.0
};

struct CTaskMoveFollowNavMesh__Tunables : CTuning
{
	uchar                            uRepeatedAttemptsBeforeTeleportToLeader; // offset:0x010	type:UCHAR.0
};

struct CTaskMoveToTacticalPoint__Tunables : CTuning
{
	struct CTaskMoveToTacticalPoint__Tunables__Scoring     Scoring;                         // offset:0x010	type:STRUCT.STRUCTURE
	float                                                  TargetRadiusForMoveToPosition;   // offset:0x06C	type:FLOAT.0
	float                                                  TimeUntilRelease;                // offset:0x070	type:FLOAT.0
	float                                                  MaxDistanceToConsiderCloseToPositionToMoveTo; // offset:0x074	type:FLOAT.0
	float                                                  TimeBetweenInfluenceSphereChecks; // offset:0x078	type:FLOAT.0
};

struct CTaskMoveToTacticalPoint__Tunables__Scoring
{
	struct CTaskMoveToTacticalPoint__Tunables__Scoring__CoverPoint       CoverPoint;                      // offset:0x000	type:STRUCT.STRUCTURE
	struct CTaskMoveToTacticalPoint__Tunables__Scoring__NavMeshPoint     NavMeshPoint;                    // offset:0x024	type:STRUCT.STRUCTURE
	struct CTaskMoveToTacticalPoint__Tunables__Scoring__Position         Position;                        // offset:0x044	type:STRUCT.STRUCTURE
};

struct CTaskMoveToTacticalPoint__Tunables__Scoring__CoverPoint
{
	float                                                                       Base;                            // offset:0x000	type:FLOAT.0
	struct CTaskMoveToTacticalPoint__Tunables__Scoring__CoverPoint__Bonus       Bonus;                           // offset:0x004	type:STRUCT.STRUCTURE
	struct CTaskMoveToTacticalPoint__Tunables__Scoring__CoverPoint__Penalty     Penalty;                         // offset:0x008	type:STRUCT.STRUCTURE
};

struct CTaskMoveToTacticalPoint__Tunables__Scoring__CoverPoint__Bonus
{
	float                            Current;                         // offset:0x000	type:FLOAT.0
};

struct CTaskMoveToTacticalPoint__Tunables__Scoring__CoverPoint__Penalty
{
	struct CTaskMoveToTacticalPoint__Tunables__Scoring__CoverPoint__Penalty__BadRoute     BadRoute;                        // offset:0x000	type:STRUCT.STRUCTURE
	float                                                                                 Arc;                             // offset:0x010	type:FLOAT.0
	float                                                                                 LineOfSight;                     // offset:0x014	type:FLOAT.0
	float                                                                                 Nearby;                          // offset:0x018	type:FLOAT.0
};

struct CTaskMoveToTacticalPoint__Tunables__Scoring__CoverPoint__Penalty__BadRoute
{
	float                            ValueForMin;                     // offset:0x000	type:FLOAT.0
	float                            ValueForMax;                     // offset:0x004	type:FLOAT.0
	float                            Min;                             // offset:0x008	type:FLOAT.0
	float                            Max;                             // offset:0x00C	type:FLOAT.0
};

struct CTaskMoveToTacticalPoint__Tunables__Scoring__NavMeshPoint
{
	float                                                                         Base;                            // offset:0x000	type:FLOAT.0
	struct CTaskMoveToTacticalPoint__Tunables__Scoring__NavMeshPoint__Bonus       Bonus;                           // offset:0x004	type:STRUCT.STRUCTURE
	struct CTaskMoveToTacticalPoint__Tunables__Scoring__NavMeshPoint__Penalty     Penalty;                         // offset:0x008	type:STRUCT.STRUCTURE
};

struct CTaskMoveToTacticalPoint__Tunables__Scoring__NavMeshPoint__Bonus
{
	float                            Current;                         // offset:0x000	type:FLOAT.0
};

struct CTaskMoveToTacticalPoint__Tunables__Scoring__NavMeshPoint__Penalty
{
	struct CTaskMoveToTacticalPoint__Tunables__Scoring__NavMeshPoint__Penalty__BadRoute     BadRoute;                        // offset:0x000	type:STRUCT.STRUCTURE
	float                                                                                   LineOfSight;                     // offset:0x010	type:FLOAT.0
	float                                                                                   Nearby;                          // offset:0x014	type:FLOAT.0
};

struct CTaskMoveToTacticalPoint__Tunables__Scoring__NavMeshPoint__Penalty__BadRoute
{
	float                            ValueForMin;                     // offset:0x000	type:FLOAT.0
	float                            ValueForMax;                     // offset:0x004	type:FLOAT.0
	float                            Min;                             // offset:0x008	type:FLOAT.0
	float                            Max;                             // offset:0x00C	type:FLOAT.0
};

struct CTaskMoveToTacticalPoint__Tunables__Scoring__Position
{
	float                            MaxDistanceFromPed;              // offset:0x000	type:FLOAT.0
	float                            ValueForMinDistanceFromPed;      // offset:0x004	type:FLOAT.0
	float                            ValueForMaxDistanceFromPed;      // offset:0x008	type:FLOAT.0
	float                            MaxDistanceFromOptimal;          // offset:0x00C	type:FLOAT.0
	float                            ValueForMinDistanceFromOptimal;  // offset:0x010	type:FLOAT.0
	float                            ValueForMaxDistanceFromOptimal;  // offset:0x014	type:FLOAT.0
};

struct CTaskMoveWithinAttackWindow__Tunables : CTuning
{
	float                            fMaxAngleOffset;                 // offset:0x010	type:FLOAT.0
	float                            fMinAlliesForMaxAngleOffset;     // offset:0x014	type:FLOAT.0
	float                            fMaxAllyDistance;                // offset:0x018	type:FLOAT.0
	float                            fMaxRandomAdditionalOffset;      // offset:0x01C	type:FLOAT.0
	float                            fMaxRouteDistanceModifier;       // offset:0x020	type:FLOAT.0
	float                            fMinTimeToWait;                  // offset:0x024	type:FLOAT.0
	float                            fMaxTimeToWait;                  // offset:0x028	type:FLOAT.0
};

struct CTaskNMBalance__Tunables : CTuning
{
	enum RagdollComponent                                    InitialBumpComponent;            // offset:0x010	type:ENUM.32BIT
	struct CTaskNMBehaviour__Tunables__TunableForce          InitialBumpForce;                // offset:0x014	type:STRUCT.STRUCTURE
	vec3                                                     InitialBumpOffset;               // offset:0x050	type:VECTOR3.0
	bool                                                     ScaleStayUprightWithVel;         // offset:0x060	type:BOOL.0
	float                                                    StayUprightAtMaxVel;             // offset:0x064	type:FLOAT.0
	float                                                    MaxVel;                          // offset:0x068	type:FLOAT.0
	float                                                    StayUprightAtMinVel;             // offset:0x06C	type:FLOAT.0
	float                                                    MinVel;                          // offset:0x070	type:FLOAT.0
	float                                                    lookAtVelProbIfNoBumpTarget;     // offset:0x074	type:FLOAT.0
	float                                                    fMaxTargetDistToUpdateFlinch;    // offset:0x078	type:FLOAT.0
	float                                                    fMaxTargetDistToUpdateFlinchOnGround; // offset:0x07C	type:FLOAT.0
	float                                                    fFlinchTargetZOffset;            // offset:0x080	type:FLOAT.0
	float                                                    fFlinchTargetZOffsetOnGround;    // offset:0x084	type:FLOAT.0
	float                                                    fMinForwardVectorToFlinch;       // offset:0x088	type:FLOAT.0
	float                                                    fMinForwardVectorToFlinchOnGround; // offset:0x08C	type:FLOAT.0
	float                                                    fHeadLookZOffset;                // offset:0x090	type:FLOAT.0
	float                                                    fHeadLookZOffsetOnGround;        // offset:0x094	type:FLOAT.0
	int                                                      MaxSteps;                        // offset:0x098	type:INT.0
	int                                                      timeToCatchfallMS;               // offset:0x09C	type:INT.0
	struct CNmTuningSet                                      StartWeak;                       // offset:0x0A0	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      StartAggressive;                 // offset:0x0C8	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      StartDefault;                    // offset:0x0F0	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      FallOffAMovingCar;               // offset:0x118	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      BumpedByPed;                     // offset:0x140	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      OnStairs;                        // offset:0x168	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      OnSteepSlope;                    // offset:0x190	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      OnMovingGround;                  // offset:0x1B8	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      LostBalanceAndGrabbing;          // offset:0x1E0	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      Teeter;                          // offset:0x208	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      RollingFall;                     // offset:0x230	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      CatchFall;                       // offset:0x258	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      OnBalanceFailed;                 // offset:0x280	type:STRUCT.STRUCTURE
	int                                                      NotBeingPushedDelayMS;           // offset:0x2A8	type:INT.0
	int                                                      NotBeingPushedOnGroundDelayMS;   // offset:0x2AC	type:INT.0
	int                                                      BeingPushedOnGroundTooLongMS;    // offset:0x2B0	type:INT.0
	struct CNmTuningSet                                      OnBeingPushed;                   // offset:0x2B8	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      OnBeingPushedOnGround;           // offset:0x2E0	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      OnNotBeingPushed;                // offset:0x308	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      OnBeingPushedOnGroundTooLong;    // offset:0x330	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__BlendOutThreshold     PushedThresholdOnGround;         // offset:0x358	type:STRUCT.STRUCTURE
};

struct CTaskNMBehaviour__Tunables : CTuning
{
	struct CNmTuningSet                                                  animPoseDefault;                 // offset:0x010	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                                  animPoseAttachDefault;           // offset:0x038	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                                  animPoseAttachToVehicle;         // offset:0x060	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                                  animPoseHandsCuffed;             // offset:0x088	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                                  forceFall;                       // offset:0x0B0	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__RagdollUnderWheelTuning           RagdollUnderWheelTuning;         // offset:0x0D8	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__KickOnGroundTuning                KickOnGroundTuning;              // offset:0x0E8	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__PedCapsuleVehicleImpactTuning     CapsuleVehicleHitTuning;         // offset:0x0EC	type:STRUCT.STRUCTURE
	bool                                                                 EnableRagdollPooling;            // offset:0x118	type:BOOL.0
	int                                                                  MaxGameplayNmAgents;             // offset:0x11C	type:INT.0
	int                                                                  MaxRageRagdolls;                 // offset:0x120	type:INT.0
	bool                                                                 ReserveLocalPlayerNmAgent;       // offset:0x124	type:BOOL.0
	bool                                                                 EnableRagdollPoolingMp;          // offset:0x125	type:BOOL.0
	int                                                                  MaxGameplayNmAgentsMp;           // offset:0x128	type:INT.0
	int                                                                  MaxRageRagdollsMp;               // offset:0x12C	type:INT.0
	bool                                                                 ReserveLocalPlayerNmAgentMp;     // offset:0x130	type:BOOL.0
	bool                                                                 BlockOffscreenShotReactions;     // offset:0x131	type:BOOL.0
	bool                                                                 UsePreEmptiveEdgeActivation;     // offset:0x132	type:BOOL.0
	bool                                                                 UsePreEmptiveEdgeActivationMp;   // offset:0x133	type:BOOL.0
	bool                                                                 UseBalanceForEdgeActivation;     // offset:0x134	type:BOOL.0
	float                                                                PreEmptiveEdgeActivationMaxVel;  // offset:0x138	type:FLOAT.0
	float                                                                PreEmptiveEdgeActivationMaxHeadingDiff; // offset:0x13C	type:FLOAT.0
	float                                                                PreEmptiveEdgeActivationMinDotVel; // offset:0x140	type:FLOAT.0
	float                                                                PreEmptiveEdgeActivationMaxDistance; // offset:0x144	type:FLOAT.0
	float                                                                PreEmptiveEdgeActivationMinDesiredMBR2; // offset:0x148	type:FLOAT.0
	struct CTaskNMBehaviour__Tunables__StandardBlendOutThresholds        StandardBlendOutThresholds;      // offset:0x14C	type:STRUCT.STRUCTURE
	array<struct CTaskNMBehaviour__Tunables__BoundWeight>                CamAttachPositionWeights;        // offset:0x188	type:ARRAY.ATARRAY
	struct CTaskNMBehaviour__Tunables__ActivationLimitModifiers          SpActivationModifiers;           // offset:0x198	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__ActivationLimitModifiers          MpActivationModifiers;           // offset:0x1DC	type:STRUCT.STRUCTURE
	float                                                                PlayerBumpedByCloneCarActivationModifier; // offset:0x220	type:FLOAT.0
	float                                                                ClonePlayerBumpedByCarActivationModifier; // offset:0x224	type:FLOAT.0
	float                                                                ClonePedBumpedByCarActivationModifier; // offset:0x228	type:FLOAT.0
	float                                                                MaxVehicleCapsulePushTimeForRagdollActivation; // offset:0x22C	type:FLOAT.0
	float                                                                MaxVehicleCapsulePushTimeForPlayerRagdollActivation; // offset:0x230	type:FLOAT.0
	float                                                                VehicleMinSpeedForContinuousPushActivation; // offset:0x234	type:FLOAT.0
	float                                                                MinContactDepthForContinuousPushActivation; // offset:0x238	type:FLOAT.0
	float                                                                DurationRampDownCapsulePushedByVehicle; // offset:0x23C	type:FLOAT.0
	float                                                                VehicleMinSpeedForAiActivation;  // offset:0x240	type:FLOAT.0
	float                                                                VehicleMinSpeedForStationaryAiActivation; // offset:0x244	type:FLOAT.0
	float                                                                VehicleMinSpeedForPlayerActivation; // offset:0x248	type:FLOAT.0
	float                                                                VehicleMinSpeedForStationaryPlayerActivation; // offset:0x24C	type:FLOAT.0
	float                                                                VehicleMinSpeedForWarningActivation; // offset:0x250	type:FLOAT.0
	float                                                                VehicleFallingSpeedWeight;       // offset:0x254	type:FLOAT.0
	float                                                                VehicleActivationForceMultiplierDefault; // offset:0x258	type:FLOAT.0
	float                                                                VehicleActivationForceMultiplierBicycle; // offset:0x25C	type:FLOAT.0
	float                                                                VehicleActivationForceMultiplierBike; // offset:0x260	type:FLOAT.0
	float                                                                VehicleActivationForceMultiplierBoat; // offset:0x264	type:FLOAT.0
	float                                                                VehicleActivationForceMultiplierPlane; // offset:0x268	type:FLOAT.0
	float                                                                VehicleActivationForceMultiplierQuadBike; // offset:0x26C	type:FLOAT.0
	float                                                                VehicleActivationForceMultiplierHeli; // offset:0x270	type:FLOAT.0
	float                                                                VehicleActivationForceMultiplierTrain; // offset:0x274	type:FLOAT.0
	float                                                                VehicleActivationForceMultiplierRC; // offset:0x278	type:FLOAT.0
	bool                                                                 ExcludePedBumpAngleFromPushCalculation; // offset:0x27C	type:BOOL.0
	float                                                                PedActivationForceMultiplier;    // offset:0x280	type:FLOAT.0
	int                                                                  MaxPlayerCapsulePushTimeForRagdollActivation; // offset:0x284	type:INT.0
	float                                                                PlayerCapsuleMinSpeedForContinuousPushActivation; // offset:0x288	type:FLOAT.0
	float                                                                ObjectMinSpeedForActivation;     // offset:0x28C	type:FLOAT.0
	float                                                                ObjectActivationForceMultiplier; // offset:0x290	type:FLOAT.0
	float                                                                StuckOnVehicleMaxTime;           // offset:0x294	type:FLOAT.0
	struct CTaskNMBehaviour__Tunables__StandardBlendOutThresholds        StuckOnVehicleBlendOutThresholds; // offset:0x298	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                                  Start;                           // offset:0x2D8	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                                  TeeterControl;                   // offset:0x300	type:STRUCT.STRUCTURE
};

struct CTaskNMBehaviour__Tunables__ActivationLimitModifiers
{
	float                            BumpedByCar;                     // offset:0x000	type:FLOAT.0
	float                            BumpedByCarFriendly;             // offset:0x004	type:FLOAT.0
	float                            PlayerBumpedByCar;               // offset:0x008	type:FLOAT.0
	float                            MinVehicleWarning;               // offset:0x00C	type:FLOAT.0
	float                            BumpedByPedMinVel;               // offset:0x010	type:FLOAT.0
	float                            BumpedByPedMinDotVel;            // offset:0x014	type:FLOAT.0
	float                            BumpedByPed;                     // offset:0x018	type:FLOAT.0
	float                            BumpedByPlayerRagdoll;           // offset:0x01C	type:FLOAT.0
	float                            BumpedByPedRagdoll;              // offset:0x020	type:FLOAT.0
	float                            BumpedByPedIsQuadruped;          // offset:0x024	type:FLOAT.0
	float                            BumpedByPedFriendly;             // offset:0x028	type:FLOAT.0
	float                            BumpedByObject;                  // offset:0x02C	type:FLOAT.0
	float                            Walking;                         // offset:0x030	type:FLOAT.0
	float                            Running;                         // offset:0x034	type:FLOAT.0
	float                            Sprinting;                       // offset:0x038	type:FLOAT.0
	float                            MaxPlayerActivationLimit;        // offset:0x03C	type:FLOAT.0
	float                            MaxAiActivationLimit;            // offset:0x040	type:FLOAT.0
};

struct CTaskNMBehaviour__Tunables__BlendOutThreshold
{
	float                            MaxLinearVelocity;               // offset:0x000	type:FLOAT.0
	float                            MaxAngularVelocity;              // offset:0x004	type:FLOAT.0
	int                              SettledTimeMS;                   // offset:0x008	type:INT.0
	bool                             RandomiseSettledTime;            // offset:0x00C	type:BOOL.0
	int                              SettledTimeMinMS;                // offset:0x010	type:INT.0
};

struct CTaskNMBehaviour__Tunables__BoundWeight
{
	enum RagdollComponent            Bound;                           // offset:0x000	type:ENUM.32BIT
	float                            Weight;                          // offset:0x004	type:FLOAT.0
};

struct CTaskNMBehaviour__Tunables__InverseMassScales
{
	bool                             ApplyVehicleScale;               // offset:0x000	type:BOOL.0
	float                            VehicleScale;                    // offset:0x004	type:FLOAT.0
	bool                             ApplyPedScale;                   // offset:0x008	type:BOOL.0
	float                            PedScale;                        // offset:0x00C	type:FLOAT.0
};

struct CTaskNMBehaviour__Tunables__KickOnGroundTuning
{
	float                            fPronePedKickImpulse;            // offset:0x000	type:FLOAT.0
};

struct CTaskNMBehaviour__Tunables__PedCapsuleVehicleImpactTuning
{
	bool                             EnableActivationsFromCapsuleImpacts; // offset:0x000	type:BOOL.0
	float                            VehicleVelToImpactNormalMinDot;  // offset:0x004	type:FLOAT.0
	bool                             EnableSideSwipeActivations;      // offset:0x008	type:BOOL.0
	bool                             EnableSideSwipeActivationsFirstPerson; // offset:0x009	type:BOOL.0
	float                            MinSideNormalForSideSwipe;       // offset:0x00C	type:FLOAT.0
	float                            MinVelThroughNormalForSideSwipe; // offset:0x010	type:FLOAT.0
	float                            MinAccumulatedImpactForSideSwipe; // offset:0x014	type:FLOAT.0
	float                            MinVehVelMagForSideSwipe;        // offset:0x018	type:FLOAT.0
	float                            MinVehVelMagForBicycleSideSwipe; // offset:0x01C	type:FLOAT.0
	float                            _0x41D2C310;                     // offset:0x020	type:FLOAT.0
	float                            _0x52071CA7;                     // offset:0x024	type:FLOAT.0
	float                            _0xF7FB7800;                     // offset:0x028	type:FLOAT.0
};

struct CTaskNMBehaviour__Tunables__RagdollUnderWheelTuning
{
	float                            fMinSpeedForPush;                // offset:0x000	type:FLOAT.0
	float                            fImpulseMultLimbs;               // offset:0x004	type:FLOAT.0
	float                            fImpulseMultSpine;               // offset:0x008	type:FLOAT.0
	float                            fFastCarPushImpulseMult;         // offset:0x00C	type:FLOAT.0
};

struct CTaskNMBehaviour__Tunables__StandardBlendOutThresholds
{
	struct CTaskNMBehaviour__Tunables__BlendOutThreshold     Ai;                              // offset:0x000	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__BlendOutThreshold     Player;                          // offset:0x014	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__BlendOutThreshold     PlayerMp;                        // offset:0x028	type:STRUCT.STRUCTURE
};

struct CTaskNMBehaviour__Tunables__TunableForce
{
	bool                             Enable;                          // offset:0x000	type:BOOL.0
	float                            Mag;                             // offset:0x004	type:FLOAT.0
	bool                             ScaleWithVelocity;               // offset:0x008	type:BOOL.0
	float                            VelocityMin;                     // offset:0x00C	type:FLOAT.0
	float                            VelocityMax;                     // offset:0x010	type:FLOAT.0
	float                            ForceAtMinVelocity;              // offset:0x014	type:FLOAT.0
	float                            ForceAtMaxVelocity;              // offset:0x018	type:FLOAT.0
	bool                             ClampImpulse;                    // offset:0x01C	type:BOOL.0
	float                            MinImpulse;                      // offset:0x020	type:FLOAT.0
	float                            MaxImpulse;                      // offset:0x024	type:FLOAT.0
	int                              Delay;                           // offset:0x028	type:INT.0
	int                              Duration;                        // offset:0x02C	type:INT.0
	bool                             ScaleWithUpright;                // offset:0x030	type:BOOL.0
};

struct CTaskNMBrace__Tunables : CTuning
{
	struct CTaskNMBrace__Tunables__VehicleTypeTunables                VehicleOverrides;                // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__InverseMassScales              InverseMassScales;               // offset:0x020	type:STRUCT.STRUCTURE
	struct CTaskNMBrace__Tunables__ApplyForce                         CapsuleHitForce;                 // offset:0x030	type:STRUCT.STRUCTURE
	struct CTaskNMBrace__Tunables__ApplyForce                         SideSwipeForce;                  // offset:0x05C	type:STRUCT.STRUCTURE
	struct CTaskNMBrace__Tunables__ApplyForce                         ChestForce;                      // offset:0x088	type:STRUCT.STRUCTURE
	struct CTaskNMBrace__Tunables__ApplyForce                         FeetLiftForce;                   // offset:0x0B4	type:STRUCT.STRUCTURE
	struct CTaskNMBrace__Tunables__ApplyForce                         RootLiftForce;                   // offset:0x0E0	type:STRUCT.STRUCTURE
	struct CTaskNMBrace__Tunables__ApplyForce                         FlipForce;                       // offset:0x10C	type:STRUCT.STRUCTURE
	float                                                             ChestForcePitch;                 // offset:0x138	type:FLOAT.0
	bool                                                              ForceUnderVehicle;               // offset:0x13C	type:BOOL.0
	bool                                                              ForceOverVehicle;                // offset:0x13D	type:BOOL.0
	struct CTaskNMBrace__Tunables__InitialForce                       InitialForce;                    // offset:0x140	type:STRUCT.STRUCTURE
	struct CTaskNMBrace__Tunables__VelocityLimits                     AngularVelocityLimits;           // offset:0x160	type:STRUCT.STRUCTURE
	bool                                                              AllowWarningActivations;         // offset:0x1B0	type:BOOL.0
	float                                                             LowVelocityReactionThreshold;    // offset:0x1B4	type:FLOAT.0
	float                                                             FallingSpeedForHighFall;         // offset:0x1B8	type:FLOAT.0
	float                                                             VehicleCollisionElasticityMult;  // offset:0x1BC	type:FLOAT.0
	float                                                             VehicleCollisionFrictionMult;    // offset:0x1C0	type:FLOAT.0
	float                                                             VehicleCollisionNormalPitchOverVehicle; // offset:0x1C4	type:FLOAT.0
	float                                                             VehicleCollisionNormalPitchUnderVehicle; // offset:0x1C8	type:FLOAT.0
	struct CTaskNMBrace__Tunables__StuckOnVehicle                     StuckOnVehicle;                  // offset:0x1D0	type:STRUCT.STRUCTURE
	float                                                             StuckUnderVehicleMaxUpright;     // offset:0x380	type:FLOAT.0
	int                                                               AiClearedVehicleDelay;           // offset:0x384	type:INT.0
	int                                                               AiClearedVehicleSmartFallDelay;  // offset:0x388	type:INT.0
	int                                                               PlayerClearedVehicleDelay;       // offset:0x38C	type:INT.0
	int                                                               PlayerClearedVehicleSmartFallDelay; // offset:0x390	type:INT.0
	struct CNmTuningSet                                               Start;                           // offset:0x398	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               OnStairs;                        // offset:0x3C0	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               Weak;                            // offset:0x3E8	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               OnBalanceFailed;                 // offset:0x410	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               OnBalanceFailedStairs;           // offset:0x438	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               HighVelocity;                    // offset:0x460	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               Update;                          // offset:0x488	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               Dead;                            // offset:0x4B0	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               OverVehicle;                     // offset:0x4D8	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               UnderVehicle;                    // offset:0x500	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               ClearedVehicle;                  // offset:0x528	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__StandardBlendOutThresholds     HighVelocityBlendOut;            // offset:0x550	type:STRUCT.STRUCTURE
};

struct CTaskNMBrace__Tunables__ApplyForce
{
	bool                             Apply;                           // offset:0x000	type:BOOL.0
	bool                             ScaleWithVelocity;               // offset:0x001	type:BOOL.0
	float                            MinVelThreshold;                 // offset:0x004	type:FLOAT.0
	float                            MaxVelThreshold;                 // offset:0x008	type:FLOAT.0
	float                            MinVelMag;                       // offset:0x00C	type:FLOAT.0
	float                            MaxVelMag;                       // offset:0x010	type:FLOAT.0
	bool                             ScaleWithMass;                   // offset:0x014	type:BOOL.0
	bool                             ScaleWithUpright;                // offset:0x015	type:BOOL.0
	bool                             OnlyInContact;                   // offset:0x016	type:BOOL.0
	bool                             OnlyNotInContact;                // offset:0x017	type:BOOL.0
	bool                             ReduceWithPedVelocity;           // offset:0x018	type:BOOL.0
	bool                             ReduceWithPedAngularVelocity;    // offset:0x019	type:BOOL.0
	float                            ForceMag;                        // offset:0x01C	type:FLOAT.0
	float                            MinMag;                          // offset:0x020	type:FLOAT.0
	float                            MaxMag;                          // offset:0x024	type:FLOAT.0
	int                              Duration;                        // offset:0x028	type:INT.0
};

struct CTaskNMBrace__Tunables__InitialForce
{
	float                            VelocityMin;                     // offset:0x000	type:FLOAT.0
	float                            VelocityMax;                     // offset:0x004	type:FLOAT.0
	float                            ForceAtMinVelocity;              // offset:0x008	type:FLOAT.0
	float                            ForceAtMaxVelocity;              // offset:0x00C	type:FLOAT.0
	bool                             ScaleWithUpright;                // offset:0x010	type:BOOL.0
};

struct CTaskNMBrace__Tunables__StuckOnVehicle
{
	float                            VelocityThreshold;               // offset:0x000	type:FLOAT.0
	int                              InitialDelay;                    // offset:0x004	type:INT.0
	float                            ContinuousContactTime;           // offset:0x008	type:FLOAT.0
	float                            UnderVehicleVelocityThreshold;   // offset:0x00C	type:FLOAT.0
	int                              UnderVehicleInitialDelay;        // offset:0x010	type:INT.0
	float                            UnderVehicleContinuousContactTime; // offset:0x014	type:FLOAT.0
	float                            UnderCarMaxVelocity;             // offset:0x018	type:FLOAT.0
	struct CNmTuningSet              StuckOnVehicle;                  // offset:0x020	type:STRUCT.STRUCTURE
	struct CNmTuningSet              EndStuckOnVehicle;               // offset:0x048	type:STRUCT.STRUCTURE
	struct CNmTuningSet              UpdateOnVehicle;                 // offset:0x070	type:STRUCT.STRUCTURE
	struct CNmTuningSet              StuckUnderVehicle;               // offset:0x098	type:STRUCT.STRUCTURE
	struct CNmTuningSet              EndStuckUnderVehicle;            // offset:0x0C0	type:STRUCT.STRUCTURE
	struct CNmTuningSet              StuckOnVehiclePlayer;            // offset:0x0E8	type:STRUCT.STRUCTURE
	struct CNmTuningSet              EndStuckOnVehiclePlayer;         // offset:0x110	type:STRUCT.STRUCTURE
	struct CNmTuningSet              UpdateOnVehiclePlayer;           // offset:0x138	type:STRUCT.STRUCTURE
	struct CNmTuningSet              StuckUnderVehiclePlayer;         // offset:0x160	type:STRUCT.STRUCTURE
	struct CNmTuningSet              EndStuckUnderVehiclePlayer;      // offset:0x188	type:STRUCT.STRUCTURE
};

struct CTaskNMBrace__Tunables__VehicleTypeOverrides
{
	string                                                   Id;                              // offset:0x000	type:STRING.ATHASHVALUE
	bool                                                     OverrideInverseMassScales;       // offset:0x004	type:BOOL.0
	struct CTaskNMBehaviour__Tunables__InverseMassScales     InverseMassScales;               // offset:0x008	type:STRUCT.STRUCTURE
	struct CTaskNMBrace__Tunables__ApplyForce                LateralForce;                    // offset:0x018	type:STRUCT.STRUCTURE
	bool                                                     OverrideReactionType;            // offset:0x044	type:BOOL.0
	bool                                                     ForceUnderVehicle;               // offset:0x045	type:BOOL.0
	bool                                                     ForceOverVehicle;                // offset:0x046	type:BOOL.0
	float                                                    VehicleCentreZOffset;            // offset:0x048	type:FLOAT.0
	bool                                                     OverrideRootLiftForce;           // offset:0x04C	type:BOOL.0
	struct CTaskNMBrace__Tunables__ApplyForce                RootLiftForce;                   // offset:0x050	type:STRUCT.STRUCTURE
	bool                                                     OverrideFlipForce;               // offset:0x07C	type:BOOL.0
	struct CTaskNMBrace__Tunables__ApplyForce                FlipForce;                       // offset:0x080	type:STRUCT.STRUCTURE
	bool                                                     OverrideInitialForce;            // offset:0x0AC	type:BOOL.0
	struct CTaskNMBrace__Tunables__InitialForce              InitialForce;                    // offset:0x0B0	type:STRUCT.STRUCTURE
	bool                                                     OverrideElasticity;              // offset:0x0C4	type:BOOL.0
	float                                                    VehicleCollisionElasticityMult;  // offset:0x0C8	type:FLOAT.0
	bool                                                     OverrideFriction;                // offset:0x0CC	type:BOOL.0
	float                                                    VehicleCollisionFrictionMult;    // offset:0x0D0	type:FLOAT.0
	bool                                                     OverrideStuckOnVehicleSets;      // offset:0x0D4	type:BOOL.0
	bool                                                     AddToBaseStuckOnVehicleSets;     // offset:0x0D5	type:BOOL.0
	struct CTaskNMBrace__Tunables__StuckOnVehicle            StuckOnVehicle;                  // offset:0x0D8	type:STRUCT.STRUCTURE
};

struct CTaskNMBrace__Tunables__VehicleTypeTunables
{
	array<struct CTaskNMBrace__Tunables__VehicleTypeOverrides>     sets;                            // offset:0x000	type:ARRAY.ATARRAY
};

struct CTaskNMBrace__Tunables__VelocityLimits
{
	bool                             Apply;                           // offset:0x000	type:BOOL.0
	vec3                             Constant;                        // offset:0x010	type:VECTOR3.0
	vec3                             Velocity;                        // offset:0x020	type:VECTOR3.0
	vec3                             Velocity2;                       // offset:0x030	type:VECTOR3.0
	float                            Max;                             // offset:0x040	type:FLOAT.0
	int                              Delay;                           // offset:0x044	type:INT.0
};

struct CTaskNMBuoyancy__Tunables : CTuning
{
	struct CTaskNMBehaviour__Tunables__BlendOutThreshold     BlendOutThreshold;               // offset:0x010	type:STRUCT.STRUCTURE
};

struct CTaskNMControl__Tunables : CTuning
{
	struct CTaskNMControl__Tunables__DriveToGetup     DriveToGetup;                    // offset:0x010	type:STRUCT.STRUCTURE
	struct CNmTuningSet                               OnEnableDriveToGetup;            // offset:0x028	type:STRUCT.STRUCTURE
	struct CNmTuningSet                               OnDisableDriveToGetup;           // offset:0x050	type:STRUCT.STRUCTURE
};

struct CTaskNMControl__Tunables__DriveToGetup
{
	bool                             AllowDriveToGetup;               // offset:0x000	type:BOOL.0
	bool                             OnlyAllowForShot;                // offset:0x001	type:BOOL.0
	bool                             AllowWhenBalanced;               // offset:0x002	type:BOOL.0
	float                            MinHealth;                       // offset:0x004	type:FLOAT.0
	float                            MaxSpeed;                        // offset:0x008	type:FLOAT.0
	float                            MaxUprightRatio;                 // offset:0x00C	type:FLOAT.0
	uint                             MatchTimer;                      // offset:0x010	type:UINT.0
};

struct CTaskNMDraggingToSafety__Tunables : CTuning
{
	struct CTaskNMDraggingToSafety__Tunables__Stiffness        Stiffness;                       // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskNMDraggingToSafety__Tunables__DraggerArmIk     DraggerArmIk;                    // offset:0x020	type:STRUCT.STRUCTURE
	struct CTaskNMDraggingToSafety__Tunables__Constraints      Constraints;                     // offset:0x050	type:STRUCT.STRUCTURE
	struct CTaskNMDraggingToSafety__Tunables__Forces           Forces;                          // offset:0x060	type:STRUCT.STRUCTURE
};

struct CTaskNMDraggingToSafety__Tunables__Constraints
{
	float                            MaxDistance;                     // offset:0x000	type:FLOAT.0
};

struct CTaskNMDraggingToSafety__Tunables__DraggerArmIk
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	vec3                             LeftBoneOffset;                  // offset:0x010	type:VECTOR3.0
	vec3                             RightBoneOffset;                 // offset:0x020	type:VECTOR3.0
};

struct CTaskNMDraggingToSafety__Tunables__Forces
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	vec3                             LeftHandOffset;                  // offset:0x010	type:VECTOR3.0
	vec3                             RightHandOffset;                 // offset:0x020	type:VECTOR3.0
};

struct CTaskNMDraggingToSafety__Tunables__Stiffness
{
	float                            Relaxation;                      // offset:0x000	type:FLOAT.0
	float                            HeadAndNeck;                     // offset:0x004	type:FLOAT.0
	float                            AnkleAndWrist;                   // offset:0x008	type:FLOAT.0
};

struct CTaskNMElectrocute__Tunables : CTuning
{
	enum RagdollComponent                               InitialForceComponent;           // offset:0x010	type:ENUM.32BIT
	vec3                                                InitialForceOffset;              // offset:0x020	type:VECTOR3.0
	struct CTaskNMBehaviour__Tunables__TunableForce     InitialForce;                    // offset:0x030	type:STRUCT.STRUCTURE
	float                                               FallingSpeedForHighFall;         // offset:0x064	type:FLOAT.0
	struct CNmTuningSet                                 Start;                           // offset:0x068	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                 Walking;                         // offset:0x090	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                 Running;                         // offset:0x0B8	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                 Sprinting;                       // offset:0x0E0	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                 OnElectrocuteFinished;           // offset:0x108	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                 OnBalanceFailed;                 // offset:0x130	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                 OnCatchFallSuccess;              // offset:0x158	type:STRUCT.STRUCTURE
};

struct CTaskNMExplosion__Tunables : CTuning
{
	int                                              MinStunnedTime;                  // offset:0x010	type:INT.0
	int                                              MaxStunnedTime;                  // offset:0x014	type:INT.0
	bool                                             AllowPlayerStunned;              // offset:0x018	type:BOOL.0
	bool                                             UseRelaxBehaviour;               // offset:0x019	type:BOOL.0
	float                                            RollUpHeightThreshold;           // offset:0x01C	type:FLOAT.0
	float                                            CatchFallHeightThresholdRollUp;  // offset:0x020	type:FLOAT.0
	float                                            CatchFallHeightThresholdWindmill; // offset:0x024	type:FLOAT.0
	float                                            CatchFallHeightThresholdClipPose; // offset:0x028	type:FLOAT.0
	uint                                             TimeToStartCatchFall;            // offset:0x02C	type:UINT.0
	uint                                             TimeToStartCatchFallPlayer;      // offset:0x030	type:UINT.0
	bool                                             DoCatchFallRelax;                // offset:0x034	type:BOOL.0
	float                                            CatchFallRelaxHeight;            // offset:0x038	type:FLOAT.0
	float                                            HeightToStartWrithe;             // offset:0x03C	type:FLOAT.0
	int                                              MinTimeForInitialState;          // offset:0x040	type:INT.0
	int                                              MaxTimeForInitialState;          // offset:0x044	type:INT.0
	int                                              MinWritheTime;                   // offset:0x048	type:INT.0
	int                                              MaxWritheTime;                   // offset:0x04C	type:INT.0
	bool                                             ForceRollUp;                     // offset:0x050	type:BOOL.0
	bool                                             ForceWindmill;                   // offset:0x051	type:BOOL.0
	struct CNmTuningSet                              StartWindmill;                   // offset:0x058	type:STRUCT.STRUCTURE
	struct CNmTuningSet                              StartCatchFall;                  // offset:0x080	type:STRUCT.STRUCTURE
	struct CNmTuningSet                              StartRollDownStairs;             // offset:0x0A8	type:STRUCT.STRUCTURE
	struct CNmTuningSet                              Update;                          // offset:0x0D0	type:STRUCT.STRUCTURE
	struct CTaskNMExplosion__Tunables__Explosion     Explosion;                       // offset:0x0F8	type:STRUCT.STRUCTURE
};

struct CTaskNMExplosion__Tunables__Explosion
{
	float                            NMBodyScale;                     // offset:0x000	type:FLOAT.0
	float                            HumanBodyScale;                  // offset:0x004	type:FLOAT.0
	float                            HumanPelvisScale;                // offset:0x008	type:FLOAT.0
	float                            HumanSpine0Scale;                // offset:0x00C	type:FLOAT.0
	float                            HumanSpine1Scale;                // offset:0x010	type:FLOAT.0
	float                            AnimalBodyScale;                 // offset:0x014	type:FLOAT.0
	float                            AnimalPelvisScale;               // offset:0x018	type:FLOAT.0
	float                            StrongBlastMagnitude;            // offset:0x01C	type:FLOAT.0
	float                            FastMovingPedSpeed;              // offset:0x020	type:FLOAT.0
	float                            MaxDistanceAbovePedPositionToClampPitch; // offset:0x024	type:FLOAT.0
	float                            PitchClampMin;                   // offset:0x028	type:FLOAT.0
	float                            PitchClampMax;                   // offset:0x02C	type:FLOAT.0
	float                            MagnitudeClamp;                  // offset:0x030	type:FLOAT.0
	float                            SideScale;                       // offset:0x034	type:FLOAT.0
	float                            PitchSideAngle;                  // offset:0x038	type:FLOAT.0
	float                            PitchTorqueMin;                  // offset:0x03C	type:FLOAT.0
	float                            PitchTorqueMax;                  // offset:0x040	type:FLOAT.0
	float                            BlanketForceScale;               // offset:0x044	type:FLOAT.0
	float                            ExtraTorqueTwistMax;             // offset:0x048	type:FLOAT.0
	float                            DisableInjuredBehaviorImpulseLimit; // offset:0x04C	type:FLOAT.0
	float                            DisableInjuredBehaviorDistLimit; // offset:0x050	type:FLOAT.0
};

struct CTaskNMFlinch__Tunables : CTuning
{
	struct CNmTuningSet              Start;                           // offset:0x010	type:STRUCT.STRUCTURE
	struct CNmTuningSet              Passive;                         // offset:0x038	type:STRUCT.STRUCTURE
	struct CNmTuningSet              WaterCannon;                     // offset:0x060	type:STRUCT.STRUCTURE
	struct CNmTuningSet              Armoured;                        // offset:0x088	type:STRUCT.STRUCTURE
	struct CNmTuningSet              BoundAnkles;                     // offset:0x0B0	type:STRUCT.STRUCTURE
	struct CNmTuningSet              FatallyInjured;                  // offset:0x0D8	type:STRUCT.STRUCTURE
	struct CNmTuningSet              PlayerDeath;                     // offset:0x100	type:STRUCT.STRUCTURE
	struct CNmTuningSet              OnStairs;                        // offset:0x128	type:STRUCT.STRUCTURE
	struct CNmTuningSet              HoldingTwoHandedWeapon;          // offset:0x150	type:STRUCT.STRUCTURE
	struct CNmTuningSet              HoldingSingleHandedWeapon;       // offset:0x178	type:STRUCT.STRUCTURE
	struct CNmTuningSetGroup         WeaponSets;                      // offset:0x1A0	type:STRUCT.STRUCTURE
	struct CNmTuningSetGroup         ActionSets;                      // offset:0x1B8	type:STRUCT.STRUCTURE
	struct CNmTuningSet              Update;                          // offset:0x1D0	type:STRUCT.STRUCTURE
	struct CNmTuningSet              OnBalanceFailed;                 // offset:0x1F8	type:STRUCT.STRUCTURE
	struct CNmTuningSet              OnBalanceFailedStairs;           // offset:0x220	type:STRUCT.STRUCTURE
	bool                             RandomiseLeadingHand;            // offset:0x248	type:BOOL.0
	int                              MinLeanInDirectionTime;          // offset:0x24C	type:INT.0
	int                              MaxLeanInDirectionTime;          // offset:0x250	type:INT.0
	float                            fImpulseReductionScaleMax;       // offset:0x254	type:FLOAT.0
	float                            fSpecialAbilityRageKickImpulseModifier; // offset:0x258	type:FLOAT.0
	float                            fCounterImpulseScale;            // offset:0x25C	type:FLOAT.0
};

struct CTaskNMHighFall__Tunables : CTuning
{
	int                                                               HighFallTimeToBlockInjuredOnGround; // offset:0x010	type:INT.0
	struct CTaskNMBehaviour__Tunables__TunableForce                   PitchInDirectionForce;           // offset:0x014	type:STRUCT.STRUCTURE
	int                                                               PitchInDirectionComponent;       // offset:0x048	type:INT.0
	struct CTaskNMBehaviour__Tunables__TunableForce                   StuntJumpPitchInDirectionForce;  // offset:0x04C	type:STRUCT.STRUCTURE
	int                                                               StuntJumpPitchInDirectionComponent; // offset:0x080	type:INT.0
	struct CNmTuningSet                                               Start;                           // offset:0x088	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               Update;                          // offset:0x0B0	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               InAir;                           // offset:0x0D8	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               Vault;                           // offset:0x100	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               FromCarHit;                      // offset:0x128	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               SlopeSlide;                      // offset:0x150	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               TeeterEdge;                      // offset:0x178	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               StuntJump;                       // offset:0x1A0	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               SprintExhausted;                 // offset:0x1C8	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               OnBalanceFailedSprintExhausted;  // offset:0x1F0	type:STRUCT.STRUCTURE
	bool                                                              DisableStartMessageForSprintExhausted; // offset:0x218	type:BOOL.0
	struct CNmTuningSet                                               JumpCollision;                   // offset:0x220	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               HighHighFallStart;               // offset:0x248	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               HighHighFallEnd;                 // offset:0x270	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                               SuperHighFallStart;              // offset:0x298	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__StandardBlendOutThresholds     BlendOut;                        // offset:0x2C0	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__BlendOutThreshold              PlayerQuickBlendOut;             // offset:0x2FC	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__BlendOutThreshold              MpPlayerQuickBlendOut;           // offset:0x310	type:STRUCT.STRUCTURE
	float                                                             MaxHealthLossForQuickGetup;      // offset:0x324	type:FLOAT.0
	float                                                             MinHealthForQuickGetup;          // offset:0x328	type:FLOAT.0
	float                                                             MpMaxHealthLossForQuickGetup;    // offset:0x32C	type:FLOAT.0
	float                                                             MpMinHealthForQuickGetup;        // offset:0x330	type:FLOAT.0
	bool                                                              UseRemainingMinTimeForGroundWrithe; // offset:0x334	type:BOOL.0
	int                                                               MinTimeRemainingForGroundWrithe; // offset:0x338	type:INT.0
	int                                                               MinTimeElapsedForGroundWrithe;   // offset:0x33C	type:INT.0
	float                                                             DistanceZThresholdForHighHighFall; // offset:0x340	type:FLOAT.0
	float                                                             VelocityZThresholdForHighHighFall; // offset:0x344	type:FLOAT.0
	float                                                             VelocityZThresholdForSuperHighFall; // offset:0x348	type:FLOAT.0
	array<float, 20>                                                  RagdollComponentAirResistanceMinStiffness; // offset:0x34C	type:ARRAY.MEMBER
	array<float, 21>                                                  RagdollComponentAirResistanceForce; // offset:0x39C	type:ARRAY.MEMBER
	uchar                                                             AirResistanceOption;             // offset:0x3F0	type:UCHAR.0
};

struct CTaskNMInjuredOnGround__Tunables : CTuning
{
	float                            fDoInjuredOnGroundChance;        // offset:0x010	type:FLOAT.0
	float                            fFallingSpeedThreshold;          // offset:0x014	type:FLOAT.0
	int                              iRandomDurationMin;              // offset:0x018	type:INT.0
	int                              iRandomDurationMax;              // offset:0x01C	type:INT.0
	int                              iMaxNumInjuredOnGroundAgents;    // offset:0x020	type:INT.0
};

struct CTaskNMJumpRollFromRoadVehicle__Tunables : CTuning
{
	float                                                             GravityScale;                    // offset:0x010	type:FLOAT.0
	float                                                             StartForceDownHeight;            // offset:0x014	type:FLOAT.0
	struct CNmTuningSet                                               Start;                           // offset:0x018	type:STRUCT.STRUCTURE
	struct CNmTuningSetGroup                                          EntryPointSets;                  // offset:0x040	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__StandardBlendOutThresholds     BlendOut;                        // offset:0x058	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__StandardBlendOutThresholds     QuickBlendOut;                   // offset:0x094	type:STRUCT.STRUCTURE
};

struct CTaskNMOnFire__Tunables : CTuning
{
	struct CNmTuningSet              Start;                           // offset:0x010	type:STRUCT.STRUCTURE
	struct CNmTuningSet              Weak;                            // offset:0x038	type:STRUCT.STRUCTURE
	struct CNmTuningSet              Update;                          // offset:0x060	type:STRUCT.STRUCTURE
	struct CNmTuningSet              OnBalanceFailed;                 // offset:0x088	type:STRUCT.STRUCTURE
};

struct CTaskNMPrototype__Tunables : CTuning
{
	bool                                                      RunForever;                      // offset:0x010	type:BOOL.0
	bool                                                      CheckForMovingGround;            // offset:0x011	type:BOOL.0
	int                                                       SimulationTimeInMs;              // offset:0x014	type:INT.0
	struct CNmTuningSet                                       Start;                           // offset:0x018	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                       Update;                          // offset:0x040	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                       OnBalanceFailed;                 // offset:0x068	type:STRUCT.STRUCTURE
	array<struct CTaskNMPrototype__Tunables__TimedTuning>     TimedMessages;                   // offset:0x090	type:ARRAY.ATARRAY
	struct CNmTuningSet                                       DynamicSet1;                     // offset:0x0A0	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                       DynamicSet2;                     // offset:0x0C8	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                       DynamicSet3;                     // offset:0x0F0	type:STRUCT.STRUCTURE
};

struct CTaskNMPrototype__Tunables__TimedTuning
{
	float                            TimeInSeconds;                   // offset:0x008	type:FLOAT.0
	struct CNmTuningSet              Messages;                        // offset:0x010	type:STRUCT.STRUCTURE
	bool                             Periodic;                        // offset:0x038	type:BOOL.0
};

struct CTaskNMRiverRapids__Tunables : CTuning
{
	float                                               fMinRiverFlowForRapids;          // offset:0x010	type:FLOAT.0
	float                                               fMinRiverGroundClearanceForRapids; // offset:0x014	type:FLOAT.0
	bool                                                bHorizontalRighting;             // offset:0x018	type:BOOL.0
	float                                               fHorizontalRightingStrength;     // offset:0x01C	type:FLOAT.0
	float                                               fHorizontalRightingTime;         // offset:0x020	type:FLOAT.0
	bool                                                bVerticalRighting;               // offset:0x024	type:BOOL.0
	float                                               fVerticalRightingStrength;       // offset:0x028	type:FLOAT.0
	float                                               fVerticalRightingTime;           // offset:0x02C	type:FLOAT.0
	array<float, 21>                                    fRagdollComponentBuoyancy;       // offset:0x030	type:ARRAY.MEMBER
	struct CTaskNMRiverRapids__Tunables__BodyWrithe     BodyWrithe;                      // offset:0x084	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                 Start;                           // offset:0x0B0	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                 Update;                          // offset:0x0D8	type:STRUCT.STRUCTURE
};

struct CTaskNMRiverRapids__Tunables__BodyWrithe
{
	bool                             bControlledByPlayerSprintInput;  // offset:0x000	type:BOOL.0
	float                            fMinArmAmplitude;                // offset:0x004	type:FLOAT.0
	float                            fMaxArmAmplitude;                // offset:0x008	type:FLOAT.0
	float                            fMinArmStiffness;                // offset:0x00C	type:FLOAT.0
	float                            fMaxArmStiffness;                // offset:0x010	type:FLOAT.0
	float                            fMinArmPeriod;                   // offset:0x014	type:FLOAT.0
	float                            fMaxArmPeriod;                   // offset:0x018	type:FLOAT.0
	float                            fMinStroke;                      // offset:0x01C	type:FLOAT.0
	float                            fMaxStroke;                      // offset:0x020	type:FLOAT.0
	float                            fMinBuoyancy;                    // offset:0x024	type:FLOAT.0
	float                            fMaxBuoyancy;                    // offset:0x028	type:FLOAT.0
};

struct CTaskNMShot__Tunables : CTuning
{
	int                                                               MinimumShotReactionTimePlayerMS; // offset:0x010	type:INT.0
	int                                                               MinimumShotReactionTimeAIMS;     // offset:0x014	type:INT.0
	bool                                                              bUseClipPoseHelper;              // offset:0x018	type:BOOL.0
	bool                                                              bEnableDebugDraw;                // offset:0x019	type:BOOL.0
	float                                                             fImpactConeAngleFront;           // offset:0x01C	type:FLOAT.0
	float                                                             fImpactConeAngleBack;            // offset:0x020	type:FLOAT.0
	enum RagdollComponent                                             eImpactConeRagdollComponent;     // offset:0x024	type:ENUM.32BIT
	int                                                               iShotMinTimeBeforeGunThreaten;   // offset:0x028	type:INT.0
	int                                                               iShotMaxTimeBeforeGunThreaten;   // offset:0x02C	type:INT.0
	int                                                               iShotMinTimeBetweenFireGun;      // offset:0x030	type:INT.0
	int                                                               iShotMaxTimeBetweenFireGun;      // offset:0x034	type:INT.0
	int                                                               iShotMaxBlindFireTimeL;          // offset:0x038	type:INT.0
	int                                                               iShotMaxBlindFireTimeH;          // offset:0x03C	type:INT.0
	float                                                             fShotBlindFireProbability;       // offset:0x040	type:FLOAT.0
	float                                                             fShotHeadAngleToFireGun;         // offset:0x044	type:FLOAT.0
	float                                                             fShotWeaponAngleToFireGun;       // offset:0x048	type:FLOAT.0
	float                                                             fFireWeaponStrengthForceMultiplier; // offset:0x04C	type:FLOAT.0
	float                                                             fMinFinisherShotgunTotalImpulseNormal; // offset:0x050	type:FLOAT.0
	float                                                             fMinFinisherShotgunTotalImpulseBraced; // offset:0x054	type:FLOAT.0
	float                                                             fFinisherShotgunBonusArmedSpeedModifier; // offset:0x058	type:FLOAT.0
	bool                                                              ScaleSnapWithSpineOrientation;   // offset:0x05C	type:BOOL.0
	float                                                             MinSnap;                         // offset:0x060	type:FLOAT.0
	int                                                               BlendOutDelayStanding;           // offset:0x064	type:INT.0
	int                                                               BlendOutDelayBalanceFailed;      // offset:0x068	type:INT.0
	struct CTaskNMShot__Tunables__ShotAgainstWall                     ShotAgainstWall;                 // offset:0x06C	type:STRUCT.STRUCTURE
	float                                                             BCRExclusionZone;                // offset:0x084	type:FLOAT.0
	struct CTaskNMShot__Tunables__Impulses                            Impulses;                        // offset:0x088	type:STRUCT.STRUCTURE
	struct CTaskNMShot__Tunables__HitPointRandomisation               HitRandomisation;                // offset:0x140	type:STRUCT.STRUCTURE
	struct CTaskNMShot__Tunables__HitPointRandomisation               HitRandomisationAutomatic;       // offset:0x160	type:STRUCT.STRUCTURE
	struct CTaskNMShot__Tunables__StayUpright                         StayUpright;                     // offset:0x180	type:STRUCT.STRUCTURE
	struct CTaskNMShot__Tunables__ArmShot                             ArmShot;                         // offset:0x194	type:STRUCT.STRUCTURE
	float                                                             FallingSpeedForHighFall;         // offset:0x1B0	type:FLOAT.0
	float                                                             ChanceOfFallToKneesOnCollapse;   // offset:0x1B4	type:FLOAT.0
	float                                                             ChanceOfFallToKneesAfterLastStand; // offset:0x1B8	type:FLOAT.0
	float                                                             ChanceForGutShotKnockdown;       // offset:0x1BC	type:FLOAT.0
	float                                                             LastStandMaxTotalTime;           // offset:0x1C0	type:FLOAT.0
	float                                                             LastStandMaxArmouredTotalTime;   // offset:0x1C4	type:FLOAT.0
	int                                                               RapidHitCount;                   // offset:0x1C8	type:INT.0
	int                                                               ArmouredRapidHitCount;           // offset:0x1CC	type:INT.0
	bool                                                              AllowArmouredLegShot;            // offset:0x1D0	type:BOOL.0
	bool                                                              AllowArmouredKnockdown;          // offset:0x1D1	type:BOOL.0
	bool                                                              ReduceDownedTimeByPerformanceTime; // offset:0x1D2	type:BOOL.0
	int                                                               MinimumDownedTime;               // offset:0x1D4	type:INT.0
	bool                                                              DisableReachForWoundOnHeadShot;  // offset:0x1D8	type:BOOL.0
	int                                                               DisableReachForWoundOnHeadShotMinDelay; // offset:0x1DC	type:INT.0
	int                                                               DisableReachForWoundOnHeadShotMaxDelay; // offset:0x1E0	type:INT.0
	bool                                                              DisableReachForWoundOnNeckShot;  // offset:0x1E4	type:BOOL.0
	int                                                               DisableReachForWoundOnNeckShotMinDelay; // offset:0x1E8	type:INT.0
	int                                                               DisableReachForWoundOnNeckShotMaxDelay; // offset:0x1EC	type:INT.0
	struct CNmTuningSetGroup                                          WeaponSets;                      // offset:0x1F0	type:STRUCT.STRUCTURE
	struct CTaskNMShot__Tunables__ParamSets                           ParamSets;                       // offset:0x208	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__StandardBlendOutThresholds     BlendOutThreshold;               // offset:0x820	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__BlendOutThreshold              SubmergedBlendOutThreshold;      // offset:0x85C	type:STRUCT.STRUCTURE
};

struct CTaskNMShot__Tunables__ArmShot
{
	int                              MinLookAtArmWoundTime;           // offset:0x000	type:INT.0
	int                              MaxLookAtArmWoundTime;           // offset:0x004	type:INT.0
	float                            UpperArmImpulseCap;              // offset:0x008	type:FLOAT.0
	float                            LowerArmImpulseCap;              // offset:0x00C	type:FLOAT.0
	float                            UpperArmNoTorsoHitImpulseCap;    // offset:0x010	type:FLOAT.0
	float                            LowerArmNoTorseHitImpulseCap;    // offset:0x014	type:FLOAT.0
	float                            ClavicleImpulseScale;            // offset:0x018	type:FLOAT.0
};

struct CTaskNMShot__Tunables__HitPointRandomisation
{
	bool                             Enable;                          // offset:0x000	type:BOOL.0
	float                            TopSpread;                       // offset:0x004	type:FLOAT.0
	float                            BottomSpread;                    // offset:0x008	type:FLOAT.0
	float                            Blend;                           // offset:0x00C	type:FLOAT.0
	enum RagdollComponent            TopComponent;                    // offset:0x010	type:ENUM.32BIT
	enum RagdollComponent            BottomComponent;                 // offset:0x014	type:ENUM.32BIT
	float                            BiasSide;                        // offset:0x018	type:FLOAT.0
	uint                             BiasSideTime;                    // offset:0x01C	type:UINT.0
};

struct CTaskNMShot__Tunables__Impulses
{
	float                                                      MaxArmourImpulseMult;            // offset:0x000	type:FLOAT.0
	float                                                      MinArmourImpulseMult;            // offset:0x004	type:FLOAT.0
	float                                                      MaxHealthImpulseMult;            // offset:0x008	type:FLOAT.0
	float                                                      MinHealthImpulseMult;            // offset:0x00C	type:FLOAT.0
	float                                                      MaxDamageTakenImpulseMult;       // offset:0x010	type:FLOAT.0
	float                                                      MinDamageTakenImpulseMult;       // offset:0x014	type:FLOAT.0
	float                                                      MaxDamageTakenThreshold;         // offset:0x018	type:FLOAT.0
	float                                                      MinDamageTakenThreshold;         // offset:0x01C	type:FLOAT.0
	float                                                      DefaultKillShotImpulseMult;      // offset:0x020	type:FLOAT.0
	float                                                      DefaultRapidFireKillShotImpulseMult; // offset:0x024	type:FLOAT.0
	float                                                      DefaultMPKillShotImpulseMult;    // offset:0x028	type:FLOAT.0
	float                                                      DefaultMPRapidFireKillShotImpulseMult; // offset:0x02C	type:FLOAT.0
	float                                                      RapidFireBoostShotImpulseMult;   // offset:0x030	type:FLOAT.0
	int                                                        RapidFireBoostShotMinRandom;     // offset:0x034	type:INT.0
	int                                                        RapidFireBoostShotMaxRandom;     // offset:0x038	type:INT.0
	float                                                      ShotgunMaxSpeedForLiftImpulse;   // offset:0x03C	type:FLOAT.0
	float                                                      ShotgunMaxLiftImpulse;           // offset:0x040	type:FLOAT.0
	float                                                      ShotgunLiftNearThreshold;        // offset:0x044	type:FLOAT.0
	float                                                      ShotgunChanceToMoveSpine3ImpulseToSpine2; // offset:0x048	type:FLOAT.0
	float                                                      ShotgunChanceToMoveNeckImpulseToSpine2; // offset:0x04C	type:FLOAT.0
	float                                                      ShotgunChanceToMoveHeadImpulseToSpine2; // offset:0x050	type:FLOAT.0
	float                                                      EqualizeAmount;                  // offset:0x054	type:FLOAT.0
	float                                                      COMImpulseScale;                 // offset:0x058	type:FLOAT.0
	bitset<enum RagdollComponent>                              COMImpulseComponent;             // offset:0x05C	type:BITSET.32BIT
	float                                                      COMImpulseMaxRootVelocityMagnitude; // offset:0x060	type:FLOAT.0
	bool                                                       COMImpulseOnlyWhileBalancing;    // offset:0x064	type:BOOL.0
	float                                                      HeadShotImpulseMultiplier;       // offset:0x068	type:FLOAT.0
	float                                                      HeadShotMPImpulseMultiplier;     // offset:0x06C	type:FLOAT.0
	bool                                                       ScaleHeadShotImpulseWithSpineOrientation; // offset:0x070	type:BOOL.0
	float                                                      MinHeadShotImpulseMultiplier;    // offset:0x074	type:FLOAT.0
	float                                                      AutomaticInitialSnapMult;        // offset:0x078	type:FLOAT.0
	float                                                      BurstFireInitialSnapMult;        // offset:0x07C	type:FLOAT.0
	float                                                      FinalShotImpulseClampMax;        // offset:0x080	type:FLOAT.0
	float                                                      RunningAgainstBulletImpulseMult; // offset:0x084	type:FLOAT.0
	float                                                      RunningAgainstBulletImpulseMultMax; // offset:0x088	type:FLOAT.0
	float                                                      RunningWithBulletImpulseMult;    // offset:0x08C	type:FLOAT.0
	float                                                      LegShotFallRootImpulseMinUpright; // offset:0x090	type:FLOAT.0
	float                                                      LegShotFallRootImpulseMult;      // offset:0x094	type:FLOAT.0
	struct CTaskNMShot__Tunables__Impulses__SniperImpulses     SniperImpulses;                  // offset:0x098	type:STRUCT.STRUCTURE
};

struct CTaskNMShot__Tunables__Impulses__SniperImpulses
{
	float                            MaxHealthImpulseMult;            // offset:0x000	type:FLOAT.0
	float                            MinHealthImpulseMult;            // offset:0x004	type:FLOAT.0
	float                            MaxDamageTakenImpulseMult;       // offset:0x008	type:FLOAT.0
	float                            MinDamageTakenImpulseMult;       // offset:0x00C	type:FLOAT.0
	float                            MaxDamageTakenThreshold;         // offset:0x010	type:FLOAT.0
	float                            MinDamageTakenThreshold;         // offset:0x014	type:FLOAT.0
	float                            DefaultKillShotImpulseMult;      // offset:0x018	type:FLOAT.0
	float                            DefaultMPKillShotImpulseMult;    // offset:0x01C	type:FLOAT.0
};

struct CTaskNMShot__Tunables__ParamSets
{
	struct CNmTuningSet              Base;                            // offset:0x000	type:STRUCT.STRUCTURE
	struct CNmTuningSet              Melee;                           // offset:0x028	type:STRUCT.STRUCTURE
	struct CNmTuningSet              Electrocute;                     // offset:0x050	type:STRUCT.STRUCTURE
	struct CNmTuningSet              SprintingLegShot;                // offset:0x078	type:STRUCT.STRUCTURE
	struct CNmTuningSet              SprintingDeath;                  // offset:0x0A0	type:STRUCT.STRUCTURE
	struct CNmTuningSet              Sprinting;                       // offset:0x0C8	type:STRUCT.STRUCTURE
	struct CNmTuningSet              AutomaticHeadShot;               // offset:0x0F0	type:STRUCT.STRUCTURE
	struct CNmTuningSet              HeadShot;                        // offset:0x118	type:STRUCT.STRUCTURE
	struct CNmTuningSet              AutomaticNeckShot;               // offset:0x140	type:STRUCT.STRUCTURE
	struct CNmTuningSet              NeckShot;                        // offset:0x168	type:STRUCT.STRUCTURE
	struct CNmTuningSet              LegShot;                         // offset:0x190	type:STRUCT.STRUCTURE
	struct CNmTuningSet              SniperLegShot;                   // offset:0x1B8	type:STRUCT.STRUCTURE
	struct CNmTuningSet              ArmShot;                         // offset:0x1E0	type:STRUCT.STRUCTURE
	struct CNmTuningSet              BackShot;                        // offset:0x208	type:STRUCT.STRUCTURE
	struct CNmTuningSet              Underwater;                      // offset:0x230	type:STRUCT.STRUCTURE
	struct CNmTuningSet              UnderwaterRelax;                 // offset:0x258	type:STRUCT.STRUCTURE
	struct CNmTuningSet              Armoured;                        // offset:0x280	type:STRUCT.STRUCTURE
	struct CNmTuningSet              BoundAnkles;                     // offset:0x2A8	type:STRUCT.STRUCTURE
	struct CNmTuningSet              FatallyInjured;                  // offset:0x2D0	type:STRUCT.STRUCTURE
	struct CNmTuningSet              PlayerDeathSP;                   // offset:0x2F8	type:STRUCT.STRUCTURE
	struct CNmTuningSet              PlayerDeathMP;                   // offset:0x320	type:STRUCT.STRUCTURE
	struct CNmTuningSet              OnStairs;                        // offset:0x348	type:STRUCT.STRUCTURE
	struct CNmTuningSet              ShotAgainstWall;                 // offset:0x370	type:STRUCT.STRUCTURE
	struct CNmTuningSet              LastStand;                       // offset:0x398	type:STRUCT.STRUCTURE
	struct CNmTuningSet              LastStandArmoured;               // offset:0x3C0	type:STRUCT.STRUCTURE
	struct CNmTuningSet              HeadLook;                        // offset:0x3E8	type:STRUCT.STRUCTURE
	struct CNmTuningSet              FallToKnees;                     // offset:0x410	type:STRUCT.STRUCTURE
	struct CNmTuningSet              StaggerFall;                     // offset:0x438	type:STRUCT.STRUCTURE
	struct CNmTuningSet              CatchFall;                       // offset:0x460	type:STRUCT.STRUCTURE
	struct CNmTuningSet              SetFallingReactionHealthy;       // offset:0x488	type:STRUCT.STRUCTURE
	struct CNmTuningSet              SetFallingReactionInjured;       // offset:0x4B0	type:STRUCT.STRUCTURE
	struct CNmTuningSet              SetFallingReactionFallOverWall;  // offset:0x4D8	type:STRUCT.STRUCTURE
	struct CNmTuningSet              SetFallingReactionFallOverVehicle; // offset:0x500	type:STRUCT.STRUCTURE
	struct CNmTuningSet              RubberBulletKnockdown;           // offset:0x528	type:STRUCT.STRUCTURE
	struct CNmTuningSet              Teeter;                          // offset:0x550	type:STRUCT.STRUCTURE
	struct CNmTuningSet              HoldingTwoHandedWeapon;          // offset:0x578	type:STRUCT.STRUCTURE
	struct CNmTuningSet              HoldingSingleHandedWeapon;       // offset:0x5A0	type:STRUCT.STRUCTURE
	struct CNmTuningSet              CrouchedOrLowCover;              // offset:0x5C8	type:STRUCT.STRUCTURE
	struct CNmTuningSet              Female;                          // offset:0x5F0	type:STRUCT.STRUCTURE
};

struct CTaskNMShot__Tunables__ShotAgainstWall
{
	float                            HealthRatioLimit;                // offset:0x000	type:FLOAT.0
	float                            WallProbeRadius;                 // offset:0x004	type:FLOAT.0
	float                            WallProbeDistance;               // offset:0x008	type:FLOAT.0
	float                            ProbeHeightAbovePelvis;          // offset:0x00C	type:FLOAT.0
	float                            ImpulseMult;                     // offset:0x010	type:FLOAT.0
	float                            MaxWallAngle;                    // offset:0x014	type:FLOAT.0
};

struct CTaskNMShot__Tunables__StayUpright
{
	float                            HoldingWeaponBonus;              // offset:0x000	type:FLOAT.0
	float                            UnarmedBonus;                    // offset:0x004	type:FLOAT.0
	float                            ArmouredBonus;                   // offset:0x008	type:FLOAT.0
	float                            MovingMultiplierBonus;           // offset:0x00C	type:FLOAT.0
	float                            HealthMultiplierBonus;           // offset:0x010	type:FLOAT.0
};

struct CTaskNMSimple__Tunables : CTuning
{
	map<string, struct CTaskNMSimple__Tunables__Tuning>     Tuning;                          // offset:0x010	type:MAP.ATBINARYMAP
};

struct CTaskNMSimple__Tunables__Tuning
{
	int                                                      iMinTime;                        // offset:0x000	type:INT.0
	int                                                      iMaxTime;                        // offset:0x004	type:INT.0
	float                                                    fRagdollScore;                   // offset:0x008	type:FLOAT.0
	struct CNmTuningSet                                      Start;                           // offset:0x010	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      Update;                          // offset:0x038	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      OnBalanceFailure;                // offset:0x060	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__BlendOutThreshold     BlendOutThreshold;               // offset:0x088	type:STRUCT.STRUCTURE
};

struct CTaskNMThroughWindscreen__Tunables : CTuning
{
	float                                                    GravityScale;                    // offset:0x010	type:FLOAT.0
	float                                                    StartForceDownHeight;            // offset:0x014	type:FLOAT.0
	struct CTaskNMBehaviour__Tunables__InverseMassScales     DefaultInverseMassScales;        // offset:0x018	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__InverseMassScales     BicycleInverseMassScales;        // offset:0x028	type:STRUCT.STRUCTURE
	struct CTaskNMBehaviour__Tunables__InverseMassScales     BikeInverseMassScales;           // offset:0x038	type:STRUCT.STRUCTURE
	int                                                      ClearVehicleTimeMS;              // offset:0x048	type:INT.0
	float                                                    KnockOffBikeForwardMinComponent; // offset:0x04C	type:FLOAT.0
	float                                                    KnockOffBikeForwardMaxComponent; // offset:0x050	type:FLOAT.0
	float                                                    KnockOffBikeUpMinComponent;      // offset:0x054	type:FLOAT.0
	float                                                    KnockOffBikeUpMaxComponent;      // offset:0x058	type:FLOAT.0
	float                                                    KnockOffBikePitchMinComponent;   // offset:0x05C	type:FLOAT.0
	float                                                    KnockOffBikePitchMaxComponent;   // offset:0x060	type:FLOAT.0
	float                                                    KnockOffBikeMinSpeed;            // offset:0x064	type:FLOAT.0
	float                                                    KnockOffBikeMaxSpeed;            // offset:0x068	type:FLOAT.0
	float                                                    KnockOffBikeMinUpright;          // offset:0x06C	type:FLOAT.0
	float                                                    KnockOffBikeMaxUpright;          // offset:0x070	type:FLOAT.0
	float                                                    KnockOffBikeEjectMaxImpactDepth; // offset:0x074	type:FLOAT.0
	float                                                    KnockOffBikeEjectImpactFriction; // offset:0x078	type:FLOAT.0
	struct CNmTuningSet                                      Start;                           // offset:0x080	type:STRUCT.STRUCTURE
	struct CNmTuningSet                                      Update;                          // offset:0x0A8	type:STRUCT.STRUCTURE
};

struct CTaskOpenVehicleDoorFromOutside__Tunables : CTuning
{
	bool                             EnableOpenDoorHandIk;            // offset:0x010	type:BOOL.0
	float                            DefaultOpenDoorStartPhase;       // offset:0x014	type:FLOAT.0
	float                            DefaultOpenDoorEndPhase;         // offset:0x018	type:FLOAT.0
	float                            DefaultOpenDoorStartIkPhase;     // offset:0x01C	type:FLOAT.0
	float                            DefaultOpenDoorEndIkPhase;       // offset:0x020	type:FLOAT.0
	float                            MinBlendWeightToUseHighClipEvents; // offset:0x024	type:FLOAT.0
	float                            DefaultOpenDoorRate;             // offset:0x028	type:FLOAT.0
	float                            MinHandleHeightDiffVan;          // offset:0x02C	type:FLOAT.0
	float                            MaxHandleHeightDiffVan;          // offset:0x030	type:FLOAT.0
	float                            MaxHandleHeightDiff;             // offset:0x034	type:FLOAT.0
	string                           DefaultOpenDoorClipId;           // offset:0x038	type:STRING.ATHASHVALUE
	string                           HighOpenDoorClipId;              // offset:0x03C	type:STRING.ATHASHVALUE
	string                           CombatOpenDoorClipId;            // offset:0x040	type:STRING.ATHASHVALUE
	string                           DefaultTryLockedDoorClipId;      // offset:0x044	type:STRING.ATHASHVALUE
	string                           DefaultForcedEntryClipId;        // offset:0x048	type:STRING.ATHASHVALUE
	string                           WaterOpenDoorClipId;             // offset:0x04C	type:STRING.ATHASHVALUE
};

struct CTaskParachuteObject__Tunables : CTuning
{
	float                            PhaseDuringDeployToConsiderOut;  // offset:0x010	type:FLOAT.0
};

struct CTaskParachute__ParachutePackVariation
{
	array<struct CTaskParachute__PedVariationSet>     Wearing;                         // offset:0x000	type:ARRAY.ATARRAY
	struct CTaskParachute__PedVariation               ParachutePack;                   // offset:0x010	type:STRUCT.STRUCTURE
};

struct CTaskParachute__ParachutePackVariations
{
	string                                                   ModelName;                       // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CTaskParachute__ParachutePackVariation>     Variations;                      // offset:0x008	type:ARRAY.ATARRAY
};

struct CTaskParachute__PedVariation
{
	enum ePedVarComp                 Component;                       // offset:0x000	type:ENUM.32BIT
	uint                             DrawableId;                      // offset:0x004	type:UINT.0
	uint                             DrawableAltId;                   // offset:0x008	type:UINT.0
	uint                             TexId;                           // offset:0x00C	type:UINT.0
};

struct CTaskParachute__PedVariationSet
{
	enum ePedVarComp                 Component;                       // offset:0x000	type:ENUM.32BIT
	array<uint>                      DrawableIds;                     // offset:0x008	type:ARRAY.ATARRAY
};

struct CTaskParachute__Tunables : CTuning
{
	struct CTaskParachute__Tunables__ChangeRatesForSkydiving             ChangeRatesForSkydiving;         // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ChangeRatesForParachuting           ChangeRatesForParachuting;       // offset:0x020	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__FlightAngleLimitsForSkydiving       FlightAngleLimitsForSkydiving;   // offset:0x030	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__FlightAngleLimitsForParachuting     FlightAngleLimitsForParachutingNormal; // offset:0x044	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__FlightAngleLimitsForParachuting     FlightAngleLimitsForParachutingBraking; // offset:0x06C	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__PedAngleLimitsForSkydiving          PedAngleLimitsForSkydiving;      // offset:0x094	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__MoveParameters                      MoveParameters;                  // offset:0x09C	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ForcesForSkydiving                  ForcesForSkydiving;              // offset:0x0B8	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ParachutingAi                       ParachutingAi;                   // offset:0x0C0	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__Landing                             Landing;                         // offset:0x128	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__CrashLanding                        CrashLanding;                    // offset:0x15C	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__Allow                               Allow;                           // offset:0x178	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__CameraSettings                      CameraSettings;                  // offset:0x184	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ParachutePhysics                    ParachutePhysics;                // offset:0x190	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ExtraForces                         ExtraForces;                     // offset:0x198	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__Rendering                           Rendering;                       // offset:0x230	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__LowLod                              LowLod;                          // offset:0x234	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ParachuteBones                      ParachuteBones;                  // offset:0x23C	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__Aiming                              Aiming;                          // offset:0x27C	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__PadShake                            PadShake;                        // offset:0x280	type:STRUCT.STRUCTURE
	float                                                                BrakingDifferenceForLinearVZMin; // offset:0x29C	type:FLOAT.0
	float                                                                BrakingDifferenceForLinearVZMax; // offset:0x2A0	type:FLOAT.0
	float                                                                LinearVZForBrakingDifferenceMin; // offset:0x2A4	type:FLOAT.0
	float                                                                LinearVZForBrakingDifferenceMax; // offset:0x2A8	type:FLOAT.0
	float                                                                PitchRatioForLinearVZMin;        // offset:0x2AC	type:FLOAT.0
	float                                                                PitchRatioForLinearVZMax;        // offset:0x2B0	type:FLOAT.0
	float                                                                LinearVZForPitchRatioMin;        // offset:0x2B4	type:FLOAT.0
	float                                                                LinearVZForPitchRatioMax;        // offset:0x2B8	type:FLOAT.0
	float                                                                MinBrakeForCloseUpCamera;        // offset:0x2BC	type:FLOAT.0
	float                                                                ParachuteMass;                   // offset:0x2C0	type:FLOAT.0
	float                                                                ParachuteMassReduced;            // offset:0x2C4	type:FLOAT.0
	float                                                                MaxTimeToLookAheadForFutureTargetPosition; // offset:0x2C8	type:FLOAT.0
	float                                                                MaxDifferenceToAverageBrakes;    // offset:0x2CC	type:FLOAT.0
	string                                                               ModelForParachuteInSP;           // offset:0x2D0	type:STRING.ATHASHVALUE
	string                                                               ModelForParachuteInMP;           // offset:0x2D4	type:STRING.ATHASHVALUE
	array<struct CTaskParachute__ParachutePackVariations>                ParachutePackVariations;         // offset:0x2D8	type:ARRAY.ATARRAY
	vec3                                                                 FirstPersonDriveByIKOffset;      // offset:0x2F0	type:VECTOR3.0
};

struct CTaskParachute__Tunables__Aiming
{
	bool                             Disabled;                        // offset:0x000	type:BOOL.0
};

struct CTaskParachute__Tunables__Allow
{
	float                            MinClearDistanceBelow;           // offset:0x000	type:FLOAT.0
	float                            MinFallingSpeedInRagdoll;        // offset:0x004	type:FLOAT.0
	float                            MinTimeInRagdoll;                // offset:0x008	type:FLOAT.0
};

struct CTaskParachute__Tunables__CameraSettings
{
	string                           SkyDivingCamera;                 // offset:0x000	type:STRING.ATHASHVALUE
	string                           ParachuteCamera;                 // offset:0x004	type:STRING.ATHASHVALUE
	string                           ParachuteCloseUpCamera;          // offset:0x008	type:STRING.ATHASHVALUE
};

struct CTaskParachute__Tunables__ChangeRatesForParachuting
{
	float                            Pitch;                           // offset:0x000	type:FLOAT.0
	float                            Roll;                            // offset:0x004	type:FLOAT.0
	float                            Yaw;                             // offset:0x008	type:FLOAT.0
	float                            Brake;                           // offset:0x00C	type:FLOAT.0
};

struct CTaskParachute__Tunables__ChangeRatesForSkydiving
{
	float                            Pitch;                           // offset:0x000	type:FLOAT.0
	float                            Roll;                            // offset:0x004	type:FLOAT.0
	float                            Yaw;                             // offset:0x008	type:FLOAT.0
	float                            Heading;                         // offset:0x00C	type:FLOAT.0
};

struct CTaskParachute__Tunables__CrashLanding
{
	float                            NoParachuteTimeForMinCollisionNormalThreshold; // offset:0x000	type:FLOAT.0
	float                            NoParachuteMaxCollisionNormalThreshold; // offset:0x004	type:FLOAT.0
	float                            NoParachuteMinCollisionNormalThreshold; // offset:0x008	type:FLOAT.0
	float                            NoParachuteMaxPitch;             // offset:0x00C	type:FLOAT.0
	float                            ParachuteProbeRadius;            // offset:0x010	type:FLOAT.0
	float                            ParachuteUpThreshold;            // offset:0x014	type:FLOAT.0
	float                            FramesToLookAheadForProbe;       // offset:0x018	type:FLOAT.0
};

struct CTaskParachute__Tunables__ExtraForces
{
	struct CTaskParachute__Tunables__ExtraForces__Parachuting     Parachuting;                     // offset:0x000	type:STRUCT.STRUCTURE
};

struct CTaskParachute__Tunables__ExtraForces__FromStick
{
	struct CTaskParachute__Tunables__ExtraForces__FromValue     FromValue;                       // offset:0x000	type:STRUCT.STRUCTURE
	bool                                                        UseVerticalAxis;                 // offset:0x030	type:BOOL.0
};

struct CTaskParachute__Tunables__ExtraForces__FromValue
{
	float                                                   ValueForMin;                     // offset:0x000	type:FLOAT.0
	float                                                   ValueForMax;                     // offset:0x004	type:FLOAT.0
	struct CTaskParachute__Tunables__ExtraForces__Value     MinValue;                        // offset:0x008	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ExtraForces__Value     ZeroValue;                       // offset:0x014	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ExtraForces__Value     MaxValue;                        // offset:0x020	type:STRUCT.STRUCTURE
	bool                                                    IsLocal;                         // offset:0x02C	type:BOOL.0
	bool                                                    ClearZ;                          // offset:0x02D	type:BOOL.0
};

struct CTaskParachute__Tunables__ExtraForces__Parachuting
{
	struct CTaskParachute__Tunables__ExtraForces__Parachuting__Normal      Normal;                          // offset:0x000	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ExtraForces__Parachuting__Braking     Braking;                         // offset:0x064	type:STRUCT.STRUCTURE
};

struct CTaskParachute__Tunables__ExtraForces__Parachuting__Braking
{
	struct CTaskParachute__Tunables__ExtraForces__FromStick     TurnFromStick;                   // offset:0x000	type:STRUCT.STRUCTURE
};

struct CTaskParachute__Tunables__ExtraForces__Parachuting__Normal
{
	struct CTaskParachute__Tunables__ExtraForces__FromStick     TurnFromStick;                   // offset:0x000	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ExtraForces__FromValue     TurnFromRoll;                    // offset:0x034	type:STRUCT.STRUCTURE
};

struct CTaskParachute__Tunables__ExtraForces__Value
{
	float                            X;                               // offset:0x000	type:FLOAT.0
	float                            Y;                               // offset:0x004	type:FLOAT.0
	float                            Z;                               // offset:0x008	type:FLOAT.0
};

struct CTaskParachute__Tunables__FlightAngleLimitsForParachuting
{
	float                            MinPitch;                        // offset:0x000	type:FLOAT.0
	float                            MaxPitch;                        // offset:0x004	type:FLOAT.0
	float                            MaxRollFromStick;                // offset:0x008	type:FLOAT.0
	float                            MaxRollFromBrake;                // offset:0x00C	type:FLOAT.0
	float                            MaxRoll;                         // offset:0x010	type:FLOAT.0
	float                            MaxYawFromStick;                 // offset:0x014	type:FLOAT.0
	float                            MaxYawFromRoll;                  // offset:0x018	type:FLOAT.0
	float                            RollForMinYaw;                   // offset:0x01C	type:FLOAT.0
	float                            RollForMaxYaw;                   // offset:0x020	type:FLOAT.0
	float                            MaxYaw;                          // offset:0x024	type:FLOAT.0
};

struct CTaskParachute__Tunables__FlightAngleLimitsForSkydiving
{
	float                            MinPitch;                        // offset:0x000	type:FLOAT.0
	float                            InflectionPitch;                 // offset:0x004	type:FLOAT.0
	float                            MaxPitch;                        // offset:0x008	type:FLOAT.0
	float                            MaxRoll;                         // offset:0x00C	type:FLOAT.0
	float                            MaxYaw;                          // offset:0x010	type:FLOAT.0
};

struct CTaskParachute__Tunables__ForcesForSkydiving
{
	float                            MaxThrust;                       // offset:0x000	type:FLOAT.0
	float                            MaxLift;                         // offset:0x004	type:FLOAT.0
};

struct CTaskParachute__Tunables__Landing
{
	struct CTaskParachute__Tunables__Landing__NormalThresholds     NormalThresholds;                // offset:0x000	type:STRUCT.STRUCTURE
	float                                                          MaxVelocityForSlow;              // offset:0x010	type:FLOAT.0
	float                                                          MinVelocityForFast;              // offset:0x014	type:FLOAT.0
	float                                                          ParachuteProbeRadius;            // offset:0x018	type:FLOAT.0
	float                                                          MinStickMagnitudeForEarlyOutMovement; // offset:0x01C	type:FLOAT.0
	float                                                          FramesToLookAheadForProbe;       // offset:0x020	type:FLOAT.0
	float                                                          BlendDurationForEarlyOut;        // offset:0x024	type:FLOAT.0
	float                                                          AngleForRunway;                  // offset:0x028	type:FLOAT.0
	float                                                          LookAheadForRunway;              // offset:0x02C	type:FLOAT.0
	float                                                          DropForRunway;                   // offset:0x030	type:FLOAT.0
};

struct CTaskParachute__Tunables__Landing__NormalThreshold
{
	float                            Forward;                         // offset:0x000	type:FLOAT.0
	float                            Collision;                       // offset:0x004	type:FLOAT.0
};

struct CTaskParachute__Tunables__Landing__NormalThresholds
{
	struct CTaskParachute__Tunables__Landing__NormalThreshold     Normal;                          // offset:0x000	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__Landing__NormalThreshold     Braking;                         // offset:0x008	type:STRUCT.STRUCTURE
};

struct CTaskParachute__Tunables__LowLod
{
	float                            MinDistance;                     // offset:0x000	type:FLOAT.0
	bool                             AlwaysUse;                       // offset:0x004	type:BOOL.0
	bool                             NeverUse;                        // offset:0x005	type:BOOL.0
};

struct CTaskParachute__Tunables__MoveParameters
{
	struct CTaskParachute__Tunables__MoveParameters__Parachuting     Parachuting;                     // offset:0x000	type:STRUCT.STRUCTURE
};

struct CTaskParachute__Tunables__MoveParameters__Parachuting
{
	struct CTaskParachute__Tunables__MoveParameters__Parachuting__InterpRates     InterpRates;                     // offset:0x000	type:STRUCT.STRUCTURE
	float                                                                         MinParachutePitch;               // offset:0x010	type:FLOAT.0
	float                                                                         MaxParachutePitch;               // offset:0x014	type:FLOAT.0
	float                                                                         MaxParachuteRoll;                // offset:0x018	type:FLOAT.0
};

struct CTaskParachute__Tunables__MoveParameters__Parachuting__InterpRates
{
	float                            StickX;                          // offset:0x000	type:FLOAT.0
	float                            StickY;                          // offset:0x004	type:FLOAT.0
	float                            TotalStickInput;                 // offset:0x008	type:FLOAT.0
	float                            CurrentHeading;                  // offset:0x00C	type:FLOAT.0
};

struct CTaskParachute__Tunables__PadShake
{
	struct CTaskParachute__Tunables__PadShake__Falling     Falling;                         // offset:0x000	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__PadShake__Deploy      Deploy;                          // offset:0x014	type:STRUCT.STRUCTURE
};

struct CTaskParachute__Tunables__PadShake__Deploy
{
	uint                             Duration;                        // offset:0x000	type:UINT.0
	float                            Intensity;                       // offset:0x004	type:FLOAT.0
};

struct CTaskParachute__Tunables__PadShake__Falling
{
	uint                             Duration;                        // offset:0x000	type:UINT.0
	float                            PitchForMinIntensity;            // offset:0x004	type:FLOAT.0
	float                            PitchForMaxIntensity;            // offset:0x008	type:FLOAT.0
	float                            MinIntensity;                    // offset:0x00C	type:FLOAT.0
	float                            MaxIntensity;                    // offset:0x010	type:FLOAT.0
};

struct CTaskParachute__Tunables__ParachuteBones
{
	struct CTaskParachute__Tunables__ParachuteBones__Attachment     LeftGrip;                        // offset:0x000	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ParachuteBones__Attachment     RightGrip;                       // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ParachuteBones__Attachment     LeftWire;                        // offset:0x020	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ParachuteBones__Attachment     RightWire;                       // offset:0x030	type:STRUCT.STRUCTURE
};

struct CTaskParachute__Tunables__ParachuteBones__Attachment
{
	float                            X;                               // offset:0x000	type:FLOAT.0
	float                            Y;                               // offset:0x004	type:FLOAT.0
	float                            Z;                               // offset:0x008	type:FLOAT.0
	bool                             UseOrientationFromParachuteBone; // offset:0x00C	type:BOOL.0
};

struct CTaskParachute__Tunables__ParachutePhysics
{
	float                            ParachuteInitialVelocityY;       // offset:0x000	type:FLOAT.0
	float                            ParachuteInitialVelocityZ;       // offset:0x004	type:FLOAT.0
};

struct CTaskParachute__Tunables__ParachutingAi
{
	struct CTaskParachute__Tunables__ParachutingAi__Target     Target;                          // offset:0x000	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ParachutingAi__Brake      Brake;                           // offset:0x008	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ParachutingAi__Roll       RollForNormal;                   // offset:0x01C	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ParachutingAi__Roll       RollForBraking;                  // offset:0x02C	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ParachutingAi__Pitch      PitchForNormal;                  // offset:0x03C	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ParachutingAi__Pitch      PitchForBraking;                 // offset:0x048	type:STRUCT.STRUCTURE
	struct CTaskParachute__Tunables__ParachutingAi__Drop       Drop;                            // offset:0x054	type:STRUCT.STRUCTURE
};

struct CTaskParachute__Tunables__ParachutingAi__Brake
{
	float                            MaxDistance;                     // offset:0x000	type:FLOAT.0
	float                            DistanceToStart;                 // offset:0x004	type:FLOAT.0
	float                            DistanceForFull;                 // offset:0x008	type:FLOAT.0
	float                            AngleForMin;                     // offset:0x00C	type:FLOAT.0
	float                            AngleForMax;                     // offset:0x010	type:FLOAT.0
};

struct CTaskParachute__Tunables__ParachutingAi__Drop
{
	float                            MinDistance;                     // offset:0x000	type:FLOAT.0
	float                            MaxDistance;                     // offset:0x004	type:FLOAT.0
	float                            MinHeight;                       // offset:0x008	type:FLOAT.0
	float                            MaxHeight;                       // offset:0x00C	type:FLOAT.0
	float                            MaxDot;                          // offset:0x010	type:FLOAT.0
};

struct CTaskParachute__Tunables__ParachutingAi__Pitch
{
	float                            DesiredTimeToResolveAngleDifference; // offset:0x000	type:FLOAT.0
	float                            DeltaForMaxStickChange;          // offset:0x004	type:FLOAT.0
	float                            MaxStickChangePerSecond;         // offset:0x008	type:FLOAT.0
};

struct CTaskParachute__Tunables__ParachutingAi__Roll
{
	float                            AngleDifferenceForMin;           // offset:0x000	type:FLOAT.0
	float                            AngleDifferenceForMax;           // offset:0x004	type:FLOAT.0
	float                            StickValueForMin;                // offset:0x008	type:FLOAT.0
	float                            StickValueForMax;                // offset:0x00C	type:FLOAT.0
};

struct CTaskParachute__Tunables__ParachutingAi__Target
{
	float                            MinDistanceToAdjust;             // offset:0x000	type:FLOAT.0
	float                            Adjustment;                      // offset:0x004	type:FLOAT.0
};

struct CTaskParachute__Tunables__PedAngleLimitsForSkydiving
{
	float                            MinPitch;                        // offset:0x000	type:FLOAT.0
	float                            MaxPitch;                        // offset:0x004	type:FLOAT.0
};

struct CTaskParachute__Tunables__Rendering
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	bool                             RunwayProbes;                    // offset:0x001	type:BOOL.0
	bool                             ValidityProbes;                  // offset:0x002	type:BOOL.0
};

struct CTaskPlaneChase__Tunables : CTuning
{
};

struct CTaskPlayerDrive__Tunables : CTuning
{
	uint                             StealthNoisePeriodMS;            // offset:0x010	type:UINT.0
	float                            StealthSpeedThresholdLow;        // offset:0x014	type:FLOAT.0
	float                            StealthSpeedThresholdHigh;       // offset:0x018	type:FLOAT.0
	float                            StealthVehicleTypeFactorBicycles; // offset:0x01C	type:FLOAT.0
	float                            MinPlayerJumpOutSpeedBike;       // offset:0x020	type:FLOAT.0
	float                            MinPlayerJumpOutSpeedCar;        // offset:0x024	type:FLOAT.0
	float                            TimeBetweenAddingDangerousVehicleEvents; // offset:0x028	type:FLOAT.0
};

struct CTaskPlayerOnFoot__Tunables : CTuning
{
	struct CTaskPlayerOnFoot__Tunables__ParachutePack     ParachutePack;                   // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskPlayerOnFoot__Tunables__ScubaGear         ScubaGear;                       // offset:0x048	type:STRUCT.STRUCTURE
	struct CTaskPlayerOnFoot__Tunables__JetpackData       JetpackData;                     // offset:0x078	type:STRUCT.STRUCTURE
	bool                                                  EvaluateThreatFromCoverPoints;   // offset:0x0A0	type:BOOL.0
	bool                                                  CanMountFromInAir;               // offset:0x0A1	type:BOOL.0
	float                                                 ArrestDistance;                  // offset:0x0A4	type:FLOAT.0
	float                                                 ArrestDot;                       // offset:0x0A8	type:FLOAT.0
	float                                                 _0x216BD758;                     // offset:0x0AC	type:FLOAT.0
	float                                                 TakeCustodyDistance;             // offset:0x0B0	type:FLOAT.0
	float                                                 UncuffDistance;                  // offset:0x0B4	type:FLOAT.0
	float                                                 MaxDistanceToTalk;               // offset:0x0B8	type:FLOAT.0
	float                                                 MinDotToTalk;                    // offset:0x0BC	type:FLOAT.0
	float                                                 TimeBetweenPlayerEvents;         // offset:0x0C0	type:FLOAT.0
	float                                                 MaxEncumberedClimbHeight;        // offset:0x0C4	type:FLOAT.0
	float                                                 MaxTrainClimbHeight;             // offset:0x0C8	type:FLOAT.0
	float                                                 DistanceBetweenAiPedsCoverAndPlayersCover; // offset:0x0CC	type:FLOAT.0
	float                                                 MaxDistanceAiPedFromTheirCoverToAbortPlayerEnterCover; // offset:0x0D0	type:FLOAT.0
	float                                                 SmallCapsuleCoverPenalty;        // offset:0x0D4	type:FLOAT.0
	float                                                 SmallCapsuleCoverRadius;         // offset:0x0D8	type:FLOAT.0
	float                                                 PriorityCoverWeight;             // offset:0x0DC	type:FLOAT.0
	float                                                 EdgeCoverWeight;                 // offset:0x0E0	type:FLOAT.0
	float                                                 VeryCloseToCoverDist;            // offset:0x0E4	type:FLOAT.0
	float                                                 VeryCloseToCoverWeight;          // offset:0x0E8	type:FLOAT.0
	float                                                 DistToCoverWeightThreat;         // offset:0x0EC	type:FLOAT.0
	float                                                 DistToCoverWeight;               // offset:0x0F0	type:FLOAT.0
	float                                                 DistToCoverWeightNoStickBonus;   // offset:0x0F4	type:FLOAT.0
	float                                                 DesiredDirToCoverWeight;         // offset:0x0F8	type:FLOAT.0
	float                                                 DesiredDirToCoverAimingWeight;   // offset:0x0FC	type:FLOAT.0
	float                                                 ThreatDirWeight;                 // offset:0x100	type:FLOAT.0
	float                                                 ThreatEngageDirWeight;           // offset:0x104	type:FLOAT.0
	float                                                 CoverDirToCameraWeightMin;       // offset:0x108	type:FLOAT.0
	float                                                 CoverDirToCameraWeightMax;       // offset:0x10C	type:FLOAT.0
	float                                                 CoverDirToCameraWeightMaxAimGun; // offset:0x110	type:FLOAT.0
	float                                                 CoverDirToCameraWeightMaxScaleDist; // offset:0x114	type:FLOAT.0
	float                                                 DesiredDirToCoverMinDot;         // offset:0x118	type:FLOAT.0
	float                                                 CameraDirToCoverMinDot;          // offset:0x11C	type:FLOAT.0
	float                                                 StaticLosTest1Offset;            // offset:0x120	type:FLOAT.0
	float                                                 StaticLosTest2Offset;            // offset:0x124	type:FLOAT.0
	float                                                 CollisionLosHeightOffset;        // offset:0x128	type:FLOAT.0
	float                                                 VeryCloseIgnoreDesAndCamToleranceDist; // offset:0x12C	type:FLOAT.0
	float                                                 VeryCloseIgnoreDesAndCamToleranceDistAimGun; // offset:0x130	type:FLOAT.0
	float                                                 DeadZoneStickNorm;               // offset:0x134	type:FLOAT.0
	float                                                 SearchThreatMaxDot;              // offset:0x138	type:FLOAT.0
	string                                                BirdWeaponHash;                  // offset:0x13C	type:STRING.ATHASHVALUE
	bool                                                  HideBirdProjectile;              // offset:0x140	type:BOOL.0
	bool                                                  AllowFPSAnalogStickRunInInteriors; // offset:0x141	type:BOOL.0
	bool                                                  UseThreatWeighting;              // offset:0x142	type:BOOL.0
	bool                                                  UseThreatWeightingFPS;           // offset:0x143	type:BOOL.0
};

struct CTaskPlayerOnFoot__Tunables__JetpackData
{
	struct CTaskPlayerOnFoot__Tunables__JetpackData__VelocityInheritance     VelocityInheritance;             // offset:0x000	type:STRUCT.STRUCTURE
	float                                                                    PhaseToBlendOut;                 // offset:0x010	type:FLOAT.0
	float                                                                    BlendOutDelta;                   // offset:0x014	type:FLOAT.0
	float                                                                    ForceToApplyAfterInterrupt;      // offset:0x018	type:FLOAT.0
	string                                                                   ClipSetHash;                     // offset:0x01C	type:STRING.ATHASHVALUE
	string                                                                   PedClipHash;                     // offset:0x020	type:STRING.ATHASHVALUE
	string                                                                   PropClipHash;                    // offset:0x024	type:STRING.ATHASHVALUE
};

struct CTaskPlayerOnFoot__Tunables__JetpackData__VelocityInheritance
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	float                            X;                               // offset:0x004	type:FLOAT.0
	float                            Y;                               // offset:0x008	type:FLOAT.0
	float                            Z;                               // offset:0x00C	type:FLOAT.0
};

struct CTaskPlayerOnFoot__Tunables__ParachutePack
{
	struct CTaskPlayerOnFoot__Tunables__ParachutePack__VelocityInheritance     VelocityInheritance;             // offset:0x000	type:STRUCT.STRUCTURE
	float                                                                      AttachOffsetX;                   // offset:0x010	type:FLOAT.0
	float                                                                      AttachOffsetY;                   // offset:0x014	type:FLOAT.0
	float                                                                      AttachOffsetZ;                   // offset:0x018	type:FLOAT.0
	float                                                                      AttachOrientationX;              // offset:0x01C	type:FLOAT.0
	float                                                                      AttachOrientationY;              // offset:0x020	type:FLOAT.0
	float                                                                      AttachOrientationZ;              // offset:0x024	type:FLOAT.0
	float                                                                      BlendInDeltaForPed;              // offset:0x028	type:FLOAT.0
	float                                                                      BlendInDeltaForProp;             // offset:0x02C	type:FLOAT.0
	float                                                                      PhaseToBlendOut;                 // offset:0x030	type:FLOAT.0
	float                                                                      BlendOutDelta;                   // offset:0x034	type:FLOAT.0
};

struct CTaskPlayerOnFoot__Tunables__ParachutePack__VelocityInheritance
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	float                            X;                               // offset:0x004	type:FLOAT.0
	float                            Y;                               // offset:0x008	type:FLOAT.0
	float                            Z;                               // offset:0x00C	type:FLOAT.0
};

struct CTaskPlayerOnFoot__Tunables__ScubaGear
{
	struct CTaskPlayerOnFoot__Tunables__ScubaGear__VelocityInheritance     VelocityInheritance;             // offset:0x000	type:STRUCT.STRUCTURE
	float                                                                  AttachOffsetX;                   // offset:0x010	type:FLOAT.0
	float                                                                  AttachOffsetY;                   // offset:0x014	type:FLOAT.0
	float                                                                  AttachOffsetZ;                   // offset:0x018	type:FLOAT.0
	float                                                                  AttachOrientationX;              // offset:0x01C	type:FLOAT.0
	float                                                                  AttachOrientationY;              // offset:0x020	type:FLOAT.0
	float                                                                  AttachOrientationZ;              // offset:0x024	type:FLOAT.0
	float                                                                  PhaseToBlendOut;                 // offset:0x028	type:FLOAT.0
	float                                                                  BlendOutDelta;                   // offset:0x02C	type:FLOAT.0
};

struct CTaskPlayerOnFoot__Tunables__ScubaGear__VelocityInheritance
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	float                            X;                               // offset:0x004	type:FLOAT.0
	float                            Y;                               // offset:0x008	type:FLOAT.0
	float                            Z;                               // offset:0x00C	type:FLOAT.0
};

struct CTaskPoliceOrderResponse__Tunables : CTuning
{
	float                            MaxTimeToWait;                   // offset:0x010	type:FLOAT.0
	float                            MaxSpeedForVehicleMovingSlowly;  // offset:0x014	type:FLOAT.0
	float                            MinSpeedForVehicleMovingQuickly; // offset:0x018	type:FLOAT.0
	float                            TimeBeforeOvertakeToMatchSpeedWhenPulledOver; // offset:0x01C	type:FLOAT.0
	float                            TimeBeforeOvertakeToMatchSpeedWhenCruising; // offset:0x020	type:FLOAT.0
	float                            CheatPowerIncreaseForMatchSpeed; // offset:0x024	type:FLOAT.0
	float                            HashOrdering;                    // offset:0x028	type:FLOAT.0
	float                            MaxTimeToWander;                 // offset:0x02C	type:FLOAT.0
	float                            TimeBetweenExitVehicleRetries;   // offset:0x030	type:FLOAT.0
};

struct CTaskPursueCriminal__Tunables : CTuning
{
	float                            MinDistanceToFindVehicle;        // offset:0x010	type:FLOAT.0
	float                            MaxDistanceToFindVehicle;        // offset:0x014	type:FLOAT.0
	float                            MaxHeightDifference;             // offset:0x018	type:FLOAT.0
	float                            DotProductFacing;                // offset:0x01C	type:FLOAT.0
	float                            DotProductBehind;                // offset:0x020	type:FLOAT.0
	int                              DistanceToFollowVehicleBeforeFlee; // offset:0x024	type:INT.0
	float                            DistanceToSignalVehiclePursuitToCriminal; // offset:0x028	type:FLOAT.0
	int                              TimeToSignalVehiclePursuitToCriminalMin; // offset:0x02C	type:INT.0
	int                              TimeToSignalVehiclePursuitToCriminalMax; // offset:0x030	type:INT.0
	bool                             DrawDebug;                       // offset:0x034	type:BOOL.0
	bool                             AllowPursuePlayer;               // offset:0x035	type:BOOL.0
	float                            CriminalVehicleMinStartSpeed;    // offset:0x038	type:FLOAT.0
};

struct CTaskQuadLocomotion__Tunables : CTuning
{
	float                            StartAnimatedTurnsD;             // offset:0x010	type:FLOAT.0
	float                            StopAnimatedTurnsD;              // offset:0x014	type:FLOAT.0
	float                            TurnTransitionDelay;             // offset:0x018	type:FLOAT.0
	float                            TurnToIdleTransitionDelay;       // offset:0x01C	type:FLOAT.0
	float                            SteepSlopeStartAnimatedTurnsD;   // offset:0x020	type:FLOAT.0
	float                            SteepSlopeStopAnimatedTurnsD;    // offset:0x024	type:FLOAT.0
	float                            SteepSlopeThresholdD;            // offset:0x028	type:FLOAT.0
	float                            InMotionAlignmentVelocityTolerance; // offset:0x02C	type:FLOAT.0
	float                            InMotionTighterTurnsVelocityTolerance; // offset:0x030	type:FLOAT.0
	float                            InPlaceAlignmentVelocityTolerance; // offset:0x034	type:FLOAT.0
	float                            TurnSpeedMBRThreshold;           // offset:0x038	type:FLOAT.0
	float                            SlowMinTurnApproachRate;         // offset:0x03C	type:FLOAT.0
	float                            FastMinTurnApproachRate;         // offset:0x040	type:FLOAT.0
	float                            SlowTurnApproachRate;            // offset:0x044	type:FLOAT.0
	float                            FastTurnApproachRate;            // offset:0x048	type:FLOAT.0
	float                            SlowTurnAcceleration;            // offset:0x04C	type:FLOAT.0
	float                            FastTurnAcceleration;            // offset:0x050	type:FLOAT.0
	float                            TurnResetThresholdD;             // offset:0x054	type:FLOAT.0
	float                            ProcessPhysicsApproachRate;      // offset:0x058	type:FLOAT.0
	float                            DisableTimeslicingHeadingThresholdD; // offset:0x05C	type:FLOAT.0
	float                            LowLodExtraHeadingAdjustmentRate; // offset:0x060	type:FLOAT.0
	float                            StartLocomotionBlendoutThreshold; // offset:0x064	type:FLOAT.0
	float                            StartLocomotionHeadingDeltaBlendoutThreshold; // offset:0x068	type:FLOAT.0
	float                            StartLocomotionDefaultBlendDuration; // offset:0x06C	type:FLOAT.0
	float                            StartLocomotionDefaultBlendOutDuration; // offset:0x070	type:FLOAT.0
	float                            StartLocomotionEarlyOutBlendOutDuration; // offset:0x074	type:FLOAT.0
	float                            StartLocomotionWalkRunBoundary;  // offset:0x078	type:FLOAT.0
	float                            PG_RE_COACHROBBERY01X;           // offset:0x07C	type:FLOAT.0
	float                            MovementAcceleration;            // offset:0x080	type:FLOAT.0
	float                            MinMBRToStop;                    // offset:0x084	type:FLOAT.0
	float                            PursuitModeGallopRateFactor;     // offset:0x088	type:FLOAT.0
	float                            PursuitModeExtraHeadingRate;     // offset:0x08C	type:FLOAT.0
	float                            StoppingDistanceWalkMBR;         // offset:0x090	type:FLOAT.0
	float                            StoppingDistanceRunMBR;          // offset:0x094	type:FLOAT.0
	float                            StoppingDistanceGallopMBR;       // offset:0x098	type:FLOAT.0
	float                            StopPhaseThreshold;              // offset:0x09C	type:FLOAT.0
	float                            StoppingGotoPointRemainingDist;  // offset:0x0A0	type:FLOAT.0
	float                            MinStopPhaseToResumeMovement;    // offset:0x0A4	type:FLOAT.0
	float                            MaxStopPhaseToResumeMovement;    // offset:0x0A8	type:FLOAT.0
	string                           PlayerControlCamera;             // offset:0x0AC	type:STRING.ATHASHVALUE
	float                            ReversingHeadingChangeDegreesForBreakout; // offset:0x0B0	type:FLOAT.0
	float                            ReversingTimeBeforeAllowingBreakout; // offset:0x0B4	type:FLOAT.0
};

struct CTaskRageRagdoll__Tunables : CTuning
{
	struct CTaskRageRagdoll__Tunables__RageRagdollImpulseTuning     RageRagdollImpulseTuning;        // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskRageRagdoll__Tunables__WritheStrengthTuning         SpineStrengthTuning;             // offset:0x038	type:STRUCT.STRUCTURE
	struct CTaskRageRagdoll__Tunables__WritheStrengthTuning         NeckStrengthTuning;              // offset:0x050	type:STRUCT.STRUCTURE
	struct CTaskRageRagdoll__Tunables__WritheStrengthTuning         LimbStrengthTuning;              // offset:0x068	type:STRUCT.STRUCTURE
	float                                                           fMuscleAngleStrengthRampDownRate; // offset:0x080	type:FLOAT.0
	float                                                           fMuscleSpeedStrengthRampDownRate; // offset:0x084	type:FLOAT.0
};

struct CTaskRageRagdoll__Tunables__RageRagdollImpulseTuning
{
	float                            fImpulseReductionPerShot;        // offset:0x000	type:FLOAT.0
	float                            fImpulseRecoveryPerSecond;       // offset:0x004	type:FLOAT.0
	float                            fMaxImpulseModifier;             // offset:0x008	type:FLOAT.0
	float                            fMinImpulseModifier;             // offset:0x00C	type:FLOAT.0
	float                            fCounterImpulseRatio;            // offset:0x010	type:FLOAT.0
	float                            fTempInitialStiffnessWhenShot;   // offset:0x014	type:FLOAT.0
	float                            fAnimalMassMult;                 // offset:0x018	type:FLOAT.0
	float                            fAnimalImpulseMultMin;           // offset:0x01C	type:FLOAT.0
	float                            fAnimalImpulseMultMax;           // offset:0x020	type:FLOAT.0
	float                            fInitialHitImpulseMult;          // offset:0x024	type:FLOAT.0
};

struct CTaskRageRagdoll__Tunables__WritheStrengthTuning
{
	float                            fStartStrength;                  // offset:0x000	type:FLOAT.0
	float                            fMidStrength;                    // offset:0x004	type:FLOAT.0
	float                            fEndStrength;                    // offset:0x008	type:FLOAT.0
	float                            fInitialDelay;                   // offset:0x00C	type:FLOAT.0
	float                            fDurationStage1;                 // offset:0x010	type:FLOAT.0
	float                            fDurationStage2;                 // offset:0x014	type:FLOAT.0
};

struct CTaskRappel__Tunables : CTuning
{
	float                            fJumpDescendRate;                // offset:0x010	type:FLOAT.0
	float                            fLongJumpDescendRate;            // offset:0x014	type:FLOAT.0
	float                            fJumpToSmashWindowPhaseChange;   // offset:0x018	type:FLOAT.0
	float                            fMinJumpPhaseAllowDescend;       // offset:0x01C	type:FLOAT.0
	float                            fMaxJumpPhaseAllowDescend;       // offset:0x020	type:FLOAT.0
	float                            fMinJumpPhaseAllowSmashWindow;   // offset:0x024	type:FLOAT.0
	float                            fMaxJumpPhaseAllowSmashWindow;   // offset:0x028	type:FLOAT.0
	float                            fMinSmashWindowPhase;            // offset:0x02C	type:FLOAT.0
	float                            fGlassBreakRadius;               // offset:0x030	type:FLOAT.0
	float                            fGlassDamage;                    // offset:0x034	type:FLOAT.0
	float                            fMinDistanceToBreakWindow;       // offset:0x038	type:FLOAT.0
	float                            fMinStickValueAllowDescend;      // offset:0x03C	type:FLOAT.0
	bool                             bAllowSmashDuringJump;           // offset:0x040	type:BOOL.0
};

struct CTaskReactAimWeapon__Tunables : CTuning
{
	struct CTaskReactAimWeapon__Tunables__Ability     Professional;                    // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskReactAimWeapon__Tunables__Ability     NotProfessional;                 // offset:0x0A0	type:STRUCT.STRUCTURE
	float                                             Rate;                            // offset:0x130	type:FLOAT.0
	float                                             MaxRateVariance;                 // offset:0x134	type:FLOAT.0
};

struct CTaskReactAimWeapon__Tunables__Ability
{
	struct CTaskReactAimWeapon__Tunables__Ability__Situation     Flinch;                          // offset:0x000	type:STRUCT.STRUCTURE
	struct CTaskReactAimWeapon__Tunables__Ability__Situation     Surprised;                       // offset:0x024	type:STRUCT.STRUCTURE
	struct CTaskReactAimWeapon__Tunables__Ability__Situation     Sniper;                          // offset:0x048	type:STRUCT.STRUCTURE
	struct CTaskReactAimWeapon__Tunables__Ability__Situation     None;                            // offset:0x06C	type:STRUCT.STRUCTURE
};

struct CTaskReactAimWeapon__Tunables__Ability__Situation
{
	struct CTaskReactAimWeapon__Tunables__Ability__Situation__Weapon     Pistol;                          // offset:0x000	type:STRUCT.STRUCTURE
	struct CTaskReactAimWeapon__Tunables__Ability__Situation__Weapon     Rifle;                           // offset:0x00C	type:STRUCT.STRUCTURE
	struct CTaskReactAimWeapon__Tunables__Ability__Situation__Weapon     MicroSMG;                        // offset:0x018	type:STRUCT.STRUCTURE
};

struct CTaskReactAimWeapon__Tunables__Ability__Situation__Weapon
{
	string                           ClipSetId;                       // offset:0x000	type:STRING.ATHASHVALUE
	float                            Rate;                            // offset:0x004	type:FLOAT.0
	bool                             HasSixDirections;                // offset:0x008	type:BOOL.0
	bool                             HasCreateWeaponTag;              // offset:0x009	type:BOOL.0
	bool                             HasInterruptTag;                 // offset:0x00A	type:BOOL.0
};

struct CTaskReactAndFlee__Tunables : CTuning
{
	float                            MinFleeMoveBlendRatio;           // offset:0x010	type:FLOAT.0
	float                            MaxFleeMoveBlendRatio;           // offset:0x014	type:FLOAT.0
	bool                             OverrideDirections;              // offset:0x018	type:BOOL.0
	float                            OverrideReactDirection;          // offset:0x01C	type:FLOAT.0
	float                            OverrideFleeDirection;           // offset:0x020	type:FLOAT.0
	float                            MaxReactionTime;                 // offset:0x024	type:FLOAT.0
	float                            MinRate;                         // offset:0x028	type:FLOAT.0
	float                            MaxRate;                         // offset:0x02C	type:FLOAT.0
	float                            HeadingChangeRate;               // offset:0x030	type:FLOAT.0
	float                            MinTimeToRepeatLastAnimation;    // offset:0x034	type:FLOAT.0
	float                            _0x2A5432B6;                     // offset:0x038	type:FLOAT.0
	float                            _0x0E3B88A1;                     // offset:0x03C	type:FLOAT.0
	float                            _0xDD6A61F2;                     // offset:0x040	type:FLOAT.0
	float                            _0x8816589D;                     // offset:0x044	type:FLOAT.0
	float                            _0x87E8A528;                     // offset:0x048	type:FLOAT.0
	float                            _0xBB182E83;                     // offset:0x04C	type:FLOAT.0
	float                            _0x8CC98251;                     // offset:0x050	type:FLOAT.0
};

struct CTaskReactInDirection__Tunables : CTuning
{
};

struct CTaskReactToBeingAskedToLeaveVehicle__Tunables : CTuning
{
	float                            MaxTimeToWatchVehicle;           // offset:0x010	type:FLOAT.0
	float                            MaxDistanceToWatchVehicle;       // offset:0x014	type:FLOAT.0
};

struct CTaskReactToBuddyShot__Tunables : CTuning
{
};

struct CTaskReactToExplosion__Tunables : CTuning
{
	float                            MaxShellShockedDistance;         // offset:0x010	type:FLOAT.0
	float                            MaxFlinchDistance;               // offset:0x014	type:FLOAT.0
	float                            MaxLookAtDistance;               // offset:0x018	type:FLOAT.0
};

struct CTaskReactToImminentExplosion__Tunables : CTuning
{
	float                            MaxEscapeDistance;               // offset:0x010	type:FLOAT.0
	float                            MaxFlinchDistance;               // offset:0x014	type:FLOAT.0
};

struct CTaskReactToPursuit__Tunables : CTuning
{
	int                              MinTimeToFleeInVehicle;          // offset:0x010	type:INT.0
	int                              MaxTimeToFleeInVehicle;          // offset:0x014	type:INT.0
	float                            FleeSpeedInVehicle;              // offset:0x018	type:FLOAT.0
};

struct CTaskRideTrain__Tunables : CTuning
{
	float                            MinDelayForGetOff;               // offset:0x010	type:FLOAT.0
	float                            MaxDelayForGetOff;               // offset:0x014	type:FLOAT.0
	float                            fMaxWaitSeconds;                 // offset:0x018	type:FLOAT.0
};

struct CTaskScenarioFlee__Tunables : CTuning
{
	float                            fFleeProjectRange;               // offset:0x010	type:FLOAT.0
	float                            fInitialSearchRadius;            // offset:0x014	type:FLOAT.0
	float                            fSearchScaler;                   // offset:0x018	type:FLOAT.0
	float                            fSearchRangeMax;                 // offset:0x01C	type:FLOAT.0
	float                            fFleeRange;                      // offset:0x020	type:FLOAT.0
	float                            fFleeRangeExtended;              // offset:0x024	type:FLOAT.0
	float                            fTargetScenarioRadius;           // offset:0x028	type:FLOAT.0
	float                            fProbeLength;                    // offset:0x02C	type:FLOAT.0
	uint                             uAvoidanceProbeInterval;         // offset:0x030	type:UINT.0
};

struct CTaskSearchBase__Tunables : CTuning
{
	float                            TimeToGiveUp;                    // offset:0x010	type:FLOAT.0
	float                            MaxPositionVariance;             // offset:0x014	type:FLOAT.0
	float                            MaxDirectionVariance;            // offset:0x018	type:FLOAT.0
};

struct CTaskSearchForUnknownThreat__Tunables : CTuning
{
	int                              iMinTimeBeforeSearchingForNewHidingPlace; // offset:0x010	type:INT.0
	int                              iMaxTimeBeforeSearchingForNewHidingPlace; // offset:0x014	type:INT.0
};

struct CTaskSearchInAutomobile__Tunables : CTuning
{
	float                            FleeOffset;                      // offset:0x010	type:FLOAT.0
	float                            CruiseSpeed;                     // offset:0x014	type:FLOAT.0
};

struct CTaskSearchInBoat__Tunables : CTuning
{
};

struct CTaskSearchInHeli__Tunables : CTuning
{
	float                            FleeOffset;                      // offset:0x010	type:FLOAT.0
	float                            CruiseSpeed;                     // offset:0x014	type:FLOAT.0
	int                              MinHeightAboveTerrain;           // offset:0x018	type:INT.0
};

struct CTaskSearchOnFoot__Tunables : CTuning
{
	float                            FleeOffset;                      // offset:0x010	type:FLOAT.0
	float                            TargetRadius;                    // offset:0x014	type:FLOAT.0
	float                            CompletionRadius;                // offset:0x018	type:FLOAT.0
	float                            SlowDownDistance;                // offset:0x01C	type:FLOAT.0
	float                            FleeSafeDistance;                // offset:0x020	type:FLOAT.0
	float                            MoveBlendRatio;                  // offset:0x024	type:FLOAT.0
};

struct CTaskSearch__Tunables : CTuning
{
	float                            TimeToStare;                     // offset:0x010	type:FLOAT.0
	float                            MoveBlendRatio;                  // offset:0x014	type:FLOAT.0
	float                            TargetReached;                   // offset:0x018	type:FLOAT.0
	float                            CruiseSpeed;                     // offset:0x01C	type:FLOAT.0
};

struct CTaskSharkAttack__Tunables : CTuning
{
	float                            SurfaceProjectionDistance;       // offset:0x010	type:FLOAT.0
	float                            SurfaceZOffset;                  // offset:0x014	type:FLOAT.0
	float                            MinDepthBelowSurface;            // offset:0x018	type:FLOAT.0
	float                            CirclingAngularSpeed;            // offset:0x01C	type:FLOAT.0
	float                            TimeToCircle;                    // offset:0x020	type:FLOAT.0
	float                            MinCircleRadius;                 // offset:0x024	type:FLOAT.0
	float                            MaxCircleRadius;                 // offset:0x028	type:FLOAT.0
	float                            CirclingMBR;                     // offset:0x02C	type:FLOAT.0
	float                            DiveProjectionDistance;          // offset:0x030	type:FLOAT.0
	float                            DiveDepth;                       // offset:0x034	type:FLOAT.0
	float                            DiveMBR;                         // offset:0x038	type:FLOAT.0
	int                              MinNumberFakeApproaches;         // offset:0x03C	type:INT.0
	int                              MaxNumberFakeApproaches;         // offset:0x040	type:INT.0
	float                            FakeLungeOffset;                 // offset:0x044	type:FLOAT.0
	float                            LungeForwardOffset;              // offset:0x048	type:FLOAT.0
	float                            LungeZOffset;                    // offset:0x04C	type:FLOAT.0
	float                            LungeChangeDistance;             // offset:0x050	type:FLOAT.0
	float                            LungeTargetRadius;               // offset:0x054	type:FLOAT.0
	float                            FollowTimeout;                   // offset:0x058	type:FLOAT.0
	float                            FollowYOffset;                   // offset:0x05C	type:FLOAT.0
	float                            FollowZOffset;                   // offset:0x060	type:FLOAT.0
	float                            LandProbeLength;                 // offset:0x064	type:FLOAT.0
	float                            MovingVehicleVelocityThreshold;  // offset:0x068	type:FLOAT.0
	float                            SharkFleeDist;                   // offset:0x06C	type:FLOAT.0
};

struct CTaskSharkCircle__Tunables : CTuning
{
	float                            AdvanceDistanceSquared;          // offset:0x010	type:FLOAT.0
	float                            MoveRateOverride;                // offset:0x014	type:FLOAT.0
};

struct CTaskShockingEventBackAway__Tunables : CTuning
{
	float                            MaxHeadingAdjustmentRate;        // offset:0x010	type:FLOAT.0
	float                            MinHeadingAlignmentCosThreshold; // offset:0x014	type:FLOAT.0
	float                            MaxHeadingAlignmentCosThreshold; // offset:0x018	type:FLOAT.0
	float                            MoveNetworkBlendoutDuration;     // offset:0x01C	type:FLOAT.0
	float                            DefaultBackwardsProjectionRange; // offset:0x020	type:FLOAT.0
	float                            AxesFacingTolerance;             // offset:0x024	type:FLOAT.0
	float                            MinDistanceForBackAway;          // offset:0x028	type:FLOAT.0
	float                            MaxDistanceForBackAway;          // offset:0x02C	type:FLOAT.0
	float                            MaxWptAngle;                     // offset:0x030	type:FLOAT.0
	float                            BlendOutPhase;                   // offset:0x034	type:FLOAT.0
};

struct CTaskShockingEventGoto__Tunables : CTuning
{
	float                            DistSquaredThresholdAtCrowdRoundPos; // offset:0x010	type:FLOAT.0
	float                            DistSquaredThresholdMovingToCrowdRoundPos; // offset:0x014	type:FLOAT.0
	float                            DistVicinityOfCrowd;             // offset:0x018	type:FLOAT.0
	float                            ExtraDistForGoto;                // offset:0x01C	type:FLOAT.0
	float                            MinDistFromOtherPeds;            // offset:0x020	type:FLOAT.0
	float                            MoveBlendRatioForFarGoto;        // offset:0x024	type:FLOAT.0
	float                            TargetRadiusForCloseNavMeshTask; // offset:0x028	type:FLOAT.0
	float                            ExtraToleranceForStopWatchDistance; // offset:0x02C	type:FLOAT.0
};

struct CTaskShockingEventHurryAway__Tunables : CTuning
{
	float                            LookAheadDistanceForBackAway;    // offset:0x010	type:FLOAT.0
	float                            ChancesToCallPolice;             // offset:0x014	type:FLOAT.0
	float                            MinTimeToCallPolice;             // offset:0x018	type:FLOAT.0
	float                            MaxTimeToCallPolice;             // offset:0x01C	type:FLOAT.0
	float                            ChancePlayingInitalTurnAnimSmallReact; // offset:0x020	type:FLOAT.0
	float                            ChancePlayingCustomBackAwayAnimSmallReact; // offset:0x024	type:FLOAT.0
	float                            ChancePlayingInitalTurnAnimBigReact; // offset:0x028	type:FLOAT.0
	float                            ChancePlayingCustomBackAwayAnimBigReact; // offset:0x02C	type:FLOAT.0
	float                            ShouldFleeDistance;              // offset:0x030	type:FLOAT.0
	float                            ShouldFleeVehicleDistance;       // offset:0x034	type:FLOAT.0
	float                            ShouldFleeFilmingDistance;       // offset:0x038	type:FLOAT.0
	uint                             EvasionThreshold;                // offset:0x03C	type:UINT.0
	float                            ClosePlayerSpeedupDistanceSquaredThreshold; // offset:0x040	type:FLOAT.0
	float                            ClosePlayerSpeedupTimeThreshold; // offset:0x044	type:FLOAT.0
	float                            MinDistanceFromPlayerToDeleteHurriedPed; // offset:0x048	type:FLOAT.0
	float                            TimeUntilDeletionWhenHurrying;   // offset:0x04C	type:FLOAT.0
};

struct CTaskShockingEventReactToAircraft__Tunables : CTuning
{
	float                            ThresholdWatch;                  // offset:0x010	type:FLOAT.0
	float                            ThresholdRun;                    // offset:0x014	type:FLOAT.0
};

struct CTaskShockingEventReact__Tunables : CTuning
{
	float                            TurningTolerance;                // offset:0x010	type:FLOAT.0
	float                            TurningRate;                     // offset:0x014	type:FLOAT.0
	float                            TurningEnergyUpperThreshold;     // offset:0x018	type:FLOAT.0
	float                            TurningEnergyLowerThreshold;     // offset:0x01C	type:FLOAT.0
	float                            TimeBetweenReactionIdlesMin;     // offset:0x020	type:FLOAT.0
	float                            TimeBetweenReactionIdlesMax;     // offset:0x024	type:FLOAT.0
	float                            BlendoutPhase;                   // offset:0x028	type:FLOAT.0
};

struct CTaskShockingEventStopAndStare__Tunables : CTuning
{
	float                            BringVehicleToHaltDistance;      // offset:0x010	type:FLOAT.0
};

struct CTaskShockingEventWatch__Tunables : CTuning
{
	float                            MaxTargetAngularMovementForWatch; // offset:0x010	type:FLOAT.0
	float                            ThresholdWatchAfterFace;         // offset:0x014	type:FLOAT.0
	float                            ThresholdWatchStop;              // offset:0x018	type:FLOAT.0
	float                            MinDistanceBetweenFilmingPeds;   // offset:0x01C	type:FLOAT.0
	float                            MinDistanceFromOtherPedsToFilm;  // offset:0x020	type:FLOAT.0
	float                            MinDistanceAwayForFilming;       // offset:0x024	type:FLOAT.0
};

struct CTaskShockingEvent__Tunables : CTuning
{
	float                            MinRemainingRotationForScaling;  // offset:0x010	type:FLOAT.0
	float                            MinAngularVelocityScaleFactor;   // offset:0x014	type:FLOAT.0
	float                            MaxAngularVelocityScaleFactor;   // offset:0x018	type:FLOAT.0
};

struct CTaskShockingPoliceInvestigate__Tunables : CTuning
{
	float                            ExtraDistForGoto;                // offset:0x010	type:FLOAT.0
	float                            MoveBlendRatioForFarGoto;        // offset:0x014	type:FLOAT.0
	float                            MinDistFromPlayerToDeleteOffscreen; // offset:0x018	type:FLOAT.0
	uint                             DeleteOffscreenTimeMS_MIN;       // offset:0x01C	type:UINT.0
	uint                             DeleteOffscreenTimeMS_MAX;       // offset:0x020	type:UINT.0
};

struct CTaskShootOutTire__Tunables : CTuning
{
	float                            MinTimeoutToAcquireLineOfSight;  // offset:0x010	type:FLOAT.0
	float                            MaxTimeoutToAcquireLineOfSight;  // offset:0x014	type:FLOAT.0
	float                            TimeBetweenLineOfSightChecks;    // offset:0x018	type:FLOAT.0
	float                            MinTimeToWaitForShot;            // offset:0x01C	type:FLOAT.0
	float                            MaxTimeToWaitForShot;            // offset:0x020	type:FLOAT.0
	int                              MaxWaitForShotFailures;          // offset:0x024	type:INT.0
	float                            MinSpeedToApplyReaction;         // offset:0x028	type:FLOAT.0
};

struct CTaskShove__Tunables : CTuning
{
	struct CTaskShove__Tunables__Rendering     Rendering;                       // offset:0x010	type:STRUCT.STRUCTURE
	float                                      MaxDistance;                     // offset:0x014	type:FLOAT.0
	float                                      MinDot;                          // offset:0x018	type:FLOAT.0
	float                                      RadiusForContact;                // offset:0x01C	type:FLOAT.0
};

struct CTaskShove__Tunables__Rendering
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	bool                             Contact;                         // offset:0x001	type:BOOL.0
};

struct CTaskShoved__Tunables : CTuning
{
};

struct CTaskSmartFlee__Tunables : CTuning
{
	bool                             ExitVehicleDueToRoute;           // offset:0x010	type:BOOL.0
	bool                             UseRouteInterceptionCheckToExitVehicle; // offset:0x011	type:BOOL.0
	float                            RouteInterceptionCheckMinTime;   // offset:0x014	type:FLOAT.0
	float                            RouteInterceptionCheckMaxTime;   // offset:0x018	type:FLOAT.0
	float                            RouteInterceptionCheckDefaultMaxSideDistance; // offset:0x01C	type:FLOAT.0
	float                            RouteInterceptionCheckDefaultMaxForwardDistance; // offset:0x020	type:FLOAT.0
	float                            RouteInterceptionCheckVehicleMaxSideDistance; // offset:0x024	type:FLOAT.0
	float                            RouteInterceptionCheckVehicleMaxForwardDistance; // offset:0x028	type:FLOAT.0
	float                            _0xA747C1C6;                     // offset:0x02C	type:FLOAT.0
	float                            _0x4A055FED;                     // offset:0x030	type:FLOAT.0
	float                            _0x72F92C8B;                     // offset:0x034	type:FLOAT.0
	float                            _0xD0107778;                     // offset:0x038	type:FLOAT.0
	float                            EmergencyStopTimeBetweenChecks;  // offset:0x03C	type:FLOAT.0
	float                            EmergencyStopInterceptionMinTime; // offset:0x040	type:FLOAT.0
	float                            EmergencyStopInterceptionMaxTime; // offset:0x044	type:FLOAT.0
	float                            EmergencyStopInterceptionMaxSideDistance; // offset:0x048	type:FLOAT.0
	float                            EmergencyStopInterceptionMaxForwardDistance; // offset:0x04C	type:FLOAT.0
	float                            _0x5D78687E;                     // offset:0x050	type:FLOAT.0
	float                            _0xA7D2C42D;                     // offset:0x054	type:FLOAT.0
	float                            _0x3E9E7BE4;                     // offset:0x058	type:FLOAT.0
	float                            _0x0C231171;                     // offset:0x05C	type:FLOAT.0
	float                            ExitVehicleMaxDistance;          // offset:0x060	type:FLOAT.0
	float                            ExitVehicleRouteMinDistance;     // offset:0x064	type:FLOAT.0
	float                            TimeBetweenHandsUpChecks;        // offset:0x068	type:FLOAT.0
	float                            TimeBetweenExitVehicleDueToRouteChecks; // offset:0x06C	type:FLOAT.0
	float                            TimeToCower;                     // offset:0x070	type:FLOAT.0
	float                            MinTimeForHandsUp;               // offset:0x074	type:FLOAT.0
	float                            MaxTimeForHandsUp;               // offset:0x078	type:FLOAT.0
	float                            MinDelayTimeForExitVehicle;      // offset:0x07C	type:FLOAT.0
	float                            MaxDelayTimeForExitVehicle;      // offset:0x080	type:FLOAT.0
	float                            ChanceToDeleteOnExitVehicle;     // offset:0x084	type:FLOAT.0
	float                            MinDistFromPlayerToDeleteOnExitVehicle; // offset:0x088	type:FLOAT.0
	float                            MaxRouteLengthForCower;          // offset:0x08C	type:FLOAT.0
	float                            MinDistFromTargetWhenCoweringToCheckForExit; // offset:0x090	type:FLOAT.0
	float                            FleeTargetTooCloseDistance;      // offset:0x094	type:FLOAT.0
	float                            MinFleeOnBikeDistance;           // offset:0x098	type:FLOAT.0
	float                            TimeOnBikeWithoutFleeingBeforeExitVehicle; // offset:0x09C	type:FLOAT.0
	int                              MaxRouteSizeForCower;            // offset:0x0A0	type:INT.0
	bool                             ForceCower;                      // offset:0x0A4	type:BOOL.0
	float                            _0xD770078B;                     // offset:0x0A8	type:FLOAT.0
	float                            _0xF9E3CA34;                     // offset:0x0AC	type:FLOAT.0
	float                            _0xF201A3C4;                     // offset:0x0B0	type:FLOAT.0
	float                            _0x3DCD21E2;                     // offset:0x0B4	type:FLOAT.0
	float                            _0x5B113661;                     // offset:0x0B8	type:FLOAT.0
	float                            _0x7028E6A3;                     // offset:0x0BC	type:FLOAT.0
	float                            _0xE1DF4282;                     // offset:0x0C0	type:FLOAT.0
	float                            _0xA5C0CD33;                     // offset:0x0C4	type:FLOAT.0
	float                            _0x7BFF7484;                     // offset:0x0C8	type:FLOAT.0
	float                            _0xE91140E8;                     // offset:0x0CC	type:FLOAT.0
	bool                             _0xC503782F;                     // offset:0x0D0	type:BOOL.0
	float                            _0x27BCCEA6;                     // offset:0x0D4	type:FLOAT.0
	float                            _0x19A96055;                     // offset:0x0D8	type:FLOAT.0
	float                            _0xA7E4074C;                     // offset:0x0DC	type:FLOAT.0
};

struct CTaskStandGuard__Tunables : CTuning
{
	int                              MinStandWaitTimeMS;              // offset:0x010	type:INT.0
	int                              MaxStandWaitTimeMS;              // offset:0x014	type:INT.0
	int                              MinDefendPointWaitTimeMS;        // offset:0x018	type:INT.0
	int                              MaxDefendPointWaitTimeMS;        // offset:0x01C	type:INT.0
	float                            MinNavmeshPatrolRadiusFactor;    // offset:0x020	type:FLOAT.0
	float                            MaxNavmeshPatrolRadiusFactor;    // offset:0x024	type:FLOAT.0
	float                            RouteRadiusFactor;               // offset:0x028	type:FLOAT.0
};

struct CTaskStealVehicle__Tunables : CTuning
{
	float                            MaxDistanceToFindVehicle;        // offset:0x010	type:FLOAT.0
	float                            MaxDistanceToPursueVehicle;      // offset:0x014	type:FLOAT.0
	float                            DistanceToRunToVehicle;          // offset:0x018	type:FLOAT.0
	bool                             CanStealPlayersVehicle;          // offset:0x01C	type:BOOL.0
	bool                             CanStealCarsAtLights;            // offset:0x01D	type:BOOL.0
	bool                             CanStealParkedCars;              // offset:0x01E	type:BOOL.0
	bool                             CanStealStationaryCars;          // offset:0x01F	type:BOOL.0
};

struct CTaskSubmarineChase__Tunables : CTuning
{
	float                            _0x88E51EA0;                     // offset:0x010	type:FLOAT.0
	float                            SlowDownDistanceMax;             // offset:0x014	type:FLOAT.0
	float                            SlowDownDistanceMin;             // offset:0x018	type:FLOAT.0
};

struct CTaskSubmarineCombat__Tunables : CTuning
{
};

struct CTaskSwapWeapon__Tunables : CTuning
{
	float                            OnFootClipRate;                  // offset:0x010	type:FLOAT.0
	float                            OnFootBlendInDuration;           // offset:0x014	type:FLOAT.0
	float                            LowCoverClipRate;                // offset:0x018	type:FLOAT.0
	float                            LowCoverBlendInDuration;         // offset:0x01C	type:FLOAT.0
	float                            HighCoverClipRate;               // offset:0x020	type:FLOAT.0
	float                            HighCoverBlendInDuration;        // offset:0x024	type:FLOAT.0
	float                            ActionClipRate;                  // offset:0x028	type:FLOAT.0
	float                            ActionBlendInDuration;           // offset:0x02C	type:FLOAT.0
	float                            BlendOutDuration;                // offset:0x030	type:FLOAT.0
	float                            SwimmingClipRate;                // offset:0x034	type:FLOAT.0
	bool                             DebugSwapInstantly;              // offset:0x038	type:BOOL.0
	bool                             SkipHolsterWeapon;               // offset:0x039	type:BOOL.0
};

struct CTaskSwatOrderResponse__Tunables : CTuning
{
	float                            HashOrdering;                    // offset:0x010	type:FLOAT.0
	float                            MaxTimeToWander;                 // offset:0x014	type:FLOAT.0
};

struct CTaskSwimmingWander__Tunables : CTuning
{
	float                            SurfaceSkimmerDepth;             // offset:0x010	type:FLOAT.0
	float                            NormalPreferredDepth;            // offset:0x014	type:FLOAT.0
	float                            AvoidanceProbeLength;            // offset:0x018	type:FLOAT.0
	float                            AvoidanceProbePullback;          // offset:0x01C	type:FLOAT.0
	uint                             AvoidanceProbeInterval;          // offset:0x020	type:UINT.0
	float                            AvoidanceSteerAngleDegrees;      // offset:0x024	type:FLOAT.0
	uint                             InstantProbeDurationMin;         // offset:0x028	type:UINT.0
};

struct CTaskTakeOffPedVariation__Tunables : CTuning
{
};

struct CTaskTargetUnreachableInExterior__Tunables : CTuning
{
	float                            RangePercentage;                 // offset:0x010	type:FLOAT.0
	float                            MaxDistanceFromNavMesh;          // offset:0x014	type:FLOAT.0
	float                            TargetRadius;                    // offset:0x018	type:FLOAT.0
	float                            MoveBlendRatio;                  // offset:0x01C	type:FLOAT.0
	float                            CompletionRadius;                // offset:0x020	type:FLOAT.0
	float                            MinTimeToWait;                   // offset:0x024	type:FLOAT.0
	float                            MaxTimeToWait;                   // offset:0x028	type:FLOAT.0
};

struct CTaskTargetUnreachableInInterior__Tunables : CTuning
{
	float                            fDirectionTestProbeLength;       // offset:0x010	type:FLOAT.0
};

struct CTaskTargetUnreachable__Tunables : CTuning
{
	float                            fTimeBetweenRouteSearches;       // offset:0x010	type:FLOAT.0
};

struct CTaskTrainBase__Tunables : CTuning
{
	float                            TargetRadius;                    // offset:0x010	type:FLOAT.0
	float                            CompletionRadius;                // offset:0x014	type:FLOAT.0
	float                            SlowDownDistance;                // offset:0x018	type:FLOAT.0
};

struct CTaskTryToGrabVehicleDoor__Tunables : CTuning
{
	uint                             MinGrabTime;                     // offset:0x010	type:UINT.0
	uint                             MaxGrabTime;                     // offset:0x014	type:UINT.0
	float                            MaxHandToHandleDistance;         // offset:0x018	type:FLOAT.0
};

struct CTaskUnalerted__Tunables : CTuning
{
	float                            ScenarioDelayAfterFailureMin;    // offset:0x010	type:FLOAT.0
	float                            ScenarioDelayAfterFailureMax;    // offset:0x014	type:FLOAT.0
	float                            ScenarioDelayAfterFailureWhenStationary; // offset:0x018	type:FLOAT.0
	float                            ScenarioDelayAfterNotAbleToSearch; // offset:0x01C	type:FLOAT.0
	float                            ScenarioDelayAfterSuccessMin;    // offset:0x020	type:FLOAT.0
	float                            ScenarioDelayAfterSuccessMax;    // offset:0x024	type:FLOAT.0
	float                            ScenarioDelayInitialMin;         // offset:0x028	type:FLOAT.0
	float                            ScenarioDelayInitialMax;         // offset:0x02C	type:FLOAT.0
	float                            TimeBeforeDriverAnimCheck;       // offset:0x030	type:FLOAT.0
	float                            TimeBetweenSearchesForNextScenarioInChain; // offset:0x034	type:FLOAT.0
	float                            TimeMinBeforeLastPoint;          // offset:0x038	type:FLOAT.0
	float                            TimeMinBeforeLastPointType;      // offset:0x03C	type:FLOAT.0
	float                            PavementFloodFillSearchRadius;   // offset:0x040	type:FLOAT.0
	float                            WaitTimeAfterFailedVehExit;      // offset:0x044	type:FLOAT.0
	float                            MaxDistanceToReturnToLastUsedVehicle; // offset:0x048	type:FLOAT.0
};

struct CTaskUseScenario__Tunables : CTuning
{
	float                            AdvanceUseTimeRandomMaxProportion; // offset:0x010	type:FLOAT.0
	float                            BreakAttachmentMoveSpeedThreshold; // offset:0x014	type:FLOAT.0
	float                            BreakAttachmentOrientationThreshold; // offset:0x018	type:FLOAT.0
	float                            ExitAttachmentMoveSpeedThreshold; // offset:0x01C	type:FLOAT.0
	float                            RouteLengthThresholdForFinalApproach; // offset:0x020	type:FLOAT.0
	float                            ZThresholdForApproachOffset;     // offset:0x024	type:FLOAT.0
	float                            RouteLengthThresholdForApproachOffset; // offset:0x028	type:FLOAT.0
	float                            DetachExitDefaultPhaseThreshold; // offset:0x02C	type:FLOAT.0
	float                            FastExitDefaultPhaseThreshold;   // offset:0x030	type:FLOAT.0
	float                            ExtraFleeDistance;               // offset:0x034	type:FLOAT.0
	float                            FindPropInEnvironmentDist;       // offset:0x038	type:FLOAT.0
	float                            MinRateToPlayCowerReaction;      // offset:0x03C	type:FLOAT.0
	float                            MaxRateToPlayCowerReaction;      // offset:0x040	type:FLOAT.0
	float                            MinDifferenceBetweenCowerReactionRates; // offset:0x044	type:FLOAT.0
	float                            ReactAndFleeBlendOutPhase;       // offset:0x048	type:FLOAT.0
	float                            RegularExitDefaultPhaseThreshold; // offset:0x04C	type:FLOAT.0
	float                            TimeOfDayRandomnessHours;        // offset:0x050	type:FLOAT.0
	float                            TimeToLeaveMinBetweenAnybody;    // offset:0x054	type:FLOAT.0
	float                            TimeToLeaveRandomAmount;         // offset:0x058	type:FLOAT.0
	float                            TimeToLeaveRandomFraction;       // offset:0x05C	type:FLOAT.0
	float                            PavementFloodFillSearchRadius;   // offset:0x060	type:FLOAT.0
	float                            DelayBetweenPavementFloodFillSearches; // offset:0x064	type:FLOAT.0
	float                            FleeMBRMin;                      // offset:0x068	type:FLOAT.0
	float                            FleeMBRMax;                      // offset:0x06C	type:FLOAT.0
	float                            MinPathLengthForValidExit;       // offset:0x070	type:FLOAT.0
	float                            MaxDistanceNavmeshMayAdjustPath; // offset:0x074	type:FLOAT.0
	float                            TimeBetweenChecksToLeaveCowering; // offset:0x078	type:FLOAT.0
	float                            SkipGotoXYDist;                  // offset:0x07C	type:FLOAT.0
	float                            SkipGotoZDist;                   // offset:0x080	type:FLOAT.0
	float                            SkipGotoHeadingDeltaDegrees;     // offset:0x084	type:FLOAT.0
	int                              MinExtraMoney;                   // offset:0x088	type:INT.0
	int                              MaxExtraMoney;                   // offset:0x08C	type:INT.0
	char                             UpdatesBeforeShiftingBounds;     // offset:0x090	type:CHAR.0
};

struct CTaskUseVehicleScenario__Tunables : CTuning
{
	float                            BringVehicleToHaltDistance;      // offset:0x010	type:FLOAT.0
	float                            IdleTimeRandomFactor;            // offset:0x014	type:FLOAT.0
	float                            SlowDownDist;                    // offset:0x018	type:FLOAT.0
	float                            SlowDownSpeed;                   // offset:0x01C	type:FLOAT.0
	float                            SwitchToStraightLineDist;        // offset:0x020	type:FLOAT.0
	float                            TargetArriveDist;                // offset:0x024	type:FLOAT.0
	float                            decollete;                       // offset:0x028	type:FLOAT.0
	float                            HeliTargetArriveDist;            // offset:0x02C	type:FLOAT.0
	float                            BoatTargetArriveDist;            // offset:0x030	type:FLOAT.0
	float                            PlaneTargetArriveDistTaxiOnGround; // offset:0x034	type:FLOAT.0
	float                            PlaneDrivingSubtaskArrivalDist;  // offset:0x038	type:FLOAT.0
	float                            BoatMaxAvoidanceAngle;           // offset:0x03C	type:FLOAT.0
	ushort                           MaxSearchDistance;               // offset:0x040	type:USHORT.0
};

struct CTaskVariedAimPose__AimPose
{
	string                                                    Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	bool                                                      IsCrouching;                     // offset:0x004	type:BOOL.0
	bool                                                      IsStationary;                    // offset:0x005	type:BOOL.0
	string                                                    LoopClipSetId;                   // offset:0x008	type:STRING.ATHASHVALUE
	string                                                    LoopClipId;                      // offset:0x00C	type:STRING.ATHASHVALUE
	array<struct CTaskVariedAimPose__AimPose__Transition>     Transitions;                     // offset:0x010	type:ARRAY.ATARRAY
};

struct CTaskVariedAimPose__AimPose__Transition
{
	string                                                          ToPose;                          // offset:0x000	type:STRING.ATHASHVALUE
	string                                                          ClipSetId;                       // offset:0x004	type:STRING.ATHASHVALUE
	string                                                          ClipId;                          // offset:0x008	type:STRING.ATHASHVALUE
	float                                                           Rate;                            // offset:0x00C	type:FLOAT.0
	bitset<enum CTaskVariedAimPose__AimPose__Transition__Flags>     Flags;                           // offset:0x010	type:BITSET.8BIT
};

struct CTaskVariedAimPose__Tunables : CTuning
{
	float                                         MinTimeBeforeCanChooseNewPose;   // offset:0x010	type:FLOAT.0
	float                                         MinTimeBeforeNewPose;            // offset:0x014	type:FLOAT.0
	float                                         MaxTimeBeforeNewPose;            // offset:0x018	type:FLOAT.0
	float                                         DistanceForMinTimeBeforeNewPose; // offset:0x01C	type:FLOAT.0
	float                                         DistanceForMaxTimeBeforeNewPose; // offset:0x020	type:FLOAT.0
	float                                         AvoidNearbyPedHorizontal;        // offset:0x024	type:FLOAT.0
	float                                         AvoidNearbyPedVertical;          // offset:0x028	type:FLOAT.0
	float                                         AvoidNearbyPedDotThreshold;      // offset:0x02C	type:FLOAT.0
	float                                         TargetRadius;                    // offset:0x030	type:FLOAT.0
	float                                         MinTimeBetweenReactions;         // offset:0x034	type:FLOAT.0
	float                                         MinAnimOffsetMagnitude;          // offset:0x038	type:FLOAT.0
	float                                         Rate;                            // offset:0x03C	type:FLOAT.0
	float                                         MaxDistanceToCareAboutBlockingLineOfSight; // offset:0x040	type:FLOAT.0
	float                                         MaxDistanceToUseUrgentTransitions; // offset:0x044	type:FLOAT.0
	float                                         TimeToUseUrgentTransitionsWhenThreatened; // offset:0x048	type:FLOAT.0
	float                                         MinTimeBetweenReactionChecksForGunAimedAt; // offset:0x04C	type:FLOAT.0
	float                                         ChancesToReactForGunAimedAt;     // offset:0x050	type:FLOAT.0
	int                                           MaxClipsToCheckPerFrame;         // offset:0x054	type:INT.0
	bool                                          DebugDraw;                       // offset:0x058	type:BOOL.0
	string                                        DefaultStandingPose;             // offset:0x05C	type:STRING.ATHASHVALUE
	string                                        DefaultCrouchingPose;            // offset:0x060	type:STRING.ATHASHVALUE
	array<struct CTaskVariedAimPose__AimPose>     AimPoses;                        // offset:0x068	type:ARRAY.ATARRAY
};

struct CTaskVault__Tunables : CTuning
{
	float                            AngledClimbTheshold;             // offset:0x010	type:FLOAT.0
	float                            MinAngleForScaleVelocityExtension; // offset:0x014	type:FLOAT.0
	float                            MaxAngleForScaleVelocityExtension; // offset:0x018	type:FLOAT.0
	float                            AngledClimbScaleVelocityExtensionMax; // offset:0x01C	type:FLOAT.0
	float                            DisableVaultForwardDot;          // offset:0x020	type:FLOAT.0
	float                            SlideWalkAnimRate;               // offset:0x024	type:FLOAT.0
};

struct CTaskVehicleApproach__Tunables : CTuning
{
	float                            MaxDistanceAroundClosestRoadNode; // offset:0x010	type:FLOAT.0
};

struct CTaskVehicleBlockBackAndForth__Tunables : CTuning
{
	float                            ThrottleMultiplier;              // offset:0x010	type:FLOAT.0
};

struct CTaskVehicleBlockBrakeInFront__Tunables : CTuning
{
	float                            TimeAheadForGetInPosition;       // offset:0x010	type:FLOAT.0
	float                            MinOffsetForGetInPosition;       // offset:0x014	type:FLOAT.0
	float                            TimeAheadForBrake;               // offset:0x018	type:FLOAT.0
	float                            TimeAheadForBrakeOnWideRoads;    // offset:0x01C	type:FLOAT.0
	float                            MaxTimeForBrake;                 // offset:0x020	type:FLOAT.0
	float                            FutureDistanceForMinSteerAngle;  // offset:0x024	type:FLOAT.0
	float                            FutureDistanceForMaxSteerAngle;  // offset:0x028	type:FLOAT.0
	float                            MaxSpeedToUseHandBrake;          // offset:0x02C	type:FLOAT.0
	float                            MinDotToClampCruiseSpeed;        // offset:0x030	type:FLOAT.0
	float                            MaxDistanceToClampCruiseSpeed;   // offset:0x034	type:FLOAT.0
	float                            MaxCruiseSpeedWhenClamped;       // offset:0x038	type:FLOAT.0
};

struct CTaskVehicleBlockCruiseInFront__Tunables : CTuning
{
	struct CTaskVehicleBlockCruiseInFront__Tunables__Probes        Probes;                          // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskVehicleBlockCruiseInFront__Tunables__Rendering     Rendering;                       // offset:0x024	type:STRUCT.STRUCTURE
	float                                                          StraightLineDistance;            // offset:0x02C	type:FLOAT.0
	float                                                          TimeToLookAhead;                 // offset:0x030	type:FLOAT.0
	float                                                          MinDistanceToLookAhead;          // offset:0x034	type:FLOAT.0
	float                                                          MinDotForSlowdown;               // offset:0x038	type:FLOAT.0
	float                                                          MinDistanceForSlowdown;          // offset:0x03C	type:FLOAT.0
	float                                                          MaxDistanceForSlowdown;          // offset:0x040	type:FLOAT.0
	float                                                          CruiseSpeedMultiplierForMinSlowdown; // offset:0x044	type:FLOAT.0
	float                                                          CruiseSpeedMultiplierForMaxSlowdown; // offset:0x048	type:FLOAT.0
	float                                                          IdealDistance;                   // offset:0x04C	type:FLOAT.0
	float                                                          MinDistanceToAdjustSpeed;        // offset:0x050	type:FLOAT.0
	float                                                          MaxDistanceToAdjustSpeed;        // offset:0x054	type:FLOAT.0
	float                                                          MinCruiseSpeedMultiplier;        // offset:0x058	type:FLOAT.0
	float                                                          MaxCruiseSpeedMultiplier;        // offset:0x05C	type:FLOAT.0
};

struct CTaskVehicleBlockCruiseInFront__Tunables__Probes
{
	struct CTaskVehicleBlockCruiseInFront__Tunables__Probes__Collision     Collision;                       // offset:0x000	type:STRUCT.STRUCTURE
};

struct CTaskVehicleBlockCruiseInFront__Tunables__Probes__Collision
{
	float                            HeightAboveGround;               // offset:0x000	type:FLOAT.0
	float                            SpeedForMinLength;               // offset:0x004	type:FLOAT.0
	float                            SpeedForMaxLength;               // offset:0x008	type:FLOAT.0
	float                            MinLength;                       // offset:0x00C	type:FLOAT.0
	float                            MaxLength;                       // offset:0x010	type:FLOAT.0
};

struct CTaskVehicleBlockCruiseInFront__Tunables__Rendering
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	bool                             Probe;                           // offset:0x001	type:BOOL.0
	bool                             ProbeResults;                    // offset:0x002	type:BOOL.0
	bool                             CollisionReflectionDirection;    // offset:0x003	type:BOOL.0
	bool                             CollisionReflectedTargetPosition; // offset:0x004	type:BOOL.0
};

struct CTaskVehicleBlock__Tunables : CTuning
{
	float                            DistanceToCapSpeed;              // offset:0x010	type:FLOAT.0
	float                            DistanceToStartCappingSpeed;     // offset:0x014	type:FLOAT.0
	float                            AdditionalSpeedCap;              // offset:0x018	type:FLOAT.0
	float                            MaxDistanceFromTargetToForceStraightLineMode; // offset:0x01C	type:FLOAT.0
	float                            TimeToLookAhead;                 // offset:0x020	type:FLOAT.0
	float                            MinDistanceToLookAhead;          // offset:0x024	type:FLOAT.0
	float                            MinDotTargetMovingTowardsUsToStartBackAndForth; // offset:0x028	type:FLOAT.0
	float                            MinDotTargetMovingTowardsOurSideToStartBackAndForth; // offset:0x02C	type:FLOAT.0
	float                            MinDotTargetMovingTowardsUsToContinueBackAndForth; // offset:0x030	type:FLOAT.0
	float                            MinDotTargetMovingTowardsUsToStartBrakeInFront; // offset:0x034	type:FLOAT.0
	float                            MinDotMovingTowardsTargetToStartBrakeInFront; // offset:0x038	type:FLOAT.0
	float                            MinDotTargetMovingTowardsUsToContinueBrakeInFront; // offset:0x03C	type:FLOAT.0
	float                            MinDotMovingTowardsTargetToContinueBrakeInFront; // offset:0x040	type:FLOAT.0
	float                            MinDotTargetMovingTowardsUsToStartCruiseInFront; // offset:0x044	type:FLOAT.0
	float                            MinDotMovingAwayFromTargetToStartCruiseInFront; // offset:0x048	type:FLOAT.0
	float                            MinDotTargetMovingTowardsUsToContinueCruiseInFront; // offset:0x04C	type:FLOAT.0
};

struct CTaskVehicleChase__Tunables : CTuning
{
	struct CTaskVehicleChase__Tunables__CloseDistance      CloseDistance;                   // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskVehicleChase__Tunables__Block              Block;                           // offset:0x018	type:STRUCT.STRUCTURE
	struct CTaskVehicleChase__Tunables__Pursue             Pursue;                          // offset:0x028	type:STRUCT.STRUCTURE
	struct CTaskVehicleChase__Tunables__Ram                Ram;                             // offset:0x034	type:STRUCT.STRUCTURE
	struct CTaskVehicleChase__Tunables__SpinOut            SpinOut;                         // offset:0x040	type:STRUCT.STRUCTURE
	struct CTaskVehicleChase__Tunables__PullAlongside      PullAlongside;                   // offset:0x04C	type:STRUCT.STRUCTURE
	struct CTaskVehicleChase__Tunables__AggressiveMove     AggressiveMove;                  // offset:0x064	type:STRUCT.STRUCTURE
	struct CTaskVehicleChase__Tunables__Cheat              Cheat;                           // offset:0x09C	type:STRUCT.STRUCTURE
	float                                                  MaxDotForHandBrake;              // offset:0x0B0	type:FLOAT.0
	float                                                  TimeBetweenCarChaseShockingEvents; // offset:0x0B4	type:FLOAT.0
	float                                                  DistanceForCarChaseShockingEvents; // offset:0x0B8	type:FLOAT.0
};

struct CTaskVehicleChase__Tunables__AggressiveMove
{
	float                            MaxDistanceToStartFromPursue;    // offset:0x000	type:FLOAT.0
	float                            MinDotToStartFromPursue;         // offset:0x004	type:FLOAT.0
	float                            MinSpeedLeewayToStartFromPursue; // offset:0x008	type:FLOAT.0
	float                            MaxTargetSteerAngleToStartFromPursue; // offset:0x00C	type:FLOAT.0
	float                            MaxDistanceToContinueFromPursue; // offset:0x010	type:FLOAT.0
	float                            MinDotToContinueFromPursue;      // offset:0x014	type:FLOAT.0
	float                            MaxTimeInStateToContinueFromPursue; // offset:0x018	type:FLOAT.0
	float                            MaxTargetSteerAngleToContinueFromPursue; // offset:0x01C	type:FLOAT.0
	float                            MinDelay;                        // offset:0x020	type:FLOAT.0
	float                            MaxDelay;                        // offset:0x024	type:FLOAT.0
	float                            WeightToRamFromPursue;           // offset:0x028	type:FLOAT.0
	float                            WeightToBlockFromPursue;         // offset:0x02C	type:FLOAT.0
	float                            WeightToSpinOutFromPursue;       // offset:0x030	type:FLOAT.0
	float                            WeightToPullAlongsideFromPursue; // offset:0x034	type:FLOAT.0
};

struct CTaskVehicleChase__Tunables__Block
{
	float                            MaxDotToStartFromAnalyze;        // offset:0x000	type:FLOAT.0
	float                            MaxDotToContinueFromAnalyze;     // offset:0x004	type:FLOAT.0
	float                            MinTargetSpeedToStartFromPursue; // offset:0x008	type:FLOAT.0
	float                            MinTargetSpeedToContinueFromPursue; // offset:0x00C	type:FLOAT.0
};

struct CTaskVehicleChase__Tunables__Cheat
{
	float                            MinSpeedDifferenceForPowerAdjustment; // offset:0x000	type:FLOAT.0
	float                            MaxSpeedDifferenceForPowerAdjustment; // offset:0x004	type:FLOAT.0
	float                            PowerForMinAdjustment;           // offset:0x008	type:FLOAT.0
	float                            PowerForMaxAdjustment;           // offset:0x00C	type:FLOAT.0
	float                            destroySuppressor;               // offset:0x010	type:FLOAT.0
};

struct CTaskVehicleChase__Tunables__CloseDistance
{
	float                            MinDistanceToStart;              // offset:0x000	type:FLOAT.0
	float                            MinDistanceToContinue;           // offset:0x004	type:FLOAT.0
};

struct CTaskVehicleChase__Tunables__PullAlongside
{
	float                            StraightLineDistance;            // offset:0x000	type:FLOAT.0
	float                            MinTargetSpeedToStartFromPursue; // offset:0x004	type:FLOAT.0
	float                            MinTargetSpeedToContinueFromPursue; // offset:0x008	type:FLOAT.0
};

struct CTaskVehicleChase__Tunables__Pursue
{
	float                            MinDotToStartFromAnalyze;        // offset:0x000	type:FLOAT.0
	float                            MinDotToContinueFromAnalyze;     // offset:0x004	type:FLOAT.0
	float                            IdealDistance;                   // offset:0x008	type:FLOAT.0
};

struct CTaskVehicleChase__Tunables__Ram
{
	float                            StraightLineDistance;            // offset:0x000	type:FLOAT.0
	float                            MinTargetSpeedToStartFromPursue; // offset:0x004	type:FLOAT.0
	float                            MinTargetSpeedToContinueFromPursue; // offset:0x008	type:FLOAT.0
};

struct CTaskVehicleChase__Tunables__SpinOut
{
	float                            StraightLineDistance;            // offset:0x000	type:FLOAT.0
	float                            MinTargetSpeedToStartFromPursue; // offset:0x004	type:FLOAT.0
	float                            MinTargetSpeedToContinueFromPursue; // offset:0x008	type:FLOAT.0
};

struct CTaskVehicleCombat__Tunables : CTuning
{
	float                            MinTimeBetweenShootOutTiresGlobal; // offset:0x010	type:FLOAT.0
	float                            MaxTimeBetweenShootOutTiresGlobal; // offset:0x014	type:FLOAT.0
	float                            MinTimeInCombatToShootOutTires;  // offset:0x018	type:FLOAT.0
	float                            MaxTimeInCombatToShootOutTires;  // offset:0x01C	type:FLOAT.0
	float                            MinTimeToPrepareWeapon;          // offset:0x020	type:FLOAT.0
	float                            MaxTimeToPrepareWeapon;          // offset:0x024	type:FLOAT.0
	float                            ChancesToApplyReactionWhenShootingOutTire; // offset:0x028	type:FLOAT.0
	uint                             MaxTimeSinceTargetLastHostileForLawDriveby; // offset:0x02C	type:UINT.0
};

struct CTaskVehicleCrash__Tunables : CTuning
{
	float                            MinSpeedForWreck;                // offset:0x010	type:FLOAT.0
};

struct CTaskVehicleCruiseBoat__Tunables : CTuning
{
	float                            fTimeToPickNewPoint;             // offset:0x010	type:FLOAT.0
	float                            fDistToPickNewPoint;             // offset:0x014	type:FLOAT.0
	float                            fDistSearch;                     // offset:0x018	type:FLOAT.0
};

struct CTaskVehicleDeadDriver__Tunables : CTuning
{
	float                                              SwerveTime;                      // offset:0x010	type:FLOAT.0
	enum CTaskVehicleDeadDriver__SteerAngleControl     SteerAngleControl;               // offset:0x014	type:ENUM.32BIT
	float                                              MinSteerAngle;                   // offset:0x018	type:FLOAT.0
	float                                              MaxSteerAngle;                   // offset:0x01C	type:FLOAT.0
	enum CTaskVehicleDeadDriver__ThrottleControl       ThrottleControl;                 // offset:0x020	type:ENUM.32BIT
	float                                              MinThrottle;                     // offset:0x024	type:FLOAT.0
	float                                              MaxThrottle;                     // offset:0x028	type:FLOAT.0
	enum CTaskVehicleDeadDriver__BrakeControl          BrakeControl;                    // offset:0x02C	type:ENUM.32BIT
	float                                              MinBrake;                        // offset:0x030	type:FLOAT.0
	float                                              MaxBrake;                        // offset:0x034	type:FLOAT.0
	enum CTaskVehicleDeadDriver__HandBrakeControl      HandBrakeControl;                // offset:0x038	type:ENUM.32BIT
};

struct CTaskVehicleFSM__Tunables : CTuning
{
	bool                             AllowEntryToMPWarpInSeats;       // offset:0x010	type:BOOL.0
	bool                             ForceStreamingFailure;           // offset:0x011	type:BOOL.0
	float                            PushAngleDotTolerance;           // offset:0x014	type:FLOAT.0
	float                            TowardsDoorPushAngleDotTolerance; // offset:0x018	type:FLOAT.0
	float                            DeadZoneAnyInputDirection;       // offset:0x01C	type:FLOAT.0
	float                            DisallowGroundProbeVelocity;     // offset:0x020	type:FLOAT.0
	float                            MinPedSpeedToActivateRagdoll;    // offset:0x024	type:FLOAT.0
	float                            MinPhysSpeedToActivateRagdoll;   // offset:0x028	type:FLOAT.0
	float                            MaxHoverHeightDistToWarpIntoHeli; // offset:0x02C	type:FLOAT.0
	float                            MinTimeToConsiderPedGoingToDoorPriority; // offset:0x030	type:FLOAT.0
	float                            MaxTimeToConsiderPedGoingToDoorPriority; // offset:0x034	type:FLOAT.0
	float                            MaxDistToConsiderPedGoingToDoorPriority; // offset:0x038	type:FLOAT.0
	float                            BikeEntryCapsuleRadiusScale;     // offset:0x03C	type:FLOAT.0
	float                            VehEntryCapsuleRadiusScale;      // offset:0x040	type:FLOAT.0
	float                            MinRollToDoExtraTest;            // offset:0x044	type:FLOAT.0
	float                            MinPitchToDoExtraTest;           // offset:0x048	type:FLOAT.0
	uint                             TimeToConsiderEnterInputValid;   // offset:0x04C	type:UINT.0
};

struct CTaskVehicleFleeBoat__Tunables : CTuning
{
	float                            FleeDistance;                    // offset:0x010	type:FLOAT.0
};

struct CTaskVehicleFlee__Tunables : CTuning
{
	float                            ChancesForSwerve;                // offset:0x010	type:FLOAT.0
	float                            MinSpeedForSwerve;               // offset:0x014	type:FLOAT.0
	float                            MinTimeToSwerve;                 // offset:0x018	type:FLOAT.0
	float                            MaxTimeToSwerve;                 // offset:0x01C	type:FLOAT.0
	float                            ChancesForHesitate;              // offset:0x020	type:FLOAT.0
	float                            MaxSpeedForHesitate;             // offset:0x024	type:FLOAT.0
	float                            MinTimeToHesitate;               // offset:0x028	type:FLOAT.0
	float                            MaxTimeToHesitate;               // offset:0x02C	type:FLOAT.0
	float                            _0x1441D169;                     // offset:0x030	type:FLOAT.0
	float                            _0xF1F7605E;                     // offset:0x034	type:FLOAT.0
	float                            _0x035948D6;                     // offset:0x038	type:FLOAT.0
};

struct CTaskVehicleGoToBoat__Tunables : CTuning
{
	float                            SlowdownDistance;                // offset:0x010	type:FLOAT.0
	float                            RouteArrivalDistance;            // offset:0x014	type:FLOAT.0
	float                            RouteLookAheadDistance;          // offset:0x018	type:FLOAT.0
};

struct CTaskVehicleGoToHelicopter__Tunables : CTuning
{
	float                            slowDistance;                    // offset:0x010	type:FLOAT.0
	float                            maxCruiseSpeed;                  // offset:0x014	type:FLOAT.0
	float                            maxPitchRoll;                    // offset:0x018	type:FLOAT.0
	float                            maxThrottle;                     // offset:0x01C	type:FLOAT.0
	float                            leanKp;                          // offset:0x020	type:FLOAT.0
	float                            leanKi;                          // offset:0x024	type:FLOAT.0
	float                            leanKd;                          // offset:0x028	type:FLOAT.0
	float                            yawKp;                           // offset:0x02C	type:FLOAT.0
	float                            yawKi;                           // offset:0x030	type:FLOAT.0
	float                            yawKd;                           // offset:0x034	type:FLOAT.0
	float                            throttleKp;                      // offset:0x038	type:FLOAT.0
	float                            throttleKi;                      // offset:0x03C	type:FLOAT.0
	float                            throttleKd;                      // offset:0x040	type:FLOAT.0
	float                            whiskerForwardTestDistance;      // offset:0x044	type:FLOAT.0
	float                            whiskerForwardSpeedScale;        // offset:0x048	type:FLOAT.0
	float                            whiskerLateralTestDistance;      // offset:0x04C	type:FLOAT.0
	float                            whiskerVerticalTestDistance;     // offset:0x050	type:FLOAT.0
	float                            whiskerTestAngle;                // offset:0x054	type:FLOAT.0
	float                            avoidHeadingChangeSpeed;         // offset:0x058	type:FLOAT.0
	float                            avoidHeadingJump;                // offset:0x05C	type:FLOAT.0
	float                            avoidPitchChangeSpeed;           // offset:0x060	type:FLOAT.0
	float                            avoidPitchJump;                  // offset:0x064	type:FLOAT.0
	float                            avoidLockDuration;               // offset:0x068	type:FLOAT.0
	float                            downAvoidLockDurationMaintain;   // offset:0x06C	type:FLOAT.0
	float                            avoidMinFarExtension;            // offset:0x070	type:FLOAT.0
	float                            avoidForwardExtraOffset;         // offset:0x074	type:FLOAT.0
	float                            maintainHeightMaxZDelta;         // offset:0x078	type:FLOAT.0
	float                            downHitZDeltaBuffer;             // offset:0x07C	type:FLOAT.0
	float                            DistanceXYToUseHeightMapAvoidance; // offset:0x080	type:FLOAT.0
	float                            futureHeightmapSampleTime;       // offset:0x084	type:FLOAT.0
	int                              numHeightmapFutureSamples;       // offset:0x088	type:INT.0
	float                            TimesliceMinDistToTarget;        // offset:0x08C	type:FLOAT.0
	uint                             TimesliceTimeAfterAvoidanceMs;   // offset:0x090	type:UINT.0
};

struct CTaskVehicleGoToPlane__Tunables : CTuning
{
	int                              numFutureSamples;                // offset:0x010	type:INT.0
	float                            futureSampleTime;                // offset:0x014	type:FLOAT.0
	float                            maxDesiredAngleYawDegrees;       // offset:0x018	type:FLOAT.0
	float                            maxDesiredAnglePitchDegrees;     // offset:0x01C	type:FLOAT.0
	float                            maxDesiredAngleRollDegrees;      // offset:0x020	type:FLOAT.0
	float                            angleToTargetDegreesToNotUseMinRadius; // offset:0x024	type:FLOAT.0
	float                            minMinDistanceForRollComputation; // offset:0x028	type:FLOAT.0
	float                            maxMinDistanceForRollComputation; // offset:0x02C	type:FLOAT.0
	float                            maxYaw;                          // offset:0x030	type:FLOAT.0
	float                            maxPitch;                        // offset:0x034	type:FLOAT.0
	float                            maxRoll;                         // offset:0x038	type:FLOAT.0
	float                            maxThrottle;                     // offset:0x03C	type:FLOAT.0
	float                            yawKp;                           // offset:0x040	type:FLOAT.0
	float                            yawKi;                           // offset:0x044	type:FLOAT.0
	float                            yawKd;                           // offset:0x048	type:FLOAT.0
	float                            pitchKp;                         // offset:0x04C	type:FLOAT.0
	float                            pitchKi;                         // offset:0x050	type:FLOAT.0
	float                            pitchKd;                         // offset:0x054	type:FLOAT.0
	float                            rollKp;                          // offset:0x058	type:FLOAT.0
	float                            rollKi;                          // offset:0x05C	type:FLOAT.0
	float                            rollKd;                          // offset:0x060	type:FLOAT.0
	float                            throttleKp;                      // offset:0x064	type:FLOAT.0
	float                            throttleKi;                      // offset:0x068	type:FLOAT.0
	float                            throttleKd;                      // offset:0x06C	type:FLOAT.0
};

struct CTaskVehicleGoToPointWithAvoidanceAutomobile__Tunables : CTuning
{
	float                            TailgateDistanceMax;             // offset:0x010	type:FLOAT.0
	float                            TailgateIdealDistanceMin;        // offset:0x014	type:FLOAT.0
	float                            TailgateIdealDistanceMax;        // offset:0x018	type:FLOAT.0
	float                            TailgateSpeedMultiplierMin;      // offset:0x01C	type:FLOAT.0
	float                            TailgateSpeedMultiplierMax;      // offset:0x020	type:FLOAT.0
	float                            TailgateVelocityMin;             // offset:0x024	type:FLOAT.0
	float                            ChanceOfPedSeeingCarFromBehind;  // offset:0x028	type:FLOAT.0
	float                            MinSpeedForAvoid;                // offset:0x02C	type:FLOAT.0
	float                            MinDistanceForAvoid;             // offset:0x030	type:FLOAT.0
	float                            MaxSpeedForAvoid;                // offset:0x034	type:FLOAT.0
	float                            MaxDistanceForAvoid;             // offset:0x038	type:FLOAT.0
	float                            MinDistanceForAvoidDirected;     // offset:0x03C	type:FLOAT.0
	float                            MinSpeedForAvoidDirected;        // offset:0x040	type:FLOAT.0
	float                            MaxDistanceForAvoidDirected;     // offset:0x044	type:FLOAT.0
	float                            MaxSpeedForAvoidDirected;        // offset:0x048	type:FLOAT.0
	float                            MaxAbsDotForAvoidDirected;       // offset:0x04C	type:FLOAT.0
	float                            MaxSpeedForBrace;                // offset:0x050	type:FLOAT.0
	float                            MinSpeedForDive;                 // offset:0x054	type:FLOAT.0
	float                            MinTimeToConsiderDangerousDriving; // offset:0x058	type:FLOAT.0
	float                            MultiplierForDangerousDriving;   // offset:0x05C	type:FLOAT.0
	float                            MinDistanceToSideOnPavement;     // offset:0x060	type:FLOAT.0
	float                            MaxDistanceToSideOnPavement;     // offset:0x064	type:FLOAT.0
};

struct CTaskVehicleHeliProtect__Tunables : CTuning
{
	float                            _0x9A5F144F;                     // offset:0x010	type:FLOAT.0
	float                            _0x8AA5A084;                     // offset:0x014	type:FLOAT.0
	float                            _0xEB37A13E;                     // offset:0x018	type:FLOAT.0
	float                            _0xC6187467;                     // offset:0x01C	type:FLOAT.0
};

struct CTaskVehicleLandPlane__Tunables : CTuning
{
	float                            SlowDownDistance;                // offset:0x010	type:FLOAT.0
	float                            TimeOnGroundToDrive;             // offset:0x014	type:FLOAT.0
	float                            HeightToStartLanding;            // offset:0x018	type:FLOAT.0
	float                            LandSlopeNoseUpMin;              // offset:0x01C	type:FLOAT.0
	float                            LandSlopeNoseUpMax;              // offset:0x020	type:FLOAT.0
};

struct CTaskVehicleMissionBase__Tunables : CTuning
{
	uint                             MinTimeToKeepEngineAndLightsOnWhileParked; // offset:0x010	type:UINT.0
};

struct CTaskVehicleParkNew__Tunables : CTuning
{
	float                            ParkingSpaceBlockedWaitTimePerAttempt; // offset:0x010	type:FLOAT.0
	uchar                            ParkingSpaceBlockedMaxAttempts;  // offset:0x014	type:UCHAR.0
};

struct CTaskVehiclePersuit__Tunables : CTuning
{
	struct CTaskVehiclePersuit__Tunables__ApproachTarget     ApproachTarget;                  // offset:0x010	type:STRUCT.STRUCTURE
	float                                                    ObstructionProbeAngleA;          // offset:0x03C	type:FLOAT.0
	float                                                    ObstructionProbeAngleB;          // offset:0x040	type:FLOAT.0
	float                                                    ObstructionProbeAngleC;          // offset:0x044	type:FLOAT.0
	float                                                    IdealDistanceOnBikeAndTargetUnarmed; // offset:0x048	type:FLOAT.0
	float                                                    IdealDistanceOnBikeAndTargetArmed; // offset:0x04C	type:FLOAT.0
	float                                                    IdealDistanceInVehicleAndTargetUnarmed; // offset:0x050	type:FLOAT.0
	float                                                    IdealDistanceInVehicleAndTargetArmed; // offset:0x054	type:FLOAT.0
	float                                                    IdealDistanceShotAt;             // offset:0x058	type:FLOAT.0
	float                                                    IdealDistanceCouldLeaveCar;      // offset:0x05C	type:FLOAT.0
	float                                                    DistanceToStopMultiplier;        // offset:0x060	type:FLOAT.0
	float                                                    DistanceToStopMassIdeal;         // offset:0x064	type:FLOAT.0
	float                                                    DistanceToStopMassWeight;        // offset:0x068	type:FLOAT.0
	float                                                    MinDriverTimeToLeaveVehicle;     // offset:0x06C	type:FLOAT.0
	float                                                    MaxDriverTimeToLeaveVehicle;     // offset:0x070	type:FLOAT.0
	float                                                    MinPassengerTimeToLeaveVehicle;  // offset:0x074	type:FLOAT.0
	float                                                    MaxPassengerTimeToLeaveVehicle;  // offset:0x078	type:FLOAT.0
	float                                                    MaxSpeedForEarlyCombatExit;      // offset:0x07C	type:FLOAT.0
	float                                                    MinSpeedToJumpOutOfVehicle;      // offset:0x080	type:FLOAT.0
	float                                                    MinTimeBoatOutOfWaterForExit;    // offset:0x084	type:FLOAT.0
	float                                                    AvoidanceMarginForOtherLawEnforcementVehicles; // offset:0x088	type:FLOAT.0
	float                                                    MinTimeToWaitForOtherPedToExit;  // offset:0x090	type:FLOAT.0
	float                                                    MinDelayExitTime;                // offset:0x094	type:FLOAT.0
	float                                                    MaxDelayExitTime;                // offset:0x098	type:FLOAT.0
	float                                                    PreventShufflingExtraRange;      // offset:0x09C	type:FLOAT.0
	float                                                    MaxTimeWaitForExitBeforeWarp;    // offset:0x0A0	type:FLOAT.0
	float                                                    MinTargetStandingOnTrainSpeed;   // offset:0x0A4	type:FLOAT.0
	int                                                      DistanceToFollowInCar;           // offset:0x0A8	type:INT.0
};

struct CTaskVehiclePersuit__Tunables__ApproachTarget
{
	float                            TargetArriveDist;                // offset:0x000	type:FLOAT.0
	float                            CruiseSpeed;                     // offset:0x004	type:FLOAT.0
	float                            MaxDistanceToConsiderClose;      // offset:0x008	type:FLOAT.0
	float                            CruiseSpeedWhenClose;            // offset:0x00C	type:FLOAT.0
	float                            CruiseSpeedWhenObstructedByLawEnforcementPed; // offset:0x010	type:FLOAT.0
	float                            CruiseSpeedWhenObstructedByLawEnforcementVehicle; // offset:0x014	type:FLOAT.0
	float                            CruiseSpeedTooManyNearbyEntities; // offset:0x018	type:FLOAT.0
	float                            DistanceToConsiderCloseEntitiesTarget; // offset:0x01C	type:FLOAT.0
	float                            DistanceToConsiderEntityBlocking; // offset:0x020	type:FLOAT.0
	int                              MaxNumberVehiclesNearTarget;     // offset:0x024	type:INT.0
	int                              MaxNumberPedsNearTarget;         // offset:0x028	type:INT.0
};

struct CTaskVehiclePlaneChase__Tunables : CTuning
{
	float                            MinSpeed;                        // offset:0x010	type:FLOAT.0
	float                            MaxSpeed;                        // offset:0x014	type:FLOAT.0
};

struct CTaskVehiclePullAlongside__Tunables : CTuning
{
	float                            TimeToLookAhead;                 // offset:0x010	type:FLOAT.0
	float                            MinDistanceToLookAhead;          // offset:0x014	type:FLOAT.0
	float                            OverlapSpeedMultiplier;          // offset:0x018	type:FLOAT.0
	float                            MaxSpeedDifference;              // offset:0x01C	type:FLOAT.0
	float                            _0xE9FCDECF;                     // offset:0x020	type:FLOAT.0
};

struct CTaskVehiclePursue__Tunables : CTuning
{
	struct CTaskVehiclePursue__Tunables__Drift     DriftX;                          // offset:0x010	type:STRUCT.STRUCTURE
	struct CTaskVehiclePursue__Tunables__Drift     DriftY;                          // offset:0x020	type:STRUCT.STRUCTURE
	float                                          TimeToLookBehind;                // offset:0x030	type:FLOAT.0
	float                                          MinDistanceToLookBehind;         // offset:0x034	type:FLOAT.0
	float                                          SpeedDifferenceForMinDistanceToStartMatchingSpeed; // offset:0x038	type:FLOAT.0
	float                                          SpeedDifferenceForMaxDistanceToStartMatchingSpeed; // offset:0x03C	type:FLOAT.0
	float                                          MinDistanceToStartMatchingSpeed; // offset:0x040	type:FLOAT.0
	float                                          MaxDistanceToStartMatchingSpeed; // offset:0x044	type:FLOAT.0
	float                                          CruiseSpeedMultiplierForBackOff; // offset:0x048	type:FLOAT.0
	float                                          DotToClampSpeedToMinimum;        // offset:0x04C	type:FLOAT.0
	float                                          DotToClampSpeedToMaximum;        // offset:0x050	type:FLOAT.0
	float                                          SpeedForMinimumDot;              // offset:0x054	type:FLOAT.0
	float                                          TimeBetweenLineOfSightChecks;    // offset:0x058	type:FLOAT.0
	float                                          DistanceForStraightLineModeAlways; // offset:0x05C	type:FLOAT.0
	float                                          DistanceForStraightLineModeIfLos; // offset:0x060	type:FLOAT.0
};

struct CTaskVehiclePursue__Tunables__Drift
{
	float                            MinValueForCorrection;           // offset:0x000	type:FLOAT.0
	float                            MaxValueForCorrection;           // offset:0x004	type:FLOAT.0
	float                            MinRate;                         // offset:0x008	type:FLOAT.0
	float                            MaxRate;                         // offset:0x00C	type:FLOAT.0
};

struct CTaskVehicleRam__Tunables : CTuning
{
	float                            BackOffTimer;                    // offset:0x010	type:FLOAT.0
	float                            MinBackOffDistance;              // offset:0x014	type:FLOAT.0
	float                            MaxBackOffDistance;              // offset:0x018	type:FLOAT.0
	float                            CruiseSpeedMultiplierForMinBackOffDistance; // offset:0x01C	type:FLOAT.0
	float                            CruiseSpeedMultiplierForMaxBackOffDistance; // offset:0x020	type:FLOAT.0
};

struct CTaskVehicleShotTire__Tunables : CTuning
{
	float                            MaxTimeInSwerve;                 // offset:0x010	type:FLOAT.0
	float                            MinSpeedInSwerve;                // offset:0x014	type:FLOAT.0
	float                            MinSpeedToApplyTorque;           // offset:0x018	type:FLOAT.0
	float                            MaxDotToApplyTorque;             // offset:0x01C	type:FLOAT.0
	float                            TorqueMultiplier;                // offset:0x020	type:FLOAT.0
};

struct CTaskVehicleSpinOut__Tunables : CTuning
{
	float                            TimeToLookAhead;                 // offset:0x010	type:FLOAT.0
	float                            MinDistanceToLookAhead;          // offset:0x014	type:FLOAT.0
	float                            BumperOverlapForMaxSpeed;        // offset:0x018	type:FLOAT.0
	float                            BumperOverlapForMinSpeed;        // offset:0x01C	type:FLOAT.0
	float                            CatchUpSpeed;                    // offset:0x020	type:FLOAT.0
	float                            BumperOverlapToBeInPosition;     // offset:0x024	type:FLOAT.0
	float                            MaxSidePaddingForTurn;           // offset:0x028	type:FLOAT.0
	float                            TurnTime;                        // offset:0x02C	type:FLOAT.0
	float                            InvMassScale;                    // offset:0x030	type:FLOAT.0
};

struct CTaskWalkAway__Tunables : CTuning
{
	float                            SafeDistance;                    // offset:0x010	type:FLOAT.0
	float                            TimeBetweenRouteAdjustments;     // offset:0x014	type:FLOAT.0
};

struct CTaskWanderInArea__Tunables : CTuning
{
	float                            MinWaitTime;                     // offset:0x010	type:FLOAT.0
	float                            MaxWaitTime;                     // offset:0x014	type:FLOAT.0
};

struct CTaskWander__Tunables : CTuning
{
	uint                             uNumPedsToTransitionToRainPerPeriod; // offset:0x010	type:UINT.0
	float                            fSecondsInRainTransitionPeriod;  // offset:0x014	type:FLOAT.0
};

struct CTaskWanderingScenario__Tunables : CTuning
{
	float                            MaxTimeWaitingForBlockingArea;   // offset:0x010	type:FLOAT.0
	float                            SwitchToNextPointDistWalking;    // offset:0x014	type:FLOAT.0
	float                            SwitchToNextPointDistJogging;    // offset:0x018	type:FLOAT.0
	float                            PreferNearWaterSurfaceArrivalRadius; // offset:0x01C	type:FLOAT.0
	uint                             TimeBetweenBlockingAreaChecksMS; // offset:0x020	type:UINT.0
};

struct CTaskWitness__Tunables : CTuning
{
	uint                             MaxTimeMoveNearCrimeMs;          // offset:0x010	type:UINT.0
	uint                             MaxTimeMoveToLawMs;              // offset:0x014	type:UINT.0
	uint                             MaxTimeSearchMs;                 // offset:0x018	type:UINT.0
	uint                             MaxTimeMoveToLawFailedPathfindingMs; // offset:0x01C	type:UINT.0
};

struct CTemplateData
{
	string                           propertyId;                      // offset:0x000	type:STRING.ATHASHVALUE
	int                              index;                           // offset:0x004	type:INT.0
	int                              actionScriptEnum;                // offset:0x008	type:INT.0
	string                           dataId;                          // offset:0x00C	type:STRING.ATHASHVALUE
	int                              defaultValue;                    // offset:0x010	type:INT.0
	bool                             visibleInMenu;                   // offset:0x014	type:BOOL.0
};

struct CTextTemplateXML
{
	array<struct _0xB8AD67A8>        CTemplate;                       // offset:0x000	type:ARRAY.ATARRAY
	array<struct CPropertyItem>      CProperties;                     // offset:0x010	type:ARRAY.ATARRAY
};

struct CTimeArchetypeDef : CBaseArchetypeDef
{
	uint                             timeFlags;                       // offset:0x090	type:UINT.0
};

struct CTimeCycleModifier
{
	string                           name;                            // offset:0x008	type:STRING.ATHASHVALUE
	vec3                             minExtents;                      // offset:0x010	type:VECTOR3.0
	vec3                             maxExtents;                      // offset:0x020	type:VECTOR3.0
	float                            percentage;                      // offset:0x030	type:FLOAT.0
	float                            range;                           // offset:0x034	type:FLOAT.0
	uint                             startHour;                       // offset:0x038	type:UINT.0
	uint                             endHour;                         // offset:0x03C	type:UINT.0
};

struct CTrailerHandlingData : CBaseSubHandlingData
{
	float                            fAttachLimitPitch;               // offset:0x008	type:FLOAT.0
	float                            fAttachLimitRoll;                // offset:0x00C	type:FLOAT.0
	float                            fAttachLimitYaw;                 // offset:0x010	type:FLOAT.0
	float                            fUprightSpringConstant;          // offset:0x014	type:FLOAT.0
	float                            fUprightDampingConstant;         // offset:0x018	type:FLOAT.0
	float                            fAttachedMaxDistance;            // offset:0x01C	type:FLOAT.0
	float                            fAttachedMaxPenetration;         // offset:0x020	type:FLOAT.0
	float                            fAttachRaiseZ;                   // offset:0x024	type:FLOAT.0
	float                            fPosConstraintMassRatio;         // offset:0x028	type:FLOAT.0
};

struct CTunableObjectEntry
{
	string                           objectName;                      // offset:0x000	type:STRING.ATHASHVALUE
	float                            objectMass;                      // offset:0x004	type:FLOAT.0
	vec3                             objectLinearSpeedDamping;        // offset:0x010	type:VECTOR3.0
	vec3                             objectLinearVelocityDamping;     // offset:0x020	type:VECTOR3.0
	vec3                             objectLinearVelocitySquaredDamping; // offset:0x030	type:VECTOR3.0
	vec3                             objectAngularSpeedDamping;       // offset:0x040	type:VECTOR3.0
	vec3                             objectAngularVelocityDamping;    // offset:0x050	type:VECTOR3.0
	vec3                             objectAngularVelocitySquaredDamping; // offset:0x060	type:VECTOR3.0
	vec3                             objectCentreOfMassOffset;        // offset:0x070	type:VECTOR3.0
	vec3                             forkliftAttachAngledAreaDims;    // offset:0x090	type:VECTOR3.0
	vec3                             forkliftAttachAngledAreaOrigin;  // offset:0x0A0	type:VECTOR3.0
	bool                             forkliftCanAttachWhenFragBroken; // offset:0x0B0	type:BOOL.0
	float                            lowLodBuoyancyDistance;          // offset:0x0B4	type:FLOAT.0
	float                            lowLodBuoyancyHeightOffset;      // offset:0x0B8	type:FLOAT.0
	float                            buoyancyFactor;                  // offset:0x0BC	type:FLOAT.0
	float                            buoyancyDragFactor;              // offset:0x0C0	type:FLOAT.0
	int                              boundIndexForWaterSamples;       // offset:0x0C4	type:INT.0
	bool                             lowLodBuoyancyNoCollision;       // offset:0x0C8	type:BOOL.0
	float                            maxHealth;                       // offset:0x0CC	type:FLOAT.0
	float                            knockOffBikeImpulseScalar;       // offset:0x0D0	type:FLOAT.0
	int                              glassFrameFlags;                 // offset:0x0D4	type:INT.0
	bool                             bCanBePickedUpByCargobob;        // offset:0x0D8	type:BOOL.0
	bool                             bUnreachableByMeleeNavigation;   // offset:0x0D9	type:BOOL.0
	bool                             notDamagedByFlames;              // offset:0x0DA	type:BOOL.0
	bool                             collidesWithLowLodVehicleChassis; // offset:0x0DB	type:BOOL.0
	bool                             _0xC2532FA5;                     // offset:0x0DC	type:BOOL.0
};

struct CTunableObjectManager
{
	map<string, struct CTunableObjectEntry>     TunableObjects;                  // offset:0x000	type:MAP.ATBINARYMAP
};

struct CTuning
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
};

struct CTuningFile
{
	array<struct CTuning>            Tunables;                        // offset:0x000	type:ARRAY.ATARRAY
};

struct CTxdRelationship
{
	string                           parent;                          // offset:0x008	type:STRING.ATSTRING
	string                           child;                           // offset:0x018	type:STRING.ATSTRING
};

struct CVehGenMarkUpSpheres
{
	array<struct _0x31D64A3D, 32>     Spheres;                         // offset:0x000	type:ARRAY.ATFIXEDARRAY
};

struct CVehicleClipRequestHelper__Tunables : CTuning
{
	float                            MinDistanceToScanForNearbyVehicle; // offset:0x010	type:FLOAT.0
	float                            MaxDistanceToScanForNearbyVehicle; // offset:0x014	type:FLOAT.0
	float                            MinDistUpdateFrequency;          // offset:0x018	type:FLOAT.0
	float                            MaxDistUpdateFrequency;          // offset:0x01C	type:FLOAT.0
	float                            MinDistPercentageToScaleScanArc; // offset:0x020	type:FLOAT.0
	float                            MinDistScanArc;                  // offset:0x024	type:FLOAT.0
	float                            MaxDistScanArc;                  // offset:0x028	type:FLOAT.0
	bool                             DisableVehicleDependencies;      // offset:0x02C	type:BOOL.0
	bool                             DisableStreamedVehicleAnimRequestHelper; // offset:0x02D	type:BOOL.0
	bool                             EnableStreamedEntryAnims;        // offset:0x02E	type:BOOL.0
	bool                             EnableStreamedInVehicleAnims;    // offset:0x02F	type:BOOL.0
	bool                             EnableStreamedEntryVariationAnims; // offset:0x030	type:BOOL.0
	bool                             StreamConnectedSeatAnims;        // offset:0x031	type:BOOL.0
	bool                             StreamInVehicleAndEntryAnimsTogether; // offset:0x032	type:BOOL.0
	bool                             StreamEntryAndInVehicleAnimsTogether; // offset:0x033	type:BOOL.0
};

struct CVehicleConditionEntryPointHasOpenableDoor : CScenarioCondition
{
};

struct CVehicleConditionRoofState : CScenarioCondition
{
	bitset<enum _0xFA5B2E49>         RoofState;                       // offset:0x010	type:BITSET.32BIT
};

struct CVehicleCoverBoundOffsetInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	float                            ExtraSideOffset;                 // offset:0x004	type:FLOAT.0
	float                            ExtraForwardOffset;              // offset:0x008	type:FLOAT.0
	float                            ExtraBackwardOffset;             // offset:0x00C	type:FLOAT.0
	float                            ExtraZOffset;                    // offset:0x010	type:FLOAT.0
	array<struct _0xFFE8E531>        CoverBoundInfos;                 // offset:0x018	type:ARRAY.ATARRAY
};

struct CVehicleDamage__Tunables : CTuning
{
	float                            _0x88B54901;                     // offset:0x010	type:FLOAT.0
	float                            _0xBBAAFE0C;                     // offset:0x014	type:FLOAT.0
	float                            _0x159A9579;                     // offset:0x018	type:FLOAT.0
	float                            _0x91B432CE;                     // offset:0x01C	type:FLOAT.0
	float                            _0xDC3D7596;                     // offset:0x020	type:FLOAT.0
	float                            _0x115736EE;                     // offset:0x024	type:FLOAT.0
	float                            _0x6C9F3DE2;                     // offset:0x028	type:FLOAT.0
	float                            _0x6582472C;                     // offset:0x02C	type:FLOAT.0
};

struct CVehicleDriveByAnimInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                           DriveByClipSet;                  // offset:0x004	type:STRING.ATHASHVALUE
	string                           FirstPersonDriveByClipSet;       // offset:0x008	type:STRING.ATHASHVALUE
	array<struct _0xB6BD37A1>        AltFirstPersonDriveByClipSets;   // offset:0x010	type:ARRAY.ATARRAY
	string                           RestrictedDriveByClipSet;        // offset:0x020	type:STRING.ATHASHVALUE
	string                           VehicleMeleeClipSet;             // offset:0x024	type:STRING.ATHASHVALUE
	string                           FirstPersonVehicleMeleeClipSet;  // offset:0x028	type:STRING.ATHASHVALUE
	enum _0xE62BC9A9                 Network;                         // offset:0x02C	type:ENUM.32BIT
	struct void                      WeaponGroup;                     // offset:0x030	type:STRUCT.EXTERNAL_NAMED
	bool                             UseOverrideAngles;               // offset:0x038	type:BOOL.0
	bool                             OverrideAnglesInThirdPersonOnly; // offset:0x039	type:BOOL.0
	float                            OverrideMinAimAngle;             // offset:0x03C	type:FLOAT.0
	float                            OverrideMaxAimAngle;             // offset:0x040	type:FLOAT.0
	float                            OverrideMinRestrictedAimAngle;   // offset:0x044	type:FLOAT.0
	float                            OverrideMaxRestrictedAimAngle;   // offset:0x048	type:FLOAT.0
};

struct CVehicleDriveByInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	float                            MinAimSweepHeadingAngleDegs;     // offset:0x004	type:FLOAT.0
	float                            MaxAimSweepHeadingAngleDegs;     // offset:0x008	type:FLOAT.0
	float                            FirstPersonMinAimSweepHeadingAngleDegs; // offset:0x00C	type:FLOAT.0
	float                            FirstPersonMaxAimSweepHeadingAngleDegs; // offset:0x010	type:FLOAT.0
	float                            FirstPersonUnarmedMinAimSweepHeadingAngleDegs; // offset:0x014	type:FLOAT.0
	float                            FirstPersonUnarmedMaxAimSweepHeadingAngleDegs; // offset:0x018	type:FLOAT.0
	float                            MinRestrictedAimSweepHeadingAngleDegs; // offset:0x024	type:FLOAT.0
	float                            MaxRestrictedAimSweepHeadingAngleDegs; // offset:0x028	type:FLOAT.0
	float                            MinSmashWindowAngleDegs;         // offset:0x02C	type:FLOAT.0
	float                            MaxSmashWindowAngleDegs;         // offset:0x030	type:FLOAT.0
	float                            MinSmashWindowAngleFirstPersonDegs; // offset:0x034	type:FLOAT.0
	float                            MaxSmashWindowAngleFirstPersonDegs; // offset:0x038	type:FLOAT.0
	float                            MaxSpeedParam;                   // offset:0x03C	type:FLOAT.0
	float                            MaxLongitudinalLeanBlendWeightDelta; // offset:0x040	type:FLOAT.0
	float                            MaxLateralLeanBlendWeightDelta;  // offset:0x044	type:FLOAT.0
	float                            ApproachSpeedToWithinMaxBlendDelta; // offset:0x048	type:FLOAT.0
	float                            SpineAdditiveBlendInDelay;       // offset:0x04C	type:FLOAT.0
	float                            SpineAdditiveBlendInDurationStill; // offset:0x050	type:FLOAT.0
	float                            SpineAdditiveBlendInDuration;    // offset:0x054	type:FLOAT.0
	float                            SpineAdditiveBlendOutDelay;      // offset:0x058	type:FLOAT.0
	float                            SpineAdditiveBlendOutDuration;   // offset:0x05C	type:FLOAT.0
	float                            MinUnarmedDrivebyYawIfWindowRolledUp; // offset:0x060	type:FLOAT.0
	float                            MaxUnarmedDrivebyYawIfWindowRolledUp; // offset:0x064	type:FLOAT.0
	array<struct void>               DriveByAnimInfos;                // offset:0x068	type:ARRAY.ATARRAY
	string                           DriveByCamera;                   // offset:0x078	type:STRING.ATHASHVALUE
	string                           PovDriveByCamera;                // offset:0x07C	type:STRING.ATHASHVALUE
	bitset<enum _0x7A3BED50>         DriveByFlags;                    // offset:0x080	type:BITSET.32BIT
};

struct CVehicleEntryPointAnimInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	struct void                      CommonClipSetMap;                // offset:0x008	type:STRUCT.EXTERNAL_NAMED
	struct void                      EntryClipSetMap;                 // offset:0x010	type:STRUCT.EXTERNAL_NAMED
	struct void                      ExitClipSetMap;                  // offset:0x018	type:STRUCT.EXTERNAL_NAMED
	string                           AlternateTryLockedDoorClipId;    // offset:0x020	type:STRING.ATHASHVALUE
	string                           AlternateForcedEntryClipId;      // offset:0x024	type:STRING.ATHASHVALUE
	string                           AlternateJackFromOutSideClipId;  // offset:0x028	type:STRING.ATHASHVALUE
	string                           AlternateBeJackedFromOutSideClipId; // offset:0x02C	type:STRING.ATHASHVALUE
	string                           AlternateEntryPointClipSetId;    // offset:0x030	type:STRING.ATHASHVALUE
	enum _0x2320574A                 EnterVehicleMoveNetwork;         // offset:0x034	type:ENUM.32BIT
	vec3                             EntryTranslation;                // offset:0x040	type:VECTOR3.0
	vec2                             OpenDoorTranslation;             // offset:0x050	type:VECTOR2.0
	float                            OpenDoorHeadingChange;           // offset:0x058	type:FLOAT.0
	float                            EntryHeadingChange;              // offset:0x05C	type:FLOAT.0
	float                            ExtraZForMPPlaneWarp;            // offset:0x060	type:FLOAT.0
	bitset<enum _0x06D7CC37>         EntryPointFlags;                 // offset:0x064	type:BITSET.32BIT
	struct void                      EntryAnimVariations;             // offset:0x068	type:STRUCT.EXTERNAL_NAMED
	string                           NMJumpFromVehicleTuningSet;      // offset:0x070	type:STRING.ATHASHVALUE
};

struct CVehicleEntryPointInfo
{
	string                                  Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                                  DoorBoneName;                    // offset:0x008	type:STRING.ATSTRING
	string                                  SecondDoorBoneName;              // offset:0x018	type:STRING.ATSTRING
	string                                  DoorHandleBoneName;              // offset:0x028	type:STRING.ATSTRING
	enum _0x8CFC2EE4                        WindowId;                        // offset:0x038	type:ENUM.32BIT
	enum _0xB53CD812                        VehicleSide;                     // offset:0x03C	type:ENUM.32BIT
	array<struct void>                      AccessableSeats;                 // offset:0x040	type:ARRAY.ATARRAY
	struct void                             VehicleExtraPointsInfo;          // offset:0x050	type:STRUCT.EXTERNAL_NAMED
	bitset<enum _0x9380894B>                Flags;                           // offset:0x058	type:BITSET.32BIT
	array<enum _0xB53CD812>                 BlockJackReactionSides;          // offset:0x060	type:ARRAY.ATARRAY
	enum CExtraVehiclePoint__ePointType     BreakoutTestPoint;               // offset:0x070	type:ENUM.32BIT
};

struct CVehicleExplosionInfo
{
	string                                    Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CVehicleExplosionLOD, 3>     VehicleExplosionLODs;            // offset:0x004	type:ARRAY.MEMBER
	array<struct CExplosionData>              ExplosionData;                   // offset:0x020	type:ARRAY.ATARRAY
	float                                     AdditionalPartVelocityMinAngle;  // offset:0x030	type:FLOAT.0
	float                                     AdditionalPartVelocityMaxAngle;  // offset:0x034	type:FLOAT.0
	float                                     AdditionalPartVelocityMinMagnitude; // offset:0x038	type:FLOAT.0
	float                                     AdditionalPartVelocityMaxMagnitude; // offset:0x03C	type:FLOAT.0
};

struct CVehicleExplosionLOD
{
	float                            Radius;                          // offset:0x000	type:FLOAT.0
	float                            PartDeletionChance;              // offset:0x004	type:FLOAT.0
};

struct CVehicleExtraPointsInfo
{
	string                               Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CExtraVehiclePoint>     ExtraVehiclePoints;              // offset:0x008	type:ARRAY.ATARRAY
};

struct CVehicleKit
{
	string                                           kitName;                         // offset:0x000	type:STRING.ATHASHVALUE
	ushort                                           id;                              // offset:0x004	type:USHORT.0
	enum eModKitType                                 kitType;                         // offset:0x008	type:ENUM.32BIT
	array<struct CVehicleModVisible>                 visibleMods;                     // offset:0x010	type:ARRAY.ATARRAY
	array<struct CVehicleModLink>                    linkMods;                        // offset:0x020	type:ARRAY.ATARRAY
	array<struct CVehicleModStat>                    statMods;                        // offset:0x030	type:ARRAY.ATARRAY
	array<struct CVehicleKit__sSlotNameOverride>     slotNames;                       // offset:0x040	type:ARRAY.ATARRAY
	array<string>                                    liveryNames;                     // offset:0x050	type:ARRAY.ATARRAY
	array<string>                                    livery2Names;                    // offset:0x060	type:ARRAY.ATARRAY
};

struct CVehicleKit__sSlotNameOverride
{
	enum eVehicleModType             slot;                            // offset:0x000	type:ENUM.32BIT
	string                           name;                            // offset:0x008	type:STRING.CONST_STRING
};

struct CVehicleLayoutInfo
{
	string                                            Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CVehicleLayoutInfo__sSeat>           Seats;                           // offset:0x008	type:ARRAY.ATARRAY
	array<struct CVehicleLayoutInfo__sEntryPoint>     EntryPoints;                     // offset:0x018	type:ARRAY.ATARRAY
	bitset<enum CVehicleLayoutInfo__eLayoutFlags>     LayoutFlags;                     // offset:0x028	type:BITSET.32BIT
	struct void                                       BicycleInfo;                     // offset:0x030	type:STRUCT.EXTERNAL_NAMED
	struct void                                       AnimRateSet;                     // offset:0x038	type:STRUCT.EXTERNAL_NAMED
	string                                            HandsUpClipSetId;                // offset:0x040	type:STRING.ATHASHVALUE
	vec3                                              SteeringWheelOffset;             // offset:0x050	type:VECTOR3.0
	float                                             MaxXAcceleration;                // offset:0x060	type:FLOAT.0
	float                                             BodyLeanXApproachSpeed;          // offset:0x064	type:FLOAT.0
	float                                             BodyLeanXSmallDelta;             // offset:0x068	type:FLOAT.0
	float                                             LookBackApproachSpeedScale;      // offset:0x06C	type:FLOAT.0
	array<string>                                     FirstPersonAdditiveIdleClipSets; // offset:0x070	type:ARRAY.ATARRAY
	array<string>                                     FirstPersonRoadRageClipSets;     // offset:0x080	type:ARRAY.ATARRAY
	struct CVehicleLayoutInfo__sCellphoneClipsets     CellphoneClipsets;               // offset:0x090	type:STRUCT.STRUCTURE
};

struct CVehicleLayoutInfo__sCellphoneClipsets
{
	string                           CellphoneClipsetDS;              // offset:0x000	type:STRING.ATHASHVALUE
	string                           CellphoneClipsetPS;              // offset:0x004	type:STRING.ATHASHVALUE
	string                           CellphoneClipsetDS_FPS;          // offset:0x008	type:STRING.ATHASHVALUE
	string                           CellphoneClipsetPS_FPS;          // offset:0x00C	type:STRING.ATHASHVALUE
};

struct CVehicleLayoutInfo__sEntryPoint
{
	struct void                      EntryPointInfo;                  // offset:0x000	type:STRUCT.EXTERNAL_NAMED
	struct void                      EntryPointAnimInfo;              // offset:0x008	type:STRUCT.EXTERNAL_NAMED
};

struct CVehicleLayoutInfo__sSeat
{
	struct void                      SeatInfo;                        // offset:0x000	type:STRUCT.EXTERNAL_NAMED
	struct void                      SeatAnimInfo;                    // offset:0x008	type:STRUCT.EXTERNAL_NAMED
};

struct CVehicleMetadataMgr
{
	array<struct CAnimRateSet>                          AnimRateSets;                    // offset:0x000	type:ARRAY.ATARRAY
	array<struct CClipSetMap>                           ClipSetMaps;                     // offset:0x010	type:ARRAY.ATARRAY
	array<struct CVehicleCoverBoundOffsetInfo>          VehicleCoverBoundOffsetInfos;    // offset:0x020	type:ARRAY.ATARRAY
	array<struct CBicycleInfo>                          BicycleInfos;                    // offset:0x030	type:ARRAY.ATARRAY
	array<struct CPOVTuningInfo>                        POVTuningInfos;                  // offset:0x040	type:ARRAY.ATARRAY
	array<struct CEntryAnimVariations>                  EntryAnimVariations;             // offset:0x050	type:ARRAY.ATARRAY
	array<struct CVehicleExtraPointsInfo>               VehicleExtraPointsInfos;         // offset:0x060	type:ARRAY.ATARRAY
	array<struct CVehicleLayoutInfo>                    VehicleLayoutInfos;              // offset:0x070	type:ARRAY.ATARRAY
	array<struct CVehicleSeatInfo>                      VehicleSeatInfos;                // offset:0x080	type:ARRAY.ATARRAY
	array<struct CVehicleSeatAnimInfo>                  VehicleSeatAnimInfos;            // offset:0x090	type:ARRAY.ATARRAY
	array<struct CDrivebyWeaponGroup>                   DrivebyWeaponGroups;             // offset:0x0A0	type:ARRAY.ATARRAY
	array<struct CVehicleDriveByAnimInfo>               VehicleDriveByAnimInfos;         // offset:0x0B0	type:ARRAY.ATARRAY
	array<struct CVehicleDriveByInfo>                   VehicleDriveByInfos;             // offset:0x0C0	type:ARRAY.ATARRAY
	array<struct CVehicleEntryPointInfo>                VehicleEntryPointInfos;          // offset:0x0D0	type:ARRAY.ATARRAY
	array<struct CVehicleEntryPointAnimInfo>            VehicleEntryPointAnimInfos;      // offset:0x0E0	type:ARRAY.ATARRAY
	array<struct CVehicleExplosionInfo>                 VehicleExplosionInfos;           // offset:0x0F0	type:ARRAY.ATARRAY
	array<struct CVehicleScenarioLayoutInfo>            VehicleScenarioLayoutInfos;      // offset:0x100	type:ARRAY.ATARRAY
	array<struct CSeatOverrideAnimInfo>                 SeatOverrideAnimInfos;           // offset:0x110	type:ARRAY.ATARRAY
	array<struct CInVehicleOverrideInfo>                InVehicleOverrideInfos;          // offset:0x120	type:ARRAY.ATARRAY
	array<struct CFirstPersonDriveByLookAroundData>     FirstPersonDriveByLookAroundData; // offset:0x130	type:ARRAY.ATARRAY
};

struct CVehicleMetallicSetting
{
	float                            specInt;                         // offset:0x000	type:FLOAT.0
	float                            specFalloff;                     // offset:0x004	type:FLOAT.0
	float                            specFresnel;                     // offset:0x008	type:FLOAT.0
};

struct CVehicleModColor
{
	string                           name;                            // offset:0x000	type:STRING.CONST_STRING
	uchar                            col;                             // offset:0x008	type:UCHAR.0
	uchar                            spec;                            // offset:0x009	type:UCHAR.0
};

struct CVehicleModColors
{
	array<struct CVehicleModColor>          metallic;                        // offset:0x000	type:ARRAY.ATARRAY
	array<struct CVehicleModColor>          classic;                         // offset:0x010	type:ARRAY.ATARRAY
	array<struct CVehicleModColor>          matte;                           // offset:0x020	type:ARRAY.ATARRAY
	array<struct CVehicleModColor>          metals;                          // offset:0x030	type:ARRAY.ATARRAY
	array<struct CVehicleModColor>          chrome;                          // offset:0x040	type:ARRAY.ATARRAY
	struct CVehicleModPearlescentColors     pearlescent;                     // offset:0x050	type:STRUCT.STRUCTURE
};

struct CVehicleModLink
{
	string                                       modelName;                       // offset:0x010	type:STRING.ATHASHVALUE
	enum CVehicleModVisible__eVehicleModBone     bone;                            // offset:0x014	type:ENUM.32BIT
	bool                                         turnOffExtra;                    // offset:0x018	type:BOOL.0
};

struct CVehicleModPearlescentColors
{
	array<struct CVehicleModColor>     baseCols;                        // offset:0x000	type:ARRAY.ATARRAY
	array<struct CVehicleModColor>     specCols;                        // offset:0x010	type:ARRAY.ATARRAY
};

struct CVehicleModStat
{
	string                           identifier;                      // offset:0x000	type:STRING.ATHASHVALUE
	enum eVehicleModType             type;                            // offset:0x004	type:ENUM.32BIT
	uint                             modifier;                        // offset:0x008	type:UINT.0
	float                            audioApply;                      // offset:0x00C	type:FLOAT.0
	uchar                            weight;                          // offset:0x010	type:UCHAR.0
};

struct CVehicleModVisible
{
	string                                              modelName;                       // offset:0x010	type:STRING.ATHASHVALUE
	string                                              modShopLabel;                    // offset:0x018	type:STRING.CONST_STRING
	array<string>                                       linkedModels;                    // offset:0x020	type:ARRAY.ATARRAY
	enum eVehicleModType                                type;                            // offset:0x030	type:ENUM.32BIT
	enum CVehicleModVisible__eVehicleModBone            bone;                            // offset:0x034	type:ENUM.32BIT
	enum CVehicleModVisible__eVehicleModBone            collisionBone;                   // offset:0x038	type:ENUM.32BIT
	array<enum CVehicleModVisible__eVehicleModBone>     turnOffBones;                    // offset:0x040	type:ARRAY.ATARRAY
	enum eVehicleModCameraPos                           cameraPos;                       // offset:0x050	type:ENUM.32BIT
	float                                               audioApply;                      // offset:0x054	type:FLOAT.0
	uchar                                               weight;                          // offset:0x058	type:UCHAR.0
	bool                                                turnOffExtra;                    // offset:0x059	type:BOOL.0
	bool                                                disableBonnetCamera;             // offset:0x05A	type:BOOL.0
	bool                                                allowBonnetSlide;                // offset:0x05B	type:BOOL.0
	char                                                weaponSlot;                      // offset:0x05C	type:CHAR.0
	char                                                weaponSlotSecondary;             // offset:0x05D	type:CHAR.0
	bool                                                disableProjectileDriveby;        // offset:0x05E	type:BOOL.0
	bool                                                disableDriveby;                  // offset:0x05F	type:BOOL.0
	int                                                 disableDrivebySeat;              // offset:0x060	type:INT.0
	int                                                 disableDrivebySeatSecondary;     // offset:0x064	type:INT.0
};

struct CVehicleModelColor
{
	uint                                  color;                           // offset:0x000	type:UINT.1
	enum EVehicleModelColorMetallicID     metallicID;                      // offset:0x004	type:ENUM.8BIT
	enum EVehicleModelAudioColor          audioColor;                      // offset:0x005	type:ENUM.8BIT
	enum EVehicleModelAudioPrefix         audioPrefix;                     // offset:0x006	type:ENUM.8BIT
	uint                                  audioColorHash;                  // offset:0x008	type:UINT.0
	uint                                  audioPrefixHash;                 // offset:0x00C	type:UINT.0
	string                                colorName;                       // offset:0x010	type:STRING.POINTER
};

struct CVehicleModelColorIndices
{
	array<uchar, 6>                  indices;                         // offset:0x000	type:ARRAY.MEMBER
	array<bool, 30>                  liveries;                        // offset:0x006	type:ARRAY.MEMBER
};

struct CVehicleModelInfoPlateTextureSet
{
	vec4                             FontExtents;                     // offset:0x000	type:VECTOR4.0
	vec2                             MaxLettersOnPlate;               // offset:0x010	type:VECTOR2.0
	vec2                             FontOutlineMinMaxDepth;          // offset:0x018	type:VECTOR2.0
	string                           TextureSetName;                  // offset:0x020	type:STRING.ATHASHVALUE
	string                           DiffuseMapName;                  // offset:0x024	type:STRING.ATHASHVALUE
	string                           NormalMapName;                   // offset:0x028	type:STRING.ATHASHVALUE
	uint                             FontColor;                       // offset:0x02C	type:UINT.1
	uint                             FontOutlineColor;                // offset:0x030	type:UINT.1
	bool                             IsFontOutlineEnabled;            // offset:0x034	type:BOOL.0
};

struct CVehicleModelInfoPlates
{
	array<struct CVehicleModelInfoPlateTextureSet>     Textures;                        // offset:0x000	type:ARRAY.ATARRAY
	int                                                DefaultTexureIndex;              // offset:0x010	type:INT.0
	uchar                                              NumericOffset;                   // offset:0x014	type:UCHAR.0
	uchar                                              AlphabeticOffset;                // offset:0x015	type:UCHAR.0
	uchar                                              SpaceOffset;                     // offset:0x016	type:UCHAR.0
	uchar                                              RandomCharOffset;                // offset:0x017	type:UCHAR.0
	uchar                                              NumRandomChar;                   // offset:0x018	type:UCHAR.0
};

struct CVehicleModelInfoVarGlobal
{
	array<struct CVehicleModelColor>           Colors;                          // offset:0x008	type:ARRAY.ATARRAY
	array<struct CVehicleMetallicSetting>      MetallicSettings;                // offset:0x018	type:ARRAY.ATARRAY
	array<struct CVehicleWindowColor>          WindowColors;                    // offset:0x028	type:ARRAY.ATARRAY
	array<struct vehicleLightSettings>         Lights;                          // offset:0x038	type:ARRAY.ATARRAY
	array<struct sirenSettings>                Sirens;                          // offset:0x048	type:ARRAY.ATARRAY
	array<struct CVehicleKit>                  Kits;                            // offset:0x058	type:ARRAY.ATARRAY
	array<array<struct CVehicleWheel>, 13>     Wheels;                          // offset:0x068	type:ARRAY.MEMBER
	struct CVehicleVariationGlobalData         GlobalVariationData;             // offset:0x138	type:STRUCT.STRUCTURE
	array<struct CVehicleXenonLightColor>      XenonLightColors;                // offset:0x148	type:ARRAY.ATARRAY
	struct CVehicleModelInfoPlates             VehiclePlates;                   // offset:0x158	type:STRUCT.STRUCTURE
};

struct CVehicleModelInfoVariation
{
	array<struct CVehicleVariationData>     variationData;                   // offset:0x000	type:ARRAY.ATARRAY
};

struct CVehicleModelInfo__CVehicleOverrideRagdollThreshold
{
	int                              MinComponent;                    // offset:0x000	type:INT.0
	int                              MaxComponent;                    // offset:0x004	type:INT.0
	float                            ThresholdMult;                   // offset:0x008	type:FLOAT.0
};

struct CVehicleModelInfo__InitData
{
	string                                                         modelName;                       // offset:0x000	type:STRING.CONST_STRING
	string                                                         txdName;                         // offset:0x008	type:STRING.CONST_STRING
	string                                                         handlingId;                      // offset:0x010	type:STRING.CONST_STRING
	string                                                         gameName;                        // offset:0x018	type:STRING.CONST_STRING
	string                                                         vehicleMakeName;                 // offset:0x020	type:STRING.CONST_STRING
	string                                                         expressionDictName;              // offset:0x028	type:STRING.CONST_STRING
	string                                                         expressionName;                  // offset:0x030	type:STRING.CONST_STRING
	string                                                         animConvRoofDictName;            // offset:0x038	type:STRING.CONST_STRING
	string                                                         animConvRoofName;                // offset:0x040	type:STRING.CONST_STRING
	string                                                         ptfxAssetName;                   // offset:0x048	type:STRING.CONST_STRING
	string                                                         audioNameHash;                   // offset:0x050	type:STRING.ATHASHVALUE
	string                                                         layout;                          // offset:0x054	type:STRING.ATHASHVALUE
	string                                                         POVTuningInfo;                   // offset:0x058	type:STRING.ATHASHVALUE
	string                                                         coverBoundOffsets;               // offset:0x05C	type:STRING.ATHASHVALUE
	string                                                         explosionInfo;                   // offset:0x060	type:STRING.ATHASHVALUE
	string                                                         scenarioLayout;                  // offset:0x064	type:STRING.ATHASHVALUE
	string                                                         cameraName;                      // offset:0x068	type:STRING.ATHASHVALUE
	string                                                         aimCameraName;                   // offset:0x06C	type:STRING.ATHASHVALUE
	string                                                         bonnetCameraName;                // offset:0x070	type:STRING.ATHASHVALUE
	string                                                         povCameraName;                   // offset:0x074	type:STRING.ATHASHVALUE
	string                                                         povTurretCameraName;             // offset:0x078	type:STRING.ATHASHVALUE
	string                                                         vfxInfoName;                     // offset:0x07C	type:STRING.ATHASHVALUE
	array<string>                                                  firstPersonDrivebyData;          // offset:0x080	type:ARRAY.ATARRAY
	vec3                                                           FirstPersonDriveByIKOffset;      // offset:0x090	type:VECTOR3.0
	vec3                                                           FirstPersonDriveByUnarmedIKOffset; // offset:0x0A0	type:VECTOR3.0
	vec3                                                           FirstPersonDriveByLeftPassengerIKOffset; // offset:0x0B0	type:VECTOR3.0
	vec3                                                           FirstPersonDriveByRightPassengerIKOffset; // offset:0x0C0	type:VECTOR3.0
	vec3                                                           FirstPersonDriveByRightRearPassengerIKOffset; // offset:0x0D0	type:VECTOR3.0
	vec3                                                           FirstPersonDriveByLeftPassengerUnarmedIKOffset; // offset:0x0E0	type:VECTOR3.0
	vec3                                                           FirstPersonDriveByRightPassengerUnarmedIKOffset; // offset:0x0F0	type:VECTOR3.0
	vec3                                                           FirstPersonProjectileDriveByIKOffset; // offset:0x100	type:VECTOR3.0
	vec3                                                           FirstPersonProjectileDriveByPassengerIKOffset; // offset:0x110	type:VECTOR3.0
	vec3                                                           FirstPersonProjectileDriveByRearLeftIKOffset; // offset:0x120	type:VECTOR3.0
	vec3                                                           FirstPersonProjectileDriveByRearRightIKOffset; // offset:0x130	type:VECTOR3.0
	vec3                                                           FirstPersonVisorSwitchIKOffset;  // offset:0x140	type:VECTOR3.0
	vec3                                                           FirstPersonMobilePhoneOffset;    // offset:0x150	type:VECTOR3.0
	vec3                                                           FirstPersonPassengerMobilePhoneOffset; // offset:0x160	type:VECTOR3.0
	array<struct _0x309C3B9F>                                      FirstPersonMobilePhoneSeatIKOffset; // offset:0x170	type:ARRAY.ATARRAY
	vec3                                                           PovCameraOffset;                 // offset:0x180	type:VECTOR3.0
	vec3                                                           PovPassengerCameraOffset;        // offset:0x190	type:VECTOR3.0
	vec3                                                           PovRearPassengerCameraOffset;    // offset:0x1A0	type:VECTOR3.0
	float                                                          PovCameraVerticalAdjustmentForRollCage; // offset:0x1B0	type:FLOAT.0
	bool                                                           shouldUseCinematicViewMode;      // offset:0x1B4	type:BOOL.0
	bool                                                           shouldCameraTransitionOnClimbUpDown; // offset:0x1B5	type:BOOL.0
	bool                                                           shouldCameraIgnoreExiting;       // offset:0x1B6	type:BOOL.0
	bool                                                           AllowPretendOccupants;           // offset:0x1B7	type:BOOL.0
	bool                                                           AllowJoyriding;                  // offset:0x1B8	type:BOOL.0
	bool                                                           AllowSundayDriving;              // offset:0x1B9	type:BOOL.0
	bool                                                           AllowBodyColorMapping;           // offset:0x1BA	type:BOOL.0
	float                                                          wheelScale;                      // offset:0x1BC	type:FLOAT.0
	float                                                          wheelScaleRear;                  // offset:0x1C0	type:FLOAT.0
	float                                                          dirtLevelMin;                    // offset:0x1C4	type:FLOAT.0
	float                                                          dirtLevelMax;                    // offset:0x1C8	type:FLOAT.0
	float                                                          envEffScaleMin;                  // offset:0x1CC	type:FLOAT.0
	float                                                          envEffScaleMax;                  // offset:0x1D0	type:FLOAT.0
	float                                                          envEffScaleMin2;                 // offset:0x1D4	type:FLOAT.0
	float                                                          envEffScaleMax2;                 // offset:0x1D8	type:FLOAT.0
	float                                                          damageMapScale;                  // offset:0x1DC	type:FLOAT.0
	float                                                          damageOffsetScale;               // offset:0x1E0	type:FLOAT.0
	uint                                                           diffuseTint;                     // offset:0x1E4	type:UINT.1
	float                                                          steerWheelMult;                  // offset:0x1E8	type:FLOAT.0
	float                                                          firstPersonSteerWheelMult;       // offset:0x1EC	type:FLOAT.0
	float                                                          HDTextureDist;                   // offset:0x1F0	type:FLOAT.0
	array<float, 6>                                                lodDistances;                    // offset:0x1F4	type:ARRAY.MEMBER
	ushort                                                         frequency;                       // offset:0x20C	type:USHORT.0
	enum eSwankness                                                swankness;                       // offset:0x210	type:ENUM.32BIT
	ushort                                                         maxNum;                          // offset:0x214	type:USHORT.0
	bitset<enum CVehicleModelInfoFlags__Flags>                     flags;                           // offset:0x218	type:BITSET.32BIT
	enum VehicleType                                               type;                            // offset:0x234	type:ENUM.32BIT
	enum eVehiclePlateType                                         plateType;                       // offset:0x238	type:ENUM.32BIT
	enum eVehicleDashboardType                                     dashboardType;                   // offset:0x23C	type:ENUM.32BIT
	enum eVehicleClass                                             vehicleClass;                    // offset:0x240	type:ENUM.32BIT
	array<string>                                                  trailers;                        // offset:0x248	type:ARRAY.ATARRAY
	array<string>                                                  additionalTrailers;              // offset:0x258	type:ARRAY.ATARRAY
	array<struct CDriverInfo>                                      drivers;                         // offset:0x268	type:ARRAY.ATARRAY
	array<bitset<enum eExtraIncludes>>                             extraIncludes;                   // offset:0x278	type:ARRAY.ATARRAY
	array<struct CVfxExtraInfo>                                    vfxExtraInfos;                   // offset:0x288	type:ARRAY.ATARRAY
	bitset<enum eExtraIncludes>                                    requiredExtras;                  // offset:0x298	type:BITSET.32BIT
	enum eVehicleWheelType                                         wheelType;                       // offset:0x29C	type:ENUM.32BIT
	array<enum eDoorId>                                            doorsWithCollisionWhenClosed;    // offset:0x2A0	type:ARRAY.ATARRAY
	array<enum eDoorId>                                            driveableDoors;                  // offset:0x2B0	type:ARRAY.ATARRAY
	array<enum eWindowId>                                          animConvRoofWindowsAffected;     // offset:0x2C0	type:ARRAY.ATARRAY
	array<struct CDoorStiffnessInfo>                               doorStiffnessMultipliers;        // offset:0x2D0	type:ARRAY.ATARRAY
	uchar                                                          identicalModelSpawnDistance;     // offset:0x2E0	type:UCHAR.0
	uchar                                                          maxNumOfSameColor;               // offset:0x2E1	type:UCHAR.0
	float                                                          defaultBodyHealth;               // offset:0x2E4	type:FLOAT.0
	float                                                          pretendOccupantsScale;           // offset:0x2E8	type:FLOAT.0
	float                                                          visibleSpawnDistScale;           // offset:0x2EC	type:FLOAT.0
	array<string>                                                  rewards;                         // offset:0x2F0	type:ARRAY.ATARRAY
	array<string>                                                  cinematicPartCamera;             // offset:0x300	type:ARRAY.ATARRAY
	string                                                         NmBraceOverrideSet;              // offset:0x310	type:STRING.ATHASHVALUE
	vec3                                                           buoyancySphereOffset;            // offset:0x320	type:VECTOR3.0
	float                                                          buoyancySphereSizeScale;         // offset:0x330	type:FLOAT.0
	array<struct CAdditionalVfxWaterSample>                        additionalVfxWaterSamples;       // offset:0x338	type:ARRAY.ATARRAY
	float                                                          trackerPathWidth;                // offset:0x348	type:FLOAT.0
	float                                                          weaponForceMult;                 // offset:0x34C	type:FLOAT.0
	bool                                                           bumpersNeedToCollideWithMap;     // offset:0x350	type:BOOL.0
	bool                                                           needsRopeTexture;                // offset:0x351	type:BOOL.0
	struct CVehicleModelInfo__CVehicleOverrideRagdollThreshold     pOverrideRagdollThreshold;       // offset:0x358	type:STRUCT.POINTER
	float                                                          maxSteeringWheelAngle;           // offset:0x360	type:FLOAT.0
	float                                                          _0x67A1548B;                     // offset:0x364	type:FLOAT.0
	float                                                          minSeatHeight;                   // offset:0x368	type:FLOAT.0
	vec3                                                           lockOnPositionOffset;            // offset:0x370	type:VECTOR3.0
	float                                                          LowriderArmWindowHeight;         // offset:0x380	type:FLOAT.0
	float                                                          LowriderLeanAccelModifier;       // offset:0x384	type:FLOAT.0
	int                                                            numSeatsOverride;                // offset:0x388	type:INT.0
};

struct CVehicleModelInfo__InitDataList
{
	array<struct CVehicleModelInfo__InitData>     InitDatas;                       // offset:0x000	type:ARRAY.ATARRAY
	string                                        residentTxd;                     // offset:0x010	type:STRING.ATSTRING
	array<string>                                 residentAnims;                   // offset:0x020	type:ARRAY.ATARRAY
	array<struct CTxdRelationship>                txdRelationships;                // offset:0x030	type:ARRAY.ATARRAY
};

struct CVehiclePopulationTuning
{
	float                            fMultiplayerRandomVehicleDensityMultiplier; // offset:0x008	type:FLOAT.0
	float                            fMultiplayerParkedVehicleDensityMultiplier; // offset:0x00C	type:FLOAT.0
};

struct CVehicleScenarioLayoutInfo
{
	string                                    Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CExtensionDefSpawnPoint>     ScenarioPoints;                  // offset:0x008	type:ARRAY.ATARRAY
};

struct CVehicleScenarioManager__AttractorTuning__Tunables : CTuning
{
	float                            ForwardDirectionThresholdCosSquared; // offset:0x010	type:FLOAT.0
	float                            MaxDistToPathDefault;            // offset:0x014	type:FLOAT.0
	float                            MaxDistToVehicle;                // offset:0x018	type:FLOAT.0
	float                            MinDistToVehicle;                // offset:0x01C	type:FLOAT.0
	int                              NumToUpdatePerFrame;             // offset:0x020	type:INT.0
	uint                             TimeAfterAttractionMs;           // offset:0x024	type:UINT.0
	uint                             TimeAfterChainTestFailedMs;      // offset:0x028	type:UINT.0
	uint                             TimeAfterFailedConditionsMs;     // offset:0x02C	type:UINT.0
	uint                             TimeAfterNoBoundsMs;             // offset:0x030	type:UINT.0
	ushort                           MinPassengersForAttraction;      // offset:0x034	type:USHORT.0
	ushort                           MaxPassengersForAttraction;      // offset:0x036	type:USHORT.0
};

struct CVehicleSeatAnimInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	struct void                      DriveByInfo;                     // offset:0x008	type:STRUCT.EXTERNAL_NAMED
	struct void                      InsideClipSetMap;                // offset:0x010	type:STRUCT.EXTERNAL_NAMED
	string                           PanicClipSet;                    // offset:0x018	type:STRING.ATHASHVALUE
	string                           AgitatedClipSet;                 // offset:0x01C	type:STRING.ATHASHVALUE
	string                           DuckedClipSet;                   // offset:0x020	type:STRING.ATHASHVALUE
	string                           FemaleClipSet;                   // offset:0x024	type:STRING.ATHASHVALUE
	string                           LowriderLeanClipSet;             // offset:0x028	type:STRING.ATHASHVALUE
	string                           AltLowriderLeanClipSet;          // offset:0x02C	type:STRING.ATHASHVALUE
	string                           LowLODIdleAnim;                  // offset:0x030	type:STRING.ATHASHVALUE
	string                           SeatAmbientContext;              // offset:0x034	type:STRING.ATHASHVALUE
	enum _0x3F33AEDD                 InVehicleMoveNetwork;            // offset:0x038	type:ENUM.32BIT
	bitset<enum _0x9E68FA23>         SeatAnimFlags;                   // offset:0x03C	type:BITSET.32BIT
	float                            SteeringSmoothing;               // offset:0x040	type:FLOAT.0
	string                           ExitToAimInfoName;               // offset:0x044	type:STRING.ATHASHVALUE
	string                           MaleGestureClipSetId;            // offset:0x048	type:STRING.ATHASHVALUE
	string                           FemaleGestureClipSetId;          // offset:0x04C	type:STRING.ATHASHVALUE
	float                            FPSMinSteeringRateOverride;      // offset:0x050	type:FLOAT.0
	float                            FPSMaxSteeringRateOverride;      // offset:0x054	type:FLOAT.0
	vec3                             SeatCollisionBoundsOffset;       // offset:0x060	type:VECTOR3.0
};

struct CVehicleSeatInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                           SeatBoneName;                    // offset:0x008	type:STRING.ATSTRING
	string                           ShuffleLink;                     // offset:0x020	type:STRING.ATHASHVALUE
	string                           RearSeatLink;                    // offset:0x030	type:STRING.ATHASHVALUE
	enum _0xB44A8258                 DefaultCarTask;                  // offset:0x034	type:ENUM.32BIT
	bitset<enum _0x96AFDEA5>         SeatFlags;                       // offset:0x038	type:BITSET.32BIT
	float                            HairScale;                       // offset:0x03C	type:FLOAT.0
	string                           ShuffleLink2;                    // offset:0x040	type:STRING.ATHASHVALUE
};

struct CVehicleSet
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct _0xC1A92DE4>        ConditionalVehicleSets;          // offset:0x008	type:ARRAY.ATARRAY
};

struct CVehicleVariationData
{
	string                                      modelName;                       // offset:0x000	type:STRING.POINTER
	array<struct CVehicleModelColorIndices>     colors;                          // offset:0x008	type:ARRAY.ATARRAY
	array<string>                               kits;                            // offset:0x018	type:ARRAY.ATARRAY
	array<string>                               windowsWithExposedEdges;         // offset:0x028	type:ARRAY.ATARRAY
	struct PlateProbabilities                   plateProbabilities;              // offset:0x038	type:STRUCT.STRUCTURE
	uchar                                       lightSettings;                   // offset:0x04A	type:UCHAR.0
	uchar                                       sirenSettings;                   // offset:0x04B	type:UCHAR.0
};

struct CVehicleVariationGlobalData
{
	uint                             xenonLightColor;                 // offset:0x000	type:UINT.1
	uint                             xenonCoronaColor;                // offset:0x004	type:UINT.1
	float                            xenonLightIntensityModifier;     // offset:0x008	type:FLOAT.0
	float                            xenonCoronaIntensityModifier;    // offset:0x00C	type:FLOAT.0
};

struct CVehicleWeaponHandlingData : CBaseSubHandlingData
{
	array<string, 6>                                                     uWeaponHash;                     // offset:0x008	type:ARRAY.MEMBER
	array<int, 6>                                                        WeaponSeats;                     // offset:0x020	type:ARRAY.MEMBER
	array<enum eVehicleModType, 6>                                       WeaponVehicleModType;            // offset:0x038	type:ARRAY.MEMBER
	array<float, 12>                                                     fTurretSpeed;                    // offset:0x050	type:ARRAY.MEMBER
	array<float, 12>                                                     fTurretPitchMin;                 // offset:0x080	type:ARRAY.MEMBER
	array<float, 12>                                                     fTurretPitchMax;                 // offset:0x0B0	type:ARRAY.MEMBER
	array<float, 12>                                                     fTurretCamPitchMin;              // offset:0x0E0	type:ARRAY.MEMBER
	array<float, 12>                                                     fTurretCamPitchMax;              // offset:0x110	type:ARRAY.MEMBER
	array<float, 12>                                                     fBulletVelocityForGravity;       // offset:0x140	type:ARRAY.MEMBER
	array<float, 12>                                                     fTurretPitchForwardMin;          // offset:0x170	type:ARRAY.MEMBER
	array<struct CVehicleWeaponHandlingData__sTurretPitchLimits, 12>     TurretPitchLimitData;            // offset:0x1A0	type:ARRAY.MEMBER
	float                                                                fUvAnimationMult;                // offset:0x320	type:FLOAT.0
	float                                                                fMiscGadgetVar;                  // offset:0x324	type:FLOAT.0
	float                                                                fWheelImpactOffset;              // offset:0x328	type:FLOAT.0
};

struct CVehicleWeaponHandlingData__sTurretPitchLimits
{
	float                            fForwardAngleMin;                // offset:0x008	type:FLOAT.0
	float                            fForwardAngleMax;                // offset:0x00C	type:FLOAT.0
	float                            fBackwardAngleMin;               // offset:0x010	type:FLOAT.0
	float                            fBackwardAngleMid;               // offset:0x014	type:FLOAT.0
	float                            fBackwardAngleMax;               // offset:0x018	type:FLOAT.0
	float                            fBackwardForcedPitch;            // offset:0x01C	type:FLOAT.0
};

struct CVehicleWeaponInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	float                            KickbackAmplitude;               // offset:0x004	type:FLOAT.0
	float                            KickbackImpulse;                 // offset:0x008	type:FLOAT.0
	float                            KickbackOverrideTiming;          // offset:0x00C	type:FLOAT.0
};

struct CVehicleWheel
{
	string                           wheelName;                       // offset:0x020	type:STRING.ATHASHVALUE
	string                           wheelVariation;                  // offset:0x024	type:STRING.ATHASHVALUE
	string                           modShopLabel;                    // offset:0x028	type:STRING.CONST_STRING
	float                            rimRadius;                       // offset:0x030	type:FLOAT.0
	bool                             rear;                            // offset:0x034	type:BOOL.0
};

struct CVehicleWindowColor
{
	uint                             color;                           // offset:0x000	type:UINT.1
	string                           name;                            // offset:0x004	type:STRING.ATHASHVALUE
};

struct CVehicleXenonLightColor
{
	uint                             lightColor;                      // offset:0x000	type:UINT.1
	uint                             coronaColor;                     // offset:0x004	type:UINT.1
	float                            lightIntensityModifier;          // offset:0x008	type:FLOAT.0
	float                            coronaIntensityModifier;         // offset:0x00C	type:FLOAT.0
};

struct CVfxExtraInfo
{
	bitset<enum eExtraIncludes>      ptFxExtras;                      // offset:0x000	type:BITSET.32BIT
	string                           ptFxName;                        // offset:0x004	type:STRING.ATHASHVALUE
	vec3                             ptFxOffset;                      // offset:0x010	type:VECTOR3.0
	float                            ptFxRange;                       // offset:0x020	type:FLOAT.0
	float                            ptFxSpeedEvoMin;                 // offset:0x024	type:FLOAT.0
	float                            ptFxSpeedEvoMax;                 // offset:0x028	type:FLOAT.0
};

struct CVfxFogVolumeInfo
{
	float                            fadeDistStart;                   // offset:0x000	type:FLOAT.0
	float                            fadeDistEnd;                     // offset:0x004	type:FLOAT.0
	vec3                             position;                        // offset:0x010	type:VECTOR3.0
	vec3                             rotation;                        // offset:0x020	type:VECTOR3.0
	vec3                             scale;                           // offset:0x030	type:VECTOR3.0
	uchar                            colR;                            // offset:0x040	type:UCHAR.0
	uchar                            colG;                            // offset:0x041	type:UCHAR.0
	uchar                            colB;                            // offset:0x042	type:UCHAR.0
	uchar                            colA;                            // offset:0x043	type:UCHAR.0
	float                            hdrMult;                         // offset:0x044	type:FLOAT.0
	float                            range;                           // offset:0x048	type:FLOAT.0
	float                            density;                         // offset:0x04C	type:FLOAT.0
	float                            falloff;                         // offset:0x050	type:FLOAT.0
	enum _0x9CB34EAC                 lightingType;                    // offset:0x054	type:ENUM.32BIT
	uint64                           interiorHash;                    // offset:0x058	type:UINT64.0
	bool                             isUnderwater;                    // offset:0x060	type:BOOL.0
};

struct CVfxFogVolumeInfoMgr
{
	array<struct CVfxFogVolumeInfo>     vfxFogVolumeInfos;               // offset:0x000	type:ARRAY.ATARRAY
};

struct CVfxInteriorInfo
{
	bool                             smokePtFxEnabled;                // offset:0x000	type:BOOL.0
	string                           smokePtFxName;                   // offset:0x004	type:STRING.ATHASHVALUE
	float                            smokePtFxLevelOverride;          // offset:0x008	type:FLOAT.0
	bool                             dustPtFxEnabled;                 // offset:0x00C	type:BOOL.0
	string                           dustPtFxName;                    // offset:0x010	type:STRING.ATHASHVALUE
	float                            dustPtFxEvo;                     // offset:0x014	type:FLOAT.0
};

struct CVfxInteriorInfoMgr
{
	map<string, struct CVfxInteriorSetup>     vfxInteriorSetups;               // offset:0x000	type:MAP.ATBINARYMAP
	map<string, struct CVfxInteriorInfo>      vfxInteriorInfos;                // offset:0x018	type:MAP.ATBINARYMAP
};

struct CVfxInteriorSetup
{
	string                                interiorInfoName;                // offset:0x000	type:STRING.ATHASHVALUE
	map<string, struct CVfxRoomSetup>     vfxRoomSetups;                   // offset:0x008	type:MAP.ATBINARYMAP
};

struct CVfxPedInfo
{
	array<struct _0x0DD205EF>        _0x117EB4AA;                     // offset:0x000	type:ARRAY.ATARRAY
	array<struct _0x7180E947>        _0xEEBEA037;                     // offset:0x010	type:ARRAY.ATARRAY
	float                            _0x738EBB27;                     // offset:0x020	type:FLOAT.0
	bool                             _0x7DA6FB75;                     // offset:0x024	type:BOOL.0
	float                            footPtFxSpeedEvoMin;             // offset:0x028	type:FLOAT.0
	float                            footPtFxSpeedEvoMax;             // offset:0x02C	type:FLOAT.0
	bool                             _0x2B651735;                     // offset:0x030	type:BOOL.0
	bool                             _0x4FDF324B;                     // offset:0x031	type:BOOL.0
	float                            _0x46AC7BBB;                     // offset:0x034	type:FLOAT.0
	bool                             _0xB6D4D3D3;                     // offset:0x038	type:BOOL.0
	float                            _0x0FF742E7;                     // offset:0x03C	type:FLOAT.0
	bool                             _0x1CB5722F;                     // offset:0x040	type:BOOL.0
	bool                             _0xDC43AF2A;                     // offset:0x041	type:BOOL.0
	float                            _0x74867B8C;                     // offset:0x044	type:FLOAT.0
	float                            _0x4BE3A3EB;                     // offset:0x048	type:FLOAT.0
	bool                             _0x5852E080;                     // offset:0x04C	type:BOOL.0
	float                            _0x481F3029;                     // offset:0x050	type:FLOAT.0
	bool                             _0xC74AA0ED;                     // offset:0x054	type:BOOL.0
	float                            _0x11E4974D;                     // offset:0x058	type:FLOAT.0
	float                            _0x8533F9A3;                     // offset:0x05C	type:FLOAT.0
	bool                             _0x9DD88385;                     // offset:0x060	type:BOOL.0
	float                            _0x8279F7A8;                     // offset:0x064	type:FLOAT.0
	float                            _0x5BA56867;                     // offset:0x068	type:FLOAT.0
	float                            _0x7D927407;                     // offset:0x06C	type:FLOAT.0
	float                            _0x2511BDBE;                     // offset:0x070	type:FLOAT.0
	float                            _0x73E1883A;                     // offset:0x074	type:FLOAT.0
	float                            _0x2008BE53;                     // offset:0x078	type:FLOAT.0
	float                            _0x4D1B4AC9;                     // offset:0x07C	type:FLOAT.0
	bool                             _0x6505E8AC;                     // offset:0x080	type:BOOL.0
	float                            _0xD524D910;                     // offset:0x084	type:FLOAT.0
	string                           shotPtFxName;                    // offset:0x088	type:STRING.ATHASHVALUE
	bool                             _0xF23501B1;                     // offset:0x08C	type:BOOL.0
	array<struct _0x6BE7D583>        _0x52354E4D;                     // offset:0x090	type:ARRAY.ATARRAY
	float                            firePtFxSpeedEvoMin;             // offset:0x0A0	type:FLOAT.0
	float                            firePtFxSpeedEvoMax;             // offset:0x0A4	type:FLOAT.0
	bool                             _0x24294430;                     // offset:0x0A8	type:BOOL.0
	float                            _0x88A87948;                     // offset:0x0AC	type:FLOAT.0
	string                           smoulderPtFxName;                // offset:0x0B0	type:STRING.ATHASHVALUE
	enum eAnimBoneTag                _0xDFC20241;                     // offset:0x0B4	type:ENUM.32BIT
	enum eAnimBoneTag                _0x3CDABA39;                     // offset:0x0B8	type:ENUM.32BIT
	bool                             _0x9A84B96B;                     // offset:0x0BC	type:BOOL.0
	float                            _0xF1A99383;                     // offset:0x0C0	type:FLOAT.0
	string                           breathPtFxName;                  // offset:0x0C4	type:STRING.ATHASHVALUE
	float                            breathPtFxSpeedEvoMin;           // offset:0x0C8	type:FLOAT.0
	float                            breathPtFxSpeedEvoMax;           // offset:0x0CC	type:FLOAT.0
	float                            _0x3EEE7604;                     // offset:0x0D0	type:FLOAT.0
	float                            _0xADA6B70B;                     // offset:0x0D4	type:FLOAT.0
	float                            _0xED0D6A32;                     // offset:0x0D8	type:FLOAT.0
	float                            _0xBAF08F0C;                     // offset:0x0DC	type:FLOAT.0
	bool                             _0x8144A698;                     // offset:0x0E0	type:BOOL.0
	float                            _0xA2551E1F;                     // offset:0x0E4	type:FLOAT.0
	string                           breathWaterPtFxName;             // offset:0x0E8	type:STRING.ATHASHVALUE
	float                            breathWaterPtFxSpeedEvoMin;      // offset:0x0EC	type:FLOAT.0
	float                            breathWaterPtFxSpeedEvoMax;      // offset:0x0F0	type:FLOAT.0
	float                            _0x3EB9382D;                     // offset:0x0F4	type:FLOAT.0
	float                            _0xA56032E5;                     // offset:0x0F8	type:FLOAT.0
	bool                             _0x19B73FBF;                     // offset:0x0FC	type:BOOL.0
	float                            _0x9A7A1749;                     // offset:0x100	type:FLOAT.0
	string                           breathScubaPtFxName;             // offset:0x104	type:STRING.ATHASHVALUE
	float                            breathScubaPtFxSpeedEvoMin;      // offset:0x108	type:FLOAT.0
	float                            breathScubaPtFxSpeedEvoMax;      // offset:0x10C	type:FLOAT.0
	float                            _0xEE27CE08;                     // offset:0x110	type:FLOAT.0
	float                            _0xC7DDC9F3;                     // offset:0x114	type:FLOAT.0
	bool                             _0x1898111E;                     // offset:0x118	type:BOOL.0
	float                            _0x70A6F44A;                     // offset:0x11C	type:FLOAT.0
	bool                             _0xECC1B145;                     // offset:0x120	type:BOOL.0
	float                            _0x01CD1657;                     // offset:0x124	type:FLOAT.0
	string                           splashLodPtFxName;               // offset:0x128	type:STRING.ATHASHVALUE
	float                            splashLodPtFxSpeedEvoMin;        // offset:0x12C	type:FLOAT.0
	float                            splashLodPtFxSpeedEvoMax;        // offset:0x130	type:FLOAT.0
	bool                             _0x35BFD139;                     // offset:0x134	type:BOOL.0
	float                            _0x00A03C7E;                     // offset:0x138	type:FLOAT.0
	string                           splashEntryPtFxName;             // offset:0x13C	type:STRING.ATHASHVALUE
	float                            splashEntryPtFxSpeedEvoMin;      // offset:0x140	type:FLOAT.0
	float                            splashEntryPtFxSpeedEvoMax;      // offset:0x144	type:FLOAT.0
	string                           splashInPtFxName;                // offset:0x148	type:STRING.ATHASHVALUE
	float                            _0x165511D8;                     // offset:0x14C	type:FLOAT.0
	float                            splashInPtFxSpeedEvoMin;         // offset:0x150	type:FLOAT.0
	float                            splashInPtFxSpeedEvoMax;         // offset:0x154	type:FLOAT.0
	string                           splashOutPtFxName;               // offset:0x158	type:STRING.ATHASHVALUE
	float                            splashOutPtFxSpeedEvoMin;        // offset:0x15C	type:FLOAT.0
	float                            splashOutPtFxSpeedEvoMax;        // offset:0x160	type:FLOAT.0
	string                           splashWadePtFxName;              // offset:0x164	type:STRING.ATHASHVALUE
	float                            _0xEFB260BE;                     // offset:0x168	type:FLOAT.0
	float                            _0x801E64FC;                     // offset:0x16C	type:FLOAT.0
	string                           splashTrailPtFxName;             // offset:0x170	type:STRING.ATHASHVALUE
	float                            splashTrailPtFxSpeedEvoMin;      // offset:0x174	type:FLOAT.0
	float                            splashTrailPtFxSpeedEvoMax;      // offset:0x178	type:FLOAT.0
	float                            _0xF42A961A;                     // offset:0x17C	type:FLOAT.0
	float                            _0x18C9D61C;                     // offset:0x180	type:FLOAT.0
	string                           waterDripPtFxName;               // offset:0x1A8	type:STRING.ATHASHVALUE
	float                            _0xDDF2C6C2;                     // offset:0x1AC	type:FLOAT.0
	bool                             _0xC472D2E1;                     // offset:0x1B0	type:BOOL.0
	string                           _0x62E7EF48;                     // offset:0x1B4	type:STRING.ATHASHVALUE
	string                           _0x85727DC3;                     // offset:0x1B8	type:STRING.ATHASHVALUE
	string                           _0xC7F63FC3;                     // offset:0x1BC	type:STRING.ATHASHVALUE
	string                           _0x6B4E6F22;                     // offset:0x1C0	type:STRING.ATHASHVALUE
	string                           _0x8BD31C28;                     // offset:0x1C4	type:STRING.ATHASHVALUE
	float                            _0xA218A2CF;                     // offset:0x1C8	type:FLOAT.0
	float                            underwaterDisturbPtFxSpeedEvoMin; // offset:0x1CC	type:FLOAT.0
	float                            underwaterDisturbPtFxSpeedEvoMax; // offset:0x1D0	type:FLOAT.0
	bool                             _0x837A086B;                     // offset:0x1D4	type:BOOL.0
	float                            _0x979F1FD3;                     // offset:0x1D8	type:FLOAT.0
	string                           parachuteDeployPtFxName;         // offset:0x1DC	type:STRING.ATHASHVALUE
	enum eAnimBoneTag                _0x2465C2C8;                     // offset:0x1E0	type:ENUM.32BIT
	bool                             _0x8A64DB65;                     // offset:0x1E4	type:BOOL.0
	float                            _0xCF8FEF68;                     // offset:0x1E8	type:FLOAT.0
	string                           parachuteSmokePtFxName;          // offset:0x1EC	type:STRING.ATHASHVALUE
	enum eAnimBoneTag                _0xEDE5A245;                     // offset:0x1F0	type:ENUM.32BIT
	bool                             _0xD897163E;                     // offset:0x1F4	type:BOOL.0
	array<struct _0xDA63D205>        _0x6039F76B;                     // offset:0x1F8	type:ARRAY.ATARRAY
	bool                             _0x80A4494A;                     // offset:0x208	type:BOOL.0
	float                            _0xA6F789DE;                     // offset:0x20C	type:FLOAT.0
	string                           _0x6578A916;                     // offset:0x210	type:STRING.ATHASHVALUE
};

struct CVfxPedInfoMgr
{
	map<string, struct VfxPedFootDecalInfo>     vfxPedFootDecalInfos;            // offset:0x000	type:MAP.ATBINARYMAP
	map<string, struct VfxPedFootPtFxInfo>      vfxPedFootPtFxInfos;             // offset:0x018	type:MAP.ATBINARYMAP
	map<string, struct VfxPedFootInfo>          vfxPedFootInfos;                 // offset:0x030	type:MAP.ATBINARYMAP
	map<string, struct VfxPedWadeDecalInfo>     vfxPedWadeDecalInfos;            // offset:0x048	type:MAP.ATBINARYMAP
	map<string, struct VfxPedWadePtFxInfo>      vfxPedWadePtFxInfos;             // offset:0x060	type:MAP.ATBINARYMAP
	map<string, struct VfxPedWadeInfo>          vfxPedWadeInfos;                 // offset:0x078	type:MAP.ATBINARYMAP
	map<string, struct VfxPedBoneWadeInfo>      vfxPedBoneWadeInfos;             // offset:0x090	type:MAP.ATBINARYMAP
	map<string, struct VfxPedBoneWaterInfo>     vfxPedBoneWaterInfos;            // offset:0x0A8	type:MAP.ATBINARYMAP
	map<string, struct CVfxPedInfo>             vfxPedInfos;                     // offset:0x0C0	type:MAP.ATBINARYMAP
};

struct CVfxRegionInfo
{
	bool                             windDebrisPtFxEnabled;           // offset:0x000	type:BOOL.0
	string                           windDebrisPtFxName;              // offset:0x004	type:STRING.ATHASHVALUE
	array<struct _0x0CD0D0CD>        _0x095DAE69;                     // offset:0x008	type:ARRAY.ATARRAY
	array<struct _0x0CD0D0CD>        _0xB15C9A00;                     // offset:0x018	type:ARRAY.ATARRAY
	array<struct _0x0CD0D0CD>        _0xDF9F2F45;                     // offset:0x028	type:ARRAY.ATARRAY
};

struct CVfxRegionInfoMgr
{
	map<string, struct CVfxRegionInfo>     vfxRegionInfos;                  // offset:0x000	type:MAP.ATBINARYMAP
};

struct CVfxRoomSetup
{
	string                           interiorInfoName;                // offset:0x000	type:STRING.ATHASHVALUE
};

struct CVfxVehicleInfo
{
	float                            mtlBangPtFxVehicleEvo;           // offset:0x000	type:FLOAT.0
	float                            mtlBangPtFxVehicleScale;         // offset:0x004	type:FLOAT.0
	float                            mtlScrapePtFxVehicleEvo;         // offset:0x008	type:FLOAT.0
	float                            mtlScrapePtFxVehicleScale;       // offset:0x00C	type:FLOAT.0
	bool                             exhaustPtFxEnabled;              // offset:0x010	type:BOOL.0
	string                           exhaustPtFxName;                 // offset:0x014	type:STRING.ATHASHVALUE
	float                            exhaustPtFxCutOffSpeed;          // offset:0x018	type:FLOAT.0
	float                            exhaustPtFxRange;                // offset:0x01C	type:FLOAT.0
	float                            exhaustPtFxScale;                // offset:0x020	type:FLOAT.0
	float                            exhaustPtFxSpeedEvoMin;          // offset:0x024	type:FLOAT.0
	float                            exhaustPtFxSpeedEvoMax;          // offset:0x028	type:FLOAT.0
	float                            exhaustPtFxTempEvoMin;           // offset:0x02C	type:FLOAT.0
	float                            exhaustPtFxTempEvoMax;           // offset:0x030	type:FLOAT.0
	bool                             exhaustPtFxThrottleEvoOnGearChange; // offset:0x034	type:BOOL.0
	bool                             engineStartupPtFxEnabled;        // offset:0x035	type:BOOL.0
	string                           engineStartupPtFxName;           // offset:0x038	type:STRING.ATHASHVALUE
	float                            engineStartupPtFxRange;          // offset:0x03C	type:FLOAT.0
	bool                             misfirePtFxEnabled;              // offset:0x040	type:BOOL.0
	string                           misfirePtFxName;                 // offset:0x044	type:STRING.ATHASHVALUE
	float                            misfirePtFxRange;                // offset:0x048	type:FLOAT.0
	bool                             backfirePtFxEnabled;             // offset:0x04C	type:BOOL.0
	string                           backfirePtFxName;                // offset:0x050	type:STRING.ATHASHVALUE
	float                            backfirePtFxRange;               // offset:0x054	type:FLOAT.0
	bool                             engineDamagePtFxEnabled;         // offset:0x058	type:BOOL.0
	bool                             engineDamagePtFxHasPanel;        // offset:0x059	type:BOOL.0
	bool                             engineDamagePtFxHasRotorEvo;     // offset:0x05A	type:BOOL.0
	string                           engineDamagePtFxNoPanelName;     // offset:0x05C	type:STRING.ATHASHVALUE
	string                           engineDamagePtFxPanelOpenName;   // offset:0x060	type:STRING.ATHASHVALUE
	string                           engineDamagePtFxPanelShutName;   // offset:0x064	type:STRING.ATHASHVALUE
	float                            engineDamagePtFxRange;           // offset:0x068	type:FLOAT.0
	float                            engineDamagePtFxSpeedEvoMin;     // offset:0x06C	type:FLOAT.0
	float                            engineDamagePtFxSpeedEvoMax;     // offset:0x070	type:FLOAT.0
	bool                             overturnedSmokePtFxEnabled;      // offset:0x074	type:BOOL.0
	string                           overturnedSmokePtFxName;         // offset:0x078	type:STRING.ATHASHVALUE
	float                            overturnedSmokePtFxRange;        // offset:0x07C	type:FLOAT.0
	float                            overturnedSmokePtFxAngleThresh;  // offset:0x080	type:FLOAT.0
	float                            overturnedSmokePtFxSpeedThresh;  // offset:0x084	type:FLOAT.0
	float                            overturnedSmokePtFxEngineHealthThresh; // offset:0x088	type:FLOAT.0
	bool                             leakPtFxEnabled;                 // offset:0x08C	type:BOOL.0
	string                           leakPtFxOilName;                 // offset:0x090	type:STRING.ATHASHVALUE
	string                           leakPtFxPetrolName;              // offset:0x094	type:STRING.ATHASHVALUE
	float                            leakPtFxRange;                   // offset:0x098	type:FLOAT.0
	float                            leakPtFxSpeedEvoMin;             // offset:0x09C	type:FLOAT.0
	float                            leakPtFxSpeedEvoMax;             // offset:0x0A0	type:FLOAT.0
	int                              wheelGenericPtFxSet;             // offset:0x0A4	type:INT.0
	int                              wheelGenericDecalSet;            // offset:0x0A8	type:INT.0
	float                            wheelGenericRangeMult;           // offset:0x0AC	type:FLOAT.0
	bool                             wheelSkidmarkRearOnly;           // offset:0x0B0	type:BOOL.0
	float                            wheelSkidmarkSlipMult;           // offset:0x0B4	type:FLOAT.0
	float                            wheelSkidmarkPressureMult;       // offset:0x0B8	type:FLOAT.0
	float                            wheelFrictionPtFxFricMult;       // offset:0x0BC	type:FLOAT.0
	float                            wheelDisplacementPtFxDispMult;   // offset:0x0C0	type:FLOAT.0
	float                            wheelBurnoutPtFxFricMult;        // offset:0x0C4	type:FLOAT.0
	float                            wheelBurnoutPtFxTempMult;        // offset:0x0C8	type:FLOAT.0
	float                            wheelLowLodPtFxScale;            // offset:0x0CC	type:FLOAT.0
	string                           wheelPuncturePtFxName;           // offset:0x0D0	type:STRING.ATHASHVALUE
	float                            wheelPuncturePtFxRange;          // offset:0x0D4	type:FLOAT.0
	string                           wheelBurstPtFxName;              // offset:0x0D8	type:STRING.ATHASHVALUE
	float                            wheelBurstPtFxRange;             // offset:0x0DC	type:FLOAT.0
	string                           wheelFirePtFxName;               // offset:0x0E0	type:STRING.ATHASHVALUE
	float                            wheelFirePtFxRange;              // offset:0x0E4	type:FLOAT.0
	float                            wheelFirePtFxSpeedEvoMin;        // offset:0x0E8	type:FLOAT.0
	float                            wheelFirePtFxSpeedEvoMax;        // offset:0x0EC	type:FLOAT.0
	bool                             wreckedFirePtFxEnabled;          // offset:0x0F0	type:BOOL.0
	string                           wreckedFirePtFxName;             // offset:0x0F4	type:STRING.ATHASHVALUE
	float                            wreckedFirePtFxDurationMin;      // offset:0x0F8	type:FLOAT.0
	float                            wreckedFirePtFxDurationMax;      // offset:0x0FC	type:FLOAT.0
	float                            wreckedFirePtFxRadius;           // offset:0x100	type:FLOAT.0
	bool                             wreckedFire2PtFxEnabled;         // offset:0x104	type:BOOL.0
	string                           wreckedFire2PtFxName;            // offset:0x108	type:STRING.ATHASHVALUE
	float                            wreckedFire2PtFxDurationMin;     // offset:0x10C	type:FLOAT.0
	float                            wreckedFire2PtFxDurationMax;     // offset:0x110	type:FLOAT.0
	float                            wreckedFire2PtFxRadius;          // offset:0x114	type:FLOAT.0
	bool                             wreckedFire2UseOverheatBone;     // offset:0x118	type:BOOL.0
	vec3                             wreckedFire2OffsetPos;           // offset:0x120	type:VECTOR3.0
	bool                             wreckedFire3PtFxEnabled;         // offset:0x130	type:BOOL.0
	string                           wreckedFire3PtFxName;            // offset:0x134	type:STRING.ATHASHVALUE
	float                            wreckedFire3PtFxDurationMin;     // offset:0x138	type:FLOAT.0
	float                            wreckedFire3PtFxDurationMax;     // offset:0x13C	type:FLOAT.0
	float                            wreckedFire3PtFxRadius;          // offset:0x140	type:FLOAT.0
	bool                             wreckedFire3UseOverheatBone;     // offset:0x144	type:BOOL.0
	vec3                             wreckedFire3OffsetPos;           // offset:0x150	type:VECTOR3.0
	string                           petrolTankFirePtFxName;          // offset:0x160	type:STRING.ATHASHVALUE
	float                            petrolTankFirePtFxRange;         // offset:0x164	type:FLOAT.0
	float                            petrolTankFirePtFxSpeedEvoMin;   // offset:0x168	type:FLOAT.0
	float                            petrolTankFirePtFxSpeedEvoMax;   // offset:0x16C	type:FLOAT.0
	float                            petrolTankFirePtFxRadius;        // offset:0x170	type:FLOAT.0
	bool                             boatEntryPtFxEnabled;            // offset:0x174	type:BOOL.0
	float                            boatEntryPtFxRange;              // offset:0x178	type:FLOAT.0
	string                           boatEntryPtFxName;               // offset:0x17C	type:STRING.ATHASHVALUE
	float                            boatEntryPtFxSpeedEvoMin;        // offset:0x180	type:FLOAT.0
	float                            boatEntryPtFxSpeedEvoMax;        // offset:0x184	type:FLOAT.0
	float                            boatEntryPtFxScale;              // offset:0x188	type:FLOAT.0
	bool                             boatExitPtFxEnabled;             // offset:0x18C	type:BOOL.0
	float                            boatExitPtFxRange;               // offset:0x190	type:FLOAT.0
	string                           boatExitPtFxName;                // offset:0x194	type:STRING.ATHASHVALUE
	float                            boatExitPtFxSpeedEvoMin;         // offset:0x198	type:FLOAT.0
	float                            boatExitPtFxSpeedEvoMax;         // offset:0x19C	type:FLOAT.0
	float                            boatExitPtFxScale;               // offset:0x1A0	type:FLOAT.0
	bool                             boatBowPtFxEnabled;              // offset:0x1A4	type:BOOL.0
	float                            boatBowPtFxRange;                // offset:0x1A8	type:FLOAT.0
	string                           boatBowPtFxForwardName;          // offset:0x1AC	type:STRING.ATHASHVALUE
	string                           boatBowPtFxReverseName;          // offset:0x1B0	type:STRING.ATHASHVALUE
	string                           boatBowPtFxForwardMountedName;   // offset:0x1B4	type:STRING.ATHASHVALUE
	vec3                             boatBowPtFxForwardMountedOffset; // offset:0x1C0	type:VECTOR3.0
	float                            boatBowPtFxSpeedEvoMin;          // offset:0x1D0	type:FLOAT.0
	float                            boatBowPtFxSpeedEvoMax;          // offset:0x1D4	type:FLOAT.0
	float                            boatBowPtFxKeelEvoMin;           // offset:0x1D8	type:FLOAT.0
	float                            boatBowPtFxKeelEvoMax;           // offset:0x1DC	type:FLOAT.0
	float                            boatBowPtFxScale;                // offset:0x1E0	type:FLOAT.0
	float                            boatBowPtFxReverseOffset;        // offset:0x1E4	type:FLOAT.0
	bool                             boatWashPtFxEnabled;             // offset:0x1E8	type:BOOL.0
	float                            boatWashPtFxRange;               // offset:0x1EC	type:FLOAT.0
	string                           boatWashPtFxName;                // offset:0x1F0	type:STRING.ATHASHVALUE
	float                            boatWashPtFxSpeedEvoMin;         // offset:0x1F4	type:FLOAT.0
	float                            boatWashPtFxSpeedEvoMax;         // offset:0x1F8	type:FLOAT.0
	float                            boatWashPtFxScale;               // offset:0x1FC	type:FLOAT.0
	bool                             boatPropellerPtFxEnabled;        // offset:0x200	type:BOOL.0
	float                            boatPropellerPtFxRange;          // offset:0x204	type:FLOAT.0
	string                           boatPropellerPtFxName;           // offset:0x208	type:STRING.ATHASHVALUE
	float                            boatPropellerPtFxForwardSpeedEvoMin; // offset:0x20C	type:FLOAT.0
	float                            boatPropellerPtFxForwardSpeedEvoMax; // offset:0x210	type:FLOAT.0
	float                            boatPropellerPtFxBackwardSpeedEvoMin; // offset:0x214	type:FLOAT.0
	float                            boatPropellerPtFxBackwardSpeedEvoMax; // offset:0x218	type:FLOAT.0
	float                            boatPropellerPtFxDepthEvoMin;    // offset:0x21C	type:FLOAT.0
	float                            boatPropellerPtFxDepthEvoMax;    // offset:0x220	type:FLOAT.0
	float                            boatPropellerPtFxScale;          // offset:0x224	type:FLOAT.0
	bool                             boatLowLodWakePtFxEnabled;       // offset:0x228	type:BOOL.0
	float                            boatLowLodWakePtFxRangeMin;      // offset:0x22C	type:FLOAT.0
	float                            boatLowLodWakePtFxRangeMax;      // offset:0x230	type:FLOAT.0
	string                           boatLowLodWakePtFxName;          // offset:0x234	type:STRING.ATHASHVALUE
	float                            boatLowLodWakePtFxSpeedEvoMin;   // offset:0x238	type:FLOAT.0
	float                            boatLowLodWakePtFxSpeedEvoMax;   // offset:0x23C	type:FLOAT.0
	float                            boatLowLodWakePtFxScale;         // offset:0x240	type:FLOAT.0
	bool                             planeAfterburnerPtFxEnabled;     // offset:0x244	type:BOOL.0
	string                           planeAfterburnerPtFxName;        // offset:0x248	type:STRING.ATHASHVALUE
	float                            planeAfterburnerPtFxRange;       // offset:0x24C	type:FLOAT.0
	float                            planeAfterburnerPtFxScale;       // offset:0x250	type:FLOAT.0
	bool                             planeWingTipPtFxEnabled;         // offset:0x254	type:BOOL.0
	string                           planeWingTipPtFxName;            // offset:0x258	type:STRING.ATHASHVALUE
	float                            planeWingTipPtFxRange;           // offset:0x25C	type:FLOAT.0
	float                            planeWingTipPtFxSpeedEvoMin;     // offset:0x260	type:FLOAT.0
	float                            planeWingTipPtFxSpeedEvoMax;     // offset:0x264	type:FLOAT.0
	bool                             planeDamageFirePtFxEnabled;      // offset:0x268	type:BOOL.0
	string                           planeDamageFirePtFxName;         // offset:0x26C	type:STRING.ATHASHVALUE
	float                            planeDamageFirePtFxRange;        // offset:0x270	type:FLOAT.0
	float                            planeDamageFirePtFxSpeedEvoMin;  // offset:0x274	type:FLOAT.0
	float                            planeDamageFirePtFxSpeedEvoMax;  // offset:0x278	type:FLOAT.0
	bool                             planeGroundDisturbPtFxEnabled;   // offset:0x27C	type:BOOL.0
	string                           planeGroundDisturbPtFxNameDefault; // offset:0x280	type:STRING.ATHASHVALUE
	string                           planeGroundDisturbPtFxNameSand;  // offset:0x284	type:STRING.ATHASHVALUE
	string                           planeGroundDisturbPtFxNameDirt;  // offset:0x288	type:STRING.ATHASHVALUE
	string                           planeGroundDisturbPtFxNameWater; // offset:0x28C	type:STRING.ATHASHVALUE
	string                           planeGroundDisturbPtFxNameFoliage; // offset:0x290	type:STRING.ATHASHVALUE
	float                            planeGroundDisturbPtFxRange;     // offset:0x294	type:FLOAT.0
	float                            planeGroundDisturbPtFxDist;      // offset:0x298	type:FLOAT.0
	float                            planeGroundDisturbPtFxSpeedEvoMin; // offset:0x29C	type:FLOAT.0
	float                            planeGroundDisturbPtFxSpeedEvoMax; // offset:0x2A0	type:FLOAT.0
	bool                             aircraftSectionDamageSmokePtFxEnabled; // offset:0x2A4	type:BOOL.0
	string                           aircraftSectionDamageSmokePtFxName; // offset:0x2A8	type:STRING.ATHASHVALUE
	float                            aircraftSectionDamageSmokePtFxRange; // offset:0x2AC	type:FLOAT.0
	float                            aircraftSectionDamageSmokePtFxSpeedEvoMin; // offset:0x2B0	type:FLOAT.0
	float                            aircraftSectionDamageSmokePtFxSpeedEvoMax; // offset:0x2B4	type:FLOAT.0
	bool                             aircraftDownwashPtFxEnabled;     // offset:0x2B8	type:BOOL.0
	string                           aircraftDownwashPtFxNameDefault; // offset:0x2BC	type:STRING.ATHASHVALUE
	string                           aircraftDownwashPtFxNameSand;    // offset:0x2C0	type:STRING.ATHASHVALUE
	string                           aircraftDownwashPtFxNameDirt;    // offset:0x2C4	type:STRING.ATHASHVALUE
	string                           aircraftDownwashPtFxNameWater;   // offset:0x2C8	type:STRING.ATHASHVALUE
	string                           aircraftDownwashPtFxNameFoliage; // offset:0x2CC	type:STRING.ATHASHVALUE
	float                            aircraftDownwashPtFxRange;       // offset:0x2D0	type:FLOAT.0
	float                            aircraftDownwashPtFxDist;        // offset:0x2D4	type:FLOAT.0
	float                            aircraftDownwashPtFxSpeedEvoMin; // offset:0x2D8	type:FLOAT.0
	float                            aircraftDownwashPtFxSpeedEvoMax; // offset:0x2DC	type:FLOAT.0
	bool                             splashInPtFxEnabled;             // offset:0x2E0	type:BOOL.0
	float                            splashInPtFxRange;               // offset:0x2E4	type:FLOAT.0
	string                           splashInPtFxName;                // offset:0x2E8	type:STRING.ATHASHVALUE
	float                            splashInPtFxSizeEvoMax;          // offset:0x2EC	type:FLOAT.0
	float                            splashInPtFxSpeedDownwardThresh; // offset:0x2F0	type:FLOAT.0
	float                            splashInPtFxSpeedLateralEvoMin;  // offset:0x2F4	type:FLOAT.0
	float                            splashInPtFxSpeedLateralEvoMax;  // offset:0x2F8	type:FLOAT.0
	float                            splashInPtFxSpeedDownwardEvoMin; // offset:0x2FC	type:FLOAT.0
	float                            splashInPtFxSpeedDownwardEvoMax; // offset:0x300	type:FLOAT.0
	bool                             splashOutPtFxEnabled;            // offset:0x304	type:BOOL.0
	float                            splashOutPtFxRange;              // offset:0x308	type:FLOAT.0
	string                           splashOutPtFxName;               // offset:0x30C	type:STRING.ATHASHVALUE
	float                            splashOutPtFxSizeEvoMax;         // offset:0x310	type:FLOAT.0
	float                            splashOutPtFxSpeedLateralEvoMin; // offset:0x314	type:FLOAT.0
	float                            splashOutPtFxSpeedLateralEvoMax; // offset:0x318	type:FLOAT.0
	float                            splashOutPtFxSpeedUpwardEvoMin;  // offset:0x31C	type:FLOAT.0
	float                            splashOutPtFxSpeedUpwardEvoMax;  // offset:0x320	type:FLOAT.0
	bool                             splashWadePtFxEnabled;           // offset:0x324	type:BOOL.0
	float                            splashWadePtFxRange;             // offset:0x328	type:FLOAT.0
	string                           splashWadePtFxName;              // offset:0x32C	type:STRING.ATHASHVALUE
	float                            splashWadePtFxSizeEvoMax;        // offset:0x330	type:FLOAT.0
	float                            splashWadePtFxSpeedVehicleEvoMin; // offset:0x334	type:FLOAT.0
	float                            splashWadePtFxSpeedVehicleEvoMax; // offset:0x338	type:FLOAT.0
	float                            splashWadePtFxSpeedRiverEvoMin;  // offset:0x33C	type:FLOAT.0
	float                            splashWadePtFxSpeedRiverEvoMax;  // offset:0x340	type:FLOAT.0
	bool                             splashTrailPtFxEnabled;          // offset:0x344	type:BOOL.0
	float                            splashTrailPtFxRange;            // offset:0x348	type:FLOAT.0
	string                           splashTrailPtFxName;             // offset:0x34C	type:STRING.ATHASHVALUE
	float                            splashTrailPtFxSizeEvoMax;       // offset:0x350	type:FLOAT.0
	float                            splashTrailPtFxSpeedEvoMin;      // offset:0x354	type:FLOAT.0
	float                            splashTrailPtFxSpeedEvoMax;      // offset:0x358	type:FLOAT.0
};

struct CVfxVehicleInfoMgr
{
	map<string, struct CVfxVehicleInfo>     vfxVehicleInfos;                 // offset:0x000	type:MAP.ATBINARYMAP
};

struct CVfxWeaponInfoMgr
{
	map<string, struct _0x922EA309>     _0xEABB51F6;                     // offset:0x000	type:MAP.ATBINARYMAP
	map<string, struct _0x6AF8FFCE>     _0x2BD77314;                     // offset:0x018	type:MAP.ATBINARYMAP
};

struct CVideoEditorErrorMessage
{
	string                           type;                            // offset:0x000	type:STRING.ATHASHVALUE
	string                           header;                          // offset:0x004	type:STRING.ATHASHVALUE
	string                           body;                            // offset:0x008	type:STRING.ATHASHVALUE
};

struct CVideoEditorMenuArray
{
	array<struct CVideoEditorMenuItem>         CVideoEditorMenuItems;           // offset:0x000	type:ARRAY.ATARRAY
	array<struct CVideoEditorErrorMessage>     CVideoEditorErrorMessages;       // offset:0x010	type:ARRAY.ATARRAY
	array<struct CVideoEditorPositions>        CVideoEditorPositioning;         // offset:0x020	type:ARRAY.ATARRAY
};

struct CVideoEditorMenuItem
{
	string                           MenuId;                          // offset:0x000	type:STRING.ATHASHVALUE
	enum _0xCBB4F135                 columnId;                        // offset:0x004	type:ENUM.32BIT
	enum _0x5A5AAF32                 columnType;                      // offset:0x008	type:ENUM.32BIT
	enum _0x588B6307                 columnDataType;                  // offset:0x00C	type:ENUM.32BIT
	string                           BackMenuId;                      // offset:0x010	type:STRING.ATHASHVALUE
	array<struct _0xDA6A70C3>        Option;                          // offset:0x018	type:ARRAY.ATARRAY
	struct _0xAEBF879E               Content;                         // offset:0x028	type:STRUCT.SIMPLE_POINTER
};

struct CVideoEditorPositions
{
	string                           name;                            // offset:0x000	type:STRING.ATSTRING
	float                            pos_x;                           // offset:0x010	type:FLOAT.0
	float                            pos_y;                           // offset:0x014	type:FLOAT.0
	float                            size_x;                          // offset:0x018	type:FLOAT.0
	float                            size_y;                          // offset:0x01C	type:FLOAT.0
};

struct CVideoSettings : CSettings
{
	int                              AdapterIndex;                    // offset:0x008	type:INT.0
	int                              OutputIndex;                     // offset:0x00C	type:INT.0
	int                              ScreenWidth;                     // offset:0x010	type:INT.0
	int                              ScreenHeight;                    // offset:0x014	type:INT.0
	int                              RefreshRate;                     // offset:0x018	type:INT.0
	int                              Windowed;                        // offset:0x01C	type:INT.0
	int                              VSync;                           // offset:0x020	type:INT.0
	int                              Stereo;                          // offset:0x024	type:INT.0
	float                            Convergence;                     // offset:0x028	type:FLOAT.0
	float                            Separation;                      // offset:0x02C	type:FLOAT.0
	int                              PauseOnFocusLoss;                // offset:0x030	type:INT.0
	int                              AspectRatio;                     // offset:0x034	type:INT.0
};

struct CWantedHelicopterDispatch__Tunables : CTuning
{
	float                            TimeBetweenSpawnAttempts;        // offset:0x010	type:FLOAT.0
	uint                             MinSpawnTimeForPoliceHeliAfterDestroyed; // offset:0x014	type:UINT.0
};

struct CWantedResponse
{
	array<struct CDispatchResponse>     DispatchServices;                // offset:0x000	type:ARRAY.ATARRAY
};

struct CWanted__Tunables : CTuning
{
	struct CWanted__Tunables__WantedLevel                WantedClean;                     // offset:0x010	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__WantedLevel                WantedLevel1;                    // offset:0x038	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__WantedLevel                WantedLevel2;                    // offset:0x060	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__WantedLevel                WantedLevel3;                    // offset:0x088	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__WantedLevel                WantedLevel4;                    // offset:0x0B0	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__WantedLevel                WantedLevel5;                    // offset:0x0D8	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty                 Difficulty;                      // offset:0x100	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Rendering                  Rendering;                       // offset:0x5D0	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Timers                     Timers;                          // offset:0x5D4	type:STRUCT.STRUCTURE
	uint                                                 MaxTimeTargetVehicleMoving;      // offset:0x5D8	type:UINT.0
	uint                                                 DefaultAmnestyTime;              // offset:0x5DC	type:UINT.0
	uint                                                 DefaultHiddenEvasionTimeReduction; // offset:0x5E0	type:UINT.0
	uint                                                 InitialAreaTimeoutWhenSeen;      // offset:0x5E4	type:UINT.0
	uint                                                 InitialAreaTimeoutWhenCrimeReported; // offset:0x5E8	type:UINT.0
	float                                                ExtraStartHiddenEvasionDelay;    // offset:0x5EC	type:FLOAT.0
	map<string, struct CWanted__Tunables__CrimeInfo>     CrimeInfosDefault;               // offset:0x5F0	type:MAP.ATBINARYMAP
	map<string, struct CWanted__Tunables__CrimeInfo>     _0xA0DDD721;                     // offset:0x608	type:MAP.ATBINARYMAP
};

struct CWanted__Tunables__CrimeInfo
{
	uint                             _0x517ADE11;                     // offset:0x008	type:UINT.0
	uint                             _0xE9C62A17;                     // offset:0x00C	type:UINT.0
	uint                             Lifetime;                        // offset:0x010	type:UINT.0
	uint                             ReportDelay;                     // offset:0x014	type:UINT.0
	bool                             _0xDF826DE8;                     // offset:0x018	type:BOOL.0
};

struct CWanted__Tunables__Difficulty
{
	struct CWanted__Tunables__Difficulty__Spawning       Spawning;                        // offset:0x000	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Despawning     Despawning;                      // offset:0x050	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Peds           Peds;                            // offset:0x0A0	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Dispatch       Dispatch;                        // offset:0x4C0	type:STRUCT.STRUCTURE
};

struct CWanted__Tunables__Difficulty__Despawning
{
	struct CWanted__Tunables__Difficulty__Range     MaxFacingThreshold;              // offset:0x000	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Range     MaxMovingThreshold;              // offset:0x010	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Range     MinDistanceToBeConsideredLaggingBehind; // offset:0x020	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Range     MinDistanceToCheckClumped;       // offset:0x030	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Range     MaxDistanceToBeConsideredClumped; // offset:0x040	type:STRUCT.STRUCTURE
};

struct CWanted__Tunables__Difficulty__Dispatch
{
	struct CWanted__Tunables__Difficulty__Range     TimeBetweenSpawnAttemptsModifier; // offset:0x000	type:STRUCT.STRUCTURE
};

struct CWanted__Tunables__Difficulty__Peds
{
	struct CWanted__Tunables__Difficulty__Peds__Attributes     Cops;                            // offset:0x000	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Peds__Attributes     Swat;                            // offset:0x160	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Peds__Attributes     Army;                            // offset:0x2C0	type:STRUCT.STRUCTURE
};

struct CWanted__Tunables__Difficulty__Peds__Attributes
{
	struct CWanted__Tunables__Difficulty__Peds__Attributes__Situations     Situations;                      // offset:0x000	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Range                            AutomobileSpeedModifier;         // offset:0x140	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Range                            HeliSpeedModifier;               // offset:0x150	type:STRUCT.STRUCTURE
};

struct CWanted__Tunables__Difficulty__Peds__Attributes__Situations
{
	struct CWanted__Tunables__Difficulty__Peds__Attributes__Situations__Situation     Default;                         // offset:0x000	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Peds__Attributes__Situations__Situation     InVehicle;                       // offset:0x050	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Peds__Attributes__Situations__Situation     InHeli;                          // offset:0x0A0	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Peds__Attributes__Situations__Situation     InBoat;                          // offset:0x0F0	type:STRUCT.STRUCTURE
};

struct CWanted__Tunables__Difficulty__Peds__Attributes__Situations__Situation
{
	struct CWanted__Tunables__Difficulty__Range     SensesRange;                     // offset:0x000	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Range     IdentificationRange;             // offset:0x010	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Range     ShootRateModifier;               // offset:0x020	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Range     WeaponAccuracy;                  // offset:0x030	type:STRUCT.STRUCTURE
	float                                           WeaponAccuracyModifierForEvasiveMovement; // offset:0x040	type:FLOAT.0
	float                                           WeaponAccuracyModifierForOffScreen; // offset:0x044	type:FLOAT.0
	float                                           WeaponAccuracyModifierForAimedAt; // offset:0x048	type:FLOAT.0
	float                                           MinForDrivebys;                  // offset:0x04C	type:FLOAT.0
};

struct CWanted__Tunables__Difficulty__Range
{
	float                            Min;                             // offset:0x000	type:FLOAT.0
	float                            Max;                             // offset:0x004	type:FLOAT.0
	float                            ValueForMin;                     // offset:0x008	type:FLOAT.0
	float                            ValueForMax;                     // offset:0x00C	type:FLOAT.0
};

struct CWanted__Tunables__Difficulty__Spawning
{
	struct CWanted__Tunables__Difficulty__Spawning__Scoring     Scoring;                         // offset:0x000	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Range                 IdealDistance;                   // offset:0x030	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Range                 ChancesToForceWaitInFront;       // offset:0x040	type:STRUCT.STRUCTURE
};

struct CWanted__Tunables__Difficulty__Spawning__Scoring
{
	struct CWanted__Tunables__Difficulty__Spawning__Scoring__Weights     Weights;                         // offset:0x000	type:STRUCT.STRUCTURE
};

struct CWanted__Tunables__Difficulty__Spawning__Scoring__Weights
{
	struct CWanted__Tunables__Difficulty__Range     Distance;                        // offset:0x000	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Range     Direction;                       // offset:0x010	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__Difficulty__Range     Randomness;                      // offset:0x020	type:STRUCT.STRUCTURE
};

struct CWanted__Tunables__Rendering
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	bool                             Witnesses;                       // offset:0x001	type:BOOL.0
	bool                             Crimes;                          // offset:0x002	type:BOOL.0
};

struct CWanted__Tunables__Timers
{
	float                            TimeBetweenDifficultyUpdates;    // offset:0x000	type:FLOAT.0
};

struct CWanted__Tunables__WantedLevel
{
	struct CWanted__Tunables__WantedLevel__Difficulty     Difficulty;                      // offset:0x000	type:STRUCT.STRUCTURE
};

struct CWanted__Tunables__WantedLevel__Difficulty
{
	struct CWanted__Tunables__WantedLevel__Difficulty__Calculation     Calculation;                     // offset:0x000	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__WantedLevel__Difficulty__Helis           Helis;                           // offset:0x01C	type:STRUCT.STRUCTURE
};

struct CWanted__Tunables__WantedLevel__Difficulty__Calculation
{
	float                                                                       FromWantedLevel;                 // offset:0x000	type:FLOAT.0
	struct CWanted__Tunables__WantedLevel__Difficulty__Calculation__Weights     Weights;                         // offset:0x004	type:STRUCT.STRUCTURE
	struct CWanted__Tunables__WantedLevel__Difficulty__Calculation__Decay       Decay;                           // offset:0x010	type:STRUCT.STRUCTURE
};

struct CWanted__Tunables__WantedLevel__Difficulty__Calculation__Decay
{
	float                            TimeEvadingForMaxValue;          // offset:0x000	type:FLOAT.0
	float                            MaxValue;                        // offset:0x004	type:FLOAT.0
	bool                             DisableWhenOffMission;           // offset:0x008	type:BOOL.0
};

struct CWanted__Tunables__WantedLevel__Difficulty__Calculation__Weights
{
	float                            WantedLevel;                     // offset:0x000	type:FLOAT.0
	float                            LastSpottedDistance;             // offset:0x004	type:FLOAT.0
	float                            Randomness;                      // offset:0x008	type:FLOAT.0
};

struct CWanted__Tunables__WantedLevel__Difficulty__Helis
{
	struct CWanted__Tunables__WantedLevel__Difficulty__Helis__Refuel     Refuel;                          // offset:0x000	type:STRUCT.STRUCTURE
};

struct CWanted__Tunables__WantedLevel__Difficulty__Helis__Refuel
{
	bool                             Enabled;                         // offset:0x000	type:BOOL.0
	float                            TimeBefore;                      // offset:0x004	type:FLOAT.0
	float                            Delay;                           // offset:0x008	type:FLOAT.0
};

struct CWeaponAccuracyModifier
{
	float                            AccuracyModifier;                // offset:0x000	type:FLOAT.0
};

struct CWeaponActionResult
{
	bitset<enum _0xA7DA38FF>         WeaponType;                      // offset:0x008	type:BITSET.32BIT
	string                           ActionResult;                    // offset:0x00C	type:STRING.ATHASHVALUE
};

struct CWeaponActionResultList
{
	bitset<enum _0xA7DA38FF>         WeaponType;                      // offset:0x010	type:BITSET.32BIT
	array<string>                    aActionResults;                  // offset:0x018	type:ARRAY.ATARRAY
};

struct CWeaponAnimations
{
	string                           CoverMovementClipSetHash;        // offset:0x000	type:STRING.ATHASHVALUE
	string                           CoverMovementExtraClipSetHash;   // offset:0x004	type:STRING.ATHASHVALUE
	string                           CoverAlternateMovementClipSetHash; // offset:0x008	type:STRING.ATHASHVALUE
	string                           CoverWeaponClipSetHash;          // offset:0x00C	type:STRING.ATHASHVALUE
	string                           MotionClipSetHash;               // offset:0x010	type:STRING.ATHASHVALUE
	string                           MotionFilterHash;                // offset:0x014	type:STRING.ATHASHVALUE
	string                           MotionCrouchClipSetHash;         // offset:0x018	type:STRING.ATHASHVALUE
	string                           MotionStrafingClipSetHash;       // offset:0x01C	type:STRING.ATHASHVALUE
	string                           MotionStrafingStealthClipSetHash; // offset:0x020	type:STRING.ATHASHVALUE
	string                           MotionStrafingUpperBodyClipSetHash; // offset:0x024	type:STRING.ATHASHVALUE
	string                           WeaponClipSetHash;               // offset:0x028	type:STRING.ATHASHVALUE
	string                           WeaponClipSetStreamedHash;       // offset:0x02C	type:STRING.ATHASHVALUE
	string                           WeaponClipSetHashInjured;        // offset:0x030	type:STRING.ATHASHVALUE
	string                           WeaponClipSetHashStealth;        // offset:0x034	type:STRING.ATHASHVALUE
	string                           WeaponClipSetHashHiCover;        // offset:0x038	type:STRING.ATHASHVALUE
	string                           AlternativeClipSetWhenBlocked;   // offset:0x03C	type:STRING.ATHASHVALUE
	string                           ScopeWeaponClipSet;              // offset:0x040	type:STRING.ATHASHVALUE
	string                           AlternateAimingStandingClipSetHash; // offset:0x044	type:STRING.ATHASHVALUE
	string                           AlternateAimingCrouchingClipSetHash; // offset:0x048	type:STRING.ATHASHVALUE
	string                           FiringVariationsStandingClipSetHash; // offset:0x04C	type:STRING.ATHASHVALUE
	string                           FiringVariationsCrouchingClipSetHash; // offset:0x050	type:STRING.ATHASHVALUE
	string                           AimTurnStandingClipSetHash;      // offset:0x054	type:STRING.ATHASHVALUE
	string                           AimTurnCrouchingClipSetHash;     // offset:0x058	type:STRING.ATHASHVALUE
	string                           MeleeBaseClipSetHash;            // offset:0x05C	type:STRING.ATHASHVALUE
	string                           MeleeClipSetHash;                // offset:0x060	type:STRING.ATHASHVALUE
	string                           MeleeVariationClipSetHash;       // offset:0x064	type:STRING.ATHASHVALUE
	string                           MeleeTauntClipSetHash;           // offset:0x068	type:STRING.ATHASHVALUE
	string                           MeleeSupportTauntClipSetHash;    // offset:0x06C	type:STRING.ATHASHVALUE
	string                           MeleeStealthClipSetHash;         // offset:0x070	type:STRING.ATHASHVALUE
	string                           ShellShockedClipSetHash;         // offset:0x074	type:STRING.ATHASHVALUE
	string                           JumpUpperbodyClipSetHash;        // offset:0x078	type:STRING.ATHASHVALUE
	string                           FallUpperbodyClipSetHash;        // offset:0x07C	type:STRING.ATHASHVALUE
	string                           FromStrafeTransitionUpperBodyClipSetHash; // offset:0x080	type:STRING.ATHASHVALUE
	string                           SwapWeaponFilterHash;            // offset:0x084	type:STRING.ATHASHVALUE
	string                           SwapWeaponInLowCoverFilterHash;  // offset:0x088	type:STRING.ATHASHVALUE
	struct void                      WeaponSwapData;                  // offset:0x090	type:STRUCT.EXTERNAL_NAMED
	string                           WeaponSwapClipSetHash;           // offset:0x098	type:STRING.ATHASHVALUE
	string                           AimGrenadeThrowNormalClipsetHash; // offset:0x09C	type:STRING.ATHASHVALUE
	string                           AimGrenadeThrowAlternateClipsetHash; // offset:0x0A0	type:STRING.ATHASHVALUE
	string                           GestureBeckonOverrideClipSetHash; // offset:0x0A4	type:STRING.ATHASHVALUE
	string                           GestureOverThereOverrideClipSetHash; // offset:0x0A8	type:STRING.ATHASHVALUE
	string                           GestureHaltOverrideClipSetHash;  // offset:0x0AC	type:STRING.ATHASHVALUE
	string                           GestureGlancesOverrideClipSetHash; // offset:0x0B0	type:STRING.ATHASHVALUE
	string                           CombatReactionOverrideClipSetHash; // offset:0x0B4	type:STRING.ATHASHVALUE
	string                           FPSTransitionFromIdleHash;       // offset:0x0B8	type:STRING.ATHASHVALUE
	string                           FPSTransitionFromRNGHash;        // offset:0x0BC	type:STRING.ATHASHVALUE
	string                           FPSTransitionFromLTHash;         // offset:0x0C0	type:STRING.ATHASHVALUE
	string                           FPSTransitionFromScopeHash;      // offset:0x0C4	type:STRING.ATHASHVALUE
	string                           FPSTransitionFromUnholsterHash;  // offset:0x0C8	type:STRING.ATHASHVALUE
	string                           FPSTransitionFromStealthHash;    // offset:0x0CC	type:STRING.ATHASHVALUE
	string                           FPSTransitionToStealthHash;      // offset:0x0D0	type:STRING.ATHASHVALUE
	string                           FPSTransitionToStealthFromUnholsterHash; // offset:0x0D4	type:STRING.ATHASHVALUE
	array<string>                    FPSFidgetClipsetHashes;          // offset:0x0D8	type:ARRAY.ATARRAY
	string                           MovementOverrideClipSetHash;     // offset:0x0E8	type:STRING.ATHASHVALUE
	string                           WeaponClipSetHashForClone;       // offset:0x0EC	type:STRING.ATHASHVALUE
	string                           MotionClipSetHashForClone;       // offset:0x0F0	type:STRING.ATHASHVALUE
	float                            AnimFireRateModifier;            // offset:0x0F4	type:FLOAT.0
	float                            AnimBlindFireRateModifier;       // offset:0x0F8	type:FLOAT.0
	float                            AnimWantingToShootFireRateModifier; // offset:0x0FC	type:FLOAT.0
	bool                             UseFromStrafeUpperBodyAimNetwork; // offset:0x100	type:BOOL.0
	bool                             AimingDownTheBarrel;             // offset:0x101	type:BOOL.0
	bool                             UseLeftHandIKAllowTags;          // offset:0x102	type:BOOL.0
	bool                             BlockLeftHandIKWhileAiming;      // offset:0x103	type:BOOL.0
};

struct CWeaponAnimationsSet
{
	string                                    Fallback;                        // offset:0x000	type:STRING.ATHASHVALUE
	string                                    FPSStrafeClipSetHash;            // offset:0x004	type:STRING.ATHASHVALUE
	map<string, struct CWeaponAnimations>     WeaponAnimations;                // offset:0x008	type:MAP.ATBINARYMAP
};

struct CWeaponAnimationsSets
{
	map<string, struct CWeaponAnimationsSet>     WeaponAnimationsSets;            // offset:0x000	type:MAP.ATBINARYMAP
};

struct CWeaponBoneId
{
};

struct CWeaponComponentClipInfo : CWeaponComponentInfo
{
	int                              ClipSize;                        // offset:0x048	type:INT.0
	struct void                      ReloadData;                      // offset:0x050	type:STRUCT.EXTERNAL_NAMED
	string                           AmmoInfo;                        // offset:0x058	type:STRING.ATHASHVALUE
	string                           TracerFx;                        // offset:0x05C	type:STRING.ATHASHVALUE
	int                              TracerFxSpacing;                 // offset:0x060	type:INT.0
	int                              TracerFxForceLast;               // offset:0x064	type:INT.0
	string                           ShellFx;                         // offset:0x068	type:STRING.ATHASHVALUE
	string                           ShellFxFP;                       // offset:0x06C	type:STRING.ATHASHVALUE
	uint                             BulletsInBatch;                  // offset:0x070	type:UINT.0
};

struct CWeaponComponentData
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
};

struct CWeaponComponentFlashLightInfo : CWeaponComponentInfo
{
	float                            MainLightIntensity;              // offset:0x048	type:FLOAT.0
	uint                             MainLightColor;                  // offset:0x04C	type:UINT.1
	float                            MainLightRange;                  // offset:0x050	type:FLOAT.0
	float                            MainLightFalloffExponent;        // offset:0x054	type:FLOAT.0
	float                            MainLightInnerAngle;             // offset:0x058	type:FLOAT.0
	float                            MainLightOuterAngle;             // offset:0x05C	type:FLOAT.0
	float                            MainLightCoronaIntensity;        // offset:0x060	type:FLOAT.0
	float                            MainLightCoronaSize;             // offset:0x064	type:FLOAT.0
	float                            MainLightVolumeIntensity;        // offset:0x068	type:FLOAT.0
	float                            MainLightVolumeSize;             // offset:0x06C	type:FLOAT.0
	float                            MainLightVolumeExponent;         // offset:0x070	type:FLOAT.0
	uint                             MainLightVolumeOuterColor;       // offset:0x074	type:UINT.1
	float                            MainLightShadowFadeDistance;     // offset:0x078	type:FLOAT.0
	float                            MainLightSpecularFadeDistance;   // offset:0x07C	type:FLOAT.0
	float                            SecondaryLightIntensity;         // offset:0x080	type:FLOAT.0
	uint                             SecondaryLightColor;             // offset:0x084	type:UINT.1
	float                            SecondaryLightRange;             // offset:0x088	type:FLOAT.0
	float                            SecondaryLightFalloffExponent;   // offset:0x08C	type:FLOAT.0
	float                            SecondaryLightInnerAngle;        // offset:0x090	type:FLOAT.0
	float                            SecondaryLightOuterAngle;        // offset:0x094	type:FLOAT.0
	float                            SecondaryLightVolumeIntensity;   // offset:0x098	type:FLOAT.0
	float                            SecondaryLightVolumeSize;        // offset:0x09C	type:FLOAT.0
	float                            SecondaryLightVolumeExponent;    // offset:0x0A0	type:FLOAT.0
	uint                             SecondaryLightVolumeOuterColor;  // offset:0x0A4	type:UINT.1
	float                            SecondaryLightFadeDistance;      // offset:0x0A8	type:FLOAT.0
	float                            fTargetDistalongAimCamera;       // offset:0x0AC	type:FLOAT.0
	struct CWeaponBoneId             FlashLightBone;                  // offset:0x0B0	type:STRUCT.STRUCTURE
	struct CWeaponBoneId             FlashLightBoneBulbOn;            // offset:0x0B2	type:STRUCT.STRUCTURE
	struct CWeaponBoneId             FlashLightBoneBulbOff;           // offset:0x0B4	type:STRUCT.STRUCTURE
	bool                             ToggleWhenAiming;                // offset:0x0B6	type:BOOL.0
};

struct CWeaponComponentGroupInfo : CWeaponComponentInfo
{
	array<struct void, 2>            Infos;                           // offset:0x048	type:ARRAY.ATFIXEDARRAY
};

struct CWeaponComponentInfo
{
	string                             Name;                            // offset:0x010	type:STRING.ATHASHVALUE
	string                             Model;                           // offset:0x014	type:STRING.ATHASHVALUE
	string                             LocName;                         // offset:0x018	type:STRING.ATFINALHASHSTRING
	string                             LocDesc;                         // offset:0x01C	type:STRING.ATFINALHASHSTRING
	struct CWeaponBoneId               AttachBone;                      // offset:0x020	type:STRUCT.STRUCTURE
	struct CWeaponAccuracyModifier     AccuracyModifier;                // offset:0x028	type:STRUCT.POINTER
	struct CWeaponDamageModifier       DamageModifier;                  // offset:0x030	type:STRUCT.POINTER
	struct CWeaponFallOffModifier      FallOffModifier;                 // offset:0x038	type:STRUCT.POINTER
	bool                               bShownOnWheel;                   // offset:0x040	type:BOOL.0
	bool                               CreateObject;                    // offset:0x041	type:BOOL.0
	bool                               ApplyWeaponTint;                 // offset:0x042	type:BOOL.0
	char                               HudDamage;                       // offset:0x043	type:CHAR.0
	char                               HudSpeed;                        // offset:0x044	type:CHAR.0
	char                               HudCapacity;                     // offset:0x045	type:CHAR.0
	char                               HudAccuracy;                     // offset:0x046	type:CHAR.0
	char                               HudRange;                        // offset:0x047	type:CHAR.0
};

struct CWeaponComponentInfoBlob
{
	array<struct CWeaponComponentData>          Data;                            // offset:0x000	type:ARRAY.ATARRAY
	array<struct CWeaponComponentInfo, 420>     Infos;                           // offset:0x010	type:ARRAY.ATFIXEDARRAY
	string                                      InfoBlobName;                    // offset:0xD38	type:STRING.ATSTRING
};

struct CWeaponComponentLaserSightInfo : CWeaponComponentInfo
{
	float                            CoronaSize;                      // offset:0x048	type:FLOAT.0
	float                            CoronaIntensity;                 // offset:0x04C	type:FLOAT.0
	struct CWeaponBoneId             LaserSightBone;                  // offset:0x050	type:STRUCT.STRUCTURE
};

struct CWeaponComponentPoint
{
	string                                                  AttachBone;                      // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CWeaponComponentPoint__sComponent, 11>     Components;                      // offset:0x008	type:ARRAY.ATFIXEDARRAY
};

struct CWeaponComponentPoint__sComponent
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	bool                             Default;                         // offset:0x004	type:BOOL.0
};

struct CWeaponComponentProgrammableTargetingInfo : CWeaponComponentInfo
{
};

struct CWeaponComponentReloadData : CWeaponComponentData
{
	string                           PedIdleReloadClipId;             // offset:0x010	type:STRING.ATHASHVALUE
	string                           PedIdleReloadEmptyClipId;        // offset:0x014	type:STRING.ATHASHVALUE
	string                           PedAimReloadClipId;              // offset:0x018	type:STRING.ATHASHVALUE
	string                           PedAimReloadEmptyClipId;         // offset:0x01C	type:STRING.ATHASHVALUE
	string                           PedLowCoverReloadEmptyClipId;    // offset:0x020	type:STRING.ATHASHVALUE
	string                           PedLowLeftCoverReloadClipId;     // offset:0x024	type:STRING.ATHASHVALUE
	string                           PedLowRightCoverReloadClipId;    // offset:0x028	type:STRING.ATHASHVALUE
	string                           WeaponIdleReloadClipId;          // offset:0x02C	type:STRING.ATHASHVALUE
	string                           WeaponIdleReloadEmptyClipId;     // offset:0x030	type:STRING.ATHASHVALUE
	string                           WeaponAimReloadClipId;           // offset:0x034	type:STRING.ATHASHVALUE
	string                           WeaponAimReloadEmptyClipId;      // offset:0x038	type:STRING.ATHASHVALUE
	string                           WeaponLowCoverReloadEmptyClipId; // offset:0x03C	type:STRING.ATHASHVALUE
	string                           WeaponLowLeftCoverReloadClipId;  // offset:0x040	type:STRING.ATHASHVALUE
	string                           WeaponLowRightCoverReloadClipId; // offset:0x044	type:STRING.ATHASHVALUE
	float                            AnimRateModifier;                // offset:0x048	type:FLOAT.0
};

struct CWeaponComponentReloadLoopedData : CWeaponComponentData
{
	array<struct CWeaponComponentReloadData, 3>     Sections;                        // offset:0x010	type:ARRAY.MEMBER
};

struct CWeaponComponentScopeInfo : CWeaponComponentInfo
{
	string                                               CameraHash;                      // offset:0x048	type:STRING.ATHASHVALUE
	float                                                RecoilShakeAmplitude;            // offset:0x04C	type:FLOAT.0
	float                                                ExtraZoomFactorForAccurateMode;  // offset:0x050	type:FLOAT.0
	string                                               ReticuleHash;                    // offset:0x054	type:STRING.ATHASHVALUE
	enum CWeaponComponentScopeInfo__SpecialScopeType     SpecialScopeType;                // offset:0x058	type:ENUM.32BIT
};

struct CWeaponComponentSuppressorInfo : CWeaponComponentInfo
{
	struct CWeaponBoneId             MuzzleBone;                      // offset:0x048	type:STRUCT.STRUCTURE
	string                           FlashFx;                         // offset:0x04C	type:STRING.ATHASHVALUE
	bool                             ShouldSilence;                   // offset:0x050	type:BOOL.0
	float                            RecoilShakeAmplitudeModifier;    // offset:0x054	type:FLOAT.0
};

struct CWeaponComponentVariantModelInfo : CWeaponComponentInfo
{
	char                             TintIndexOverride;               // offset:0x048	type:CHAR.0
	array<struct _0x343AFFA8>        ExtraComponents;                 // offset:0x050	type:ARRAY.ATARRAY
};

struct CWeaponDamageModifier
{
	float                            DamageModifier;                  // offset:0x000	type:FLOAT.0
};

struct CWeaponFallOffModifier
{
	float                            RangeModifier;                   // offset:0x000	type:FLOAT.0
	float                            DamageModifier;                  // offset:0x004	type:FLOAT.0
};

struct CWeaponFiringPatternAliases
{
	string                                                             Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CWeaponFiringPatternAliases__CFiringPatternAlias>     Aliases;                         // offset:0x008	type:ARRAY.ATARRAY
};

struct CWeaponFiringPatternAliases__CFiringPatternAlias
{
	string                           FiringPattern;                   // offset:0x000	type:STRING.ATHASHVALUE
	string                           Alias;                           // offset:0x004	type:STRING.ATHASHVALUE
};

struct CWeaponInfo : CItemInfo
{
	enum eDamageType                                               DamageType;                      // offset:0x020	type:ENUM.32BIT
	struct CWeaponInfo__sExplosion                                 Explosion;                       // offset:0x024	type:STRUCT.STRUCTURE
	struct CWeaponInfo__sFrontClearTestParams                      FrontClearTestParams;            // offset:0x03C	type:STRUCT.STRUCTURE
	enum eFireType                                                 FireType;                        // offset:0x054	type:ENUM.32BIT
	enum eWeaponWheelSlot                                          WheelSlot;                       // offset:0x058	type:ENUM.32BIT
	string                                                         Group;                           // offset:0x05C	type:STRING.ATHASHVALUE
	struct void                                                    AmmoInfo;                        // offset:0x060	type:STRUCT.EXTERNAL_NAMED
	struct void                                                    AimingInfo;                      // offset:0x068	type:STRUCT.EXTERNAL_NAMED
	uint                                                           ClipSize;                        // offset:0x070	type:UINT.0
	float                                                          AccuracySpread;                  // offset:0x074	type:FLOAT.0
	float                                                          AccurateModeAccuracyModifier;    // offset:0x078	type:FLOAT.0
	float                                                          RunAndGunAccuracyModifier;       // offset:0x07C	type:FLOAT.0
	float                                                          RunAndGunAccuracyMinOverride;    // offset:0x080	type:FLOAT.0
	float                                                          RecoilAccuracyMax;               // offset:0x084	type:FLOAT.0
	float                                                          RecoilErrorTime;                 // offset:0x088	type:FLOAT.0
	float                                                          RecoilRecoveryRate;              // offset:0x08C	type:FLOAT.0
	float                                                          RecoilAccuracyToAllowHeadShotAI; // offset:0x090	type:FLOAT.0
	float                                                          MinHeadShotDistanceAI;           // offset:0x094	type:FLOAT.0
	float                                                          MaxHeadShotDistanceAI;           // offset:0x098	type:FLOAT.0
	float                                                          HeadShotDamageModifierAI;        // offset:0x09C	type:FLOAT.0
	float                                                          RecoilAccuracyToAllowHeadShotPlayer; // offset:0x0A0	type:FLOAT.0
	float                                                          MinHeadShotDistancePlayer;       // offset:0x0A4	type:FLOAT.0
	float                                                          MaxHeadShotDistancePlayer;       // offset:0x0A8	type:FLOAT.0
	float                                                          HeadShotDamageModifierPlayer;    // offset:0x0AC	type:FLOAT.0
	float                                                          Damage;                          // offset:0x0B0	type:FLOAT.0
	float                                                          DamageTime;                      // offset:0x0B4	type:FLOAT.0
	float                                                          DamageTimeInVehicle;             // offset:0x0B8	type:FLOAT.0
	float                                                          DamageTimeInVehicleHeadShot;     // offset:0x0BC	type:FLOAT.0
	float                                                          _0x2E225B8E;                     // offset:0x0C0	type:FLOAT.0
	string                                                         _0x1146DD49;                     // offset:0x0C4	type:STRING.ATHASHVALUE
	float                                                          HitLimbsDamageModifier;          // offset:0x0C8	type:FLOAT.0
	float                                                          NetworkHitLimbsDamageModifier;   // offset:0x0CC	type:FLOAT.0
	float                                                          LightlyArmouredDamageModifier;   // offset:0x0D0	type:FLOAT.0
	float                                                          VehicleDamageModifier;           // offset:0x0D4	type:FLOAT.0
	float                                                          Force;                           // offset:0x0D8	type:FLOAT.0
	float                                                          ForceHitPed;                     // offset:0x0DC	type:FLOAT.0
	float                                                          ForceHitVehicle;                 // offset:0x0E0	type:FLOAT.0
	float                                                          ForceHitFlyingHeli;              // offset:0x0E4	type:FLOAT.0
	array<struct _0x4B4F9BDC>                                      OverrideForces;                  // offset:0x0E8	type:ARRAY.ATARRAY
	float                                                          ForceMaxStrengthMult;            // offset:0x0F8	type:FLOAT.0
	float                                                          ForceFalloffRangeStart;          // offset:0x0FC	type:FLOAT.0
	float                                                          ForceFalloffRangeEnd;            // offset:0x100	type:FLOAT.0
	float                                                          ForceFalloffMin;                 // offset:0x104	type:FLOAT.0
	float                                                          ProjectileForce;                 // offset:0x108	type:FLOAT.0
	float                                                          FragImpulse;                     // offset:0x10C	type:FLOAT.0
	float                                                          Penetration;                     // offset:0x110	type:FLOAT.0
	float                                                          VerticalLaunchAdjustment;        // offset:0x114	type:FLOAT.0
	float                                                          DropForwardVelocity;             // offset:0x118	type:FLOAT.0
	float                                                          Speed;                           // offset:0x11C	type:FLOAT.0
	uint                                                           BulletsInBatch;                  // offset:0x120	type:UINT.0
	float                                                          BatchSpread;                     // offset:0x124	type:FLOAT.0
	float                                                          ReloadTimeMP;                    // offset:0x128	type:FLOAT.0
	float                                                          ReloadTimeSP;                    // offset:0x12C	type:FLOAT.0
	float                                                          VehicleReloadTime;               // offset:0x130	type:FLOAT.0
	float                                                          AnimReloadRate;                  // offset:0x134	type:FLOAT.0
	int                                                            BulletsPerAnimLoop;              // offset:0x138	type:INT.0
	float                                                          TimeBetweenShots;                // offset:0x13C	type:FLOAT.0
	float                                                          TimeLeftBetweenShotsWhereShouldFireIsCached; // offset:0x140	type:FLOAT.0
	float                                                          SpinUpTime;                      // offset:0x144	type:FLOAT.0
	float                                                          SpinTime;                        // offset:0x148	type:FLOAT.0
	float                                                          SpinDownTime;                    // offset:0x14C	type:FLOAT.0
	float                                                          AlternateWaitTime;               // offset:0x150	type:FLOAT.0
	float                                                          BulletBendingNearRadius;         // offset:0x154	type:FLOAT.0
	float                                                          BulletBendingFarRadius;          // offset:0x158	type:FLOAT.0
	float                                                          BulletBendingZoomedRadius;       // offset:0x15C	type:FLOAT.0
	float                                                          FirstPersonBulletBendingNearRadius; // offset:0x160	type:FLOAT.0
	float                                                          FirstPersonBulletBendingFarRadius; // offset:0x164	type:FLOAT.0
	float                                                          FirstPersonBulletBendingZoomedRadius; // offset:0x168	type:FLOAT.0
	struct CWeaponInfo__sFx                                        Fx;                              // offset:0x170	type:STRUCT.STRUCTURE
	int                                                            InitialRumbleDuration;           // offset:0x250	type:INT.0
	float                                                          InitialRumbleIntensity;          // offset:0x254	type:FLOAT.0
	float                                                          InitialRumbleIntensityTrigger;   // offset:0x258	type:FLOAT.0
	int                                                            RumbleDuration;                  // offset:0x25C	type:INT.0
	float                                                          RumbleIntensity;                 // offset:0x260	type:FLOAT.0
	float                                                          RumbleIntensityTrigger;          // offset:0x264	type:FLOAT.0
	float                                                          RumbleDamageIntensity;           // offset:0x268	type:FLOAT.0
	int                                                            InitialRumbleDurationFps;        // offset:0x26C	type:INT.0
	float                                                          InitialRumbleIntensityFps;       // offset:0x270	type:FLOAT.0
	int                                                            RumbleDurationFps;               // offset:0x274	type:INT.0
	float                                                          RumbleIntensityFps;              // offset:0x278	type:FLOAT.0
	float                                                          NetworkPlayerDamageModifier;     // offset:0x27C	type:FLOAT.0
	float                                                          NetworkPedDamageModifier;        // offset:0x280	type:FLOAT.0
	float                                                          NetworkHeadShotPlayerDamageModifier; // offset:0x284	type:FLOAT.0
	float                                                          LockOnRange;                     // offset:0x288	type:FLOAT.0
	float                                                          WeaponRange;                     // offset:0x28C	type:FLOAT.0
	float                                                          AiSoundRange;                    // offset:0x290	type:FLOAT.0
	float                                                          AiPotentialBlastEventRange;      // offset:0x294	type:FLOAT.0
	float                                                          DamageFallOffRangeMin;           // offset:0x298	type:FLOAT.0
	float                                                          DamageFallOffRangeMax;           // offset:0x29C	type:FLOAT.0
	float                                                          DamageFallOffModifier;           // offset:0x2A8	type:FLOAT.0
	string                                                         VehicleWeaponHash;               // offset:0x2B4	type:STRING.ATHASHVALUE
	string                                                         DefaultCameraHash;               // offset:0x2B8	type:STRING.ATHASHVALUE
	string                                                         AimCameraHash;                   // offset:0x2BC	type:STRING.ATHASHVALUE
	string                                                         FireCameraHash;                  // offset:0x2C0	type:STRING.ATHASHVALUE
	string                                                         CoverCameraHash;                 // offset:0x2C4	type:STRING.ATHASHVALUE
	string                                                         CoverReadyToFireCameraHash;      // offset:0x2C8	type:STRING.ATHASHVALUE
	string                                                         RunAndGunCameraHash;             // offset:0x2CC	type:STRING.ATHASHVALUE
	string                                                         CinematicShootingCameraHash;     // offset:0x2D0	type:STRING.ATHASHVALUE
	string                                                         AlternativeOrScopedCameraHash;   // offset:0x2D4	type:STRING.ATHASHVALUE
	string                                                         RunAndGunAlternativeOrScopedCameraHash; // offset:0x2D8	type:STRING.ATHASHVALUE
	string                                                         CinematicShootingAlternativeOrScopedCameraHash; // offset:0x2DC	type:STRING.ATHASHVALUE
	string                                                         PovTurretCameraHash;             // offset:0x2E0	type:STRING.ATHASHVALUE
	string                                                         RecoilShakeHash;                 // offset:0x2E4	type:STRING.ATHASHVALUE
	string                                                         RecoilShakeHashFirstPerson;      // offset:0x2E8	type:STRING.ATHASHVALUE
	string                                                         AccuracyOffsetShakeHash;         // offset:0x2EC	type:STRING.ATHASHVALUE
	uint                                                           MinTimeBetweenRecoilShakes;      // offset:0x2F0	type:UINT.0
	float                                                          RecoilShakeAmplitude;            // offset:0x2F4	type:FLOAT.0
	float                                                          ExplosionShakeAmplitude;         // offset:0x2F8	type:FLOAT.0
	float                                                          CameraFov;                       // offset:0x2FC	type:FLOAT.0
	float                                                          FirstPersonAimFovMin;            // offset:0x300	type:FLOAT.0
	float                                                          FirstPersonAimFovMax;            // offset:0x304	type:FLOAT.0
	float                                                          FirstPersonScopeFov;             // offset:0x308	type:FLOAT.0
	float                                                          FirstPersonScopeAttachmentFov;   // offset:0x30C	type:FLOAT.0
	vec3                                                           FirstPersonDrivebyIKOffset;      // offset:0x310	type:VECTOR3.0
	vec3                                                           FirstPersonRNGOffset;            // offset:0x320	type:VECTOR3.0
	vec3                                                           FirstPersonRNGRotationOffset;    // offset:0x330	type:VECTOR3.0
	vec3                                                           FirstPersonLTOffset;             // offset:0x340	type:VECTOR3.0
	vec3                                                           FirstPersonLTRotationOffset;     // offset:0x350	type:VECTOR3.0
	vec3                                                           FirstPersonScopeOffset;          // offset:0x360	type:VECTOR3.0
	vec3                                                           FirstPersonScopeAttachmentOffset; // offset:0x370	type:VECTOR3.0
	vec3                                                           FirstPersonScopeRotationOffset;  // offset:0x380	type:VECTOR3.0
	vec3                                                           FirstPersonScopeAttachmentRotationOffset; // offset:0x390	type:VECTOR3.0
	vec3                                                           FirstPersonAsThirdPersonIdleOffset; // offset:0x3A0	type:VECTOR3.0
	vec3                                                           FirstPersonAsThirdPersonRNGOffset; // offset:0x3B0	type:VECTOR3.0
	vec3                                                           FirstPersonAsThirdPersonLTOffset; // offset:0x3C0	type:VECTOR3.0
	vec3                                                           FirstPersonAsThirdPersonScopeOffset; // offset:0x3D0	type:VECTOR3.0
	vec3                                                           FirstPersonAsThirdPersonWeaponBlockedOffset; // offset:0x3E0	type:VECTOR3.0
	float                                                          FirstPersonDofSubjectMagnificationPowerFactorNear; // offset:0x3F0	type:FLOAT.0
	float                                                          FirstPersonDofMaxNearInFocusDistance; // offset:0x3F4	type:FLOAT.0
	float                                                          FirstPersonDofMaxNearInFocusDistanceBlendLevel; // offset:0x3F8	type:FLOAT.0
	array<struct CWeaponInfo__sFirstPersonScopeAttachmentData>     FirstPersonScopeAttachmentData;  // offset:0x400	type:ARRAY.ATARRAY
	float                                                          ZoomFactorForAccurateMode;       // offset:0x410	type:FLOAT.0
	vec3                                                           AimOffsetMin;                    // offset:0x420	type:VECTOR3.0
	vec3                                                           AimOffsetMax;                    // offset:0x430	type:VECTOR3.0
	vec2                                                           TorsoAimOffset;                  // offset:0x440	type:VECTOR2.0
	vec2                                                           TorsoCrouchedAimOffset;          // offset:0x448	type:VECTOR2.0
	float                                                          AimProbeLengthMin;               // offset:0x450	type:FLOAT.0
	float                                                          AimProbeLengthMax;               // offset:0x454	type:FLOAT.0
	vec3                                                           AimOffsetMinFPSIdle;             // offset:0x460	type:VECTOR3.0
	vec3                                                           AimOffsetMedFPSIdle;             // offset:0x470	type:VECTOR3.0
	vec3                                                           AimOffsetMaxFPSIdle;             // offset:0x480	type:VECTOR3.0
	vec3                                                           AimOffsetMinFPSLT;               // offset:0x490	type:VECTOR3.0
	vec3                                                           AimOffsetMaxFPSLT;               // offset:0x4A0	type:VECTOR3.0
	vec3                                                           AimOffsetMinFPSRNG;              // offset:0x4B0	type:VECTOR3.0
	vec3                                                           AimOffsetMaxFPSRNG;              // offset:0x4C0	type:VECTOR3.0
	vec3                                                           AimOffsetMinFPSScope;            // offset:0x4D0	type:VECTOR3.0
	vec3                                                           AimOffsetMaxFPSScope;            // offset:0x4E0	type:VECTOR3.0
	vec3                                                           AimOffsetEndPosMinFPSIdle;       // offset:0x4F0	type:VECTOR3.0
	vec3                                                           AimOffsetEndPosMedFPSIdle;       // offset:0x500	type:VECTOR3.0
	vec3                                                           AimOffsetEndPosMaxFPSIdle;       // offset:0x510	type:VECTOR3.0
	vec3                                                           AimOffsetEndPosMinFPSLT;         // offset:0x520	type:VECTOR3.0
	vec3                                                           AimOffsetEndPosMedFPSLT;         // offset:0x530	type:VECTOR3.0
	vec3                                                           AimOffsetEndPosMaxFPSLT;         // offset:0x540	type:VECTOR3.0
	float                                                          AimProbeRadiusOverrideFPSIdle;   // offset:0x550	type:FLOAT.0
	float                                                          AimProbeRadiusOverrideFPSIdleStealth; // offset:0x554	type:FLOAT.0
	float                                                          AimProbeRadiusOverrideFPSLT;     // offset:0x558	type:FLOAT.0
	float                                                          AimProbeRadiusOverrideFPSRNG;    // offset:0x55C	type:FLOAT.0
	float                                                          AimProbeRadiusOverrideFPSScope;  // offset:0x560	type:FLOAT.0
	vec3                                                           LeftHandIkOffset;                // offset:0x570	type:VECTOR3.0
	float                                                          IkRecoilDisplacement;            // offset:0x580	type:FLOAT.0
	float                                                          IkRecoilDisplacementScope;       // offset:0x584	type:FLOAT.0
	float                                                          IkRecoilDisplacementScaleBackward; // offset:0x588	type:FLOAT.0
	float                                                          IkRecoilDisplacementScaleVertical; // offset:0x58C	type:FLOAT.0
	vec2                                                           ReticuleHudPosition;             // offset:0x590	type:VECTOR2.0
	vec2                                                           ReticuleHudPositionOffsetForPOVTurret; // offset:0x598	type:VECTOR2.0
	float                                                          ReticuleMinSizeStanding;         // offset:0x5A0	type:FLOAT.0
	float                                                          ReticuleMinSizeCrouched;         // offset:0x5A4	type:FLOAT.0
	float                                                          ReticuleScale;                   // offset:0x5A8	type:FLOAT.0
	string                                                         ReticuleStyleHash;               // offset:0x5AC	type:STRING.ATHASHVALUE
	string                                                         FirstPersonReticuleStyleHash;    // offset:0x5B0	type:STRING.ATHASHVALUE
	string                                                         PickupHash;                      // offset:0x5B4	type:STRING.ATHASHVALUE
	string                                                         MPPickupHash;                    // offset:0x5B8	type:STRING.ATHASHVALUE
	string                                                         HumanNameHash;                   // offset:0x5BC	type:STRING.ATHASHVALUE
	string                                                         AudioCollisionHash;              // offset:0x5C0	type:STRING.ATHASHVALUE
	string                                                         MovementModeConditionalIdle;     // offset:0x5C4	type:STRING.ATHASHVALUE
	uchar                                                          AmmoDiminishingRate;             // offset:0x5C8	type:UCHAR.0
	char                                                           HudDamage;                       // offset:0x5C9	type:CHAR.0
	char                                                           HudSpeed;                        // offset:0x5CA	type:CHAR.0
	char                                                           HudCapacity;                     // offset:0x5CB	type:CHAR.0
	char                                                           HudAccuracy;                     // offset:0x5CC	type:CHAR.0
	char                                                           HudRange;                        // offset:0x5CD	type:CHAR.0
	float                                                          AimingBreathingAdditiveWeight;   // offset:0x5D0	type:FLOAT.0
	float                                                          FiringBreathingAdditiveWeight;   // offset:0x5D4	type:FLOAT.0
	float                                                          StealthAimingBreathingAdditiveWeight; // offset:0x5D8	type:FLOAT.0
	float                                                          StealthFiringBreathingAdditiveWeight; // offset:0x5DC	type:FLOAT.0
	float                                                          AimingLeanAdditiveWeight;        // offset:0x5E0	type:FLOAT.0
	float                                                          FiringLeanAdditiveWeight;        // offset:0x5E4	type:FLOAT.0
	float                                                          StealthAimingLeanAdditiveWeight; // offset:0x5E8	type:FLOAT.0
	float                                                          StealthFiringLeanAdditiveWeight; // offset:0x5EC	type:FLOAT.0
	string                                                         StatName;                        // offset:0x5F0	type:STRING.CONST_STRING
	int                                                            KnockdownCount;                  // offset:0x5F8	type:INT.0
	float                                                          KillshotImpulseScale;            // offset:0x5FC	type:FLOAT.0
	string                                                         NmShotTuningSet;                 // offset:0x600	type:STRING.ATHASHVALUE
	array<struct CWeaponComponentPoint, 7>                         AttachPoints;                    // offset:0x604	type:ARRAY.ATFIXEDARRAY
	struct CWeaponBoneId                                           GunFeedBone;                     // offset:0x8C4	type:STRUCT.STRUCTURE
	bitset<enum CWeaponInfoFlags__Flags>                           WeaponFlags;                     // offset:0x8C8	type:BITSET.32BIT
	struct void                                                    TintSpecValues;                  // offset:0x8E0	type:STRUCT.EXTERNAL_NAMED
	struct void                                                    FiringPatternAliases;            // offset:0x8E8	type:STRUCT.EXTERNAL_NAMED
	struct void                                                    ReloadUpperBodyFixupExpressionData; // offset:0x8F0	type:STRUCT.EXTERNAL_NAMED
	string                                                         TargetSequenceGroup;             // offset:0x8F8	type:STRING.ATHASHVALUE
	float                                                          BulletDirectionOffsetInDegrees;  // offset:0x8FC	type:FLOAT.0
	float                                                          BulletDirectionPitchOffset;      // offset:0x900	type:FLOAT.0
	float                                                          BulletDirectionPitchHomingOffset; // offset:0x904	type:FLOAT.0
	float                                                          ExpandPedCapsuleRadius;          // offset:0x91C	type:FLOAT.0
	float                                                          VehicleAttackAngle;              // offset:0x920	type:FLOAT.0
	float                                                          TorsoIKAngleLimit;               // offset:0x924	type:FLOAT.0
	float                                                          MeleeDamageMultiplier;           // offset:0x928	type:FLOAT.0
	float                                                          MeleeRightFistTargetHealthDamageScaler; // offset:0x92C	type:FLOAT.0
	float                                                          AirborneAircraftLockOnMultiplier; // offset:0x930	type:FLOAT.0
	float                                                          ArmouredVehicleGlassDamageOverride; // offset:0x934	type:FLOAT.0
	map<string, map<uint, uint>>                                   CamoDiffuseTexIdxs;              // offset:0x938	type:MAP.ATBINARYMAP
	struct CWeaponBoneId                                           RotateBarrelBone;                // offset:0x950	type:STRUCT.STRUCTURE
	struct CWeaponBoneId                                           RotateBarrelBone2;               // offset:0x952	type:STRUCT.STRUCTURE
};

struct CWeaponInfoBlob
{
	array<struct CWeaponTintSpecValues>                                TintSpecValues;                  // offset:0x008	type:ARRAY.ATARRAY
	array<struct CWeaponFiringPatternAliases>                          FiringPatternAliases;            // offset:0x018	type:ARRAY.ATARRAY
	array<struct CWeaponUpperBodyFixupExpressionData>                  UpperBodyFixupExpressionData;    // offset:0x028	type:ARRAY.ATARRAY
	array<struct CAimingInfo>                                          AimingInfos;                     // offset:0x038	type:ARRAY.ATARRAY
	array<struct CVehicleWeaponInfo>                                   VehicleWeaponInfos;              // offset:0x048	type:ARRAY.ATARRAY
	array<struct CWeaponInfoBlob__sWeaponSlotList, 2>                  SlotNavigateOrder;               // offset:0x058	type:ARRAY.ATFIXEDARRAY
	struct CWeaponInfoBlob__sWeaponSlotList                            SlotBestOrder;                   // offset:0x080	type:STRUCT.STRUCTURE
	array<struct sWeaponInfoList, 4>                                   Infos;                           // offset:0x090	type:ARRAY.MEMBER
	array<struct CWeaponInfoBlob__sWeaponGroupArmouredGlassDamage>     WeaponGroupDamageForArmouredVehicleGlass; // offset:0x0D0	type:ARRAY.ATARRAY
	string                                                             Name;                            // offset:0x0E0	type:STRING.CONST_STRING
};

struct CWeaponInfoBlob__SlotEntry
{
	int                              OrderNumber;                     // offset:0x000	type:INT.0
	string                           Entry;                           // offset:0x004	type:STRING.ATHASHVALUE
};

struct CWeaponInfoBlob__sWeaponGroupArmouredGlassDamage
{
	string                           GroupHash;                       // offset:0x000	type:STRING.ATHASHVALUE
	float                            Damage;                          // offset:0x004	type:FLOAT.0
};

struct CWeaponInfoBlob__sWeaponSlotList
{
	array<struct CWeaponInfoBlob__SlotEntry>     WeaponSlots;                     // offset:0x000	type:ARRAY.ATARRAY
};

struct CWeaponInfo__sExplosion
{
	enum eExplosionTag               Default;                         // offset:0x000	type:ENUM.32BIT
	enum eExplosionTag               HitCar;                          // offset:0x004	type:ENUM.32BIT
	enum eExplosionTag               HitTruck;                        // offset:0x008	type:ENUM.32BIT
	enum eExplosionTag               HitBike;                         // offset:0x00C	type:ENUM.32BIT
	enum eExplosionTag               HitBoat;                         // offset:0x010	type:ENUM.32BIT
	enum eExplosionTag               HitPlane;                        // offset:0x014	type:ENUM.32BIT
};

struct CWeaponInfo__sFirstPersonScopeAttachmentData
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	float                            FirstPersonScopeAttachmentFov;   // offset:0x004	type:FLOAT.0
	vec3                             FirstPersonScopeAttachmentOffset; // offset:0x010	type:VECTOR3.0
	vec3                             FirstPersonScopeAttachmentRotationOffset; // offset:0x020	type:VECTOR3.0
};

struct CWeaponInfo__sFrontClearTestParams
{
	bool                             ShouldPerformFrontClearTest;     // offset:0x000	type:BOOL.0
	float                            ForwardOffset;                   // offset:0x004	type:FLOAT.0
	float                            VerticalOffset;                  // offset:0x008	type:FLOAT.0
	float                            HorizontalOffset;                // offset:0x00C	type:FLOAT.0
	float                            CapsuleRadius;                   // offset:0x010	type:FLOAT.0
	float                            CapsuleLength;                   // offset:0x014	type:FLOAT.0
};

struct CWeaponInfo__sFx
{
	enum eWeaponEffectGroup          EffectGroup;                     // offset:0x000	type:ENUM.32BIT
	string                           FlashFx;                         // offset:0x004	type:STRING.ATHASHVALUE
	string                           FlashFxAlt;                      // offset:0x008	type:STRING.ATHASHVALUE
	string                           FlashFxFP;                       // offset:0x00C	type:STRING.ATHASHVALUE
	string                           FlashFxFPAlt;                    // offset:0x010	type:STRING.ATHASHVALUE
	string                           MuzzleSmokeFx;                   // offset:0x014	type:STRING.ATHASHVALUE
	string                           MuzzleSmokeFxFP;                 // offset:0x018	type:STRING.ATHASHVALUE
	float                            MuzzleSmokeFxMinLevel;           // offset:0x01C	type:FLOAT.0
	float                            MuzzleSmokeFxIncPerShot;         // offset:0x020	type:FLOAT.0
	float                            MuzzleSmokeFxDecPerSec;          // offset:0x024	type:FLOAT.0
	vec3                             MuzzleOverrideOffset;            // offset:0x030	type:VECTOR3.0
	bool                             MuzzleUseProjTintColour;         // offset:0x040	type:BOOL.0
	string                           ShellFx;                         // offset:0x044	type:STRING.ATHASHVALUE
	string                           ShellFxFP;                       // offset:0x048	type:STRING.ATHASHVALUE
	string                           TracerFx;                        // offset:0x04C	type:STRING.ATHASHVALUE
	string                           PedDamageHash;                   // offset:0x050	type:STRING.ATHASHVALUE
	float                            TracerFxChanceSP;                // offset:0x054	type:FLOAT.0
	float                            TracerFxChanceMP;                // offset:0x058	type:FLOAT.0
	bool                             TracerFxIgnoreCameraIntersection; // offset:0x05C	type:BOOL.0
	float                            FlashFxChanceSP;                 // offset:0x060	type:FLOAT.0
	float                            FlashFxChanceMP;                 // offset:0x064	type:FLOAT.0
	float                            FlashFxAltChance;                // offset:0x068	type:FLOAT.0
	float                            FlashFxScale;                    // offset:0x06C	type:FLOAT.0
	bool                             FlashFxLightEnabled;             // offset:0x070	type:BOOL.0
	bool                             FlashFxLightCastsShadows;        // offset:0x071	type:BOOL.0
	float                            FlashFxLightOffsetDist;          // offset:0x074	type:FLOAT.0
	vec3                             FlashFxLightRGBAMin;             // offset:0x080	type:VECTOR3.0
	vec3                             FlashFxLightRGBAMax;             // offset:0x090	type:VECTOR3.0
	vec2                             FlashFxLightIntensityMinMax;     // offset:0x0A0	type:VECTOR2.0
	vec2                             FlashFxLightRangeMinMax;         // offset:0x0A8	type:VECTOR2.0
	vec2                             FlashFxLightFalloffMinMax;       // offset:0x0B0	type:VECTOR2.0
	bool                             GroundDisturbFxEnabled;          // offset:0x0B8	type:BOOL.0
	float                            GroundDisturbFxDist;             // offset:0x0BC	type:FLOAT.0
	string                           GroundDisturbFxNameDefault;      // offset:0x0C0	type:STRING.ATHASHVALUE
	string                           GroundDisturbFxNameSand;         // offset:0x0C4	type:STRING.ATHASHVALUE
	string                           GroundDisturbFxNameDirt;         // offset:0x0C8	type:STRING.ATHASHVALUE
	string                           GroundDisturbFxNameWater;        // offset:0x0CC	type:STRING.ATHASHVALUE
	string                           GroundDisturbFxNameFoliage;      // offset:0x0D0	type:STRING.ATHASHVALUE
};

struct CWeaponModelInfo__InitData
{
	string                           modelName;                       // offset:0x000	type:STRING.ATSTRING
	string                           txdName;                         // offset:0x010	type:STRING.ATSTRING
	string                           ptfxAssetName;                   // offset:0x020	type:STRING.CONST_STRING
	float                            lodDist;                         // offset:0x028	type:FLOAT.0
	float                            HDDistance;                      // offset:0x02C	type:FLOAT.0
	string                           ExpressionSetName;               // offset:0x030	type:STRING.ATHASHVALUE
	string                           ExpressionDictionaryName;        // offset:0x034	type:STRING.ATHASHVALUE
	string                           ExpressionName;                  // offset:0x038	type:STRING.ATHASHVALUE
};

struct CWeaponModelInfo__InitDataList
{
	array<struct CWeaponModelInfo__InitData>     InitDatas;                       // offset:0x000	type:ARRAY.ATARRAY
};

struct CWeaponSwapData : CWeaponComponentData
{
	string                           PedHolsterClipId;                // offset:0x010	type:STRING.ATHASHVALUE
	string                           PedHolsterCrouchClipId;          // offset:0x014	type:STRING.ATHASHVALUE
	string                           PedHolsterCoverClipId;           // offset:0x018	type:STRING.ATHASHVALUE
	string                           PedHolsterDiscardClipId;         // offset:0x01C	type:STRING.ATHASHVALUE
	string                           PedHolsterCrouchDiscardClipId;   // offset:0x020	type:STRING.ATHASHVALUE
	string                           PedHolsterWeaponClipId;          // offset:0x024	type:STRING.ATHASHVALUE
	string                           PedUnHolsterClipId;              // offset:0x028	type:STRING.ATHASHVALUE
	string                           PedUnHolsterCrouchClipId;        // offset:0x02C	type:STRING.ATHASHVALUE
	string                           PedUnHolsterLeftCoverClipId;     // offset:0x030	type:STRING.ATHASHVALUE
	string                           PedUnHolsterRightCoverClipId;    // offset:0x034	type:STRING.ATHASHVALUE
	string                           PedUnHolsterWeaponClipId;        // offset:0x038	type:STRING.ATHASHVALUE
	float                            AnimPlaybackRate;                // offset:0x03C	type:FLOAT.0
};

struct CWeaponTintSpecValues
{
	string                                                    Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CWeaponTintSpecValues__CWeaponSpecValue>     Tints;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct CWeaponTintSpecValues__CWeaponSpecValue
{
	float                            SpecFresnel;                     // offset:0x000	type:FLOAT.0
	float                            SpecFalloffMult;                 // offset:0x004	type:FLOAT.0
	float                            SpecIntMult;                     // offset:0x008	type:FLOAT.0
	float                            Spec2Factor;                     // offset:0x00C	type:FLOAT.0
	float                            Spec2ColorInt;                   // offset:0x010	type:FLOAT.0
	uint                             Spec2Color;                      // offset:0x014	type:UINT.1
};

struct CWeaponUpperBodyFixupExpressionData
{
	string                                                         Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct CWeaponUpperBodyFixupExpressionData__Data, 4>     Data;                            // offset:0x004	type:ARRAY.MEMBER
};

struct CWeaponUpperBodyFixupExpressionData__Data
{
	float                            Idle;                            // offset:0x000	type:FLOAT.0
	float                            Walk;                            // offset:0x004	type:FLOAT.0
	float                            Run;                             // offset:0x008	type:FLOAT.0
};

struct CWildlifeManager__Tunables : CTuning
{
	float                            BirdHeightMapDeltaMin;           // offset:0x010	type:FLOAT.0
	float                            BirdHeightMapDeltaMax;           // offset:0x014	type:FLOAT.0
	float                            BirdSpawnXYRangeMin;             // offset:0x018	type:FLOAT.0
	float                            BirdSpawnXYRangeMax;             // offset:0x01C	type:FLOAT.0
	float                            IncreasedAerialSpawningFactor;   // offset:0x020	type:FLOAT.0
	float                            MinDistanceToSearchForGroundWildlifePoints; // offset:0x024	type:FLOAT.0
	float                            MaxDistanceToSearchForGroundWildlifePoints; // offset:0x028	type:FLOAT.0
	float                            TimeBetweenGroundProbes;         // offset:0x02C	type:FLOAT.0
	float                            GroundMaterialProbeDepth;        // offset:0x030	type:FLOAT.0
	float                            GroundMaterialProbeOffset;       // offset:0x034	type:FLOAT.0
	float                            GroundMaterialSpawnCoordNormalZTolerance; // offset:0x038	type:FLOAT.0
	float                            IncreasedGroundWildlifeSpawningFactor; // offset:0x03C	type:FLOAT.0
	float                            MinDistanceToSearchForAquaticPoints; // offset:0x040	type:FLOAT.0
	float                            MaxDistanceToSearchForAquaticPoints; // offset:0x044	type:FLOAT.0
	float                            TimeBetweenWaterHeightMapChecks; // offset:0x048	type:FLOAT.0
	float                            TimeBetweenWaterProbes;          // offset:0x04C	type:FLOAT.0
	float                            WaterProbeDepth;                 // offset:0x050	type:FLOAT.0
	float                            WaterProbeOffset;                // offset:0x054	type:FLOAT.0
	float                            AquaticSpawnDepth;               // offset:0x058	type:FLOAT.0
	float                            AquaticSpawnMaxHeightAbovePlayer; // offset:0x05C	type:FLOAT.0
	float                            IncreasedAquaticSpawningFactor;  // offset:0x060	type:FLOAT.0
	float                            CloseSpawningViewMultiplier;     // offset:0x064	type:FLOAT.0
	string                           SharkModelName;                  // offset:0x068	type:STRING.ATHASHVALUE
	float                            DeepWaterThreshold;              // offset:0x06C	type:FLOAT.0
	float                            PlayerSwimTimeThreshold;         // offset:0x070	type:FLOAT.0
	uint                             MinTimeBetweenSharkDispatches;   // offset:0x074	type:UINT.0
	float                            SharkAddRangeInViewMin;          // offset:0x078	type:FLOAT.0
	float                            SharkAddRangeInViewMinFar;       // offset:0x07C	type:FLOAT.0
	float                            SharkSpawnProbability;           // offset:0x080	type:FLOAT.0
};

struct CWitnessInformation
{
	float                                       MaxDistanceToHear;               // offset:0x000	type:FLOAT.0
	bitset<enum CWitnessInformation__Flags>     Flags;                           // offset:0x004	type:BITSET.8BIT
	bitset<enum CWitnessInformation__Flags>     AdditionalFlagsForSP;            // offset:0x005	type:BITSET.8BIT
	bitset<enum CWitnessInformation__Flags>     AdditionalFlagsForMP;            // offset:0x006	type:BITSET.8BIT
};

struct CWitnessInformations
{
	map<string, struct CWitnessPersonality>     Personalities;                   // offset:0x000	type:MAP.ATBINARYMAP
};

struct CWitnessPersonality
{
	bitset<enum CWitnessPersonality__Flags>     Flags;                           // offset:0x000	type:BITSET.8BIT
};

struct CZonedAssets
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	struct rage__spdAABB             Extents;                         // offset:0x010	type:STRUCT.STRUCTURE
	array<string>                    Models;                          // offset:0x030	type:ARRAY.ATARRAY
	int                              Version;                         // offset:0x040	type:INT.0
};

struct CacheCatalogParsableInfo
{
	struct _0x7B5BBF05               _0x5F9E64E0;                     // offset:0x008	type:STRUCT.STRUCTURE
	struct _0x7F7F3AAC               _0x12FFF11A;                     // offset:0x020	type:STRUCT.STRUCTURE
	struct _0x3BC66FEF               _0xEBAA4201;                     // offset:0x038	type:STRUCT.STRUCTURE
	struct _0xD172BA7B               _0x8021A3FC;                     // offset:0x050	type:STRUCT.STRUCTURE
	struct _0xD172BA7B               _0x4ECFC159;                     // offset:0x068	type:STRUCT.STRUCTURE
	struct _0x851D8AEA               typeInventory;                   // offset:0x080	type:STRUCT.STRUCTURE
	struct _0xD9F95E4E               _0x58822F9F;                     // offset:0x098	type:STRUCT.STRUCTURE
	struct _0xA664E2C4               _0x5B3DF65A;                     // offset:0x0B0	type:STRUCT.STRUCTURE
	struct _0xA664E2C4               _0xDA7374C3;                     // offset:0x0C8	type:STRUCT.STRUCTURE
	struct _0xB11DEE8F               _0xEC481FBC;                     // offset:0x0E0	type:STRUCT.STRUCTURE
	struct _0xB11DEE8F               _0xF7923650;                     // offset:0x0F8	type:STRUCT.STRUCTURE
	struct _0xB11DEE8F               _0x058FD24B;                     // offset:0x110	type:STRUCT.STRUCTURE
};

struct CacheParsableInfo
{
	int                              data;                            // offset:0x008	type:INT.0
};

struct CalmingQuad
{
	short                            minX;                            // offset:0x000	type:SHORT.0
	short                            minY;                            // offset:0x002	type:SHORT.0
	short                            maxX;                            // offset:0x004	type:SHORT.0
	short                            maxY;                            // offset:0x006	type:SHORT.0
	float                            fDampening;                      // offset:0x008	type:FLOAT.0
};

struct CargenPriorityAreas
{
	array<struct CargenPriorityAreas__Area>     areas;                           // offset:0x000	type:ARRAY.ATARRAY
};

struct CargenPriorityAreas__Area
{
	vec3                             minPos;                          // offset:0x000	type:VECTOR3.0
	vec3                             maxPos;                          // offset:0x010	type:VECTOR3.0
};

struct ClipUserData
{
	array<string>                    Users;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct CloudHatFragContainer
{
	vec3V                               mPosition;                       // offset:0x010	type:VEC3V.0
	vec3V                               mRotation;                       // offset:0x020	type:VEC3V.0
	vec3V                               mScale;                          // offset:0x030	type:VEC3V.0
	string                              mName;                           // offset:0x040	type:STRING.MEMBER
	array<struct CloudHatFragLayer>     mLayers;                         // offset:0x080	type:ARRAY.ATARRAY
	float                               mTransitionAlphaRange;           // offset:0x090	type:FLOAT.0
	float                               mTransitionMidPoint;             // offset:0x094	type:FLOAT.0
	bool                                mEnabled;                        // offset:0x098	type:BOOL.0
	vec3V                               mAngularVelocity;                // offset:0x0B0	type:VEC3V.0
	vec3V                               mAnimBlendWeights;               // offset:0x0D0	type:VEC3V.0
	array<vec2V, 3>                     mUVVelocity;                     // offset:0x0E0	type:ARRAY.MEMBER
	array<uchar, 3>                     mAnimMode;                       // offset:0x140	type:ARRAY.MEMBER
	array<bool, 3>                      mShowLayer;                      // offset:0x143	type:ARRAY.MEMBER
	bool                                mEnableAnimations;               // offset:0x146	type:BOOL.0
};

struct CloudHatFragLayer
{
	string                           mFilename;                       // offset:0x008	type:STRING.ATHASHVALUE
	float                            mCostFactor;                     // offset:0x00C	type:FLOAT.0
	float                            mRotationScale;                  // offset:0x010	type:FLOAT.0
	float                            mCamPositionScalerAdjust;        // offset:0x014	type:FLOAT.0
	float                            mTransitionInTimePercent;        // offset:0x018	type:FLOAT.0
	float                            mTransitionOutTimePercent;       // offset:0x01C	type:FLOAT.0
	float                            mTransitionInDelayPercent;       // offset:0x020	type:FLOAT.0
	float                            mTransitionOutDelayPercent;      // offset:0x024	type:FLOAT.0
	float                            mHeightTigger;                   // offset:0x028	type:FLOAT.0
	float                            mHeightFadeRange;                // offset:0x02C	type:FLOAT.0
	float                            _0xDDD513CF;                     // offset:0x030	type:FLOAT.0
	float                            _0xBA039728;                     // offset:0x034	type:FLOAT.0
};

struct CloudHatManager
{
	vec3V                                   mCamPositionScaler;              // offset:0x010	type:VEC3V.0
	float                                   mAltitudeScrollScaler;           // offset:0x020	type:FLOAT.0
	array<struct CloudHatFragContainer>     mCloudHatFrags;                  // offset:0x028	type:ARRAY.ATARRAY
	float                                   mDesiredTransitionTimeSec;       // offset:0x038	type:FLOAT.0
};

struct CloudHatSettings
{
	struct CloudListController       CloudList;                       // offset:0x008	type:STRUCT.STRUCTURE
	struct rage__ptxKeyframe         CloudColor;                      // offset:0x030	type:STRUCT.STRUCTURE
	struct rage__ptxKeyframe         CloudLightColor;                 // offset:0x050	type:STRUCT.STRUCTURE
	struct rage__ptxKeyframe         CloudAmbientColor;               // offset:0x070	type:STRUCT.STRUCTURE
	struct rage__ptxKeyframe         CloudSkyColor;                   // offset:0x090	type:STRUCT.STRUCTURE
	struct rage__ptxKeyframe         CloudBounceColor;                // offset:0x0B0	type:STRUCT.STRUCTURE
	struct rage__ptxKeyframe         CloudEastColor;                  // offset:0x0D0	type:STRUCT.STRUCTURE
	struct rage__ptxKeyframe         CloudWestColor;                  // offset:0x0F0	type:STRUCT.STRUCTURE
	struct rage__ptxKeyframe         CloudScaleFillColors;            // offset:0x110	type:STRUCT.STRUCTURE
	struct rage__ptxKeyframe         CloudDensityShift_Scale_ScatteringConst_Scale; // offset:0x130	type:STRUCT.STRUCTURE
	struct rage__ptxKeyframe         CloudPiercingLightPower_Strength_NormalStrength_Thickness; // offset:0x150	type:STRUCT.STRUCTURE
	struct rage__ptxKeyframe         CloudScaleDiffuseFillAmbient_WrapAmount; // offset:0x170	type:STRUCT.STRUCTURE
};

struct CloudListController
{
	array<uint>                      mProbability;                    // offset:0x008	type:ARRAY.ATARRAY
	bitset<enum _0x00000000>         mBits;                           // offset:0x018	type:BITSET.ATBITSET
};

struct CloudSettingsMap
{
	array<float>                     KeyframeTimes;                   // offset:0x018	type:ARRAY.ATARRAY
	array<struct _0xA1D03860>        SettingsMap;                     // offset:0x028	type:ARRAY.ATARRAY
};

struct ComponentDescription
{
	string                           nameHash;                        // offset:0x008	type:STRING.ATHASHVALUE
	int                              enumValue;                       // offset:0x00C	type:INT.0
	enum ePedVarComp                 eCompType;                       // offset:0x010	type:ENUM.32BIT
};

struct ContentChangeSetGroup
{
	string                           NameHash;                        // offset:0x000	type:STRING.ATHASHVALUE
	array<string>                    ContentChangeSets;               // offset:0x008	type:ARRAY.ATARRAY
};

struct EventInstance
{
	float                            MinT;                            // offset:0x008	type:FLOAT.0
	float                            MaxT;                            // offset:0x00C	type:FLOAT.0
	struct void                      EventType;                       // offset:0x010	type:STRUCT.EXTERNAL_NAMED
	uint                             EventTypeHash;                   // offset:0x018	type:UINT.0
	ushort                           Flags;                           // offset:0x01C	type:USHORT.0
	uchar                            TrackNumber;                     // offset:0x01E	type:UCHAR.0
	uchar                            Priority;                        // offset:0x01F	type:UCHAR.0
};

struct EventList
{
	array<struct EventInstance>      Instances;                       // offset:0x008	type:ARRAY.ATARRAY
};

struct ExecutionCondition
{
	string                           name;                            // offset:0x000	type:STRING.ATHASHVALUE
	bool                             condition;                       // offset:0x004	type:BOOL.0
};

struct ExecutionConditions
{
	array<struct ExecutionCondition>     activeChangesetConditions;       // offset:0x000	type:ARRAY.ATARRAY
	string                               genericConditions;               // offset:0x010	type:STRING.ATFINALHASHSTRING
};

struct FirstPersonAlternateData
{
	array<struct _0x5BCA4ECD>        alternates;                      // offset:0x000	type:ARRAY.ATARRAY
};

struct FirstPersonAssetData
{
	enum ePedVarComp                           eCompType;                       // offset:0x000	type:ENUM.8BIT
	enum eAnchorPoints                         eAnchorPoint;                    // offset:0x001	type:ENUM.8BIT
	string                                     dlcHash;                         // offset:0x004	type:STRING.ATHASHVALUE
	array<struct FirstPersonTimeCycleData>     timeCycleMods;                   // offset:0x008	type:ARRAY.ATARRAY
	struct _0x460D1385                         putOnAnim;                       // offset:0x018	type:STRUCT.STRUCTURE
	struct _0x460D1385                         takeOffAnim;                     // offset:0x028	type:STRUCT.STRUCTURE
	string                                     audioId;                         // offset:0x038	type:STRING.ATHASHVALUE
	string                                     fpsPropModel;                    // offset:0x03C	type:STRING.ATHASHVALUE
	vec3                                       fpsPropModelOffset;              // offset:0x040	type:VECTOR3.0
	float                                      seWeather;                       // offset:0x050	type:FLOAT.0
	float                                      seEnvironment;                   // offset:0x054	type:FLOAT.0
	float                                      seDamage;                        // offset:0x058	type:FLOAT.0
	float                                      tcModFadeOffSecs;                // offset:0x05C	type:FLOAT.0
	enum _0xAC899F59                           tcModInterpType;                 // offset:0x060	type:ENUM.32BIT
	uint                                       flags;                           // offset:0x064	type:UINT.0
	uchar                                      localIndex;                      // offset:0x068	type:UCHAR.0
};

struct FirstPersonAssetDataManager
{
	array<struct FirstPersonPedData>     peds;                            // offset:0x000	type:ARRAY.ATARRAY
};

struct FirstPersonPedData
{
	string                                 name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct FirstPersonAssetData>     objects;                         // offset:0x008	type:ARRAY.ATARRAY
};

struct FirstPersonTimeCycleData
{
	int                              textureId;                       // offset:0x000	type:INT.0
	string                           timeCycleMod;                    // offset:0x004	type:STRING.ATHASHVALUE
	float                            intensity;                       // offset:0x008	type:FLOAT.0
};

struct FloatXYZ
{
	float                            x;                               // offset:0x000	type:FLOAT.0
	float                            y;                               // offset:0x004	type:FLOAT.0
	float                            z;                               // offset:0x008	type:FLOAT.0
};

struct FogQuad
{
	short                            minX;                            // offset:0x000	type:SHORT.0
	short                            minY;                            // offset:0x002	type:SHORT.0
	short                            maxX;                            // offset:0x004	type:SHORT.0
	short                            maxY;                            // offset:0x006	type:SHORT.0
	uint                             c0;                              // offset:0x008	type:UINT.1
	uint                             c1;                              // offset:0x00C	type:UINT.1
	uint                             c2;                              // offset:0x010	type:UINT.1
	uint                             c3;                              // offset:0x014	type:UINT.1
};

struct HBAO_Parameters
{
	float                            HBAORelativeStrength;            // offset:0x000	type:FLOAT.0
	float                            CPRelativeStrength;              // offset:0x004	type:FLOAT.0
	float                            HBAORadius0;                     // offset:0x008	type:FLOAT.0
	float                            HBAORadius1;                     // offset:0x00C	type:FLOAT.0
	float                            HBAOBlendDistance;               // offset:0x010	type:FLOAT.0
	float                            CPRadius;                        // offset:0x014	type:FLOAT.0
	float                            MaxPixels;                       // offset:0x018	type:FLOAT.0
	float                            CutoffPixels;                    // offset:0x01C	type:FLOAT.0
	float                            FoliageStrength;                 // offset:0x020	type:FLOAT.0
	float                            HBAOFalloffExponent;             // offset:0x024	type:FLOAT.0
	float                            CPStrengthClose;                 // offset:0x028	type:FLOAT.0
	float                            CPBlendDistanceMin;              // offset:0x02C	type:FLOAT.0
	float                            CPBlendDistanceMax;              // offset:0x030	type:FLOAT.0
};

struct HDAO2_ScenePreset
{
	array<struct _0x5D2E8188, 3>     QualityLevels;                   // offset:0x000	type:ARRAY.MEMBER
};

struct HDAO_ScenePreset
{
	array<struct _0xBC0E2D06, 3>     QualityLevels;                   // offset:0x000	type:ARRAY.MEMBER
};

struct LensArtefact
{
	string                           name;                            // offset:0x000	type:STRING.ATHASHVALUE
	vec2                             scale;                           // offset:0x004	type:VECTOR2.0
	vec2                             offset;                          // offset:0x00C	type:VECTOR2.0
	uint                             colorShift;                      // offset:0x014	type:UINT.1
	enum _0xC267EF1F                 blurType;                        // offset:0x018	type:ENUM.32BIT
	enum _0x9EE5ECA0                 streakDirection;                 // offset:0x01C	type:ENUM.32BIT
	enum _0x1ECF3B6A                 _0x9B017B20;                     // offset:0x020	type:ENUM.32BIT
	vec2                             _0x4A84BA30;                     // offset:0x024	type:VECTOR2.0
	float                            opacity;                         // offset:0x02C	type:FLOAT.0
	int                              sortIndex;                       // offset:0x030	type:INT.0
	bool                             enabled;                         // offset:0x034	type:BOOL.0
};

struct LensArtefacts
{
	array<struct LensArtefact>       layers;                          // offset:0x018	type:ARRAY.ATARRAY
};

struct LicensePlateProbabilityNamed
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	uint                             Value;                           // offset:0x004	type:UINT.0
};

struct MR_SSAO_AllScenePresets
{
	array<struct _0x18F2242F, 2>     SceneType;                       // offset:0x000	type:ARRAY.MEMBER
};

struct MainWaterTune
{
	uint                             WaterColor;                      // offset:0x000	type:UINT.1
	float                            RippleScale;                     // offset:0x004	type:FLOAT.0
	float                            OceanFoamScale;                  // offset:0x008	type:FLOAT.0
	float                            SpecularFalloff;                 // offset:0x00C	type:FLOAT.0
	float                            FogPierceIntensity;              // offset:0x010	type:FLOAT.0
	float                            RefractionBlend;                 // offset:0x014	type:FLOAT.0
	float                            RefractionExponent;              // offset:0x018	type:FLOAT.0
	float                            WaterCycleDepth;                 // offset:0x01C	type:FLOAT.0
	float                            WaterCycleFade;                  // offset:0x020	type:FLOAT.0
	float                            WaterLightningDepth;             // offset:0x024	type:FLOAT.0
	float                            WaterLightningFade;              // offset:0x028	type:FLOAT.0
	float                            DeepWaterModDepth;               // offset:0x02C	type:FLOAT.0
	float                            DeepWaterModFade;                // offset:0x030	type:FLOAT.0
	float                            GodRaysLerpStart;                // offset:0x034	type:FLOAT.0
	float                            GodRaysLerpEnd;                  // offset:0x038	type:FLOAT.0
	float                            DisturbFoamScale;                // offset:0x03C	type:FLOAT.0
	vec2                             FogMin;                          // offset:0x040	type:VECTOR2.0
	vec2                             FogMax;                          // offset:0x048	type:VECTOR2.0
};

struct MemoryFootprint
{
	map<string, struct MemoryProfileModuleStat>     _0x77F672D8;                     // offset:0x008	type:MAP.ATBINARYMAP
};

struct MemoryProfileLocation
{
	vec3V                            PlayerPos;                       // offset:0x010	type:VEC3V.0
	matrix34V                        CameraMtx;                       // offset:0x020	type:MAT34V.0
	string                           Name;                            // offset:0x060	type:STRING.ATSTRING
	struct MemoryFootprint           MemoryFootprint;                 // offset:0x070	type:STRUCT.STRUCTURE
};

struct MemoryProfileLocationList
{
	array<struct MemoryProfileLocation>     Locations;                       // offset:0x008	type:ARRAY.ATARRAY
};

struct MemoryProfileModuleStat
{
	int                              VirtualMemory;                   // offset:0x008	type:INT.0
	int                              PhysicalMemory;                  // offset:0x00C	type:INT.0
};

struct MissionCreatorAssetData
{
	int                              memory;                          // offset:0x000	type:INT.0
};

struct MovieMeshInfo
{
	string                           ModelName;                       // offset:0x000	type:STRING.CONST_STRING
	string                           TextureName;                     // offset:0x008	type:STRING.CONST_STRING
	vec3                             TransformA;                      // offset:0x010	type:VECTOR3.0
	vec3                             TransformB;                      // offset:0x020	type:VECTOR3.0
	vec3                             TransformC;                      // offset:0x030	type:VECTOR3.0
	vec3                             TransformD;                      // offset:0x040	type:VECTOR3.0
};

struct MovieMeshInfoList
{
	array<struct MovieMeshInfo>      Data;                            // offset:0x000	type:ARRAY.ATARRAY
	array<vec4>                      BoundingSpheres;                 // offset:0x010	type:ARRAY.ATARRAY
	string                           InteriorName;                    // offset:0x020	type:STRING.CONST_STRING
	vec3                             InteriorPosition;                // offset:0x030	type:VECTOR3.0
	vec3                             InteriorMaxPosition;             // offset:0x040	type:VECTOR3.0
	bool                             UseInterior;                     // offset:0x050	type:BOOL.0
};

struct MpTintData
{
	array<struct _0x1AD488B9>        creatorHairColors;               // offset:0x000	type:ARRAY.ATARRAY
	array<uchar>                     creatorAccsColors;               // offset:0x010	type:ARRAY.ATARRAY
	array<uchar>                     creatorLipstickColors;           // offset:0x020	type:ARRAY.ATARRAY
	array<uchar>                     creatorBlushColors;              // offset:0x030	type:ARRAY.ATARRAY
	array<struct _0x1AD488B9>        barberHairColors;                // offset:0x040	type:ARRAY.ATARRAY
	array<uchar>                     barberAccsColors;                // offset:0x050	type:ARRAY.ATARRAY
	array<uchar>                     barberLipstickColors;            // offset:0x060	type:ARRAY.ATARRAY
	array<uchar>                     barberBlushColors;               // offset:0x070	type:ARRAY.ATARRAY
	array<uchar>                     _0xBFBF01CC;                     // offset:0x080	type:ARRAY.ATARRAY
	array<struct _0x7A0A7CFC>        assetData;                       // offset:0x090	type:ARRAY.ATARRAY
};

struct NMExtraTunables
{
	array<struct NMTuningSetEntry>                                 _0x1D3EA118;                     // offset:0x008	type:ARRAY.ATARRAY
	array<struct NMTuningSetEntry>                                 _0x3602B8DB;                     // offset:0x018	type:ARRAY.ATARRAY
	array<struct NMTuningSetEntry>                                 _0xACB03F3A;                     // offset:0x028	type:ARRAY.ATARRAY
	array<struct NMTuningSetEntry>                                 _0xAD3D19ED;                     // offset:0x038	type:ARRAY.ATARRAY
	array<struct NMTuningSetEntry>                                 _0x22BD2616;                     // offset:0x048	type:ARRAY.ATARRAY
	array<struct NMTaskSimpleTunableEntry>                         _0x34F4FC35;                     // offset:0x058	type:ARRAY.ATARRAY
	array<struct CTaskNMBrace__Tunables__VehicleTypeOverrides>     _0xFA5C8BB1;                     // offset:0x068	type:ARRAY.ATARRAY
};

struct NMTaskSimpleTunableEntry
{
	struct CTaskNMSimple__Tunables__Tuning     _0xB181F0F3;                     // offset:0x008	type:STRUCT.STRUCTURE
	string                                     key;                             // offset:0x0A8	type:STRING.ATHASHVALUE
};

struct NMTuningSetEntry
{
	struct CNmTuningSet              tuningSet;                       // offset:0x008	type:STRUCT.STRUCTURE
	string                           key;                             // offset:0x030	type:STRING.ATHASHVALUE
};

struct NonFlyableArea
{
	vec4                             _0x936FD5CD;                     // offset:0x010	type:VECTOR4.0
};

struct NonFlyableAreaArray
{
	array<struct NonFlyableArea>     areas;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct OccludeModel
{
	vec3V                            bmin;                            // offset:0x000	type:VEC3V.0
	vec3V                            bmax;                            // offset:0x010	type:VEC3V.0
	uint                             dataSize;                        // offset:0x020	type:UINT.0
	array<uchar, 32>                 verts;                           // offset:0x028	type:ARRAY.POINTER_WITH_COUNT
	ushort                           numVertsInBytes;                 // offset:0x030	type:USHORT.0
	ushort                           numTris;                         // offset:0x032	type:USHORT.0
	uint                             flags;                           // offset:0x034	type:UINT.0
};

struct PauseMenuPostFXManager
{
	float                            FadeInCheckTreshold;             // offset:0x1F4	type:FLOAT.0
	float                            FadeOutCheckTreshold;            // offset:0x1F8	type:FLOAT.0
};

struct PedDecorationCollection
{
	array<struct PedDecorationPreset>     presets;                         // offset:0x000	type:ARRAY.ATARRAY
	string                                nameHash;                        // offset:0x010	type:STRING.ATFINALHASHSTRING
	array<vec2, 16>                       medalLocations;                  // offset:0x014	type:ARRAY.ATRANGEARRAY
	vec2                                  medalScale;                      // offset:0x094	type:VECTOR2.0
	bool                                  bRequiredForSync;                // offset:0x09C	type:BOOL.0
};

struct PedDecorationPreset
{
	vec2                             uvPos;                           // offset:0x000	type:VECTOR2.0
	vec2                             scale;                           // offset:0x008	type:VECTOR2.0
	float                            rotation;                        // offset:0x010	type:FLOAT.0
	string                           nameHash;                        // offset:0x014	type:STRING.ATHASHVALUE
	string                           txdHash;                         // offset:0x018	type:STRING.ATHASHVALUE
	string                           txtHash;                         // offset:0x01C	type:STRING.ATHASHVALUE
	enum ePedDecorationZone          zone;                            // offset:0x020	type:ENUM.32BIT
	enum ePedDecorationType          type;                            // offset:0x024	type:ENUM.32BIT
	string                           faction;                         // offset:0x028	type:STRING.ATHASHVALUE
	string                           garment;                         // offset:0x02C	type:STRING.ATHASHVALUE
	enum Gender                      gender;                          // offset:0x030	type:ENUM.32BIT
	string                           award;                           // offset:0x034	type:STRING.ATHASHVALUE
	string                           awardLevel;                      // offset:0x038	type:STRING.ATHASHVALUE
	bool                             usesTintColor;                   // offset:0x03C	type:BOOL.0
};

struct PlateProbabilities
{
	array<struct LicensePlateProbabilityNamed>     Probabilities;                   // offset:0x000	type:ARRAY.ATARRAY
};

struct ProcTagLookup
{
	bitset<enum ProcTagLookupFlags>     Flags;                           // offset:0x004	type:BITSET.8BIT
};

struct PropDescription
{
	string                           nameHash;                        // offset:0x008	type:STRING.ATHASHVALUE
	int                              enumValue;                       // offset:0x00C	type:INT.0
	enum eAnchorPoints               eAnchorPoint;                    // offset:0x010	type:ENUM.32BIT
};

struct QS_SSAO_ScenePreset
{
	array<struct _0xD0446454, 3>     Resolutions;                     // offset:0x000	type:ARRAY.MEMBER
};

struct RestrictionTags
{
	string                           tagNameHash;                     // offset:0x008	type:STRING.ATHASHVALUE
};

struct SContentUnlocks
{
	array<string>                    listOfUnlocks;                   // offset:0x000	type:ARRAY.ATARRAY
};

struct SDialogueCharacters
{
	array<struct SDialogueCharacters__SCharacterData>     characterInfo;                   // offset:0x000	type:ARRAY.ATARRAY
};

struct SDialogueCharacters__SCharacterData
{
	string                           txd;                             // offset:0x000	type:STRING.ATFINALHASHSTRING
	string                           VoiceNameHash;                   // offset:0x004	type:STRING.ATHASHVALUE
	string                           MissionNameHash;                 // offset:0x008	type:STRING.ATHASHVALUE
};

struct SExtraFolderMount
{
	string                           path;                            // offset:0x000	type:STRING.ATSTRING
	string                           mountAs;                         // offset:0x010	type:STRING.ATSTRING
};

struct SExtraFolderMountData
{
	array<struct SExtraFolderMount>     FolderMounts;                    // offset:0x000	type:ARRAY.ATARRAY
};

struct SExtraTitleUpdateData
{
	array<struct SExtraTitleUpdateMount>     Mounts;                          // offset:0x000	type:ARRAY.ATARRAY
};

struct SExtraTitleUpdateMount
{
	string                           deviceName;                      // offset:0x000	type:STRING.ATSTRING
	string                           path;                            // offset:0x010	type:STRING.ATSTRING
};

struct SGeneralMovieData
{
	vec2                             vPos;                            // offset:0x008	type:VECTOR2.0
	vec2                             vSize;                           // offset:0x010	type:VECTOR2.0
};

struct SGeneralPauseDataConfig : SGeneralMovieData
{
	array<string, 4>                 RequiredMovies;                  // offset:0x018	type:ARRAY.ATFIXEDARRAY
	bool                             bRequiresMovieView;              // offset:0x060	type:BOOL.0
	bool                             bDependsOnSharedComponents;      // offset:0x061	type:BOOL.0
	uchar                            LoadingOrder;                    // offset:0x062	type:UCHAR.0
	string                           HAlign;                          // offset:0x063	type:STRING.MEMBER
};

struct SInteriorOrderData
{
	int                              startFrom;                       // offset:0x000	type:INT.0
	uint                             filePathHash;                    // offset:0x004	type:UINT.0
	array<string>                    proxies;                         // offset:0x008	type:ARRAY.ATARRAY
};

struct SMandatoryPacksData
{
	array<string>                    Paths;                           // offset:0x000	type:ARRAY.ATARRAY
};

struct SPedPerceptionInfo
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	float                            HearingRange;                    // offset:0x004	type:FLOAT.0
	float                            EncroachmentRange;               // offset:0x008	type:FLOAT.0
	float                            EncroachmentCloseRange;          // offset:0x00C	type:FLOAT.0
	float                            SeeingRange;                     // offset:0x010	type:FLOAT.0
	float                            SeeingRangePeripheral;           // offset:0x014	type:FLOAT.0
	float                            VisualFieldMinAzimuthAngle;      // offset:0x018	type:FLOAT.0
	float                            VisualFieldMaxAzimuthAngle;      // offset:0x01C	type:FLOAT.0
	float                            VisualFieldMinElevationAngle;    // offset:0x020	type:FLOAT.0
	float                            VisualFieldMaxElevationAngle;    // offset:0x024	type:FLOAT.0
	float                            CentreFieldOfGazeMaxAngle;       // offset:0x028	type:FLOAT.0
	bool                             CanAlwaysSenseEncroachingPlayers; // offset:0x02C	type:BOOL.0
	bool                             PerformEncroachmentChecksIn3D;   // offset:0x02D	type:BOOL.0
};

struct SSetupData
{
	string                                  deviceName;                      // offset:0x000	type:STRING.ATSTRING
	string                                  datFile;                         // offset:0x010	type:STRING.ATSTRING
	string                                  timeStamp;                       // offset:0x020	type:STRING.ATSTRING
	string                                  nameHash;                        // offset:0x030	type:STRING.ATFINALHASHSTRING
	array<string>                           contentChangeSets;               // offset:0x038	type:ARRAY.ATARRAY
	array<struct ContentChangeSetGroup>     contentChangeSetGroups;          // offset:0x048	type:ARRAY.ATARRAY
	string                                  startupScript;                   // offset:0x058	type:STRING.ATFINALHASHSTRING
	int                                     scriptCallstackSize;             // offset:0x05C	type:INT.0
	enum eExtraContentPackType              type;                            // offset:0x060	type:ENUM.32BIT
	int                                     order;                           // offset:0x064	type:INT.0
	int                                     minorOrder;                      // offset:0x068	type:INT.0
	string                                  dependencyPackHash;              // offset:0x06C	type:STRING.ATHASHVALUE
	string                                  requiredVersion;                 // offset:0x070	type:STRING.ATSTRING
	bool                                    isLevelPack;                     // offset:0x080	type:BOOL.0
	int                                     subPackCount;                    // offset:0x084	type:INT.0
};

struct ScriptedGlow
{
	uint                             color;                           // offset:0x000	type:UINT.1
	float                            intensity;                       // offset:0x004	type:FLOAT.0
	float                            range;                           // offset:0x008	type:FLOAT.0
};

struct ScriptedGlowList
{
	array<struct ScriptedGlow>       data;                            // offset:0x000	type:ARRAY.ATARRAY
};

struct Settings
{
	int                              version;                         // offset:0x008	type:INT.0
	enum eSettingsManagerConfig      configSource;                    // offset:0x00C	type:ENUM.32BIT
	struct CGraphicsSettings         graphics;                        // offset:0x010	type:STRUCT.STRUCTURE
	struct CSystemSettings           system;                          // offset:0x0A8	type:STRUCT.STRUCTURE
	struct CAudioSettings            audio;                           // offset:0x0D0	type:STRUCT.STRUCTURE
	struct CVideoSettings            video;                           // offset:0x0E0	type:STRUCT.STRUCTURE
	string                           VideoCardDescription;            // offset:0x118	type:STRING.ATSTRING
};

struct ShopPedApparel
{
	string                             pedName;                         // offset:0x008	type:STRING.CONST_STRING
	string                             dlcName;                         // offset:0x010	type:STRING.CONST_STRING
	string                             fullDlcName;                     // offset:0x018	type:STRING.ATHASHVALUE
	string                             creatureMetaData;                // offset:0x01C	type:STRING.ATHASHVALUE
	string                             nameHash;                        // offset:0x020	type:STRING.ATHASHVALUE
	enum _0x3847C7AF                   eCharacter;                      // offset:0x024	type:ENUM.32BIT
	array<struct ShopPedComponent>     pedComponents;                   // offset:0x028	type:ARRAY.ATARRAY
	array<struct ShopPedProp>          pedProps;                        // offset:0x038	type:ARRAY.ATARRAY
	array<struct ShopPedOutfit>        pedOutfits;                      // offset:0x048	type:ARRAY.ATARRAY
};

struct ShopPedComponent : BaseShopPedApparel
{
	uint                             drawableIndex;                   // offset:0x080	type:UINT.0
	uchar                            localDrawableIndex;              // offset:0x084	type:UCHAR.0
	uchar                            textureIndex;                    // offset:0x085	type:UCHAR.0
	bool                             isInOutfit;                      // offset:0x086	type:BOOL.0
	enum ePedVarComp                 eCompType;                       // offset:0x088	type:ENUM.32BIT
};

struct ShopPedOutfit : BaseShopPedApparel
{
	array<struct ComponentDescription>     includedPedComponents;           // offset:0x080	type:ARRAY.ATARRAY
	array<struct PropDescription>          includedPedProps;                // offset:0x090	type:ARRAY.ATARRAY
};

struct ShopPedProp : BaseShopPedApparel
{
	uchar                            propIndex;                       // offset:0x080	type:UCHAR.0
	uchar                            localPropIndex;                  // offset:0x081	type:UCHAR.0
	uchar                            textureIndex;                    // offset:0x082	type:UCHAR.0
	bool                             isInOutfit;                      // offset:0x083	type:BOOL.0
	enum eAnchorPoints               eAnchorPoint;                    // offset:0x084	type:ENUM.32BIT
};

struct ShopVehicleData : BaseShopItem
{
	string                           modelNameHash;                   // offset:0x020	type:STRING.ATHASHVALUE
	array<struct ShopVehicleMod>     vehicleMods;                     // offset:0x028	type:ARRAY.ATARRAY
	bitset<enum eVehicleFlags>       vehicleFlags;                    // offset:0x038	type:BITSET.32BIT
};

struct ShopVehicleDataArray
{
	array<struct ShopVehicleData>     Vehicles;                        // offset:0x008	type:ARRAY.ATARRAY
	array<struct ShopVehicleMod>      VehicleMods;                     // offset:0x018	type:ARRAY.ATARRAY
	string                            nameHash;                        // offset:0x028	type:STRING.ATHASHVALUE
};

struct ShopVehicleMod
{
	string                           nameHash;                        // offset:0x008	type:STRING.ATHASHVALUE
	string                           lockHash;                        // offset:0x00C	type:STRING.ATHASHVALUE
	ushort                           cost;                            // offset:0x010	type:USHORT.0
};

struct ShopWeaponComponent : BaseShopItem
{
	string                           componentName;                   // offset:0x020	type:STRING.ATHASHVALUE
	string                           componentDesc;                   // offset:0x028	type:STRING.ATSTRING
	ushort                           id;                              // offset:0x038	type:USHORT.0
};

struct TattooShopItem : BaseShopItem
{
	ushort                           id;                              // offset:0x020	type:USHORT.0
	string                           collection;                      // offset:0x024	type:STRING.ATHASHVALUE
	string                           preset;                          // offset:0x028	type:STRING.ATHASHVALUE
	string                           updateGroup;                     // offset:0x02C	type:STRING.ATHASHVALUE
	enum eTattooFacing               eFacing;                         // offset:0x030	type:ENUM.32BIT
	enum eTattooFaction              eFaction;                        // offset:0x034	type:ENUM.32BIT
};

struct TattooShopItemArray
{
	array<struct TattooShopItem>     TattooShopItems;                 // offset:0x008	type:ARRAY.ATARRAY
	string                           nameHash;                        // offset:0x018	type:STRING.ATHASHVALUE
};

struct UI3DDrawManager
{
	array<struct UILightRig, 4>      lightRigs;                       // offset:0x530	type:ARRAY.ATFIXEDARRAY
	array<struct UIScenePreset>      scenePresets;                    // offset:0x808	type:ARRAY.ATARRAY
	struct UIGlobalRenderData        globalRenderData;                // offset:0xA08	type:STRUCT.STRUCTURE
};

struct UIGlobalRenderData
{
	float                            exposure;                        // offset:0x000	type:FLOAT.0
	float                            dynamicBakeBoostMin;             // offset:0x008	type:FLOAT.0
	float                            dynamicBakeBoostMax;             // offset:0x00C	type:FLOAT.0
};

struct UILightData
{
	vec3                             position;                        // offset:0x000	type:VECTOR3.0
	float                            intensity;                       // offset:0x010	type:FLOAT.0
	float                            radius;                          // offset:0x014	type:FLOAT.0
	uint                             color;                           // offset:0x01C	type:UINT.1
};

struct UILightRig
{
	array<struct UILightData, 4>     lights;                          // offset:0x000	type:ARRAY.ATFIXEDARRAY
	uint                             ambientBaseCol;                  // offset:0x090	type:UINT.1
	float                            ambientBaseMult;                 // offset:0x094	type:FLOAT.0
	uint                             ambientDownCol;                  // offset:0x098	type:UINT.1
	float                            ambientDownMult;                 // offset:0x09C	type:FLOAT.0
	float                            ambientDownWrap;                 // offset:0x0A0	type:FLOAT.0
	uint                             id;                              // offset:0x0A4	type:UINT.0
};

struct UIScenePreset
{
	string                           name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct _0x95BA7451, 5>     elements;                        // offset:0x010	type:ARRAY.ATFIXEDARRAY
};

struct UnapprovedCameraLists
{
	array<string>                    _0x0985EA47;                     // offset:0x008	type:ARRAY.ATARRAY
};

struct VehicleFragImpulseFunction
{
	array<struct VehicleFragImpulseRange>     Ranges;                          // offset:0x008	type:ARRAY.ATARRAY
};

struct VehicleFragImpulseRange
{
	float                            OutputMin;                       // offset:0x008	type:FLOAT.0
	float                            OutputMax;                       // offset:0x00C	type:FLOAT.0
	float                            InputThreshold;                  // offset:0x010	type:FLOAT.0
};

struct VfxLightningCloudBurstCommonSettings
{
	float                            BurstDurationMin;                // offset:0x008	type:FLOAT.0
	float                            BurstDurationMax;                // offset:0x00C	type:FLOAT.0
	int                              BurstSeqCount;                   // offset:0x010	type:INT.0
	float                            RootOrbitXVariance;              // offset:0x014	type:FLOAT.0
	float                            RootOrbitYVarianceMin;           // offset:0x018	type:FLOAT.0
	float                            RootOrbitYVarianceMax;           // offset:0x01C	type:FLOAT.0
	float                            LocalOrbitXVariance;             // offset:0x020	type:FLOAT.0
	float                            LocalOrbitYVariance;             // offset:0x024	type:FLOAT.0
	float                            BurstSeqOrbitXVariance;          // offset:0x028	type:FLOAT.0
	float                            BurstSeqOrbitYVariance;          // offset:0x02C	type:FLOAT.0
	float                            DelayMin;                        // offset:0x030	type:FLOAT.0
	float                            DelayMax;                        // offset:0x034	type:FLOAT.0
	float                            SizeMin;                         // offset:0x038	type:FLOAT.0
	float                            SizeMax;                         // offset:0x03C	type:FLOAT.0
};

struct VfxLightningCloudBurstSettings
{
	float                                           BurstIntensityMin;               // offset:0x008	type:FLOAT.0
	float                                           BurstIntensityMax;               // offset:0x00C	type:FLOAT.0
	float                                           LightSourceExponentFalloff;      // offset:0x010	type:FLOAT.0
	float                                           LightDeltaPos;                   // offset:0x014	type:FLOAT.0
	float                                           LightDistance;                   // offset:0x018	type:FLOAT.0
	uint                                            LightColor;                      // offset:0x01C	type:UINT.1
	struct VfxLightningCloudBurstCommonSettings     CloudBurstCommonSettings;        // offset:0x020	type:STRUCT.STRUCTURE
};

struct VfxLightningDirectionalBurstSettings
{
	float                            BurstIntensityMin;               // offset:0x008	type:FLOAT.0
	float                            BurstIntensityMax;               // offset:0x00C	type:FLOAT.0
	float                            BurstDurationMin;                // offset:0x010	type:FLOAT.0
	float                            BurstDurationMax;                // offset:0x014	type:FLOAT.0
	int                              BurstSeqCount;                   // offset:0x018	type:INT.0
	float                            RootOrbitXVariance;              // offset:0x01C	type:FLOAT.0
	float                            RootOrbitYVarianceMin;           // offset:0x020	type:FLOAT.0
	float                            RootOrbitYVarianceMax;           // offset:0x024	type:FLOAT.0
	float                            BurstSeqOrbitXVariance;          // offset:0x028	type:FLOAT.0
	float                            BurstSeqOrbitYVariance;          // offset:0x02C	type:FLOAT.0
};

struct VfxLightningKeyFrames
{
	struct rage__ptxKeyframe         LightningMainIntensity;          // offset:0x008	type:STRUCT.STRUCTURE
	struct rage__ptxKeyframe         LightningBranchIntensity;        // offset:0x028	type:STRUCT.STRUCTURE
};

struct VfxLightningSettings
{
	int                                             lightningOccurranceChance;       // offset:0x008	type:INT.0
	float                                           lightningShakeIntensity;         // offset:0x00C	type:FLOAT.0
	struct VfxLightningTimeCycleSettings            lightningTimeCycleMods;          // offset:0x010	type:STRUCT.STRUCTURE
	struct VfxLightningDirectionalBurstSettings     DirectionalBurstSettings;        // offset:0x028	type:STRUCT.STRUCTURE
	struct VfxLightningCloudBurstSettings           CloudBurstSettings;              // offset:0x058	type:STRUCT.STRUCTURE
	struct VfxLightningStrikeSettings               StrikeSettings;                  // offset:0x0B8	type:STRUCT.STRUCTURE
};

struct VfxLightningStrikeForkPointSettings
{
	float                            DeviationRightVariance;          // offset:0x008	type:FLOAT.0
	float                            DeviationForwardMin;             // offset:0x00C	type:FLOAT.0
	float                            DeviationForwardMax;             // offset:0x010	type:FLOAT.0
	float                            LengthMin;                       // offset:0x014	type:FLOAT.0
	float                            LengthMax;                       // offset:0x018	type:FLOAT.0
	float                            LengthDecay;                     // offset:0x01C	type:FLOAT.0
};

struct VfxLightningStrikeSettings
{
	float                                                    IntensityMin;                    // offset:0x008	type:FLOAT.0
	float                                                    IntensityMax;                    // offset:0x00C	type:FLOAT.0
	float                                                    IntensityMinClamp;               // offset:0x010	type:FLOAT.0
	float                                                    WidthMin;                        // offset:0x014	type:FLOAT.0
	float                                                    WidthMax;                        // offset:0x018	type:FLOAT.0
	float                                                    WidthMinClamp;                   // offset:0x01C	type:FLOAT.0
	float                                                    IntensityFlickerMin;             // offset:0x020	type:FLOAT.0
	float                                                    IntensityFlickerMax;             // offset:0x024	type:FLOAT.0
	float                                                    IntensityFlickerFrequency;       // offset:0x028	type:FLOAT.0
	float                                                    IntensityLevelDecayMin;          // offset:0x02C	type:FLOAT.0
	float                                                    IntensityLevelDecayMax;          // offset:0x030	type:FLOAT.0
	float                                                    WidthLevelDecayMin;              // offset:0x034	type:FLOAT.0
	float                                                    WidthLevelDecayMax;              // offset:0x038	type:FLOAT.0
	float                                                    NoiseTexScale;                   // offset:0x03C	type:FLOAT.0
	float                                                    NoiseAmplitude;                  // offset:0x040	type:FLOAT.0
	float                                                    NoiseAmpMinDistLerp;             // offset:0x044	type:FLOAT.0
	float                                                    NoiseAmpMaxDistLerp;             // offset:0x048	type:FLOAT.0
	uchar                                                    SubdivisionCount;                // offset:0x04C	type:UCHAR.0
	float                                                    OrbitDirXVariance;               // offset:0x050	type:FLOAT.0
	float                                                    OrbitDirYVarianceMin;            // offset:0x054	type:FLOAT.0
	float                                                    OrbitDirYVarianceMax;            // offset:0x058	type:FLOAT.0
	float                                                    MaxDistanceForExposureReset;     // offset:0x05C	type:FLOAT.0
	float                                                    AngularWidthFactor;              // offset:0x060	type:FLOAT.0
	float                                                    MaxHeightForStrike;              // offset:0x064	type:FLOAT.0
	float                                                    CoronaIntensityMult;             // offset:0x068	type:FLOAT.0
	float                                                    BaseCoronaSize;                  // offset:0x06C	type:FLOAT.0
	uint                                                     BaseColor;                       // offset:0x070	type:UINT.1
	uint                                                     FogColor;                        // offset:0x074	type:UINT.1
	float                                                    CloudLightIntensityMult;         // offset:0x078	type:FLOAT.0
	float                                                    CloudLightDeltaPos;              // offset:0x07C	type:FLOAT.0
	float                                                    CloudLightRadius;                // offset:0x080	type:FLOAT.0
	float                                                    CloudLightFallOffExponent;       // offset:0x084	type:FLOAT.0
	float                                                    MaxDistanceForBurst;             // offset:0x088	type:FLOAT.0
	float                                                    BurstThresholdIntensity;         // offset:0x08C	type:FLOAT.0
	float                                                    LightningFadeWidth;              // offset:0x090	type:FLOAT.0
	float                                                    LightningFadeWidthFalloffExp;    // offset:0x094	type:FLOAT.0
	array<struct VfxLightningStrikeVariationSettings, 3>     variations;                      // offset:0x098	type:ARRAY.ATRANGEARRAY
	struct VfxLightningCloudBurstCommonSettings              CloudBurstCommonSettings;        // offset:0x2C0	type:STRUCT.STRUCTURE
};

struct VfxLightningStrikeSplitPointSettings
{
	float                            FractionMin;                     // offset:0x008	type:FLOAT.0
	float                            FractionMax;                     // offset:0x00C	type:FLOAT.0
	float                            DeviationDecay;                  // offset:0x010	type:FLOAT.0
	float                            DeviationRightVariance;          // offset:0x014	type:FLOAT.0
};

struct VfxLightningStrikeVariationSettings
{
	float                                           DurationMin;                     // offset:0x008	type:FLOAT.0
	float                                           DurationMax;                     // offset:0x00C	type:FLOAT.0
	float                                           AnimationTimeMin;                // offset:0x010	type:FLOAT.0
	float                                           AnimationTimeMax;                // offset:0x014	type:FLOAT.0
	float                                           EndPointOffsetXVariance;         // offset:0x018	type:FLOAT.0
	uchar                                           SubdivisionPatternMask;          // offset:0x01C	type:UCHAR.0
	struct VfxLightningStrikeSplitPointSettings     ZigZagSplitPoint;                // offset:0x020	type:STRUCT.STRUCTURE
	struct VfxLightningStrikeSplitPointSettings     ForkZigZagSplitPoint;            // offset:0x038	type:STRUCT.STRUCTURE
	struct VfxLightningStrikeForkPointSettings      ForkPoint;                       // offset:0x050	type:STRUCT.STRUCTURE
	struct VfxLightningKeyFrames                    KeyFrameData;                    // offset:0x070	type:STRUCT.STRUCTURE
};

struct VfxLightningTimeCycleSettings
{
	string                           tcLightningDirectionalBurst;     // offset:0x008	type:STRING.ATHASHVALUE
	string                           tcLightningCloudBurst;           // offset:0x00C	type:STRING.ATHASHVALUE
	string                           tcLightningStrikeOnly;           // offset:0x010	type:STRING.ATHASHVALUE
	string                           tcLightningDirectionalBurstWithStrike; // offset:0x014	type:STRING.ATHASHVALUE
};

struct VfxPedBoneWadeInfo
{
	float                            sizeEvo;                         // offset:0x000	type:FLOAT.0
	float                            depthMult;                       // offset:0x004	type:FLOAT.0
	float                            speedMult;                       // offset:0x008	type:FLOAT.0
	float                            widthRatio;                      // offset:0x00C	type:FLOAT.0
};

struct VfxPedBoneWaterInfo
{
	float                            sampleSize;                      // offset:0x000	type:FLOAT.0
	float                            boneSize;                        // offset:0x004	type:FLOAT.0
	bool                             _0xB23F0FCC;                     // offset:0x008	type:BOOL.0
	bool                             splashInPtFxEnabled;             // offset:0x009	type:BOOL.0
	bool                             splashOutPtFxEnabled;            // offset:0x00A	type:BOOL.0
	bool                             splashWadePtFxEnabled;           // offset:0x00B	type:BOOL.0
	bool                             splashTrailPtFxEnabled;          // offset:0x00C	type:BOOL.0
	bool                             waterDripPtFxEnabled;            // offset:0x00D	type:BOOL.0
	float                            splashInPtFxRange;               // offset:0x010	type:FLOAT.0
	float                            splashOutPtFxRange;              // offset:0x014	type:FLOAT.0
	float                            splashWadePtFxRange;             // offset:0x018	type:FLOAT.0
	float                            splashTrailPtFxRange;            // offset:0x01C	type:FLOAT.0
	float                            waterDripPtFxRange;              // offset:0x020	type:FLOAT.0
};

struct VfxPedFootDecalInfo
{
	int                              _0x8AD055D8;                     // offset:0x000	type:INT.0
	int                              _0xEA20AE9B;                     // offset:0x004	type:INT.0
	int                              _0x6362BD81;                     // offset:0x008	type:INT.0
	int                              _0xEA88C329;                     // offset:0x00C	type:INT.0
	int                              _0xA7953B20;                     // offset:0x010	type:INT.0
	int                              _0xCFC6C428;                     // offset:0x014	type:INT.0
	int                              _0x371C4E74;                     // offset:0x018	type:INT.0
	int                              _0xA3D551D2;                     // offset:0x01C	type:INT.0
	int                              _0xA1F74215;                     // offset:0x020	type:INT.0
	int                              _0x16DD5DAB;                     // offset:0x024	type:INT.0
	int                              _0x47A3FADA;                     // offset:0x028	type:INT.0
	int                              _0x9FF0802A;                     // offset:0x02C	type:INT.0
	int                              _0x0E9113E2;                     // offset:0x030	type:INT.0
	int                              _0xD6C31B7A;                     // offset:0x034	type:INT.0
	int                              _0x5B4188F6;                     // offset:0x038	type:INT.0
	int                              _0x4723764C;                     // offset:0x03C	type:INT.0
	int                              _0x5D19CE77;                     // offset:0x040	type:INT.0
	int                              _0x96A6E198;                     // offset:0x044	type:INT.0
	float                            decalWidth;                      // offset:0x048	type:FLOAT.0
	float                            decalLength;                     // offset:0x04C	type:FLOAT.0
	uchar                            decalColR;                       // offset:0x050	type:UCHAR.0
	uchar                            decalColG;                       // offset:0x051	type:UCHAR.0
	uchar                            decalColB;                       // offset:0x052	type:UCHAR.0
	uchar                            decalWetColR;                    // offset:0x053	type:UCHAR.0
	uchar                            decalWetColG;                    // offset:0x054	type:UCHAR.0
	uchar                            decalWetColB;                    // offset:0x055	type:UCHAR.0
	float                            decalLife;                       // offset:0x058	type:FLOAT.0
};

struct VfxPedFootInfo
{
	string                           decalInfoName;                   // offset:0x000	type:STRING.ATHASHVALUE
	string                           ptFxInfoName;                    // offset:0x004	type:STRING.ATHASHVALUE
};

struct VfxPedFootPtFxInfo
{
	string                           _0x25D52825;                     // offset:0x000	type:STRING.ATHASHVALUE
	string                           _0x688E2872;                     // offset:0x004	type:STRING.ATHASHVALUE
	float                            _0xFF0FD89D;                     // offset:0x008	type:FLOAT.0
	float                            ptFxScale;                       // offset:0x00C	type:FLOAT.0
};

struct VfxPedWadeDecalInfo
{
	int                              decalId;                         // offset:0x000	type:INT.0
	int                              _0xE2E753E4;                     // offset:0x004	type:INT.0
	int                              _0xE9435B06;                     // offset:0x008	type:INT.0
	float                            _0xB5500556;                     // offset:0x00C	type:FLOAT.0
	float                            _0x9EEABC18;                     // offset:0x010	type:FLOAT.0
	uchar                            decalColR;                       // offset:0x014	type:UCHAR.0
	uchar                            decalColG;                       // offset:0x015	type:UCHAR.0
	uchar                            decalColB;                       // offset:0x016	type:UCHAR.0
};

struct VfxPedWadeInfo
{
	string                           decalInfoName;                   // offset:0x000	type:STRING.ATHASHVALUE
	string                           ptFxInfoName;                    // offset:0x004	type:STRING.ATHASHVALUE
};

struct VfxPedWadePtFxInfo
{
	string                           ptFxName;                        // offset:0x000	type:STRING.ATHASHVALUE
	float                            ptFxDepthEvoMin;                 // offset:0x004	type:FLOAT.0
	float                            ptFxDepthEvoMax;                 // offset:0x008	type:FLOAT.0
	float                            ptFxSpeedEvoMin;                 // offset:0x00C	type:FLOAT.0
	float                            ptFxSpeedEvoMax;                 // offset:0x010	type:FLOAT.0
};

struct WaterData
{
	array<struct WaterQuad>          WaterQuads;                      // offset:0x008	type:ARRAY.ATARRAY
	array<struct CalmingQuad>        CalmingQuads;                    // offset:0x018	type:ARRAY.ATARRAY
	array<struct WaveQuad>           WaveQuads;                       // offset:0x028	type:ARRAY.ATARRAY
};

struct WaterQuad
{
	short                            minX;                            // offset:0x000	type:SHORT.0
	short                            minY;                            // offset:0x002	type:SHORT.0
	short                            maxX;                            // offset:0x004	type:SHORT.0
	short                            maxY;                            // offset:0x006	type:SHORT.0
	uchar                            a1;                              // offset:0x008	type:UCHAR.0
	uchar                            a2;                              // offset:0x009	type:UCHAR.0
	uchar                            a3;                              // offset:0x00A	type:UCHAR.0
	uchar                            a4;                              // offset:0x00B	type:UCHAR.0
	float                            z;                               // offset:0x014	type:FLOAT.0
	uchar                            Type;                            // offset:0x019	type:UCHAR.0
	bool                             IsInvisible;                     // offset:0x01C	type:BOOL.0
	bool                             HasLimitedDepth;                 // offset:0x01D	type:BOOL.0
	bool                             NoStencil;                       // offset:0x01E	type:BOOL.0
};

struct WaveQuad
{
	short                            minX;                            // offset:0x000	type:SHORT.0
	short                            minY;                            // offset:0x002	type:SHORT.0
	short                            maxX;                            // offset:0x004	type:SHORT.0
	short                            maxY;                            // offset:0x006	type:SHORT.0
	float                            Amplitude;                       // offset:0x00C	type:FLOAT.0
	float                            XDirection;                      // offset:0x010	type:FLOAT.0
	float                            YDirection;                      // offset:0x014	type:FLOAT.0
};

struct WeaponShopItem : BaseShopItem
{
	int                                   ammoCost;                        // offset:0x020	type:INT.0
	string                                nameHash;                        // offset:0x024	type:STRING.ATHASHVALUE
	string                                weaponDesc;                      // offset:0x028	type:STRING.ATSTRING
	string                                weaponTT;                        // offset:0x038	type:STRING.ATSTRING
	string                                weaponUppercase;                 // offset:0x048	type:STRING.ATSTRING
	array<struct ShopWeaponComponent>     weaponComponents;                // offset:0x058	type:ARRAY.ATARRAY
	bool                                  availableInSP;                   // offset:0x068	type:BOOL.0
};

struct WeaponShopItemArray
{
	array<struct WeaponShopItem>     weaponShopItems;                 // offset:0x008	type:ARRAY.ATARRAY
	string                           nameHash;                        // offset:0x018	type:STRING.ATHASHVALUE
};

struct _0x00FE80C3
{
	bool                             _0xA82E2FC5;                     // offset:0x000	type:BOOL.0
	uint                             _0xEB247218;                     // offset:0x004	type:UINT.0
	uint                             _0xE3A5E5AA;                     // offset:0x008	type:UINT.0
};

struct _0x0625488A : EventInstance
{
	float                            _0x5FD7B5BF;                     // offset:0x038	type:FLOAT.0
	float                            _0x7C1AD9BE;                     // offset:0x03C	type:FLOAT.0
	int                              _0x0E535F1F;                     // offset:0x040	type:INT.0
};

struct _0x07122856
{
	struct CAmbientAudio             Initial;                         // offset:0x000	type:STRUCT.STRUCTURE
	struct CAmbientAudio             Response;                        // offset:0x00C	type:STRUCT.STRUCTURE
};

struct _0x078782BF
{
	array<struct _0x5E8CE4FB>        Colors;                          // offset:0x000	type:ARRAY.ATARRAY
};

struct _0x08FBD27C
{
	struct _0x67AB17FB               Conditions;                      // offset:0x000	type:STRUCT.STRUCTURE
	string                           Exchange;                        // offset:0x078	type:STRING.ATHASHVALUE
	array<string>                    Exchanges;                       // offset:0x080	type:ARRAY.ATARRAY
	array<struct _0x7E82BE27>        _0x6F75F0D1;                     // offset:0x090	type:ARRAY.ATARRAY
	array<struct _0x369CA7D3>        ConditionalExchanges;            // offset:0x0A0	type:ARRAY.ATARRAY
};

struct _0x0CD0D0CD
{
	bool                             gpuPtFxEnabled;                  // offset:0x000	type:BOOL.0
	string                           gpuPtFxName;                     // offset:0x004	type:STRING.ATHASHVALUE
	float                            gpuPtFxSunThresh;                // offset:0x008	type:FLOAT.0
	float                            gpuPtFxWindThresh;               // offset:0x00C	type:FLOAT.0
	float                            gpuPtFxTempThresh;               // offset:0x010	type:FLOAT.0
	int                              gpuPtFxTimeMin;                  // offset:0x014	type:INT.0
	int                              gpuPtFxTimeMax;                  // offset:0x018	type:INT.0
	float                            gpuPtFxInterpRate;               // offset:0x01C	type:FLOAT.0
	float                            _0x25CEF2DA;                     // offset:0x020	type:FLOAT.0
	float                            _0x20EF093C;                     // offset:0x024	type:FLOAT.0
};

struct _0x0DB67820 : EventInstance
{
	float                            _0x5FD7B5BF;                     // offset:0x038	type:FLOAT.0
	float                            _0xB537C52A;                     // offset:0x03C	type:FLOAT.0
	int                              DamageComponent;                 // offset:0x040	type:INT.0
	float                            DamageHealth;                    // offset:0x044	type:FLOAT.0
};

struct _0x0DD205EF
{
	enum eVfxGroup                   vfxGroup;                        // offset:0x000	type:ENUM.32BIT
	string                           footInfoName;                    // offset:0x004	type:STRING.ATHASHVALUE
	string                           _0xD2B3F7EF;                     // offset:0x008	type:STRING.ATHASHVALUE
};

struct _0x0DEE1CA7
{
	float                            Speed;                           // offset:0x000	type:FLOAT.0
	float                            ClipRate;                        // offset:0x004	type:FLOAT.0
};

struct _0x114671D0
{
	struct CAgitatedCondition        Condition;                       // offset:0x000	type:STRUCT.POINTER
	struct _0x2FF3C222               TalkResponse;                    // offset:0x008	type:STRUCT.STRUCTURE
};

struct _0x119962EE
{
	array<array<vec3V, 2>, 5>        DeltaLimits;                     // offset:0x000	type:ARRAY.ATFIXEDARRAY
};

struct _0x11C51609
{
	string                           Name;                            // offset:0x000	type:STRING.ATSTRING
	float                            Sun;                             // offset:0x010	type:FLOAT.0
	float                            Cloud;                           // offset:0x014	type:FLOAT.0
	float                            WindMin;                         // offset:0x018	type:FLOAT.0
	float                            WindMax;                         // offset:0x01C	type:FLOAT.0
	float                            Rain;                            // offset:0x020	type:FLOAT.0
	float                            Snow;                            // offset:0x024	type:FLOAT.0
	float                            SnowMist;                        // offset:0x028	type:FLOAT.0
	float                            Fog;                             // offset:0x02C	type:FLOAT.0
	bool                             Lightning;                       // offset:0x030	type:BOOL.0
	bool                             Sandstorm;                       // offset:0x031	type:BOOL.0
	float                            RippleBumpiness;                 // offset:0x034	type:FLOAT.0
	float                            RippleMinBumpiness;              // offset:0x038	type:FLOAT.0
	float                            RippleMaxBumpiness;              // offset:0x03C	type:FLOAT.0
	float                            RippleBumpinessWindScale;        // offset:0x040	type:FLOAT.0
	float                            RippleSpeed;                     // offset:0x044	type:FLOAT.0
	float                            RippleVelocityTransfer;          // offset:0x048	type:FLOAT.0
	float                            RippleDisturb;                   // offset:0x04C	type:FLOAT.0
	float                            OceanBumpiness;                  // offset:0x050	type:FLOAT.0
	float                            DeepOceanScale;                  // offset:0x054	type:FLOAT.0
	float                            OceanNoiseMinAmplitude;          // offset:0x058	type:FLOAT.0
	float                            OceanWaveAmplitude;              // offset:0x05C	type:FLOAT.0
	float                            ShoreWaveAmplitude;              // offset:0x060	type:FLOAT.0
	float                            OceanWaveWindScale;              // offset:0x064	type:FLOAT.0
	float                            ShoreWaveWindScale;              // offset:0x068	type:FLOAT.0
	float                            OceanWaveMinAmplitude;           // offset:0x06C	type:FLOAT.0
	float                            ShoreWaveMinAmplitude;           // offset:0x070	type:FLOAT.0
	float                            OceanWaveMaxAmplitude;           // offset:0x074	type:FLOAT.0
	float                            ShoreWaveMaxAmplitude;           // offset:0x078	type:FLOAT.0
	float                            OceanFoamIntensity;              // offset:0x07C	type:FLOAT.0
	string                           DropSettingName;                 // offset:0x080	type:STRING.ATSTRING
	string                           MistSettingName;                 // offset:0x090	type:STRING.ATSTRING
	string                           GroundSettingName;               // offset:0x0A0	type:STRING.ATSTRING
	string                           TimeCycleFilename;               // offset:0x0B0	type:STRING.ATSTRING
	string                           CloudSettingsName;               // offset:0x0C0	type:STRING.ATHASHVALUE
};

struct _0x121385CD
{
	array<struct EventInstance>      Instances;                       // offset:0x000	type:ARRAY.ATARRAY
};

struct _0x150FE51F
{
	float                            Offset;                          // offset:0x000	type:FLOAT.0
	vec2                             AngleToBlendInOffset;            // offset:0x004	type:VECTOR2.0
};

struct _0x1523B012
{
	bool                             Enabled;                         // offset:0x008	type:BOOL.0
	float                            ScreenRatio;                     // offset:0x00C	type:FLOAT.0
	float                            _0xD01AFBE7;                     // offset:0x010	type:FLOAT.0
};

struct _0x1673F273
{
	map<uint, int>                   JunctionMap;                     // offset:0x000	type:MAP.ATBINARYMAP
};

struct _0x18F2242F
{
	array<struct _0x9B31E881, 3>     Resolutions;                     // offset:0x000	type:ARRAY.MEMBER
};

struct _0x1AD488B9
{
	uchar                            primaryColor;                    // offset:0x000	type:UCHAR.0
	uchar                            defaultSecondaryColor;           // offset:0x001	type:UCHAR.0
};

struct _0x1BC82D17
{
	uchar                            component;                       // offset:0x000	type:UCHAR.0
	uchar                            anchor;                          // offset:0x001	type:UCHAR.0
	uchar                            index;                           // offset:0x002	type:UCHAR.0
	string                           dlcNameHash;                     // offset:0x004	type:STRING.ATHASHVALUE
};

struct _0x23E53095
{
	uchar                            texIndex;                        // offset:0x000	type:UCHAR.0
	uchar                            paletteRow;                      // offset:0x001	type:UCHAR.0
};

struct _0x27A58D7A
{
	vec3                             LimitMin;                        // offset:0x020	type:VECTOR3.0
	vec3                             LimitMax;                        // offset:0x030	type:VECTOR3.0
};

struct _0x2ADDA568
{
	string                           type;                            // offset:0x000	type:STRING.ATHASHVALUE
	map<string, string>              params;                          // offset:0x008	type:MAP.ATBINARYMAP
};

struct _0x2E35FD1E
{
	float                            BaseX;                           // offset:0x000	type:FLOAT.0
	float                            BaseY;                           // offset:0x004	type:FLOAT.0
	float                            BaseZ;                           // offset:0x008	type:FLOAT.0
	float                            Delta1X;                         // offset:0x00C	type:FLOAT.0
	float                            Delta1Y;                         // offset:0x010	type:FLOAT.0
	float                            Delta2X;                         // offset:0x014	type:FLOAT.0
	float                            Delta2Y;                         // offset:0x018	type:FLOAT.0
	float                            CeilingZ;                        // offset:0x01C	type:FLOAT.0
	bool                             useLineIntersection;             // offset:0x020	type:BOOL.0
};

struct _0x2EE37A14
{
	enum AgitatedType                Type;                            // offset:0x000	type:ENUM.32BIT
	struct _0xF2A6D58E               TimeBeforeInitialReaction;       // offset:0x004	type:STRUCT.STRUCTURE
	struct _0xF2A6D58E               TimeBetweenEscalatingReactions;  // offset:0x00C	type:STRUCT.STRUCTURE
	struct _0xF2A6D58E               TimeAfterLastSuccessfulReaction; // offset:0x014	type:STRUCT.STRUCTURE
	struct _0xF2A6D58E               TimeAfterInitialReactionFailure; // offset:0x01C	type:STRUCT.STRUCTURE
	float                            MinDotToTarget;                  // offset:0x024	type:FLOAT.0
	float                            MaxDotToTarget;                  // offset:0x028	type:FLOAT.0
	float                            MinTargetSpeed;                  // offset:0x02C	type:FLOAT.0
	float                            MaxTargetSpeed;                  // offset:0x030	type:FLOAT.0
	uchar                            MaxReactions;                    // offset:0x034	type:UCHAR.0
	bitset<enum _0xF0C79AAE>         Flags;                           // offset:0x036	type:BITSET.16BIT
};

struct _0x2FF3C222
{
	struct CAmbientAudio             Audio;                           // offset:0x000	type:STRUCT.STRUCTURE
};

struct _0x309C3B9F
{
	vec3                             Offset;                          // offset:0x000	type:VECTOR3.0
	uchar                            SeatIndex;                       // offset:0x010	type:UCHAR.0
};

struct _0x31D64A3D
{
	short                            iPosX;                           // offset:0x000	type:SHORT.0
	short                            iPosY;                           // offset:0x002	type:SHORT.0
	short                            iPosZ;                           // offset:0x004	type:SHORT.0
	uchar                            iRadius;                         // offset:0x006	type:UCHAR.0
	uchar                            iFlags;                          // offset:0x007	type:UCHAR.0
};

struct _0x33246141
{
	struct CAgitatedCondition        Condition;                       // offset:0x000	type:STRUCT.POINTER
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	bitset<enum _0x801E0379>         Flags;                           // offset:0x00C	type:BITSET.8BIT
};

struct _0x343AFFA8
{
	string                           ComponentName;                   // offset:0x000	type:STRING.ATHASHVALUE
	string                           ComponentModel;                  // offset:0x004	type:STRING.ATHASHVALUE
};

struct _0x369CA7D3
{
	struct _0x67AB17FB               Conditions;                      // offset:0x000	type:STRUCT.STRUCTURE
	string                           Exchange;                        // offset:0x078	type:STRING.ATHASHVALUE
	array<string>                    Exchanges;                       // offset:0x080	type:ARRAY.ATARRAY
};

struct _0x37603C00
{
	array<struct _0x39CBDF83>        ModelVariations;                 // offset:0x000	type:ARRAY.ATARRAY
};

struct _0x37ADF737
{
	string                           ModelName;                       // offset:0x000	type:STRING.CONST_STRING
	string                           TuningName;                      // offset:0x008	type:STRING.CONST_STRING
};

struct _0x39CBDF83
{
	enum ePedVarComp                 Component;                       // offset:0x000	type:ENUM.32BIT
	uint                             DrawableId;                      // offset:0x004	type:UINT.0
	uchar                            MinWantedLevel;                  // offset:0x008	type:UCHAR.0
	float                            Armour;                          // offset:0x00C	type:FLOAT.0
};

struct _0x3BC66FEF
{
	array<struct netCatalogServiceLimitedItem>     Items;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct _0x3DC84895
{
	short                            minX;                            // offset:0x000	type:SHORT.0
	short                            minY;                            // offset:0x002	type:SHORT.0
	short                            maxX;                            // offset:0x004	type:SHORT.0
	short                            maxY;                            // offset:0x006	type:SHORT.0
	float                            Amplitude;                       // offset:0x008	type:FLOAT.0
};

struct _0x3E7EC724
{
	float                            RippleBumpiness;                 // offset:0x000	type:FLOAT.0
	float                            RippleMinBumpiness;              // offset:0x004	type:FLOAT.0
	float                            RippleMaxBumpiness;              // offset:0x008	type:FLOAT.0
	float                            RippleBumpinessWindScale;        // offset:0x00C	type:FLOAT.0
	float                            RippleSpeed;                     // offset:0x010	type:FLOAT.0
	float                            RippleDisturb;                   // offset:0x014	type:FLOAT.0
	float                            RippleVelocityTransfer;          // offset:0x018	type:FLOAT.0
	float                            OceanBumpiness;                  // offset:0x01C	type:FLOAT.0
	float                            DeepOceanScale;                  // offset:0x020	type:FLOAT.0
	float                            OceanNoiseMinAmplitude;          // offset:0x024	type:FLOAT.0
	float                            OceanWaveAmplitude;              // offset:0x028	type:FLOAT.0
	float                            ShoreWaveAmplitude;              // offset:0x02C	type:FLOAT.0
	float                            OceanWaveWindScale;              // offset:0x030	type:FLOAT.0
	float                            ShoreWaveWindScale;              // offset:0x034	type:FLOAT.0
	float                            OceanWaveMinAmplitude;           // offset:0x038	type:FLOAT.0
	float                            ShoreWaveMinAmplitude;           // offset:0x03C	type:FLOAT.0
	float                            OceanWaveMaxAmplitude;           // offset:0x040	type:FLOAT.0
	float                            ShoreWaveMaxAmplitude;           // offset:0x044	type:FLOAT.0
	float                            OceanFoamIntensity;              // offset:0x048	type:FLOAT.0
};

struct _0x460D1385
{
	string                           timeCycleMod;                    // offset:0x000	type:STRING.ATHASHVALUE
	float                            maxIntensity;                    // offset:0x004	type:FLOAT.0
	float                            duration;                        // offset:0x008	type:FLOAT.0
	float                            delay;                           // offset:0x00C	type:FLOAT.0
};

struct _0x4B4F9BDC
{
	enum eAnimBoneTag                BoneTag;                         // offset:0x000	type:ENUM.32BIT
	float                            ForceFront;                      // offset:0x004	type:FLOAT.0
	float                            ForceBack;                       // offset:0x008	type:FLOAT.0
};

struct _0x4B80038D
{
	array<struct _0x77E5CEF4>        info;                            // offset:0x000	type:ARRAY.ATARRAY
};

struct _0x511ACBA6 : EventInstance
{
	uchar                            GroupIndex;                      // offset:0x038	type:UCHAR.0
	uchar                            FrameFlags;                      // offset:0x039	type:UCHAR.0
	uchar                            CrackType;                       // offset:0x03A	type:UCHAR.0
	uchar                            BrokenEventFlags;                // offset:0x03B	type:UCHAR.0
};

struct _0x536B3613 : camBaseObjectMetadata
{
	struct _0x8ED4AF1E               _0x7ED24C18;                     // offset:0x010	type:STRUCT.STRUCTURE
	struct _0x78E64982               _0x0E63620A;                     // offset:0x340	type:STRUCT.STRUCTURE
};

struct _0x53C3CC2E
{
	enum ConfigThreadPriority        Priority;                        // offset:0x000	type:ENUM.32BIT
	array<int>                       CpuAffinity;                     // offset:0x008	type:ARRAY.ATARRAY
};

struct _0x566D3A85
{
	int                              key;                             // offset:0x000	type:INT.0
};

struct _0x588031DC
{
	string                           Context;                         // offset:0x000	type:STRING.ATHASHVALUE
	float                            MaxTime;                         // offset:0x004	type:FLOAT.0
};

struct _0x58E12301
{
	uchar                            component;                       // offset:0x000	type:UCHAR.0
	uchar                            index;                           // offset:0x001	type:UCHAR.0
	uchar                            alt;                             // offset:0x002	type:UCHAR.0
	string                           dlcNameHash;                     // offset:0x004	type:STRING.ATHASHVALUE
	array<struct _0x1BC82D17>        sourceAssets;                    // offset:0x008	type:ARRAY.ATARRAY
};

struct _0x5AA44B6A
{
	struct _0x1523B012               Arresting;                       // offset:0x008	type:STRUCT.STRUCTURE
};

struct _0x5B800C53
{
	string                           CycleName;                       // offset:0x000	type:STRING.ATSTRING
	uint                             TimeMult;                        // offset:0x010	type:UINT.0
};

struct _0x5BCA4ECD
{
	string                           assetName;                       // offset:0x000	type:STRING.ATHASHVALUE
	uchar                            alternate;                       // offset:0x004	type:UCHAR.0
};

struct _0x5D2E8188
{
	string                           Quality;                         // offset:0x000	type:STRING.ATSTRING
	bool                             UseFilter;                       // offset:0x011	type:BOOL.0
	float                            Strength;                        // offset:0x014	type:FLOAT.0
	float                            RejectRadius;                    // offset:0x018	type:FLOAT.0
	float                            AcceptRadius;                    // offset:0x01C	type:FLOAT.0
	float                            FadeoutDist;                     // offset:0x020	type:FLOAT.0
	float                            NormalScale;                     // offset:0x024	type:FLOAT.0
};

struct _0x5D3F6196
{
	string                           Name;                            // offset:0x000	type:STRING.ATSTRING
	string                           ProductId;                       // offset:0x010	type:STRING.ATSTRING
};

struct _0x5E8CE4FB
{
	uint                                  color;                           // offset:0x000	type:UINT.1
	enum EVehicleModelColorMetallicID     metallicID;                      // offset:0x004	type:ENUM.8BIT
	enum EVehicleModelAudioColor          audioColor;                      // offset:0x005	type:ENUM.8BIT
	enum EVehicleModelAudioPrefix         audioPrefix;                     // offset:0x006	type:ENUM.8BIT
	uint                                  audioColorHash;                  // offset:0x008	type:UINT.0
	uint                                  audioPrefixHash;                 // offset:0x00C	type:UINT.0
	string                                colorName;                       // offset:0x010	type:STRING.POINTER
	string                                _0x39BE6278;                     // offset:0x018	type:STRING.POINTER
};

struct _0x6038C573
{
	array<string>                    skin;                            // offset:0x000	type:ARRAY.ATARRAY
};

struct _0x62B1F352
{
	float                            blend;                           // offset:0x000	type:FLOAT.0
	uint                             blackWhiteWeights;               // offset:0x004	type:UINT.1
	uint                             tintColor;                       // offset:0x008	type:UINT.1
};

struct _0x64C795D1
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	bitset<enum _0x47D468BC>         BitFlags;                        // offset:0x004	type:BITSET.32BIT
	float                            MaxClimbHeight;                  // offset:0x008	type:FLOAT.0
	float                            MaxDropHeight;                   // offset:0x00C	type:FLOAT.0
	float                            IgnoreObjectMass;                // offset:0x010	type:FLOAT.0
	float                            fClimbCostModifier;              // offset:0x014	type:FLOAT.0
	float                            GotoTargetLookAheadDistance;     // offset:0x018	type:FLOAT.0
	float                            GotoTargetInitialLookAheadDistance; // offset:0x01C	type:FLOAT.0
	float                            GotoTargetLookAheadDistanceIncrement; // offset:0x020	type:FLOAT.0
	float                            DefaultMoveFollowLeaderRunDistance; // offset:0x024	type:FLOAT.0
	float                            DefaultMoveFollowLeaderSprintDistance; // offset:0x028	type:FLOAT.0
	float                            DesiredMbrLowerBoundInMoveFollowLeader; // offset:0x02C	type:FLOAT.0
	float                            FollowLeaderSeekEntityWalkSpeedRange; // offset:0x030	type:FLOAT.0
	float                            FollowLeaderSeekEntityRunSpeedRange; // offset:0x034	type:FLOAT.0
	float                            LooseFormationTargetRadiusOverride; // offset:0x038	type:FLOAT.0
	float                            FollowLeaderResetTargetDistanceSquaredOverride; // offset:0x03C	type:FLOAT.0
	float                            DefaultMaxSlopeNavigable;        // offset:0x040	type:FLOAT.0
	float                            StillLeaderSpacingEpsilon;       // offset:0x044	type:FLOAT.0
	float                            MoveFollowLeaderHeadingTolerance; // offset:0x048	type:FLOAT.0
	float                            NonGroupMinDistToAdjustSpeed;    // offset:0x04C	type:FLOAT.0
	float                            NonGroupMaxDistToAdjustSpeed;    // offset:0x050	type:FLOAT.0
	bool                             CanSprintInFollowLeaderSeekEntity; // offset:0x054	type:BOOL.0
	bool                             UseAdaptiveMbrInMoveFollowLeader; // offset:0x055	type:BOOL.0
	bool                             AlwaysKeepMovingWhilstFollowingLeaderPath; // offset:0x056	type:BOOL.0
	bool                             IgnoreMovingTowardsLeaderTargetRadiusExpansion; // offset:0x057	type:BOOL.0
};

struct _0x67AB17FB
{
	array<string>                    PedTypes;                        // offset:0x000	type:ARRAY.ATARRAY
	array<string>                    ModelNames;                      // offset:0x010	type:ARRAY.ATARRAY
	array<string>                    PedPersonalities;                // offset:0x020	type:ARRAY.ATARRAY
	float                            Chances;                         // offset:0x030	type:FLOAT.0
	float                            MinDistance;                     // offset:0x034	type:FLOAT.0
	float                            MaxDistance;                     // offset:0x038	type:FLOAT.0
	float                            MinDistanceFromPlayer;           // offset:0x03C	type:FLOAT.0
	float                            MaxDistanceFromPlayer;           // offset:0x040	type:FLOAT.0
	bitset<enum _0x6D695820>         Flags;                           // offset:0x044	type:BITSET.32BIT
	struct _0x588031DC               WeSaid;                          // offset:0x048	type:STRUCT.STRUCTURE
	struct _0x588031DC               TheySaid;                        // offset:0x050	type:STRUCT.STRUCTURE
	struct _0x6BEA0309               Friends;                         // offset:0x058	type:STRUCT.STRUCTURE
	float                            NoRepeat;                        // offset:0x060	type:FLOAT.0
};

struct _0x688F83C2
{
	array<struct _0x150FE51F, 3>     Offsets;                         // offset:0x000	type:ARRAY.ATFIXEDARRAY
	vec2                             ExtraRelativePitch;              // offset:0x028	type:VECTOR2.0
	vec2                             AngleToBlendInExtraPitch;        // offset:0x030	type:VECTOR2.0
};

struct _0x6AF8FFCE
{
	string                           _0x72169C52;                     // offset:0x000	type:STRING.ATHASHVALUE
	float                            probability;                     // offset:0x004	type:FLOAT.0
	float                            _0xB82C8C41;                     // offset:0x008	type:FLOAT.0
	float                            _0x9E72B30A;                     // offset:0x00C	type:FLOAT.0
};

struct _0x6BE7D583
{
	string                           ptFxName;                        // offset:0x000	type:STRING.ATHASHVALUE
	enum eAnimBoneTag                _0x8D14E938;                     // offset:0x004	type:ENUM.32BIT
	enum eAnimBoneTag                _0x53E176D2;                     // offset:0x008	type:ENUM.32BIT
	int                              limbId;                          // offset:0x00C	type:INT.0
};

struct _0x6BEA0309
{
	uchar                            Min;                             // offset:0x000	type:UCHAR.0
	uchar                            Max;                             // offset:0x001	type:UCHAR.0
	float                            MaxDistance;                     // offset:0x004	type:FLOAT.0
};

struct _0x6E3C9695
{
	array<struct _0xCA529D67>        _0xED1E33AA;                     // offset:0x000	type:ARRAY.ATARRAY
};

struct _0x6E9C0088
{
	string                           TextureName;                     // offset:0x000	type:STRING.ATHASHVALUE
	string                           TxdName;                         // offset:0x004	type:STRING.ATFINALHASHSTRING
	float                            TexGridCols;                     // offset:0x008	type:FLOAT.0
	float                            TexGridRows;                     // offset:0x00C	type:FLOAT.0
	float                            FrameMin;                        // offset:0x010	type:FLOAT.0
	float                            FrameMax;                        // offset:0x014	type:FLOAT.0
	float                            AnimationFrameCount;             // offset:0x018	type:FLOAT.0
	float                            AnimationFPS;                    // offset:0x01C	type:FLOAT.0
	bool                             AllowUFlip;                      // offset:0x020	type:BOOL.0
	bool                             AllowVFlip;                      // offset:0x021	type:BOOL.0
	vec2                             CenterOffset;                    // offset:0x024	type:VECTOR2.0
};

struct _0x7180E947
{
	enum eAnimBoneTag                _0x8D14E938;                     // offset:0x000	type:ENUM.32BIT
	enum eAnimBoneTag                _0x53E176D2;                     // offset:0x004	type:ENUM.32BIT
	enum _0x2B545AB0                 limbId;                          // offset:0x008	type:ENUM.32BIT
	string                           _0x3F3E355E;                     // offset:0x00C	type:STRING.ATHASHVALUE
	string                           _0xB231C7D4;                     // offset:0x010	type:STRING.ATHASHVALUE
};

struct _0x72CD57F5
{
	float                            MinDist;                         // offset:0x000	type:FLOAT.0
	float                            MaxDist;                         // offset:0x004	type:FLOAT.0
};

struct _0x76E65716
{
	string                           ClipSetId;                       // offset:0x000	type:STRING.ATHASHVALUE
	string                           VarClipSetId;                    // offset:0x004	type:STRING.ATHASHVALUE
	bitset<enum _0x351E42DB>         ConditionFlags;                  // offset:0x008	type:BITSET.32BIT
	bitset<enum _0x80C72BC0>         InformationFlags;                // offset:0x00C	type:BITSET.32BIT
};

struct _0x77E5CEF4
{
	string                           name;                            // offset:0x000	type:STRING.ATSTRING
	string                           archetypeName;                   // offset:0x010	type:STRING.ATSTRING
	vec3                             position;                        // offset:0x020	type:VECTOR3.0
	float                            heading;                         // offset:0x030	type:FLOAT.0
	uint                             _0x9A80B709;                     // offset:0x034	type:UINT.0
};

struct _0x78E64982
{
	vec3                             _0x9AC45A3F;                     // offset:0x010	type:VECTOR3.0
	float                            _0xCCB6BFE8;                     // offset:0x020	type:FLOAT.0
	vec2                             HeadingLimits;                   // offset:0x024	type:VECTOR2.0
	vec2                             PitchLimits;                     // offset:0x02C	type:VECTOR2.0
	bool                             _0x207DEA95;                     // offset:0x034	type:BOOL.0
	float                            _0x6EBE3B26;                     // offset:0x038	type:FLOAT.0
	float                            _0xD96BBFD4;                     // offset:0x03C	type:FLOAT.0
	int                              _0x273E4AFA;                     // offset:0x040	type:INT.0
};

struct _0x7927E2E9
{
	array<string>                    Files;                           // offset:0x000	type:ARRAY.ATARRAY
};

struct _0x7A0A7CFC
{
	string                           assetName;                       // offset:0x000	type:STRING.ATHASHVALUE
	bool                             secondaryHairColor;              // offset:0x004	type:BOOL.0
	bool                             secondaryAccsColor;              // offset:0x005	type:BOOL.0
	array<struct _0x23E53095>        lastGenMapping;                  // offset:0x008	type:ARRAY.ATARRAY
};

struct _0x7B5BBF05
{
	array<struct netCatalogServiceItem>     Items;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct _0x7CB2FE1E
{
	string                           Parent;                          // offset:0x000	type:STRING.ATHASHVALUE
	array<struct _0x08FBD27C>        Triggers;                        // offset:0x008	type:ARRAY.ATARRAY
};

struct _0x7E82BE27
{
	float                            Weight;                          // offset:0x000	type:FLOAT.0
	string                           Exchange;                        // offset:0x004	type:STRING.ATHASHVALUE
};

struct _0x7F7F3AAC
{
	array<struct netCatalogServiceWithThresholdItem>     Items;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct _0x851D8AEA
{
	array<struct netCatalogInventoryItem>     Items;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct _0x88E48BD0
{
	enum ePushType                   Type;                            // offset:0x000	type:ENUM.32BIT
	vec2                             Center;                          // offset:0x004	type:VECTOR2.0
	vec2                             RadiusOrAmpDir;                  // offset:0x00C	type:VECTOR2.0
};

struct _0x8A3C2709
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	struct _0x9F79C322               FXStack;                         // offset:0x008	type:STRUCT.STRUCTURE
	uchar                            Priority;                        // offset:0x198	type:UCHAR.0
};

struct _0x8D242161
{
	float                            FrequencyNoise;                  // offset:0x010	type:FLOAT.0
	float                            AmplitudeNoise;                  // offset:0x014	type:FLOAT.0
	float                            Frequency;                       // offset:0x018	type:FLOAT.0
	float                            Bias;                            // offset:0x01C	type:FLOAT.0
	string                           LayerA;                          // offset:0x024	type:STRING.ATHASHVALUE
	string                           LayerB;                          // offset:0x028	type:STRING.ATHASHVALUE
	bool                             Disabled;                        // offset:0x02C	type:BOOL.0
};

struct _0x8ED4AF1E : camThirdPersonCameraMetadata
{
};

struct _0x8FCEAB89
{
	vec2                             HeadingLimitsLeft;               // offset:0x000	type:VECTOR2.0
	vec2                             HeadingLimitsRight;              // offset:0x008	type:VECTOR2.0
	vec2                             PitchLimits;                     // offset:0x010	type:VECTOR2.0
	vec2                             PitchOffset;                     // offset:0x018	type:VECTOR2.0
	vec2                             WheelAngleLimits;                // offset:0x020	type:VECTOR2.0
	vec2                             WheelAngleOffset;                // offset:0x028	type:VECTOR2.0
	float                            MaxWheelOffsetY;                 // offset:0x030	type:FLOAT.0
	float                            WheelClipLerpInRate;             // offset:0x034	type:FLOAT.0
	float                            WheelClipLerpOutRate;            // offset:0x038	type:FLOAT.0
};

struct _0x922EA309
{
	string                           _0x118AC788;                     // offset:0x000	type:STRING.ATHASHVALUE
	float                            probability;                     // offset:0x004	type:FLOAT.0
	float                            scale;                           // offset:0x008	type:FLOAT.0
	uint                             colTint;                         // offset:0x00C	type:UINT.1
};

struct _0x95BA7451
{
	vec3                             position;                        // offset:0x010	type:VECTOR3.0
	vec3                             position_43;                     // offset:0x020	type:VECTOR3.0
	vec3                             rotationXYZ;                     // offset:0x030	type:VECTOR3.0
	vec4                             bgRectXYWH;                      // offset:0x040	type:VECTOR4.0
	vec4                             bgRectXYWH_43;                   // offset:0x050	type:VECTOR4.0
	uint                             bgRectColor;                     // offset:0x060	type:UINT.1
	uint                             blendColor;                      // offset:0x064	type:UINT.1
	bool                             enabled;                         // offset:0x068	type:BOOL.0
	vec2                             perspectiveShear;                // offset:0x06C	type:VECTOR2.0
	struct _0x62B1F352               postfxData;                      // offset:0x074	type:STRUCT.STRUCTURE
};

struct _0x9AD9DC27
{
	string                                objectName;                      // offset:0x000	type:STRING.ATHASHVALUE
	float                                 objectStrength;                  // offset:0x004	type:FLOAT.0
	array<struct CDeformableBoneData>     DeformableBones;                 // offset:0x008	type:ARRAY.ATARRAY
};

struct _0x9B31E881
{
	vec2                             Dim;                             // offset:0x000	type:VECTOR2.0
	float                            FallOffRadius;                   // offset:0x008	type:FLOAT.0
	float                            KernelSizePercentage;            // offset:0x00C	type:FLOAT.0
	int                              MaxKernel_Lod0;                  // offset:0x010	type:INT.0
	int                              MaxKernel_Lod1;                  // offset:0x014	type:INT.0
	int                              LodToApply;                      // offset:0x018	type:INT.0
	int                              BottomLod;                       // offset:0x01C	type:INT.0
	int                              NormalWeightPower;               // offset:0x020	type:INT.0
	float                            DepthWeightPower;                // offset:0x024	type:FLOAT.0
	float                            Strength;                        // offset:0x028	type:FLOAT.0
	int                              KernelType;                      // offset:0x02C	type:INT.0
};

struct _0x9D1D47E9
{
	enum rage__Mapper                Mapper;                          // offset:0x008	type:ENUM.32BIT
	array<enum rage__InputType>      Inputs;                          // offset:0x010	type:ARRAY.ATARRAY
};

struct _0x9F79C322
{
	struct _0x8D242161                  LayerBlend;                      // offset:0x000	type:STRUCT.STRUCTURE
	array<struct AnimatedPostFX, 6>     Layers;                          // offset:0x030	type:ARRAY.ATFIXEDARRAY
	enum _0x813B6C49                    EventType;                       // offset:0x174	type:ENUM.32BIT
	uint                                _0xF9736A90;                     // offset:0x178	type:UINT.0
	uint                                _0x76AE4AF2;                     // offset:0x17C	type:UINT.0
	int                                 GroupId;                         // offset:0x180	type:INT.0
};

struct _0xA07679CC
{
	int                              BoneID;                          // offset:0x008	type:INT.0
	int                              NumControlPoints;                // offset:0x00C	type:INT.0
	int                              JointDOFs;                       // offset:0x010	type:INT.0
	vec3                             ZeroRotationEulers;              // offset:0x030	type:VECTOR3.0
	vec3                             TwistAxis;                       // offset:0x040	type:VECTOR3.0
	float                            TwistLimitMin;                   // offset:0x050	type:FLOAT.0
	float                            TwistLimitMax;                   // offset:0x054	type:FLOAT.0
	float                            SoftLimitScale;                  // offset:0x058	type:FLOAT.0
	array<struct _0xF9C4560F, 8>     ControlPoints;                   // offset:0x05C	type:ARRAY.MEMBER
	bool                             UseTwistLimits;                  // offset:0x0BC	type:BOOL.0
	bool                             _0x432F06C8;                     // offset:0x0BD	type:BOOL.0
	bool                             UsePerControlTwistLimits;        // offset:0x0BE	type:BOOL.0
};

struct _0xA1D03860
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	struct CloudHatSettings          Settings;                        // offset:0x008	type:STRUCT.STRUCTURE
};

struct _0xA4724F7C
{
	string                           Action;                          // offset:0x008	type:STRING.MEMBER
	array<enum rage__InputType>      Inputs;                          // offset:0x028	type:ARRAY.ATARRAY
};

struct _0xA47600F5
{
	vec3V                            startPos;                        // offset:0x010	type:VEC3V.0
	vec4V                            startRot;                        // offset:0x020	type:VEC4V.0
	float                            startTime;                       // offset:0x030	type:FLOAT.0
	vec3V                            endPos;                          // offset:0x040	type:VEC3V.0
	vec4V                            endRot;                          // offset:0x050	type:VEC4V.0
	float                            endTime;                         // offset:0x060	type:FLOAT.0
};

struct _0xA664E2C4
{
	array<struct netCatalogOnlyItemWithStat>     Items;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct _0xAB677997 : EventInstance
{
	string                           AnimName;                        // offset:0x038	type:STRING.MEMBER
	float                            Speed;                           // offset:0x078	type:FLOAT.0
	float                            Start;                           // offset:0x07C	type:FLOAT.0
	float                            End;                             // offset:0x080	type:FLOAT.0
	bool                             Looping;                         // offset:0x084	type:BOOL.0
};

struct _0xAEBF879E
{
	string                           Header;                          // offset:0x000	type:STRING.ATHASHVALUE
	string                           Body;                            // offset:0x004	type:STRING.ATHASHVALUE
	string                           Block;                           // offset:0x008	type:STRING.ATHASHVALUE
};

struct _0xAF365801
{
	string                           File;                            // offset:0x000	type:STRING.ATSTRING
	string                           MountPoint;                      // offset:0x010	type:STRING.ATSTRING
};

struct _0xB11DEE8F
{
	array<struct netCatalogGeneralItem>     Items;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct _0xB42A0C08
{
	float                            fadeNear;                        // offset:0x000	type:FLOAT.0
	float                            fadeFar;                         // offset:0x004	type:FLOAT.0
};

struct _0xB63EC1F3
{
	enum DispatchType                DispatchType;                    // offset:0x000	type:ENUM.32BIT
	float                            OnFootOrderDistance;             // offset:0x004	type:FLOAT.0
	float                            MinInVehicleOrderDistance;       // offset:0x008	type:FLOAT.0
	float                            MaxInVehicleOrderDistance;       // offset:0x00C	type:FLOAT.0
};

struct _0xB6BD37A1
{
	array<string>                    Weapons;                         // offset:0x000	type:ARRAY.ATARRAY
	string                           ClipSet;                         // offset:0x010	type:STRING.ATHASHVALUE
};

struct _0xB8AD67A8
{
	string                           templateId;                      // offset:0x000	type:STRING.ATHASHVALUE
	string                           textId;                          // offset:0x004	type:STRING.ATHASHVALUE
	int                              actionScriptEnum;                // offset:0x008	type:INT.0
	array<struct CTemplateData>      data;                            // offset:0x010	type:ARRAY.ATARRAY
};

struct _0xBC0E2D06
{
	string                           Quality;                         // offset:0x000	type:STRING.ATSTRING
	bool                             Alternative;                     // offset:0x010	type:BOOL.0
	string                           BlurType;                        // offset:0x018	type:STRING.ATSTRING
	float                            Strength;                        // offset:0x028	type:FLOAT.0
	float                            RejectRadius;                    // offset:0x02C	type:FLOAT.0
	float                            AcceptRadius;                    // offset:0x030	type:FLOAT.0
	float                            FadeoutDist;                     // offset:0x034	type:FLOAT.0
	float                            NormalScale;                     // offset:0x038	type:FLOAT.0
	float                            WorldSpace;                      // offset:0x03C	type:FLOAT.0
	float                            TargetScale;                     // offset:0x040	type:FLOAT.0
	float                            RadiusScale;                     // offset:0x044	type:FLOAT.0
	float                            BaseWeight;                      // offset:0x048	type:FLOAT.0
};

struct _0xBDBD4990
{
	enum rage__InputType               Input;                           // offset:0x008	type:ENUM.32BIT
	array<enum rage__InputType, 2>     Mappings;                        // offset:0x00C	type:ARRAY.ATFIXEDARRAY
};

struct _0xC1A92DE4
{
	enum _0xFF842F1B                 ZoneType;                        // offset:0x000	type:ENUM.32BIT
	enum _0x6F76F55E                 GameType;                        // offset:0x004	type:ENUM.32BIT
	bool                             IsMutuallyExclusive;             // offset:0x008	type:BOOL.0
	array<string>                    VehicleModels;                   // offset:0x010	type:ARRAY.ATARRAY
	array<string>                    PedModels;                       // offset:0x020	type:ARRAY.ATARRAY
	array<string>                    ObjectModels;                    // offset:0x030	type:ARRAY.ATARRAY
	array<string>                    ClipSets;                        // offset:0x040	type:ARRAY.ATARRAY
};

struct _0xCA529D67
{
	string                           ScriptName;                      // offset:0x000	type:STRING.ATFINALHASHSTRING
	float                            ActivationRange;                 // offset:0x004	type:FLOAT.0
	int                              _0x83BC0C7E;                     // offset:0x008	type:INT.0
};

struct _0xCF1632CA
{
	float                            SPRate;                          // offset:0x000	type:FLOAT.0
	float                            MPRate;                          // offset:0x004	type:FLOAT.0
};

struct _0xD0446454
{
	vec2                             Dim;                             // offset:0x000	type:VECTOR2.0
	int                              BlurPasses;                      // offset:0x008	type:INT.0
};

struct _0xD172BA7B
{
	array<struct netCatalogPackedStatInventoryItem>     Items;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct _0xD20CBE56
{
	string                           name;                            // offset:0x000	type:STRING.POINTER
	array<string, 4>                 labels;                          // offset:0x008	type:ARRAY.MEMBER
	array<uint, 4>                   colours;                         // offset:0x028	type:ARRAY.MEMBER
	vec4                             _0x8BFA28D7;                     // offset:0x040	type:VECTOR4.0
	vec3                             _0x92A35665;                     // offset:0x050	type:VECTOR3.0
	vec3                             _0xA4DD7AD9;                     // offset:0x060	type:VECTOR3.0
	int                              propertyId;                      // offset:0x070	type:INT.0
	int                              type;                            // offset:0x074	type:INT.0
	bool                             _0xBEB1ABDB;                     // offset:0x078	type:BOOL.0
};

struct _0xD84BED2A
{
	string                           name;                            // offset:0x000	type:STRING.ATHASHVALUE
	float                            range;                           // offset:0x004	type:FLOAT.0
	uint                             numJumpsMin;                     // offset:0x008	type:UINT.0
	uint                             numJumpsMax;                     // offset:0x00C	type:UINT.0
	float                            panSpeed;                        // offset:0x010	type:FLOAT.0
	float                            ceilingHeight;                   // offset:0x014	type:FLOAT.0
	float                            minHeightAbove;                  // offset:0x018	type:FLOAT.0
	enum rage__eLodType              ceilingLodLevel;                 // offset:0x01C	type:ENUM.32BIT
	float                            heightBetweenJumps;              // offset:0x020	type:FLOAT.0
	float                            skipPanRange;                    // offset:0x024	type:FLOAT.0
	uint                             maxTimeToStayInStartupModeOnLongRangeDescent; // offset:0x028	type:UINT.0
	uint                             scenarioAnimsTimeout;            // offset:0x02C	type:UINT.0
	float                            radiusOfStreamedScenarioPedCheck; // offset:0x030	type:FLOAT.0
};

struct _0xD9F95E4E
{
	array<struct netCatalogOnlyItem>     Items;                           // offset:0x008	type:ARRAY.ATARRAY
};

struct _0xDA63D205
{
	string                           ptFxName;                        // offset:0x000	type:STRING.ATHASHVALUE
	enum eAnimBoneTag                _0x8D14E938;                     // offset:0x004	type:ENUM.32BIT
	enum eAnimBoneTag                _0x53E176D2;                     // offset:0x008	type:ENUM.32BIT
};

struct _0xDA6A70C3
{
	string                           cTextId;                         // offset:0x000	type:STRING.ATHASHVALUE
	string                           Context;                         // offset:0x004	type:STRING.ATHASHVALUE
	string                           Block;                           // offset:0x008	type:STRING.ATHASHVALUE
	string                           LinkMenuId;                      // offset:0x00C	type:STRING.ATHASHVALUE
	string                           JumpMenuId;                      // offset:0x010	type:STRING.ATHASHVALUE
	string                           TriggerAction;                   // offset:0x014	type:STRING.ATHASHVALUE
	string                           ToggleValue;                     // offset:0x018	type:STRING.ATHASHVALUE
	string                           WarningText;                     // offset:0x01C	type:STRING.ATHASHVALUE
	string                           DependentAction;                 // offset:0x020	type:STRING.ATHASHVALUE
	string                           UniqueId;                        // offset:0x024	type:STRING.ATHASHVALUE
};

struct _0xDA7F546B
{
	array<struct CVehicleModColor>     _0x8839F2A6;                     // offset:0x000	type:ARRAY.ATARRAY
};

struct _0xDACB18BA
{
	bool                             ShouldUseHomingParamsFromInfo;   // offset:0x000	type:BOOL.0
	bool                             ShouldIgnoreOwnerCombatBehaviour; // offset:0x001	type:BOOL.0
	float                            TimeBeforeStartingHoming;        // offset:0x004	type:FLOAT.0
	float                            TimeBeforeHomingAngleBreak;      // offset:0x008	type:FLOAT.0
	float                            TurnRateModifier;                // offset:0x00C	type:FLOAT.0
	float                            PitchYawRollClamp;               // offset:0x010	type:FLOAT.0
	float                            DefaultHomingRocketBreakLockAngle; // offset:0x014	type:FLOAT.0
	float                            DefaultHomingRocketBreakLockAngleClose; // offset:0x018	type:FLOAT.0
	float                            DefaultHomingRocketBreakLockCloseDistance; // offset:0x01C	type:FLOAT.0
};

struct _0xE2FEBF2F
{
	string                           Action;                          // offset:0x008	type:STRING.MEMBER
	float                            Scale;                           // offset:0x024	type:FLOAT.0
	array<enum rage__InputType>      XInputs;                         // offset:0x028	type:ARRAY.ATARRAY
	array<enum rage__InputType>      XLeftInputs;                     // offset:0x038	type:ARRAY.ATARRAY
	array<enum rage__InputType>      XRightInputs;                    // offset:0x048	type:ARRAY.ATARRAY
	array<enum rage__InputType>      YInputs;                         // offset:0x058	type:ARRAY.ATARRAY
	array<enum rage__InputType>      YUpInputs;                       // offset:0x068	type:ARRAY.ATARRAY
	array<enum rage__InputType>      YDownInputs;                     // offset:0x078	type:ARRAY.ATARRAY
};

struct _0xE37EB5FF
{
	vec3                             LimitMin;                        // offset:0x020	type:VECTOR3.0
	vec3                             LimitMax;                        // offset:0x030	type:VECTOR3.0
};

struct _0xE3C9C5BB
{
	string                           ModelName;                       // offset:0x000	type:STRING.CONST_STRING
	string                           TuningName;                      // offset:0x008	type:STRING.CONST_STRING
};

struct _0xE51C662E : CTuning
{
	float                            _0x67CD16C7;                     // offset:0x010	type:FLOAT.0
	float                            _0xB10CD9A2;                     // offset:0x014	type:FLOAT.0
	float                            _0x36E88E51;                     // offset:0x018	type:FLOAT.0
	float                            maxReverseSpeed;                 // offset:0x01C	type:FLOAT.0
	float                            _0xF10EDD08;                     // offset:0x020	type:FLOAT.0
	float                            _0xE06387F5;                     // offset:0x024	type:FLOAT.0
	float                            maxPitchAngle;                   // offset:0x028	type:FLOAT.0
	float                            slowdownDist;                    // offset:0x02C	type:FLOAT.0
	float                            _0xE78FEC69;                     // offset:0x030	type:FLOAT.0
};

struct _0xE5D047AF
{
	array<struct CFlareFX>           arrFlareFX;                      // offset:0x000	type:ARRAY.ATARRAY
};

struct _0xEF79CBDB
{
	string                           name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct _0x58E12301>        switches;                        // offset:0x008	type:ARRAY.ATARRAY
};

struct _0xF2A6D58E
{
	float                            Min;                             // offset:0x000	type:FLOAT.0
	float                            Max;                             // offset:0x004	type:FLOAT.0
};

struct _0xF72CBA11
{
	string                           Name;                            // offset:0x000	type:STRING.ATSTRING
	enum eSystemType                 SystemType;                      // offset:0x010	type:ENUM.32BIT
	string                           diffuseName;                     // offset:0x018	type:STRING.ATSTRING
	string                           distortionTexture;               // offset:0x028	type:STRING.ATSTRING
	string                           diffuseSplashName;               // offset:0x038	type:STRING.ATSTRING
	enum eDriveType                  driveType;                       // offset:0x048	type:ENUM.32BIT
	float                            windInfluence;                   // offset:0x04C	type:FLOAT.0
	float                            gravity;                         // offset:0x050	type:FLOAT.0
	string                           emitterSettingsName;             // offset:0x058	type:STRING.ATSTRING
	string                           renderSettingsName;              // offset:0x068	type:STRING.ATSTRING
};

struct _0xF9C4560F
{
	float                            MaxSwing;                        // offset:0x000	type:FLOAT.0
	float                            MinTwist;                        // offset:0x004	type:FLOAT.0
	float                            MaxTwist;                        // offset:0x008	type:FLOAT.0
};

struct _0xFCB109FF
{
	string                           GroupName;                       // offset:0x000	type:STRING.ATHASHVALUE
	uint                             percentage;                      // offset:0x004	type:UINT.0
};

struct _0xFD1E5907
{
	array<struct _0xA4724F7C>        Buttons;                         // offset:0x008	type:ARRAY.ATARRAY
	array<struct _0xA4724F7C>        Triggers;                        // offset:0x018	type:ARRAY.ATARRAY
	array<struct _0xE2FEBF2F>        Axis;                            // offset:0x028	type:ARRAY.ATARRAY
	string                           LoadSet;                         // offset:0x038	type:STRING.MEMBER
};

struct _0xFFE8E531
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	vec3                             Position;                        // offset:0x010	type:VECTOR3.0
	float                            Length;                          // offset:0x020	type:FLOAT.0
	float                            Width;                           // offset:0x024	type:FLOAT.0
	float                            Height;                          // offset:0x028	type:FLOAT.0
	array<string>                    ActiveBoundExclusions;           // offset:0x030	type:ARRAY.ATARRAY
};

struct audFootstepEventTuning
{
	array<struct _0x72CD57F5, 5>     SinglePlayer;                    // offset:0x000	type:ARRAY.ATRANGEARRAY
	array<struct _0x72CD57F5, 5>     MultiPlayer;                     // offset:0x028	type:ARRAY.ATRANGEARRAY
};

struct camAimCameraMetadata : camBaseCameraMetadata
{
	string                           ControlHelperRef;                // offset:0x020	type:STRING.ATHASHVALUE
	float                            BaseFov;                         // offset:0x024	type:FLOAT.0
	float                            BaseNearClip;                    // offset:0x028	type:FLOAT.0
	uint                             MinUpdatesBeforeApplyingMotionBlur; // offset:0x02C	type:UINT.0
	float                            BaseMotionBlurStrength;          // offset:0x030	type:FLOAT.0
	float                            ZoomMotionBlurMinFovDelta;       // offset:0x034	type:FLOAT.0
	float                            ZoomMotionBlurMaxFovDelta;       // offset:0x038	type:FLOAT.0
	float                            ZoomMotionBlurMaxStrengthForFov; // offset:0x03C	type:FLOAT.0
	vec3                             AttachRelativeOffset;            // offset:0x040	type:VECTOR3.0
	bool                             ShouldApplyAttachOffsetRelativeToCamera; // offset:0x050	type:BOOL.0
	float                            MinPitch;                        // offset:0x054	type:FLOAT.0
	float                            MaxPitch;                        // offset:0x058	type:FLOAT.0
	float                            MinRelativeHeading;              // offset:0x05C	type:FLOAT.0
	float                            MaxRelativeHeading;              // offset:0x060	type:FLOAT.0
};

struct camAnimSceneDirectorMetadata : camBaseDirectorMetadata
{
	string                           _0x8F6F489A;                     // offset:0x018	type:STRING.ATHASHVALUE
};

struct camAnimatedCameraMetadata : camBaseCameraMetadata
{
};

struct camAnimatedShakeMetadata : camBaseShakeMetadata
{
};

struct camBaseCameraMetadata : camBaseObjectMetadata
{
	string                           ShakeRef;                        // offset:0x010	type:STRING.ATHASHVALUE
	string                           CollisionRef;                    // offset:0x014	type:STRING.ATHASHVALUE
	string                           DofSettings;                     // offset:0x018	type:STRING.ATHASHVALUE
	bool                             CanBePaused;                     // offset:0x01C	type:BOOL.0
};

struct camBaseCinematicTrackingCameraMetadata : camBaseCameraMetadata
{
};

struct camBaseDirectorMetadata : camBaseObjectMetadata
{
	bool                             CanBePaused;                     // offset:0x010	type:BOOL.0
};

struct camBaseObjectMetadata
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
};

struct camBaseShakeMetadata : camBaseObjectMetadata
{
	string                           OverallEnvelopeRef;              // offset:0x010	type:STRING.ATHASHVALUE
	bool                             _0x5520AAE0;                     // offset:0x014	type:BOOL.0
	bool                             _0xCF6F3D4C;                     // offset:0x015	type:BOOL.0
};

struct camBaseSplineCameraMetadata : camScriptedCameraMetadata
{
};

struct camBaseSwitchHelperMetadata : camBaseObjectMetadata
{
	uint                             Duration;                        // offset:0x010	type:UINT.0
	int                              _0x99B04AA1;                     // offset:0x014	type:INT.0
	enum eCurveType                  _0x5FE740E9;                     // offset:0x018	type:ENUM.32BIT
	float                            _0x9B7FA0D1;                     // offset:0x01C	type:FLOAT.0
	bool                             _0x8D26A649;                     // offset:0x020	type:BOOL.0
	bool                             _0xE8B10108;                     // offset:0x021	type:BOOL.0
	bool                             _0x5F13E758;                     // offset:0x022	type:BOOL.0
	bool                             _0x58C73054;                     // offset:0x023	type:BOOL.0
};

struct camCatchUpHelperMetadata : camBaseObjectMetadata
{
	float                            _0x1CBFEF98;                     // offset:0x010	type:FLOAT.0
	float                            _0x3E671AD9;                     // offset:0x014	type:FLOAT.0
	int                              BlendDuration;                   // offset:0x018	type:INT.0
	bool                             _0xE05F3A03;                     // offset:0x01C	type:BOOL.0
	enum eCurveType                  _0xA912A85A;                     // offset:0x020	type:ENUM.32BIT
};

struct camCinematicAnimatedCameraMetadata : camAnimatedCameraMetadata
{
};

struct camCinematicBustedContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicBustedShotMetadata : camCinematicShotMetadata
{
	float                            _0xBD98FE81;                     // offset:0x040	type:FLOAT.0
};

struct camCinematicCameraManCameraMetadata : camBaseCameraMetadata
{
	float                                              _0xB0981EE1;                     // offset:0x020	type:FLOAT.0
	float                                              _0xB32465C1;                     // offset:0x024	type:FLOAT.0
	bool                                               _0x06D41225;                     // offset:0x028	type:BOOL.0
	float                                              _0x5B7F0CA3;                     // offset:0x02C	type:FLOAT.0
	float                                              CollisionRadius;                 // offset:0x030	type:FLOAT.0
	float                                              RadiusScalingForClippingTest;    // offset:0x034	type:FLOAT.0
	float                                              _0xB437AF70;                     // offset:0x038	type:FLOAT.0
	float                                              _0x326E3373;                     // offset:0x03C	type:FLOAT.0
	uint                                               _0xD2F315D2;                     // offset:0x040	type:UINT.0
	uint                                               _0xDAAE024B;                     // offset:0x044	type:UINT.0
	float                                              _0x65514E96;                     // offset:0x048	type:FLOAT.0
	float                                              _0x4B67141E;                     // offset:0x04C	type:FLOAT.0
	float                                              _0x4535531C;                     // offset:0x050	type:FLOAT.0
	uint                                               _0xBE2C8EAD;                     // offset:0x054	type:UINT.0
	uint                                               _0xABED3219;                     // offset:0x058	type:UINT.0
	bool                                               _0x0427E026;                     // offset:0x05C	type:BOOL.0
	float                                              ScanRadius;                      // offset:0x060	type:FLOAT.0
	float                                              ScanDistance;                    // offset:0x064	type:FLOAT.0
	float                                              _0x0BE6AA37;                     // offset:0x068	type:FLOAT.0
	string                                             InVehicleLookAtDampingRef;       // offset:0x06C	type:STRING.ATHASHVALUE
	string                                             OnFootLookAtDampingRef;          // offset:0x070	type:STRING.ATHASHVALUE
	string                                             _0xFA62FF34;                     // offset:0x074	type:STRING.ATHASHVALUE
	string                                             _0xC52C78D3;                     // offset:0x078	type:STRING.ATHASHVALUE
	struct camCinematicCameraOperatorShakeSettings     _0x4C46CD58;                     // offset:0x080	type:STRUCT.STRUCTURE
	float                                              MaxDistanceForWaterClippingTest; // offset:0x100	type:FLOAT.0
	float                                              MaxDistanceForRiverWaterClippingTest; // offset:0x104	type:FLOAT.0
	float                                              MinHeightAboveWater;             // offset:0x108	type:FLOAT.0
	float                                              _0x3DBE7085;                     // offset:0x10C	type:FLOAT.0
	bool                                               _0xD1B13BE3;                     // offset:0x110	type:BOOL.0
	float                                              _0x21DC6AD2;                     // offset:0x114	type:FLOAT.0
	float                                              _0x2E90DB58;                     // offset:0x118	type:FLOAT.0
	bool                                               _0x9AC63598;                     // offset:0x11C	type:BOOL.0
	float                                              _0x578932DF;                     // offset:0x120	type:FLOAT.0
	float                                              _0x2B61120B;                     // offset:0x124	type:FLOAT.0
	float                                              _0xBB34608F;                     // offset:0x128	type:FLOAT.0
	bool                                               _0xBE83DC3C;                     // offset:0x12C	type:BOOL.0
	float                                              _0xB68174D7;                     // offset:0x130	type:FLOAT.0
	float                                              _0x714548E6;                     // offset:0x134	type:FLOAT.0
	float                                              _0xF386E623;                     // offset:0x138	type:FLOAT.0
	float                                              _0xC1BD32BB;                     // offset:0x13C	type:FLOAT.0
	float                                              stepsSprint;                     // offset:0x140	type:FLOAT.0
	float                                              _0x932BBB14;                     // offset:0x144	type:FLOAT.0
};

struct camCinematicCameraManShotMetadata : camCinematicShotMetadata
{
	bool                             _0xFA35B1D3;                     // offset:0x040	type:BOOL.0
};

struct camCinematicCameraOperatorShakeSettings
{
	struct camCinematicCameraOperatorShakeUncertaintySettings     UncertaintySettings;             // offset:0x008	type:STRUCT.STRUCTURE
	struct camCinematicCameraOperatorShakeTurbulenceSettings      TurbulenceSettings;              // offset:0x058	type:STRUCT.STRUCTURE
};

struct camCinematicCameraOperatorShakeTurbulenceSettings
{
	string                           ShakeRef;                        // offset:0x008	type:STRING.ATHASHVALUE
	vec2                             _0x67CACBAC;                     // offset:0x00C	type:VECTOR2.0
	vec2                             DistanceRange;                   // offset:0x014	type:VECTOR2.0
	float                            _0xAD00C7E8;                     // offset:0x01C	type:FLOAT.0
	float                            _0xB316685A;                     // offset:0x020	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x024	type:FLOAT.0
};

struct camCinematicCameraOperatorShakeUncertaintySettings
{
	string                           XShakeRef;                       // offset:0x008	type:STRING.ATHASHVALUE
	string                           ZShakeRef;                       // offset:0x00C	type:STRING.ATHASHVALUE
	vec2                             _0xF6A81E31;                     // offset:0x010	type:VECTOR2.0
	vec2                             _0xA683DAEA;                     // offset:0x018	type:VECTOR2.0
	vec2                             _0x9BAB248D;                     // offset:0x020	type:VECTOR2.0
	vec2                             _0xE57B91A3;                     // offset:0x028	type:VECTOR2.0
	float                            _0xAD00C7E8;                     // offset:0x030	type:FLOAT.0
	float                            _0xB316685A;                     // offset:0x034	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x038	type:FLOAT.0
	float                            ScalingFactor;                   // offset:0x03C	type:FLOAT.0
	float                            _0x87F057D5;                     // offset:0x040	type:FLOAT.0
	float                            _0x37A2E536;                     // offset:0x044	type:FLOAT.0
	float                            _0xC1F0A0C8;                     // offset:0x048	type:FLOAT.0
};

struct camCinematicContextMetadata : camBaseObjectMetadata
{
	array<struct camCinematicShots>                 Shots;                           // offset:0x010	type:ARRAY.ATARRAY
	array<struct camPreferredShotSelectionType>     _0x992294B6;                     // offset:0x020	type:ARRAY.ATARRAY
	bool                                            _0x9143A55A;                     // offset:0x030	type:BOOL.0
	bool                                            _0xF53C6899;                     // offset:0x031	type:BOOL.0
	bool                                            _0x9122497F;                     // offset:0x032	type:BOOL.0
	bool                                            _0xA92F80DB;                     // offset:0x033	type:BOOL.0
	bool                                            _0x9D54DE10;                     // offset:0x034	type:BOOL.0
	bool                                            _0xDC7DAB6D;                     // offset:0x035	type:BOOL.0
	float                                           _0xC333573D;                     // offset:0x038	type:FLOAT.0
	bool                                            _0xEC6A6AF7;                     // offset:0x03C	type:BOOL.0
	uint                                            _0xAD79549E;                     // offset:0x040	type:UINT.0
};

struct camCinematicCraningCameraManShotMetadata : camCinematicShotMetadata
{
	bool                             _0xFA35B1D3;                     // offset:0x040	type:BOOL.0
	bool                             _0x37B2C980;                     // offset:0x041	type:BOOL.0
	float                            _0x84C47575;                     // offset:0x044	type:FLOAT.0
	bool                             _0x384054C3;                     // offset:0x048	type:BOOL.0
	uint                             _0x5FC1DC07;                     // offset:0x04C	type:UINT.0
	float                            _0xD194AD49;                     // offset:0x050	type:FLOAT.0
	vec2                             _0xC1AA7236;                     // offset:0x054	type:VECTOR2.0
	float                            _0xB210F27B;                     // offset:0x05C	type:FLOAT.0
	float                            ScanRadius;                      // offset:0x060	type:FLOAT.0
};

struct camCinematicDirectorMetadata : camBaseDirectorMetadata
{
	uint                                          _0x09CC5CE0;                     // offset:0x018	type:UINT.0
	float                                         _0x5D698FC4;                     // offset:0x01C	type:FLOAT.0
	float                                         _0xF010EC98;                     // offset:0x020	type:FLOAT.0
	float                                         _0x2B8D98B8;                     // offset:0x024	type:FLOAT.0
	string                                        _0xFA3FA5D9;                     // offset:0x028	type:STRING.ATHASHVALUE
	float                                         _0xD8FD5AF5;                     // offset:0x02C	type:FLOAT.0
	float                                         _0xB1EF12EF;                     // offset:0x030	type:FLOAT.0
	float                                         _0x0BF4F3CF;                     // offset:0x034	type:FLOAT.0
	uint                                          _0x9FED07C5;                     // offset:0x038	type:UINT.0
	string                                        _0x63F80EC1;                     // offset:0x03C	type:STRING.ATHASHVALUE
	string                                        _0x7D4279FF;                     // offset:0x040	type:STRING.ATHASHVALUE
	float                                         _0x6F49F39C;                     // offset:0x044	type:FLOAT.0
	float                                         _0x1963BF62;                     // offset:0x048	type:FLOAT.0
	float                                         _0x7BF3FAE1;                     // offset:0x04C	type:FLOAT.0
	array<struct camCinematicContextMetadata>     CinematicContexts;               // offset:0x050	type:ARRAY.ATARRAY
	uint                                          _0x01B1F82D;                     // offset:0x060	type:UINT.0
};

struct camCinematicDirectorMetadataAssistedAimingSettings
{
	float                            _0x2B8D98B8;                     // offset:0x008	type:FLOAT.0
	float                            _0x1FDECF98;                     // offset:0x00C	type:FLOAT.0
	float                            _0x9CAAE39C;                     // offset:0x010	type:FLOAT.0
	string                           _0x5EEADA52;                     // offset:0x014	type:STRING.ATHASHVALUE
	uint                             _0x2779F7EF;                     // offset:0x018	type:UINT.0
	string                           _0x705A8595;                     // offset:0x01C	type:STRING.ATHASHVALUE
	uint                             _0xB4B7E96C;                     // offset:0x020	type:UINT.0
};

struct camCinematicFallFromHeliContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicFallFromHeliShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicFirstPersonIdleCameraMetadata : camBaseCameraMetadata
{
	float                            tacticalXml;                     // offset:0x020	type:FLOAT.0
	float                            _0x7FEA350A;                     // offset:0x024	type:FLOAT.0
	float                            _0x1DB656EE;                     // offset:0x028	type:FLOAT.0
	uint                             _0x2646E0D5;                     // offset:0x02C	type:UINT.0
	uint                             _0xE481796C;                     // offset:0x030	type:UINT.0
	uint                             _0x05765BFC;                     // offset:0x034	type:UINT.0
	uint                             _0xCC138697;                     // offset:0x038	type:UINT.0
	uint                             _0x51619D94;                     // offset:0x03C	type:UINT.0
	uint                             _0x6B4746FF;                     // offset:0x040	type:UINT.0
	uint                             _0x921DC79B;                     // offset:0x044	type:UINT.0
	uint                             _0x8EFB3DF4;                     // offset:0x048	type:UINT.0
	uint                             _0xEF39CF0E;                     // offset:0x04C	type:UINT.0
	uint                             _0xF206FC5C;                     // offset:0x050	type:UINT.0
	uint                             _0x6F12B81F;                     // offset:0x054	type:UINT.0
	uint                             _0xAAD02812;                     // offset:0x058	type:UINT.0
	uint                             _0xAEF8257C;                     // offset:0x05C	type:UINT.0
	float                            _0xC2BDBD09;                     // offset:0x060	type:FLOAT.0
	float                            _0x0182B599;                     // offset:0x064	type:FLOAT.0
	float                            _0x9235EF1C;                     // offset:0x068	type:FLOAT.0
	float                            _0x13DF26C0;                     // offset:0x06C	type:FLOAT.0
	float                            _0xCEFBA55E;                     // offset:0x070	type:FLOAT.0
	float                            _0xD20ACB3E;                     // offset:0x074	type:FLOAT.0
	float                            _0x019E9CF8;                     // offset:0x078	type:FLOAT.0
	float                            _0x9E5CDBC9;                     // offset:0x07C	type:FLOAT.0
	float                            _0xE3C5C523;                     // offset:0x080	type:FLOAT.0
	float                            _0xBB04F10D;                     // offset:0x084	type:FLOAT.0
	float                            _0x8023EA8D;                     // offset:0x088	type:FLOAT.0
	float                            _0x509E44C5;                     // offset:0x08C	type:FLOAT.0
	float                            _0x21570DDB;                     // offset:0x090	type:FLOAT.0
	float                            _0x1445769D;                     // offset:0x094	type:FLOAT.0
	float                            _0xEE3DB235;                     // offset:0x098	type:FLOAT.0
	float                            _0x4F49C9A5;                     // offset:0x09C	type:FLOAT.0
	float                            _0xD81159CB;                     // offset:0x0A0	type:FLOAT.0
	float                            _0x309F2454;                     // offset:0x0A4	type:FLOAT.0
	float                            _0x9E21D815;                     // offset:0x0A8	type:FLOAT.0
	float                            _0xDFC9DBF9;                     // offset:0x0AC	type:FLOAT.0
	uint                             _0x0CE1333F;                     // offset:0x0B0	type:UINT.0
	uint                             _0x3058E5FC;                     // offset:0x0B4	type:UINT.0
	float                            _0x5D12E8F3;                     // offset:0x0B8	type:FLOAT.0
	float                            _0x8E2010E7;                     // offset:0x0BC	type:FLOAT.0
	float                            _0x6B4C83D2;                     // offset:0x0C0	type:FLOAT.0
};

struct camCinematicGroupCameraMetadata : camBaseCinematicTrackingCameraMetadata
{
	vec2                             FovLimits;                       // offset:0x020	type:VECTOR2.0
	float                            _0xDBBFEA90;                     // offset:0x028	type:FLOAT.0
	vec2                             _0xF764C689;                     // offset:0x02C	type:VECTOR2.0
	float                            RadiusScalingForClippingTest;    // offset:0x034	type:FLOAT.0
	float                            CollisionRadius;                 // offset:0x038	type:FLOAT.0
	uint                             MaxTimeToSpendOccluded;          // offset:0x03C	type:UINT.0
	float                            _0xCCB6BFE8;                     // offset:0x040	type:FLOAT.0
	float                            _0x8D7B1BCD;                     // offset:0x044	type:FLOAT.0
	float                            _0x17DB5878;                     // offset:0x048	type:FLOAT.0
	float                            _0x3DBE7085;                     // offset:0x04C	type:FLOAT.0
	float                            _0x6EAA6388;                     // offset:0x050	type:FLOAT.0
	float                            MaxDistanceForWaterClippingTest; // offset:0x054	type:FLOAT.0
	float                            MaxDistanceForRiverWaterClippingTest; // offset:0x058	type:FLOAT.0
	float                            MinHeightAboveWater;             // offset:0x05C	type:FLOAT.0
};

struct camCinematicHeliChaseCameraMetadata : camBaseCameraMetadata
{
	uint                                               MaxDuration;                     // offset:0x020	type:UINT.0
	uint                                               _0xE284AE4B;                     // offset:0x024	type:UINT.0
	uint                                               _0x7780C4C1;                     // offset:0x028	type:UINT.0
	uint                                               _0x185D24F2;                     // offset:0x02C	type:UINT.0
	float                                              _0x6B966675;                     // offset:0x030	type:FLOAT.0
	float                                              _0x73025195;                     // offset:0x034	type:FLOAT.0
	float                                              _0x42966678;                     // offset:0x038	type:FLOAT.0
	float                                              _0xD73B62A1;                     // offset:0x03C	type:FLOAT.0
	float                                              _0xABFDBED4;                     // offset:0x040	type:FLOAT.0
	float                                              _0x4545D958;                     // offset:0x044	type:FLOAT.0
	float                                              _0x7EE31765;                     // offset:0x048	type:FLOAT.0
	float                                              HeightAboveTarget;               // offset:0x04C	type:FLOAT.0
	float                                              _0x79A2D8B5;                     // offset:0x050	type:FLOAT.0
	float                                              _0x504016C6;                     // offset:0x054	type:FLOAT.0
	float                                              _0x1D88C585;                     // offset:0x058	type:FLOAT.0
	float                                              _0xDE0EEF9D;                     // offset:0x05C	type:FLOAT.0
	float                                              _0x319C5ECF;                     // offset:0x060	type:FLOAT.0
	float                                              _0x38D11CD3;                     // offset:0x064	type:FLOAT.0
	float                                              _0x0BE6AA37;                     // offset:0x068	type:FLOAT.0
	float                                              _0x4CCDE372;                     // offset:0x06C	type:FLOAT.0
	float                                              _0xFB90CAA2;                     // offset:0x070	type:FLOAT.0
	float                                              _0x24907ACB;                     // offset:0x074	type:FLOAT.0
	float                                              _0x06536CB9;                     // offset:0x078	type:FLOAT.0
	uint                                               _0xBE2C8EAD;                     // offset:0x07C	type:UINT.0
	uint                                               _0xABED3219;                     // offset:0x080	type:UINT.0
	float                                              _0x4B67141E;                     // offset:0x084	type:FLOAT.0
	float                                              _0x65514E96;                     // offset:0x088	type:FLOAT.0
	float                                              _0x4535531C;                     // offset:0x08C	type:FLOAT.0
	float                                              _0x2E90DB58;                     // offset:0x090	type:FLOAT.0
	float                                              _0x21DC6AD2;                     // offset:0x094	type:FLOAT.0
	float                                              _0x887E0F4F;                     // offset:0x098	type:FLOAT.0
	float                                              _0xDA117552;                     // offset:0x09C	type:FLOAT.0
	float                                              _0xCFA9975B;                     // offset:0x0A0	type:FLOAT.0
	float                                              NearClip;                        // offset:0x0A4	type:FLOAT.0
	bool                                               _0x8432D327;                     // offset:0x0A8	type:BOOL.0
	bool                                               _0x06D41225;                     // offset:0x0A9	type:BOOL.0
	bool                                               _0x8261C567;                     // offset:0x0AA	type:BOOL.0
	bool                                               _0x443F3E73;                     // offset:0x0AB	type:BOOL.0
	float                                              _0xF97E48E1;                     // offset:0x0AC	type:FLOAT.0
	bool                                               _0x12D167D1;                     // offset:0x0B0	type:BOOL.0
	vec2                                               PitchLimits;                     // offset:0x0B4	type:VECTOR2.0
	string                                             InVehicleLookAtDampingRef;       // offset:0x0BC	type:STRING.ATHASHVALUE
	string                                             OnFootLookAtDampingRef;          // offset:0x0C0	type:STRING.ATHASHVALUE
	string                                             _0xFA62FF34;                     // offset:0x0C4	type:STRING.ATHASHVALUE
	string                                             _0xC52C78D3;                     // offset:0x0C8	type:STRING.ATHASHVALUE
	struct camCinematicCameraOperatorShakeSettings     _0x4C46CD58;                     // offset:0x0D0	type:STRUCT.STRUCTURE
	float                                              _0x3A9F25BA;                     // offset:0x150	type:FLOAT.0
	float                                              _0xCDC05E66;                     // offset:0x154	type:FLOAT.0
	float                                              _0x8C39F4BD;                     // offset:0x158	type:FLOAT.0
	float                                              stepsSprint;                     // offset:0x15C	type:FLOAT.0
	float                                              _0x932BBB14;                     // offset:0x160	type:FLOAT.0
	float                                              _0xF386E623;                     // offset:0x164	type:FLOAT.0
	float                                              _0xC1BD32BB;                     // offset:0x168	type:FLOAT.0
	float                                              _0xD507F72D;                     // offset:0x16C	type:FLOAT.0
	float                                              _0x2D5EC2A6;                     // offset:0x170	type:FLOAT.0
	float                                              _0x561C7A1B;                     // offset:0x174	type:FLOAT.0
	float                                              _0x0D0834D6;                     // offset:0x178	type:FLOAT.0
	float                                              _0xB68174D7;                     // offset:0x17C	type:FLOAT.0
	float                                              _0x714548E6;                     // offset:0x180	type:FLOAT.0
	float                                              _0x3DBE7085;                     // offset:0x184	type:FLOAT.0
};

struct camCinematicHeliTrackingShotMetadata : camCinematicShotMetadata
{
	bool                             _0xFA35B1D3;                     // offset:0x040	type:BOOL.0
};

struct camCinematicIdleCameraMetadata : camBaseCameraMetadata
{
	uint                             _0x4DD28014;                     // offset:0x020	type:UINT.0
	float                            _0x26F6EA65;                     // offset:0x024	type:FLOAT.0
	float                            _0x34E3A918;                     // offset:0x028	type:FLOAT.0
	struct camCinematicIdleShots     WideShot;                        // offset:0x030	type:STRUCT.STRUCTURE
	struct camCinematicIdleShots     MediumShot;                      // offset:0x048	type:STRUCT.STRUCTURE
	struct camCinematicIdleShots     _0x78D06E53;                     // offset:0x060	type:STRUCT.STRUCTURE
	vec2                             _0x91A016DC;                     // offset:0x078	type:VECTOR2.0
	vec2                             _0xDE3297C4;                     // offset:0x080	type:VECTOR2.0
	float                            CollisionRadius;                 // offset:0x088	type:FLOAT.0
	float                            _0xED6AF816;                     // offset:0x08C	type:FLOAT.0
	float                            RadiusScalingForOcclusionTest;   // offset:0x090	type:FLOAT.0
	vec2                             _0x2D73DB5E;                     // offset:0x094	type:VECTOR2.0
	float                            _0x14C01F86;                     // offset:0x09C	type:FLOAT.0
	float                            MaxTimeToSpendOccluded;          // offset:0x0A0	type:FLOAT.0
};

struct camCinematicIdleShots
{
	vec2                             PitchLimits;                     // offset:0x008	type:VECTOR2.0
	vec2                             DistanceLimits;                  // offset:0x010	type:VECTOR2.0
};

struct camCinematicInTrainAtStationContextMetadata : camCinematicInTrainContextMetadata
{
	uint                             _0x841639AF;                     // offset:0x048	type:UINT.0
	uint                             _0xB9EE6580;                     // offset:0x04C	type:UINT.0
};

struct camCinematicInTrainContextMetadata : camCinematicInVehicleContextMetadata
{
};

struct camCinematicInTrainShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicInVehicleContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicInVehicleConvertibleRoofContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicInVehicleCrashContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicInVehicleCrashShotMetadata : camCinematicShotMetadata
{
	bool                             _0xFA35B1D3;                     // offset:0x040	type:BOOL.0
	float                            MinRoll;                         // offset:0x044	type:FLOAT.0
	uint                             _0xDAB9EC8A;                     // offset:0x048	type:UINT.0
	uint                             _0xB8CC1B6A;                     // offset:0x04C	type:UINT.0
	float                            MinVelocity;                     // offset:0x050	type:FLOAT.0
	float                            _0xDE625B4F;                     // offset:0x054	type:FLOAT.0
	uint                             _0xF762539E;                     // offset:0x058	type:UINT.0
};

struct camCinematicInVehicleFirstPersonContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicInVehicleMultiplayerPassengerContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicInVehicleOverriddenFirstPersonContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicInVehicleWantedContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicMeleeShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicMissileKillContextMetadata : camCinematicContextMetadata
{
	float                            _0xC6F772DD;                     // offset:0x048	type:FLOAT.0
};

struct camCinematicMissileKillShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicMountedCameraMetadata : camBaseCameraMetadata
{
	string                                                                     ControlHelperRef;                // offset:0x020	type:STRING.ATHASHVALUE
	string                                                                     MobilePhoneCameraControlHelperRef; // offset:0x024	type:STRING.ATHASHVALUE
	string                                                                     IdleShakeRef;                    // offset:0x028	type:STRING.ATHASHVALUE
	string                                                                     RelativeAttachSpringConstantEnvelopeRef; // offset:0x02C	type:STRING.ATHASHVALUE
	string                                                                     RagdollBlendEnvelopeRef;         // offset:0x030	type:STRING.ATHASHVALUE
	string                                                                     _0xF2ABF154;                     // offset:0x034	type:STRING.ATHASHVALUE
	string                                                                     _0x39FBFBA9;                     // offset:0x038	type:STRING.ATHASHVALUE
	string                                                                     _0x325AA388;                     // offset:0x03C	type:STRING.ATHASHVALUE
	string                                                                     _0x26A97CEA;                     // offset:0x040	type:STRING.ATHASHVALUE
	string                                                                     _0x2B11183C;                     // offset:0x044	type:STRING.ATHASHVALUE
	string                                                                     _0xCAB22BBE;                     // offset:0x048	type:STRING.ATHASHVALUE
	string                                                                     _0x34C371A0;                     // offset:0x04C	type:STRING.ATHASHVALUE
	string                                                                     SpringMountRef;                  // offset:0x050	type:STRING.ATHASHVALUE
	float                                                                      BaseFov;                         // offset:0x054	type:FLOAT.0
	float                                                                      BaseNearClip;                    // offset:0x058	type:FLOAT.0
	float                                                                      TripleHeadNearClip;              // offset:0x05C	type:FLOAT.0
	vec3                                                                       RelativeAttachPosition;          // offset:0x060	type:VECTOR3.0
	vec3                                                                       _0x6AD7E324;                     // offset:0x070	type:VECTOR3.0
	vec3                                                                       BoneRelativeAttachOffset;        // offset:0x080	type:VECTOR3.0
	vec3                                                                       _0xBC857185;                     // offset:0x090	type:VECTOR3.0
	vec3                                                                       _0xB1AFCEF3;                     // offset:0x0A0	type:VECTOR3.0
	vec3                                                                       _0x1BB26B72;                     // offset:0x0B0	type:VECTOR3.0
	vec3                                                                       _0x8934132A;                     // offset:0x0C0	type:VECTOR3.0
	vec3                                                                       _0x568E59D2;                     // offset:0x0D0	type:VECTOR3.0
	vec3                                                                       _0xFA22E782;                     // offset:0x0E0	type:VECTOR3.0
	vec3                                                                       _0x3BB22C47;                     // offset:0x0F0	type:VECTOR3.0
	vec3                                                                       _0x6F09EC3C;                     // offset:0x100	type:VECTOR3.0
	vec2                                                                       RelativeAttachSpringConstantLimits; // offset:0x110	type:VECTOR2.0
	vec2                                                                       RelativeAttachSpringConstantLimitsForPassengers; // offset:0x118	type:VECTOR2.0
	vec2                                                                       _0xC1A46779;                     // offset:0x120	type:VECTOR2.0
	vec2                                                                       _0x0473E496;                     // offset:0x128	type:VECTOR2.0
	float                                                                      _0xF3AB024A;                     // offset:0x130	type:FLOAT.0
	float                                                                      _0xA5D75D3C;                     // offset:0x134	type:FLOAT.0
	float                                                                      _0x76E2A865;                     // offset:0x138	type:FLOAT.0
	float                                                                      _0x16DE80C4;                     // offset:0x13C	type:FLOAT.0
	bool                                                                       _0xAEB95DF1;                     // offset:0x140	type:BOOL.0
	float                                                                      _0x726C7003;                     // offset:0x144	type:FLOAT.0
	float                                                                      _0x3861D0E2;                     // offset:0x148	type:FLOAT.0
	float                                                                      DefaultRelativePitch;            // offset:0x14C	type:FLOAT.0
	float                                                                      DefaultReversePitch;             // offset:0x150	type:FLOAT.0
	float                                                                      _0x2C46FE76;                     // offset:0x154	type:FLOAT.0
	vec2                                                                       _0xA01DAE11;                     // offset:0x158	type:VECTOR2.0
	float                                                                      _0x57DAC6FF;                     // offset:0x160	type:FLOAT.0
	bool                                                                       _0x29F6918E;                     // offset:0x164	type:BOOL.0
	bool                                                                       _0x7F491C93;                     // offset:0x165	type:BOOL.0
	bool                                                                       _0xF99DC7FB;                     // offset:0x166	type:BOOL.0
	struct camCinematicMountedCameraMetadataRelativePitchScalingToThrottle     _0x906EA67C;                     // offset:0x168	type:STRUCT.STRUCTURE
	struct camSpeedRelativeShakeSettingsMetadata                               HighSpeedShakeSettings;          // offset:0x178	type:STRUCT.STRUCTURE
	struct camSpeedRelativeShakeSettingsMetadata                               _0x63AE05ED;                     // offset:0x198	type:STRUCT.STRUCTURE
	struct camVehicleRocketSettings                                            RocketSettings;                  // offset:0x1B8	type:STRUCT.STRUCTURE
	bool                                                                       _0x72147363;                     // offset:0x1C8	type:BOOL.0
	bool                                                                       _0xCE397BC8;                     // offset:0x1C9	type:BOOL.0
	bool                                                                       _0x34811CFB;                     // offset:0x1CA	type:BOOL.0
	struct camCinematicMountedCameraMetadataLookAroundSettings                 _0x092D55A2;                     // offset:0x1D0	type:STRUCT.STRUCTURE
	struct camCinematicMountedCameraMetadataLookAroundSettings                 _0x60DD3CCF;                     // offset:0x1F8	type:STRUCT.STRUCTURE
	struct camCinematicMountedCameraMetadataLookAroundSettings                 _0xA0FF15F4;                     // offset:0x220	type:STRUCT.STRUCTURE
	struct camCinematicMountedCameraMetadataFirstPersonRoll                    _0x3CD75AE5;                     // offset:0x248	type:STRUCT.STRUCTURE
	struct camCinematicMountedCameraMetadataFirstPersonPitchOffset             _0xC2B3B58A;                     // offset:0x260	type:STRUCT.STRUCTURE
	bool                                                                       _0xFAF91DAF;                     // offset:0x290	type:BOOL.0
	float                                                                      RelativeAttachSpringDampingRatio; // offset:0x294	type:FLOAT.0
	float                                                                      MinSpeedForMaxRelativeAttachSpringConstant; // offset:0x298	type:FLOAT.0
	float                                                                      _0x010F26BB;                     // offset:0x29C	type:FLOAT.0
	float                                                                      _0x924FFB0B;                     // offset:0x2A0	type:FLOAT.0
	bool                                                                       _0x2F0CDC17;                     // offset:0x2A4	type:BOOL.0
	bool                                                                       ShouldAttachToFollowPedHead;     // offset:0x2A5	type:BOOL.0
	bool                                                                       _0x9D56D88F;                     // offset:0x2A6	type:BOOL.0
	bool                                                                       ShouldAttachToFollowPedSeat;     // offset:0x2A7	type:BOOL.0
	bool                                                                       ShouldRestictToFrontSeat;        // offset:0x2A8	type:BOOL.0
	bool                                                                       ShouldAttachToVehicleExitEntryPoint; // offset:0x2A9	type:BOOL.0
	bool                                                                       ShouldAttachToVehicleBone;       // offset:0x2AA	type:BOOL.0
	bool                                                                       _0xFC01963F;                     // offset:0x2AB	type:BOOL.0
	bool                                                                       _0xCC212CBA;                     // offset:0x2AC	type:BOOL.0
	bool                                                                       _0x34AB610C;                     // offset:0x2AD	type:BOOL.0
	bool                                                                       _0x50294D1F;                     // offset:0x2AE	type:BOOL.0
	bitset<enum _0xA5D84583>                                                   _0xD21469BC;                     // offset:0x2B0	type:BITSET.32BIT
	enum _0xCAEC3EE2                                                           VehicleAttachPart;               // offset:0x2B4	type:ENUM.32BIT
	enum _0x7F5C19FF                                                           LookAtBehaviour;                 // offset:0x2B8	type:ENUM.32BIT
	vec3                                                                       RelativeLookAtPosition;          // offset:0x2C0	type:VECTOR3.0
	vec3                                                                       LookBehindRelativeAttachPosition; // offset:0x2D0	type:VECTOR3.0
	bool                                                                       ShouldUseLookBehindCustomPosition; // offset:0x2E0	type:BOOL.0
	int                                                                        FollowPedLookAtBoneTag;          // offset:0x2E4	type:INT.0
	struct camCinematicMountedCameraMetadataOrientationSpring                  OrientationSpring;               // offset:0x2E8	type:STRUCT.STRUCTURE
	struct camCinematicMountedCameraMetadataLeadingLookSettings                _0x83667041;                     // offset:0x328	type:STRUCT.STRUCTURE
	float                                                                      MinPitch;                        // offset:0x358	type:FLOAT.0
	float                                                                      MaxPitch;                        // offset:0x35C	type:FLOAT.0
	float                                                                      _0xEA6A7211;                     // offset:0x360	type:FLOAT.0
	float                                                                      _0x64C268A2;                     // offset:0x364	type:FLOAT.0
	vec2                                                                       RelativeHeadingLimitsForMobilePhoneCamera; // offset:0x368	type:VECTOR2.0
	bool                                                                       IsBehindVehicleGlass;            // offset:0x370	type:BOOL.0
	bool                                                                       IsForcingMotionBlur;             // offset:0x371	type:BOOL.0
	bool                                                                       ShouldDisplayReticule;           // offset:0x372	type:BOOL.0
	bool                                                                       ShouldMakeFollowPedHeadInvisible; // offset:0x373	type:BOOL.0
	bool                                                                       ShouldMakePedInAttachSeatInvisible; // offset:0x374	type:BOOL.0
	bool                                                                       ShouldCopyVehicleCameraMotionBlur; // offset:0x375	type:BOOL.0
	bool                                                                       LimitAttachParentRelativePitchAndHeading; // offset:0x376	type:BOOL.0
	bool                                                                       ShouldTerminateForPitchAndHeading; // offset:0x377	type:BOOL.0
	vec2                                                                       AttachParentRelativePitch;       // offset:0x378	type:VECTOR2.0
	vec2                                                                       _0x5B9D3940;                     // offset:0x380	type:VECTOR2.0
	vec2                                                                       _0xC3360130;                     // offset:0x388	type:VECTOR2.0
	vec2                                                                       _0x370EC3DC;                     // offset:0x390	type:VECTOR2.0
	vec2                                                                       _0xDB6680E5;                     // offset:0x398	type:VECTOR2.0
	vec2                                                                       AttachParentRelativeHeading;     // offset:0x3A0	type:VECTOR2.0
	vec2                                                                       _0x8CD567E3;                     // offset:0x3A8	type:VECTOR2.0
	vec2                                                                       _0xAEBA2DAB;                     // offset:0x3B0	type:VECTOR2.0
	vec2                                                                       _0xFF9632B5;                     // offset:0x3B8	type:VECTOR2.0
	vec2                                                                       _0x4475E619;                     // offset:0x3C0	type:VECTOR2.0
	vec2                                                                       _0x30C393B2;                     // offset:0x3C8	type:VECTOR2.0
	vec2                                                                       _0xBE9B5F05;                     // offset:0x3D0	type:VECTOR2.0
	vec2                                                                       _0x6E1C992B;                     // offset:0x3D8	type:VECTOR2.0
	vec2                                                                       _0x409B4B21;                     // offset:0x3E0	type:VECTOR2.0
	vec2                                                                       _0xF635F0FA;                     // offset:0x3E8	type:VECTOR2.0
	vec2                                                                       InitialRelativePitchLimits;      // offset:0x3F0	type:VECTOR2.0
	vec2                                                                       InitialRelativeHeadingLimits;    // offset:0x3F8	type:VECTOR2.0
	bool                                                                       ShouldApplyAttachParentRoll;     // offset:0x400	type:BOOL.0
	bool                                                                       ShouldTerminateForWorldPitch;    // offset:0x401	type:BOOL.0
	vec2                                                                       InitialWorldPitchLimits;         // offset:0x404	type:VECTOR2.0
	vec2                                                                       WorldPitchLimits;                // offset:0x40C	type:VECTOR2.0
	bool                                                                       ShouldTerminateForOcclusion;     // offset:0x414	type:BOOL.0
	uint                                                                       MaxTimeToSpendOccluded;          // offset:0x418	type:UINT.0
	bool                                                                       ShouldTerminateIfOccludedByAttachParent; // offset:0x41C	type:BOOL.0
	uint                                                                       MaxTimeToSpendOccludedByAttachParent; // offset:0x420	type:UINT.0
	float                                                                      CollisionRadius;                 // offset:0x424	type:FLOAT.0
	float                                                                      RadiusScalingForOcclusionTest;   // offset:0x428	type:FLOAT.0
	bool                                                                       ShouldTerminateForDistanceToTarget; // offset:0x42C	type:BOOL.0
	float                                                                      DistanceToTerminate;             // offset:0x430	type:FLOAT.0
	bool                                                                       ShouldCalculateXYDistance;       // offset:0x434	type:BOOL.0
	bool                                                                       ShouldTestForClipping;           // offset:0x435	type:BOOL.0
	uint                                                                       MaxTimeToClipIntoDynamicCollision; // offset:0x438	type:UINT.0
	float                                                                      RadiusScalingForClippingTest;    // offset:0x43C	type:FLOAT.0
	bool                                                                       _0x30A562A0;                     // offset:0x440	type:BOOL.0
	bool                                                                       _0x1A36C723;                     // offset:0x441	type:BOOL.0
	float                                                                      MaxDistanceForWaterClippingTest; // offset:0x444	type:FLOAT.0
	float                                                                      MaxDistanceForRiverWaterClippingTest; // offset:0x448	type:FLOAT.0
	bool                                                                       _0x3A328BC3;                     // offset:0x44C	type:BOOL.0
	float                                                                      MinHeightAboveWater;             // offset:0x450	type:FLOAT.0
	bool                                                                       _0x0BEF8AAA;                     // offset:0x454	type:BOOL.0
	float                                                                      _0x602A3B22;                     // offset:0x458	type:FLOAT.0
	bool                                                                       _0x806DD59E;                     // offset:0x45C	type:BOOL.0
	string                                                                     InVehicleLookAtDampingRef;       // offset:0x460	type:STRING.ATHASHVALUE
	string                                                                     OnFootLookAtDampingRef;          // offset:0x464	type:STRING.ATHASHVALUE
	string                                                                     _0xFA62FF34;                     // offset:0x468	type:STRING.ATHASHVALUE
	bool                                                                       ShouldByPassNearClip;            // offset:0x46C	type:BOOL.0
	bool                                                                       ShouldTestForMapPenetrationFromAttachPosition; // offset:0x46D	type:BOOL.0
	float                                                                      BaseHeading;                     // offset:0x470	type:FLOAT.0
	bool                                                                       _0x48622809;                     // offset:0x474	type:BOOL.0
	float                                                                      _0x8AB5C747;                     // offset:0x478	type:FLOAT.0
	float                                                                      _0x4A487626;                     // offset:0x47C	type:FLOAT.0
	float                                                                      _0xFB55604D;                     // offset:0x480	type:FLOAT.0
	struct camCinematicMountedCameraMetadataMovementOnAccelerationSettings     _0xA2111642;                     // offset:0x488	type:STRUCT.STRUCTURE
	float                                                                      _0x02346368;                     // offset:0x4B8	type:FLOAT.0
	vec3                                                                       _0xCCB9AF0C;                     // offset:0x4C0	type:VECTOR3.0
	float                                                                      _0xDA6C1451;                     // offset:0x4D0	type:FLOAT.0
	float                                                                      _0xA74FB775;                     // offset:0x4D4	type:FLOAT.0
	float                                                                      _0x649E0553;                     // offset:0x4D8	type:FLOAT.0
	float                                                                      _0x5960BD42;                     // offset:0x4DC	type:FLOAT.0
	float                                                                      _0x300872F3;                     // offset:0x4E0	type:FLOAT.0
	float                                                                      _0x6AE1BFA3;                     // offset:0x4E4	type:FLOAT.0
	float                                                                      _0x6A584943;                     // offset:0x4E8	type:FLOAT.0
	float                                                                      _0x97FB1C40;                     // offset:0x4EC	type:FLOAT.0
	float                                                                      _0x93FF7BA9;                     // offset:0x4F0	type:FLOAT.0
	float                                                                      _0xCD0D18C3;                     // offset:0x4F4	type:FLOAT.0
	float                                                                      _0xA39751BC;                     // offset:0x4F8	type:FLOAT.0
	float                                                                      _0x52B4CC41;                     // offset:0x4FC	type:FLOAT.0
	float                                                                      _0x498313F3;                     // offset:0x500	type:FLOAT.0
	vec3                                                                       _0xDAE91900;                     // offset:0x510	type:VECTOR3.0
	vec3                                                                       _0x7E596A1E;                     // offset:0x520	type:VECTOR3.0
	float                                                                      _0xB05BC76E;                     // offset:0x530	type:FLOAT.0
	float                                                                      _0x7DA49586;                     // offset:0x534	type:FLOAT.0
};

struct camCinematicMountedCameraMetadataFirstPersonPitchOffset
{
	bool                             _0x20E3121D;                     // offset:0x008	type:BOOL.0
	vec3                             MaxOffset;                       // offset:0x010	type:VECTOR3.0
	float                            _0x69D0E896;                     // offset:0x020	type:FLOAT.0
	float                            _0x8188B97A;                     // offset:0x024	type:FLOAT.0
	float                            _0x0479CA7C;                     // offset:0x028	type:FLOAT.0
};

struct camCinematicMountedCameraMetadataFirstPersonRoll
{
	float                            _0x1B242C70;                     // offset:0x008	type:FLOAT.0
	float                            _0x296470EB;                     // offset:0x00C	type:FLOAT.0
	float                            _0x777CFBAD;                     // offset:0x010	type:FLOAT.0
	float                            _0xA5DE55CC;                     // offset:0x014	type:FLOAT.0
};

struct camCinematicMountedCameraMetadataLeadingLookSettings
{
	float                            _0x399B5EF5;                     // offset:0x008	type:FLOAT.0
	bool                             _0x6A05D793;                     // offset:0x00C	type:BOOL.0
	float                            _0xD20FA10B;                     // offset:0x010	type:FLOAT.0
	float                            SpringConstant;                  // offset:0x014	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x018	type:FLOAT.0
	float                            _0x6AA02017;                     // offset:0x01C	type:FLOAT.0
	float                            _0xEC169F9E;                     // offset:0x020	type:FLOAT.0
	bool                             _0xAB3A0BD4;                     // offset:0x024	type:BOOL.0
	float                            _0x6759C76E;                     // offset:0x028	type:FLOAT.0
};

struct camCinematicMountedCameraMetadataLookAroundSettings
{
	float                            LeanScale;                       // offset:0x008	type:FLOAT.0
	float                            _0x0CCA870E;                     // offset:0x00C	type:FLOAT.0
	float                            _0xA117C53C;                     // offset:0x010	type:FLOAT.0
	float                            _0xAFE4E6B9;                     // offset:0x014	type:FLOAT.0
	float                            _0xA8AEC876;                     // offset:0x018	type:FLOAT.0
	float                            _0xB8EFC6BB;                     // offset:0x01C	type:FLOAT.0
	float                            _0x1E582B77;                     // offset:0x020	type:FLOAT.0
	float                            _0xBEA8943A;                     // offset:0x024	type:FLOAT.0
};

struct camCinematicMountedCameraMetadataMovementOnAccelerationSettings
{
	bool                             _0xECE02820;                     // offset:0x008	type:BOOL.0
	float                            BlendInSpringConstant;           // offset:0x00C	type:FLOAT.0
	float                            BlendOutSpringConstant;          // offset:0x010	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x014	type:FLOAT.0
	float                            _0xC500203D;                     // offset:0x018	type:FLOAT.0
	float                            _0x46BED0A7;                     // offset:0x01C	type:FLOAT.0
	bool                             _0x6A05D793;                     // offset:0x020	type:BOOL.0
	float                            MaxZoomFactor;                   // offset:0x024	type:FLOAT.0
	float                            _0xD039B07C;                     // offset:0x028	type:FLOAT.0
	float                            _0x4B108D9B;                     // offset:0x02C	type:FLOAT.0
};

struct camCinematicMountedCameraMetadataOrientationSpring
{
	float                            SpringConstant;                  // offset:0x008	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x00C	type:FLOAT.0
	float                            _0x574F46EA;                     // offset:0x010	type:FLOAT.0
	bool                             _0x00C2A4ED;                     // offset:0x014	type:BOOL.0
	float                            _0x39ADFF2E;                     // offset:0x018	type:FLOAT.0
	vec2                             _0xC752A03F;                     // offset:0x01C	type:VECTOR2.0
	float                            _0x0E88FA34;                     // offset:0x024	type:FLOAT.0
	vec2                             _0x8F0B1686;                     // offset:0x028	type:VECTOR2.0
	vec2                             _0x7AD0698A;                     // offset:0x030	type:VECTOR2.0
	vec2                             _0x07D7D4D8;                     // offset:0x038	type:VECTOR2.0
};

struct camCinematicMountedCameraMetadataRelativePitchScalingToThrottle
{
	bool                             _0x6B728A11;                     // offset:0x008	type:BOOL.0
	float                            _0x0BF85225;                     // offset:0x00C	type:FLOAT.0
};

struct camCinematicMountedPartCameraMetadata : camBaseCameraMetadata
{
	string                                           RelativeAttachSpringConstantEnvelopeRef; // offset:0x020	type:STRING.ATHASHVALUE
	string                                           SpringMountRef;                  // offset:0x024	type:STRING.ATHASHVALUE
	float                                            BaseFov;                         // offset:0x028	type:FLOAT.0
	float                                            BaseNearClip;                    // offset:0x02C	type:FLOAT.0
	enum _0xCAEC3EE2                                 AttachPart;                      // offset:0x030	type:ENUM.32BIT
	vec3                                             _0xA6C0B43B;                     // offset:0x040	type:VECTOR3.0
	vec3                                             RelativeLookAtPosition;          // offset:0x050	type:VECTOR3.0
	vec2                                             RelativeAttachSpringConstantLimits; // offset:0x060	type:VECTOR2.0
	vec2                                             RelativeAttachSpringConstantLimitsForPassengers; // offset:0x068	type:VECTOR2.0
	float                                            RelativeAttachSpringDampingRatio; // offset:0x070	type:FLOAT.0
	float                                            MinSpeedForMaxRelativeAttachSpringConstant; // offset:0x074	type:FLOAT.0
	struct camSpeedRelativeShakeSettingsMetadata     HighSpeedShakeSettings;          // offset:0x078	type:STRUCT.STRUCTURE
	bool                                             IsBehindVehicleGlass;            // offset:0x098	type:BOOL.0
	bool                                             IsForcingMotionBlur;             // offset:0x099	type:BOOL.0
	bool                                             ShouldDisplayReticule;           // offset:0x09A	type:BOOL.0
	bool                                             ShouldMakeFollowPedHeadInvisible; // offset:0x09B	type:BOOL.0
	bool                                             ShouldCopyVehicleCameraMotionBlur; // offset:0x09C	type:BOOL.0
	uint                                             MaxTimeToSpendOccluded;          // offset:0x0A0	type:UINT.0
	float                                            CollisionRadius;                 // offset:0x0A4	type:FLOAT.0
	float                                            RadiusScalingForOcclusionTest;   // offset:0x0A8	type:FLOAT.0
	bool                                             ShouldTestForClipping;           // offset:0x0AC	type:BOOL.0
	float                                            RadiusScalingForClippingTest;    // offset:0x0B0	type:FLOAT.0
	float                                            MaxDistanceForWaterClippingTest; // offset:0x0B4	type:FLOAT.0
	float                                            MaxDistanceForRiverWaterClippingTest; // offset:0x0B8	type:FLOAT.0
	float                                            MinHeightAboveWater;             // offset:0x0BC	type:FLOAT.0
};

struct camCinematicOnFootAssistedAimingContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicOnFootAssistedAimingKillShotMetadata : camCinematicShotMetadata
{
	uint                             _0x75270C47;                     // offset:0x040	type:UINT.0
	float                            _0x1E997D6F;                     // offset:0x044	type:FLOAT.0
};

struct camCinematicOnFootAssistedAimingReactionShotMetadata : camCinematicShotMetadata
{
	uint                             _0xD5585DE0;                     // offset:0x040	type:UINT.0
};

struct camCinematicOnFootFirstPersonIdleShotMetadata : camCinematicShotMetadata
{
	array<string>                    Cameras;                         // offset:0x040	type:ARRAY.ATARRAY
};

struct camCinematicOnFootIdleContextMetadata : camCinematicContextMetadata
{
	uint                             _0x700748E0;                     // offset:0x048	type:UINT.0
	float                            _0x47AECBF8;                     // offset:0x04C	type:FLOAT.0
};

struct camCinematicOnFootIdleShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicOnFootMeleeContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicOnFootMeleeShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicOnFootSpectatingContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicOnFootSpectatingShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicParachuteCameraManShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicParachuteContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicParachuteHeliShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicPedCloseUpCameraMetadata : camBaseCameraMetadata
{
	float                            BaseFov;                         // offset:0x020	type:FLOAT.0
	float                            BaseNearClip;                    // offset:0x024	type:FLOAT.0
	int                              AttachBoneTag;                   // offset:0x028	type:INT.0
	vec3                             AttachOffset;                    // offset:0x030	type:VECTOR3.0
	bool                             _0x418AB98A;                     // offset:0x040	type:BOOL.0
	int                              _0xD4FA5865;                     // offset:0x044	type:INT.0
	vec3                             LookAtOffset;                    // offset:0x050	type:VECTOR3.0
	bool                             _0x15E2D3FE;                     // offset:0x060	type:BOOL.0
	uint                             _0xC98D63BF;                     // offset:0x064	type:UINT.0
	float                            _0xBDDF0E57;                     // offset:0x068	type:FLOAT.0
	float                            _0xFF299066;                     // offset:0x06C	type:FLOAT.0
	float                            _0x19A7189C;                     // offset:0x070	type:FLOAT.0
	float                            _0x8F7090F7;                     // offset:0x074	type:FLOAT.0
	float                            _0x7E2A9DA3;                     // offset:0x078	type:FLOAT.0
	float                            _0xF24E9B3B;                     // offset:0x07C	type:FLOAT.0
	float                            _0x52EEED84;                     // offset:0x080	type:FLOAT.0
	float                            _0xDC73E8ED;                     // offset:0x084	type:FLOAT.0
	float                            _0xDFC9DBF9;                     // offset:0x088	type:FLOAT.0
	float                            _0x8E1646A3;                     // offset:0x08C	type:FLOAT.0
	float                            _0xCB0FC87F;                     // offset:0x090	type:FLOAT.0
	float                            _0xF8904EA3;                     // offset:0x094	type:FLOAT.0
	float                            _0xCBC4B316;                     // offset:0x098	type:FLOAT.0
	float                            _0xAEE75726;                     // offset:0x09C	type:FLOAT.0
	float                            _0xA1D538F4;                     // offset:0x0A0	type:FLOAT.0
	uint                             MaxTimeToSpendOccluded;          // offset:0x0A4	type:UINT.0
	float                            _0xD722C048;                     // offset:0x0A8	type:FLOAT.0
	float                            MaxDistanceForWaterClippingTest; // offset:0x0AC	type:FLOAT.0
	float                            MaxDistanceForRiverWaterClippingTest; // offset:0x0B0	type:FLOAT.0
	float                            MinHeightAboveWater;             // offset:0x0B4	type:FLOAT.0
};

struct camCinematicPoliceCarMountedShotMetadata : camCinematicShotMetadata
{
	bool                             LimitAttachParentRelativePitchAndHeading; // offset:0x040	type:BOOL.0
	bool                             ShouldTerminateForPitchAndHeading; // offset:0x041	type:BOOL.0
	vec2                             AttachParentRelativePitch;       // offset:0x044	type:VECTOR2.0
	vec2                             AttachParentRelativeHeading;     // offset:0x04C	type:VECTOR2.0
	vec2                             InitialRelativePitchLimits;      // offset:0x054	type:VECTOR2.0
	vec2                             InitialRelativeHeadingLimits;    // offset:0x05C	type:VECTOR2.0
	string                           InVehicleLookAtDampingRef;       // offset:0x064	type:STRING.ATHASHVALUE
	string                           OnFootLookAtDampingRef;          // offset:0x068	type:STRING.ATHASHVALUE
	bool                             _0xFA35B1D3;                     // offset:0x06C	type:BOOL.0
};

struct camCinematicPoliceExitVehicleShotMetadata : camCinematicShotMetadata
{
	bool                             _0xFA35B1D3;                     // offset:0x040	type:BOOL.0
};

struct camCinematicPoliceHeliMountedShotMetadata : camCinematicShotMetadata
{
	bool                             _0xFA35B1D3;                     // offset:0x040	type:BOOL.0
};

struct camCinematicPoliceInCoverShotMetadata : camCinematicShotMetadata
{
	bool                             _0xFA35B1D3;                     // offset:0x040	type:BOOL.0
};

struct camCinematicPoliceRoadBlockShotMetadata : camCinematicShotMetadata
{
	float                            _0x343E4081;                     // offset:0x040	type:FLOAT.0
	float                            SpreadLimit;                     // offset:0x044	type:FLOAT.0
	bool                             _0xFA35B1D3;                     // offset:0x048	type:BOOL.0
};

struct camCinematicPositionCameraMetadata : camBaseCameraMetadata
{
	vec2                             PitchLimits;                     // offset:0x020	type:VECTOR2.0
	float                            CollisionRadius;                 // offset:0x028	type:FLOAT.0
	float                            _0xED6AF816;                     // offset:0x02C	type:FLOAT.0
	float                            RadiusScalingForClippingTest;    // offset:0x030	type:FLOAT.0
	uint                             MaxTimeToSpendOccluded;          // offset:0x034	type:UINT.0
	float                            _0xDD794BD7;                     // offset:0x038	type:FLOAT.0
	float                            _0xCCB6BFE8;                     // offset:0x03C	type:FLOAT.0
	float                            _0x65514E96;                     // offset:0x040	type:FLOAT.0
	uint                             ZoomDuration;                    // offset:0x044	type:UINT.0
	float                            _0xD722C048;                     // offset:0x048	type:FLOAT.0
	uint                             _0x6DE38BED;                     // offset:0x04C	type:UINT.0
	float                            MaxDistanceForWaterClippingTest; // offset:0x050	type:FLOAT.0
	float                            MaxDistanceForRiverWaterClippingTest; // offset:0x054	type:FLOAT.0
	float                            MinHeightAboveWater;             // offset:0x058	type:FLOAT.0
	string                           InVehicleLookAtDampingRef;       // offset:0x05C	type:STRING.ATHASHVALUE
	string                           OnFootLookAtDampingRef;          // offset:0x060	type:STRING.ATHASHVALUE
	string                           _0xFA62FF34;                     // offset:0x064	type:STRING.ATHASHVALUE
};

struct camCinematicScriptContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicScriptRaceCheckPointShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicScriptedMissionCreatorFailContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicScriptedRaceCheckPointContextMetadata : camCinematicContextMetadata
{
	uint                             _0x625F5A7E;                     // offset:0x048	type:UINT.0
};

struct camCinematicShotMetadata : camBaseObjectMetadata
{
	string                           CameraRef;                       // offset:0x010	type:STRING.ATHASHVALUE
	vec2                             _0xDE3297C4;                     // offset:0x014	type:VECTOR2.0
	bool                             _0xB2A7BEEB;                     // offset:0x01C	type:BOOL.0
	bitset<enum _0xD261D19D>         VehicleTypes;                    // offset:0x020	type:BITSET.32BIT
	bool                             _0x32229FE1;                     // offset:0x024	type:BOOL.0
	bool                             _0x69901655;                     // offset:0x025	type:BOOL.0
	float                            _0xB14062F1;                     // offset:0x028	type:FLOAT.0
	bool                             _0x5838A4E3;                     // offset:0x02C	type:BOOL.0
	bool                             _0x92A9B69B;                     // offset:0x02D	type:BOOL.0
	float                            _0xDC93A685;                     // offset:0x030	type:FLOAT.0
	bool                             _0x87A35DA1;                     // offset:0x034	type:BOOL.0
	uint                             _0x039AEED9;                     // offset:0x038	type:UINT.0
};

struct camCinematicShots
{
	string                           Shot;                            // offset:0x008	type:STRING.ATHASHVALUE
	uint                             Priority;                        // offset:0x00C	type:UINT.0
	float                            ProbabilityWeighting;            // offset:0x010	type:FLOAT.0
};

struct camCinematicSpectatorNewsChannelContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicStuntCameraMetadata : camBaseCinematicTrackingCameraMetadata
{
	vec2                             FovLimits;                       // offset:0x020	type:VECTOR2.0
	float                            _0xDBBFEA90;                     // offset:0x028	type:FLOAT.0
	vec2                             _0x8B0605A5;                     // offset:0x02C	type:VECTOR2.0
	vec2                             _0xBE7DE487;                     // offset:0x034	type:VECTOR2.0
	vec2                             _0x79309EBC;                     // offset:0x03C	type:VECTOR2.0
};

struct camCinematicStuntJumpContextMetadata : camCinematicContextMetadata
{
};

struct camCinematicStuntJumpShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicTrainPassengerShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicTrainRoofMountedShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicTrainStationShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicTrainTrackShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicTrainTrackingCameraMetadata : camCinematicCameraManCameraMetadata
{
	vec3                             _0x34D2E824;                     // offset:0x150	type:VECTOR3.0
	vec2                             _0x26BC2D9F;                     // offset:0x160	type:VECTOR2.0
	vec2                             _0xB5C8AE6E;                     // offset:0x168	type:VECTOR2.0
	vec2                             _0x3F915EEA;                     // offset:0x170	type:VECTOR2.0
	vec2                             _0xE46D9313;                     // offset:0x178	type:VECTOR2.0
	vec2                             _0x1890E8E3;                     // offset:0x180	type:VECTOR2.0
};

struct camCinematicTwoShotCameraMetadata : camBaseCameraMetadata
{
	float                            BaseFov;                         // offset:0x020	type:FLOAT.0
	float                            BaseNearClip;                    // offset:0x024	type:FLOAT.0
	float                            TimeScale;                       // offset:0x028	type:FLOAT.0
	float                            _0xB71CBB16;                     // offset:0x02C	type:FLOAT.0
	float                            _0x26FE940C;                     // offset:0x030	type:FLOAT.0
	float                            CameraRelativeVerticalOffset;    // offset:0x034	type:FLOAT.0
	float                            _0x72D1367E;                     // offset:0x038	type:FLOAT.0
	float                            _0x459DC365;                     // offset:0x03C	type:FLOAT.0
	float                            _0x271F3B1C;                     // offset:0x040	type:FLOAT.0
	float                            HeightSpringConstant;            // offset:0x044	type:FLOAT.0
	float                            _0xF889FF2E;                     // offset:0x048	type:FLOAT.0
	float                            OrbitDistance;                   // offset:0x04C	type:FLOAT.0
	int                              _0xD4FA5865;                     // offset:0x050	type:INT.0
	float                            MinDistanceForLockOn;            // offset:0x054	type:FLOAT.0
	float                            _0x74776271;                     // offset:0x058	type:FLOAT.0
	float                            IdleCmini;                       // offset:0x05C	type:FLOAT.0
	float                            _0xDFC9DBF9;                     // offset:0x060	type:FLOAT.0
	float                            MaxDistanceForWaterClippingTest; // offset:0x064	type:FLOAT.0
	float                            MaxDistanceForRiverWaterClippingTest; // offset:0x068	type:FLOAT.0
	float                            MinHeightAboveWater;             // offset:0x06C	type:FLOAT.0
	float                            _0x8E1646A3;                     // offset:0x070	type:FLOAT.0
	bool                             _0x6692839F;                     // offset:0x074	type:BOOL.0
	float                            _0x4297E134;                     // offset:0x078	type:FLOAT.0
	float                            _0xB9AD8152;                     // offset:0x07C	type:FLOAT.0
	bool                             _0x44332EE8;                     // offset:0x080	type:BOOL.0
	float                            _0x5678036E;                     // offset:0x084	type:FLOAT.0
};

struct camCinematicVehicleBonnetShotMetadata : camCinematicShotMetadata
{
	uint                             _0x4224F63B;                     // offset:0x040	type:UINT.0
	uint                             _0xF88F646E;                     // offset:0x044	type:UINT.0
	string                           _0x9EA0BD88;                     // offset:0x048	type:STRING.ATHASHVALUE
};

struct camCinematicVehicleConvertibleRoofShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicVehicleGroupShotMetadata : camCinematicShotMetadata
{
	float                            _0x0B442395;                     // offset:0x040	type:FLOAT.0
	float                            _0xD00EC272;                     // offset:0x044	type:FLOAT.0
	uint                             _0x1B3C1CC9;                     // offset:0x048	type:UINT.0
};

struct camCinematicVehicleLowOrbitCameraMetadata : camBaseCameraMetadata
{
	vec2                                                           _0xDE3297C4;                     // offset:0x020	type:VECTOR2.0
	vec2                                                           PitchLimits;                     // offset:0x028	type:VECTOR2.0
	vec2                                                           FovLimits;                       // offset:0x030	type:VECTOR2.0
	float                                                          _0x12C7A3A2;                     // offset:0x038	type:FLOAT.0
	float                                                          AngleDelta;                      // offset:0x03C	type:FLOAT.0
	float                                                          _0x796D7CE7;                     // offset:0x040	type:FLOAT.0
	float                                                          _0xFB85BBF5;                     // offset:0x044	type:FLOAT.0
	float                                                          _0x40E03DBC;                     // offset:0x048	type:FLOAT.0
	float                                                          CollisionRadius;                 // offset:0x04C	type:FLOAT.0
	float                                                          _0xED6AF816;                     // offset:0x050	type:FLOAT.0
	float                                                          RadiusScalingForOcclusionTest;   // offset:0x054	type:FLOAT.0
	float                                                          RadiusScalingForClippingTest;    // offset:0x058	type:FLOAT.0
	float                                                          _0x21B10F71;                     // offset:0x05C	type:FLOAT.0
	float                                                          _0x805ECB7E;                     // offset:0x060	type:FLOAT.0
	float                                                          _0x2DA26BB0;                     // offset:0x064	type:FLOAT.0
	uint                                                           MaxTimeToSpendOccluded;          // offset:0x068	type:UINT.0
	array<struct camCinematicVehicleOrbitCameraInitalSettings>     _0x5BBD6E3F;                     // offset:0x070	type:ARRAY.ATARRAY
	float                                                          MaxDistanceForWaterClippingTest; // offset:0x080	type:FLOAT.0
	float                                                          MaxDistanceForRiverWaterClippingTest; // offset:0x084	type:FLOAT.0
	float                                                          MinHeightAboveWater;             // offset:0x088	type:FLOAT.0
	float                                                          _0x74BF89DE;                     // offset:0x08C	type:FLOAT.0
	float                                                          MaxPitch;                        // offset:0x090	type:FLOAT.0
	float                                                          MaxRoll;                         // offset:0x094	type:FLOAT.0
	float                                                          _0xA7D2E6F1;                     // offset:0x098	type:FLOAT.0
	float                                                          _0xA97AF16F;                     // offset:0x09C	type:FLOAT.0
	float                                                          _0xF4EE2C76;                     // offset:0x0A0	type:FLOAT.0
	float                                                          _0x21B544BB;                     // offset:0x0A4	type:FLOAT.0
	float                                                          _0xE7D0E327;                     // offset:0x0A8	type:FLOAT.0
	float                                                          _0xE9AB8F23;                     // offset:0x0AC	type:FLOAT.0
	float                                                          _0xBE2339DF;                     // offset:0x0B0	type:FLOAT.0
	float                                                          _0x3D81F83A;                     // offset:0x0B4	type:FLOAT.0
	float                                                          _0x848994C2;                     // offset:0x0B8	type:FLOAT.0
	float                                                          _0x2CD74E57;                     // offset:0x0BC	type:FLOAT.0
	struct camSpeedRelativeShakeSettingsMetadata                   _0x601CFEA6;                     // offset:0x0C0	type:STRUCT.STRUCTURE
	struct camSpeedRelativeShakeSettingsMetadata                   HighSpeedShakeSettings;          // offset:0x0E0	type:STRUCT.STRUCTURE
};

struct camCinematicVehicleLowOrbitShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicVehicleOrbitCameraInitalSettings
{
	float                            Heading;                         // offset:0x008	type:FLOAT.0
	float                            HeadingDelta;                    // offset:0x00C	type:FLOAT.0
};

struct camCinematicVehicleOrbitCameraMetadata : camBaseCameraMetadata
{
	vec2                                                           _0xDE3297C4;                     // offset:0x020	type:VECTOR2.0
	vec2                                                           PitchLimits;                     // offset:0x028	type:VECTOR2.0
	vec2                                                           FovLimits;                       // offset:0x030	type:VECTOR2.0
	float                                                          _0x12C7A3A2;                     // offset:0x038	type:FLOAT.0
	float                                                          AngleDelta;                      // offset:0x03C	type:FLOAT.0
	float                                                          _0x215CEEE3;                     // offset:0x040	type:FLOAT.0
	float                                                          CollisionRadius;                 // offset:0x044	type:FLOAT.0
	float                                                          _0xED6AF816;                     // offset:0x048	type:FLOAT.0
	float                                                          RadiusScalingForOcclusionTest;   // offset:0x04C	type:FLOAT.0
	float                                                          RadiusScalingForClippingTest;    // offset:0x050	type:FLOAT.0
	float                                                          _0x805ECB7E;                     // offset:0x054	type:FLOAT.0
	float                                                          _0x2DA26BB0;                     // offset:0x058	type:FLOAT.0
	float                                                          _0xD934FF06;                     // offset:0x05C	type:FLOAT.0
	uint                                                           MaxTimeToSpendOccluded;          // offset:0x060	type:UINT.0
	uint                                                           _0xEDEE1305;                     // offset:0x064	type:UINT.0
	array<struct camCinematicVehicleOrbitCameraInitalSettings>     _0x5BBD6E3F;                     // offset:0x068	type:ARRAY.ATARRAY
	float                                                          MaxDistanceForWaterClippingTest; // offset:0x078	type:FLOAT.0
	float                                                          MaxDistanceForRiverWaterClippingTest; // offset:0x07C	type:FLOAT.0
	float                                                          MinHeightAboveWater;             // offset:0x080	type:FLOAT.0
};

struct camCinematicVehicleOrbitShotMetadata : camCinematicShotMetadata
{
};

struct camCinematicVehiclePartShotMetadata : camCinematicShotMetadata
{
	uint                             _0x0DEF34BB;                     // offset:0x040	type:UINT.0
};

struct camCinematicVehicleTrackingCameraMetadata : camBaseCameraMetadata
{
	vec3                             LookAtOffset;                    // offset:0x020	type:VECTOR3.0
	vec3                             PositionOffset;                  // offset:0x030	type:VECTOR3.0
	float                            Fov;                             // offset:0x040	type:FLOAT.0
	vec2                             _0x4D0B8730;                     // offset:0x044	type:VECTOR2.0
	vec2                             _0xD3DDEE29;                     // offset:0x04C	type:VECTOR2.0
	vec2                             _0xEF36FF4F;                     // offset:0x054	type:VECTOR2.0
	vec2                             _0x139B5BF2;                     // offset:0x05C	type:VECTOR2.0
	float                            CollisionRadius;                 // offset:0x064	type:FLOAT.0
	float                            RadiusScalingForClippingTest;    // offset:0x068	type:FLOAT.0
	float                            _0x8307AEC0;                     // offset:0x06C	type:FLOAT.0
	uint                             _0x441CC1AB;                     // offset:0x070	type:UINT.0
	float                            MaxDistanceForWaterClippingTest; // offset:0x074	type:FLOAT.0
	float                            MaxDistanceForRiverWaterClippingTest; // offset:0x078	type:FLOAT.0
	float                            MinHeightAboveWater;             // offset:0x07C	type:FLOAT.0
};

struct camCinematicWaterCrashCameraMetadata : camBaseCameraMetadata
{
	vec2                             PitchLimits;                     // offset:0x020	type:VECTOR2.0
	float                            CollisionRadius;                 // offset:0x028	type:FLOAT.0
	float                            _0xB924B2E5;                     // offset:0x02C	type:FLOAT.0
	float                            RadiusScale;                     // offset:0x030	type:FLOAT.0
	float                            DropDistance;                    // offset:0x034	type:FLOAT.0
	float                            _0xE3D3DF59;                     // offset:0x038	type:FLOAT.0
	float                            tacticalXml;                     // offset:0x03C	type:FLOAT.0
	float                            _0xB0C7E213;                     // offset:0x040	type:FLOAT.0
	uint                             MaxTimeToSpendOccluded;          // offset:0x044	type:UINT.0
	uint                             DropDuration;                    // offset:0x048	type:UINT.0
	uint                             _0xAE0CB3E3;                     // offset:0x04C	type:UINT.0
	uint                             BlendDuration;                   // offset:0x050	type:UINT.0
};

struct camCinematicWaterCrashContextMetadata : camCinematicContextMetadata
{
	uint                             ContextDuration;                 // offset:0x048	type:UINT.0
	float                            PitchLimit;                      // offset:0x04C	type:FLOAT.0
	float                            _0x0570DD18;                     // offset:0x050	type:FLOAT.0
	float                            _0x4F180E63;                     // offset:0x054	type:FLOAT.0
	float                            _0x455B6759;                     // offset:0x058	type:FLOAT.0
};

struct camCinematicWaterCrashShotMetadata : camCinematicShotMetadata
{
};

struct camCollisionMetadata : camBaseObjectMetadata
{
	bool                                                        ShouldIgnoreOcclusionWithBrokenFragments; // offset:0x010	type:BOOL.0
	bool                                                        ShouldIgnoreOcclusionWithBrokenFragmentsOfIgnoredEntities; // offset:0x011	type:BOOL.0
	bool                                                        ShouldMoveTowardsLos;            // offset:0x012	type:BOOL.0
	bool                                                        ShouldSweepToAvoidPopIn;         // offset:0x013	type:BOOL.0
	bool                                                        ShouldPersistPopInBehaviour;     // offset:0x014	type:BOOL.0
	bool                                                        ShouldPullBackByCapsuleRadius;   // offset:0x015	type:BOOL.0
	bool                                                        ShouldIgnoreOcclusionWithSelectCollision; // offset:0x016	type:BOOL.0
	bool                                                        ShouldIgnoreOcclusionWithRagdolls; // offset:0x017	type:BOOL.0
	bool                                                        ShouldReportAsCameraTypeTest;    // offset:0x018	type:BOOL.0
	struct camCollisionMetadataOcclusionSweep                   OcclusionSweep;                  // offset:0x020	type:STRUCT.STRUCTURE
	struct camCollisionMetadataPathFinding                      PathFinding;                     // offset:0x048	type:STRUCT.STRUCTURE
	struct camCollisionMetadataRotationTowardsLos               RotationTowardsLos;              // offset:0x058	type:STRUCT.STRUCTURE
	struct camCollisionMetadataOrbitDistanceDamping             OrbitDistanceDamping;            // offset:0x068	type:STRUCT.STRUCTURE
	struct camCollisionMetadataClippingAvoidance                ClippingAvoidance;               // offset:0x088	type:STRUCT.STRUCTURE
	struct camCollisionMetadataBuoyancySettings                 BuoyancySettings;                // offset:0x098	type:STRUCT.STRUCTURE
	struct camCollisionMetadataPushBeyondEntitiesIfClipping     PushBeyondEntitiesIfClipping;    // offset:0x0B8	type:STRUCT.STRUCTURE
	struct camCollisionMetadataPullBackTowardsCollision         PullBackTowardsCollision;        // offset:0x0D8	type:STRUCT.STRUCTURE
};

struct camCollisionMetadataBuoyancySettings
{
	bool                             ShouldApplyBuoyancy;             // offset:0x008	type:BOOL.0
	bool                             ShouldIgnoreBuoyancyStateAndAvoidSurface; // offset:0x009	type:BOOL.0
	float                            MinHitNormalDotWorldUpForRivers; // offset:0x00C	type:FLOAT.0
	float                            WaterHeightSmoothRate;           // offset:0x010	type:FLOAT.0
	float                            MinHeightAboveWaterWhenBuoyant;  // offset:0x014	type:FLOAT.0
	float                            MinDepthUnderWaterWhenNotBuoyant; // offset:0x018	type:FLOAT.0
};

struct camCollisionMetadataClippingAvoidance
{
	uint                             MaxIterations;                   // offset:0x008	type:UINT.0
	float                            CapsuleLengthForDetection;       // offset:0x00C	type:FLOAT.0
};

struct camCollisionMetadataOcclusionSweep
{
	uint                             NumCapsuleTests;                 // offset:0x008	type:UINT.0
	float                            MaxCollisionRootSpeedToForcePopIn; // offset:0x00C	type:FLOAT.0
	float                            MaxPreCollisionCameraSpeedToForcePopIn; // offset:0x010	type:FLOAT.0
	float                            MaxSweepAngleWhenMovingTowardsLos; // offset:0x014	type:FLOAT.0
	float                            MaxSweepAngleWhenAvoidingPopIn;  // offset:0x018	type:FLOAT.0
	float                            MinOrientationSpeedToMaintainDirection; // offset:0x01C	type:FLOAT.0
	float                            MinCameraMoveSpeedToSweepInDirectionOfTravel; // offset:0x020	type:FLOAT.0
};

struct camCollisionMetadataOrbitDistanceDamping
{
	float                            MaxCollisionRootSpeedToPausePullBack; // offset:0x008	type:FLOAT.0
	float                            MaxPreCollisionCameraSpeedToPausePullBack; // offset:0x00C	type:FLOAT.0
	float                            SpringConstant;                  // offset:0x010	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x014	type:FLOAT.0
	float                            MaxDistanceErrorToIgnore;        // offset:0x018	type:FLOAT.0
};

struct camCollisionMetadataPathFinding
{
	uint                             MaxCapsuleTests;                 // offset:0x008	type:UINT.0
};

struct camCollisionMetadataPullBackTowardsCollision
{
	float                            BlendInSpringConstant;           // offset:0x008	type:FLOAT.0
	float                            BlendOutSpringConstant;          // offset:0x00C	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x010	type:FLOAT.0
};

struct camCollisionMetadataPushBeyondEntitiesIfClipping
{
	float                            ExtraDistanceToPushAway;         // offset:0x008	type:FLOAT.0
	float                            OrbitDistanceScalingToApplyWhenPushing; // offset:0x00C	type:FLOAT.0
	float                            PullBackSpringConstant;          // offset:0x010	type:FLOAT.0
	float                            PushInSpringConstant;            // offset:0x014	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x018	type:FLOAT.0
	bool                             ShouldAllowOtherCollisionToConstrainCameraIntoEntities; // offset:0x01C	type:BOOL.0
	bool                             _0x3725CC85;                     // offset:0x01D	type:BOOL.0
	bool                             _0x25AB8A8E;                     // offset:0x01E	type:BOOL.0
};

struct camCollisionMetadataRotationTowardsLos
{
	float                            SpringConstant;                  // offset:0x008	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x00C	type:FLOAT.0
};

struct camControlHelperMetaDataPrecisionAimSettings
{
	float                            MinAccelModifier;                // offset:0x008	type:FLOAT.0
	float                            MaxAccelModifier;                // offset:0x00C	type:FLOAT.0
	float                            MinDeccelModifier;               // offset:0x010	type:FLOAT.0
	float                            MaxDeccelModifier;               // offset:0x014	type:FLOAT.0
	float                            InputMagToIncreaseDeadZoneMin;   // offset:0x018	type:FLOAT.0
	float                            InputMagToIncreaseDeadZoneMax;   // offset:0x01C	type:FLOAT.0
};

struct camControlHelperMetadata : camBaseObjectMetadata
{
	struct camControlHelperMetadataViewModes      ViewModes;                       // offset:0x010	type:STRUCT.STRUCTURE
	struct camControlHelperMetadataLookAround     LookAround;                      // offset:0x080	type:STRUCT.STRUCTURE
	struct camControlHelperMetadataZoom           Zoom;                            // offset:0x0E0	type:STRUCT.STRUCTURE
	uint                                          LookBehindOutroTimeMS;           // offset:0x108	type:UINT.0
	bool                                          ShouldUseLookBehindInput;        // offset:0x10C	type:BOOL.0
	bool                                          ShouldUseAccurateModeInput;      // offset:0x10D	type:BOOL.0
	bool                                          ShouldToggleAccurateModeInput;   // offset:0x10E	type:BOOL.0
	bool                                          ShouldApplySniperControlPref;    // offset:0x10F	type:BOOL.0
	bool                                          ShouldApplyAimSensitivityPref;   // offset:0x110	type:BOOL.0
	vec2                                          AimSensitivityScalingLimits;     // offset:0x114	type:VECTOR2.0
	uint                                          MaxDurationForMultiplayerViewModeActivation; // offset:0x11C	type:UINT.0
};

struct camControlHelperMetadataLookAround
{
	float                                                   InputMagPowerFactor;             // offset:0x008	type:FLOAT.0
	float                                                   Acceleration;                    // offset:0x00C	type:FLOAT.0
	float                                                   Deceleration;                    // offset:0x010	type:FLOAT.0
	float                                                   MaxHeadingSpeed;                 // offset:0x014	type:FLOAT.0
	float                                                   MaxPitchSpeed;                   // offset:0x018	type:FLOAT.0
	float                                                   MouseMaxHeadingSpeedMin;         // offset:0x01C	type:FLOAT.0
	float                                                   MouseMaxHeadingSpeedMax;         // offset:0x020	type:FLOAT.0
	float                                                   MouseMaxPitchSpeedMin;           // offset:0x024	type:FLOAT.0
	float                                                   MouseMaxPitchSpeedMax;           // offset:0x028	type:FLOAT.0
	float                                                   LSDeadZoneAngle;                 // offset:0x02C	type:FLOAT.0
	float                                                   LSAcceleration;                  // offset:0x030	type:FLOAT.0
	float                                                   LSDeceleration;                  // offset:0x034	type:FLOAT.0
	bool                                                    ShouldUseGameTime;               // offset:0x038	type:BOOL.0
	string                                                  InputEnvelopeRef;                // offset:0x03C	type:STRING.ATHASHVALUE
	struct camControlHelperMetaDataPrecisionAimSettings     PrecisionAimSettings;            // offset:0x040	type:STRUCT.STRUCTURE
};

struct camControlHelperMetadataViewModeSettings
{
	vec2                             OrbitDistanceLimitScaling;       // offset:0x008	type:VECTOR2.0
};

struct camControlHelperMetadataViewModes
{
	bool                                                          ShouldUseViewModeInput;          // offset:0x008	type:BOOL.0
	bool                                                          ShouldToggleViewModeBetweenThirdAndFirstPerson; // offset:0x009	type:BOOL.0
	enum _0x1EA25D4E                                              Context;                         // offset:0x00C	type:ENUM.32BIT
	bitset<enum _0xA11D7CA8>                                      Flags;                           // offset:0x010	type:BITSET.8BIT
	array<struct camControlHelperMetadataViewModeSettings, 5>     Settings;                        // offset:0x018	type:ARRAY.MEMBER
	string                                                        ViewModeBlendEnvelopeRef;        // offset:0x068	type:STRING.ATHASHVALUE
};

struct camControlHelperMetadataZoom
{
	bool                             ShouldUseZoomInput;              // offset:0x008	type:BOOL.0
	bool                             ShouldUseDiscreteZoomControl;    // offset:0x009	type:BOOL.0
	bool                             ShouldUseGameTime;               // offset:0x00A	type:BOOL.0
	float                            MinFov;                          // offset:0x00C	type:FLOAT.0
	float                            MinFovForNetworkPlay;            // offset:0x010	type:FLOAT.0
	float                            MaxFov;                          // offset:0x014	type:FLOAT.0
	float                            InputMagPowerFactor;             // offset:0x018	type:FLOAT.0
	float                            Acceleration;                    // offset:0x01C	type:FLOAT.0
	float                            Deceleration;                    // offset:0x020	type:FLOAT.0
	float                            MaxSpeed;                        // offset:0x024	type:FLOAT.0
};

struct camCustomTimedSplineCameraMetadata : camTimedSplineCameraMetadata
{
};

struct camCutsceneDirectorMetadata : camBaseDirectorMetadata
{
	string                           AnimatedCameraRef;               // offset:0x018	type:STRING.ATHASHVALUE
};

struct camDebugDirectorMetadata : camBaseDirectorMetadata
{
	string                           FreeCameraRef;                   // offset:0x018	type:STRING.ATHASHVALUE
};

struct camDepthOfFieldSettingsMetadata : camBaseObjectMetadata
{
	vec2                             _0xE6D4854D;                     // offset:0x010	type:VECTOR2.0
	vec2                             _0x303F1574;                     // offset:0x018	type:VECTOR2.0
	float                            _0x1D439A7F;                     // offset:0x020	type:FLOAT.0
	float                            _0xD7EC2294;                     // offset:0x024	type:FLOAT.0
	float                            _0x54E7489E;                     // offset:0x028	type:FLOAT.0
	float                            _0xE32151C0;                     // offset:0x02C	type:FLOAT.0
	float                            _0x3FB513AF;                     // offset:0x030	type:FLOAT.0
	float                            _0x466F9DD9;                     // offset:0x034	type:FLOAT.0
	float                            _0xAF4DB4D7;                     // offset:0x038	type:FLOAT.0
	float                            _0x68EFA213;                     // offset:0x03C	type:FLOAT.0
	float                            _0x0E8FE261;                     // offset:0x040	type:FLOAT.0
	float                            _0xA289DD57;                     // offset:0x044	type:FLOAT.0
	float                            _0x15D98D0A;                     // offset:0x048	type:FLOAT.0
	float                            _0x5E72D65A;                     // offset:0x04C	type:FLOAT.0
	float                            _0xF5195FB1;                     // offset:0x050	type:FLOAT.0
	bool                             _0xEF90DE54;                     // offset:0x054	type:BOOL.0
	bool                             _0xBCFB9251;                     // offset:0x055	type:BOOL.0
	bool                             _0x15E673DF;                     // offset:0x056	type:BOOL.0
	bool                             _0xDF674869;                     // offset:0x057	type:BOOL.0
	bool                             _0x3A7C3408;                     // offset:0x058	type:BOOL.0
};

struct camEnvelopeMetadata : camBaseObjectMetadata
{
	uint                             _0xEEAD9A5A;                     // offset:0x010	type:UINT.0
	uint                             AttackDuration;                  // offset:0x014	type:UINT.0
	uint                             DecayDuration;                   // offset:0x018	type:UINT.0
	float                            _0x6773BF6B;                     // offset:0x01C	type:FLOAT.0
	int                              HoldDuration;                    // offset:0x020	type:INT.0
	uint                             ReleaseDuration;                 // offset:0x024	type:UINT.0
	enum eCurveType                  _0x7816FE62;                     // offset:0x028	type:ENUM.32BIT
	enum eCurveType                  _0x3BDAFB94;                     // offset:0x02C	type:ENUM.32BIT
	bool                             _0x587C08AE;                     // offset:0x030	type:BOOL.0
};

struct camFirstPersonAimCameraMetadata : camAimCameraMetadata
{
	bool                                                        ShouldMakeAttachedEntityInvisible; // offset:0x070	type:BOOL.0
	bool                                                        _0x74CD3EAA;                     // offset:0x071	type:BOOL.0
	bool                                                        ShouldDisplayReticule;           // offset:0x072	type:BOOL.0
	bool                                                        _0x42C80F74;                     // offset:0x073	type:BOOL.0
	vec2                                                        ShakeFirstPersonShootingAbilityLimits; // offset:0x074	type:VECTOR2.0
	vec2                                                        ShakeAmplitudeScalingForShootingAbilityLimits; // offset:0x07C	type:VECTOR2.0
	struct camFirstPersonAimCameraMetadataHeadingCorrection     _0xA4666FD4;                     // offset:0x088	type:STRUCT.STRUCTURE
	float                                                       _0x13AD17D9;                     // offset:0x0A0	type:FLOAT.0
	string                                                      _0x3E5C7E72;                     // offset:0x0A4	type:STRING.ATHASHVALUE
};

struct camFirstPersonAimCameraMetadataHeadingCorrection
{
	float                            SpringConstant;                  // offset:0x008	type:FLOAT.0
	float                            _0x5936E83F;                     // offset:0x00C	type:FLOAT.0
	float                            DeltaTolerance;                  // offset:0x010	type:FLOAT.0
};

struct camFirstPersonHeadTrackingAimCameraMetadata : camAimCameraMetadata
{
	bool                             ShouldDisplayReticule;           // offset:0x070	type:BOOL.0
	int                              AttachBoneTag;                   // offset:0x074	type:INT.0
};

struct camFirstPersonPedAimCameraMetadata : camFirstPersonAimCameraMetadata
{
	int                              AttachBoneTag;                   // offset:0x0B0	type:INT.0
	float                            TripleHeadNearClip;              // offset:0x0B4	type:FLOAT.0
	float                            RelativeAttachPositionSmoothRate; // offset:0x0B8	type:FLOAT.0
	bool                             ShouldTorsoIkLimitsOverrideOrbitPitchLimits; // offset:0x0BC	type:BOOL.0
	bool                             _0x6E2437E9;                     // offset:0x0BD	type:BOOL.0
	float                            _0x45F84D8F;                     // offset:0x0C0	type:FLOAT.0
	float                            _0x4ED49975;                     // offset:0x0C4	type:FLOAT.0
	bool                             _0x66B6C5D1;                     // offset:0x0C8	type:BOOL.0
};

struct camFirstPersonShooterCameraMetadata : camFirstPersonAimCameraMetadata
{
	string                                                                          HintHelperRef;                   // offset:0x0B0	type:STRING.ATHASHVALUE
	vec3                                                                            _0xD0A10D24;                     // offset:0x0C0	type:VECTOR3.0
	vec3                                                                            _0x5E61A8FB;                     // offset:0x0D0	type:VECTOR3.0
	vec3                                                                            _0xC1E6F79D;                     // offset:0x0E0	type:VECTOR3.0
	vec3                                                                            _0xFE169693;                     // offset:0x0F0	type:VECTOR3.0
	vec3                                                                            _0x8BEF6EED;                     // offset:0x100	type:VECTOR3.0
	vec3                                                                            _0xCCED513D;                     // offset:0x110	type:VECTOR3.0
	vec3                                                                            _0x19546622;                     // offset:0x120	type:VECTOR3.0
	vec3                                                                            _0x063A0353;                     // offset:0x130	type:VECTOR3.0
	vec3                                                                            _0xF07EE6E5;                     // offset:0x140	type:VECTOR3.0
	vec2                                                                            AttachParentRelativeHeading;     // offset:0x150	type:VECTOR2.0
	vec2                                                                            _0x8D6B02BB;                     // offset:0x158	type:VECTOR2.0
	vec2                                                                            _0x39EA7341;                     // offset:0x160	type:VECTOR2.0
	vec2                                                                            _0x09A8B59A;                     // offset:0x168	type:VECTOR2.0
	vec2                                                                            _0xE1DC1B6F;                     // offset:0x170	type:VECTOR2.0
	vec2                                                                            _0xD108A086;                     // offset:0x178	type:VECTOR2.0
	string                                                                          _0x693E4792;                     // offset:0x180	type:STRING.ATHASHVALUE
	string                                                                          _0x2B11183C;                     // offset:0x184	type:STRING.ATHASHVALUE
	string                                                                          LockOnEnvelopeRef;               // offset:0x188	type:STRING.ATHASHVALUE
	string                                                                          _0xB8E9EB09;                     // offset:0x18C	type:STRING.ATHASHVALUE
	string                                                                          _0x3DEC08BC;                     // offset:0x190	type:STRING.ATHASHVALUE
	string                                                                          _0xDBA1CED0;                     // offset:0x194	type:STRING.ATHASHVALUE
	string                                                                          _0x8DB7FC85;                     // offset:0x198	type:STRING.ATHASHVALUE
	string                                                                          _0xDA700A8D;                     // offset:0x19C	type:STRING.ATHASHVALUE
	string                                                                          DeathShakeRef;                   // offset:0x1A0	type:STRING.ATHASHVALUE
	int                                                                             AttachBoneTag;                   // offset:0x1A4	type:INT.0
	float                                                                           RelativeAttachPositionSmoothRate; // offset:0x1A8	type:FLOAT.0
	struct camFirstPersonShooterCameraMetadataRelativeAttachOrientationSettings     _0xD42E44C9;                     // offset:0x1B0	type:STRUCT.STRUCTURE
	float                                                                           _0xC3CBCC5C;                     // offset:0x220	type:FLOAT.0
	float                                                                           _0x2C46FE76;                     // offset:0x224	type:FLOAT.0
	float                                                                           _0x6B63E329;                     // offset:0x228	type:FLOAT.0
	float                                                                           _0x1F1D79FF;                     // offset:0x22C	type:FLOAT.0
	float                                                                           AimFov;                          // offset:0x230	type:FLOAT.0
	float                                                                           _0xA00A89F6;                     // offset:0x234	type:FLOAT.0
	float                                                                           _0x5C1E3ED4;                     // offset:0x238	type:FLOAT.0
	float                                                                           PhoneFov;                        // offset:0x23C	type:FLOAT.0
	float                                                                           _0x86EC780D;                     // offset:0x240	type:FLOAT.0
	float                                                                           _0x0B4FB087;                     // offset:0x244	type:FLOAT.0
	float                                                                           _0xC2AEB3AA;                     // offset:0x248	type:FLOAT.0
	float                                                                           _0xB9912A42;                     // offset:0x24C	type:FLOAT.0
	float                                                                           _0x12E56E4A;                     // offset:0x250	type:FLOAT.0
	float                                                                           _0x2EFD92BB;                     // offset:0x254	type:FLOAT.0
	float                                                                           _0x70C7612A;                     // offset:0x258	type:FLOAT.0
	float                                                                           _0x89D70817;                     // offset:0x25C	type:FLOAT.0
	float                                                                           _0x62650788;                     // offset:0x260	type:FLOAT.0
	float                                                                           _0xBB48CAF5;                     // offset:0x264	type:FLOAT.0
	float                                                                           _0x64E6855B;                     // offset:0x268	type:FLOAT.0
	float                                                                           _0x5E602E9F;                     // offset:0x26C	type:FLOAT.0
	float                                                                           _0xD26F74B7;                     // offset:0x270	type:FLOAT.0
	float                                                                           _0x5CFD1322;                     // offset:0x274	type:FLOAT.0
	float                                                                           _0x6451418A;                     // offset:0x278	type:FLOAT.0
	float                                                                           _0x461F21E2;                     // offset:0x27C	type:FLOAT.0
	float                                                                           _0xE0334482;                     // offset:0x280	type:FLOAT.0
	float                                                                           _0x18ACECC4;                     // offset:0x284	type:FLOAT.0
	float                                                                           _0x2B9B0027;                     // offset:0x288	type:FLOAT.0
	float                                                                           _0xD1A56A8E;                     // offset:0x28C	type:FLOAT.0
	float                                                                           LadderPitch;                     // offset:0x290	type:FLOAT.0
	float                                                                           _0x04F79C8F;                     // offset:0x294	type:FLOAT.0
	float                                                                           _0xBEECA3B4;                     // offset:0x298	type:FLOAT.0
	float                                                                           _0x2FE43D09;                     // offset:0x29C	type:FLOAT.0
	float                                                                           RecoilShakeAmplitudeScaling;     // offset:0x2A0	type:FLOAT.0
	float                                                                           _0x7E82C793;                     // offset:0x2A4	type:FLOAT.0
	float                                                                           _0x5A4E54DF;                     // offset:0x2A8	type:FLOAT.0
	float                                                                           _0x5A55AE8D;                     // offset:0x2AC	type:FLOAT.0
	float                                                                           _0xD61A79F1;                     // offset:0x2B0	type:FLOAT.0
	bool                                                                            _0x1ABAE02C;                     // offset:0x2B4	type:BOOL.0
	float                                                                           _0x2080D157;                     // offset:0x2B8	type:FLOAT.0
	float                                                                           MinSafeRadiusReductionWithinPedMoverCapsule; // offset:0x2BC	type:FLOAT.0
	float                                                                           _0x5B725E89;                     // offset:0x2C0	type:FLOAT.0
	float                                                                           _0x101A701D;                     // offset:0x2C4	type:FLOAT.0
	float                                                                           _0x7D2C1C2F;                     // offset:0x2C8	type:FLOAT.0
	uint                                                                            _0xD8271A0C;                     // offset:0x2CC	type:UINT.0
	uint                                                                            _0x29BE5A9A;                     // offset:0x2D0	type:UINT.0
	uint                                                                            _0x7554A29D;                     // offset:0x2D4	type:UINT.0
	uint                                                                            _0xA9E63C96;                     // offset:0x2D8	type:UINT.0
	uint                                                                            _0x5FDF091C;                     // offset:0x2DC	type:UINT.0
	uint                                                                            _0x8E48E844;                     // offset:0x2E0	type:UINT.0
	uint                                                                            _0xA38DA911;                     // offset:0x2E4	type:UINT.0
	uint                                                                            _0x9228EBFE;                     // offset:0x2E8	type:UINT.0
	struct camFirstPersonShooterCameraMetadataOrientationSpring                     OrientationSpring;               // offset:0x2F0	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpring                     _0x18C6ABD7;                     // offset:0x318	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpring                     _0xCA86779E;                     // offset:0x340	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpringLite                 _0xCD155E9D;                     // offset:0x368	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpringLite                 _0x9250C6EA;                     // offset:0x378	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpringLite                 _0x74F8C62C;                     // offset:0x388	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpringLite                 _0x694433C8;                     // offset:0x398	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpringLite                 _0x7A6296C7;                     // offset:0x3A8	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpringLite                 _0xB7C739D9;                     // offset:0x3B8	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpringLite                 _0xF20D773E;                     // offset:0x3C8	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpringLite                 _0x9149E8C8;                     // offset:0x3D8	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpringLite                 _0xCA1F1D5D;                     // offset:0x3E8	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpringLite                 _0xA2A22303;                     // offset:0x3F8	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpringLite                 _0xBB1CA103;                     // offset:0x408	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpringLite                 _0xF3A6C085;                     // offset:0x418	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataOrientationSpringLite                 _0x980B81FF;                     // offset:0x428	type:STRUCT.STRUCTURE
	float                                                                           _0x1C579BC0;                     // offset:0x438	type:FLOAT.0
	vec2                                                                            _0x48722455;                     // offset:0x43C	type:VECTOR2.0
	bool                                                                            ShouldTorsoIkLimitsOverrideOrbitPitchLimits; // offset:0x444	type:BOOL.0
	bool                                                                            _0x66B6C5D1;                     // offset:0x445	type:BOOL.0
	string                                                                          _0x15DBC14E;                     // offset:0x448	type:STRING.ATHASHVALUE
	string                                                                          _0x0FC7D665;                     // offset:0x44C	type:STRING.ATHASHVALUE
	string                                                                          _0x5BC52935;                     // offset:0x450	type:STRING.ATHASHVALUE
	float                                                                           _0x5A9152C3;                     // offset:0x454	type:FLOAT.0
	float                                                                           _0xC02F4897;                     // offset:0x458	type:FLOAT.0
	float                                                                           _0x93B76A8B;                     // offset:0x45C	type:FLOAT.0
	float                                                                           _0x8A1C5A31;                     // offset:0x460	type:FLOAT.0
	float                                                                           _0xE8B0F8D7;                     // offset:0x464	type:FLOAT.0
	float                                                                           _0x8710B6E1;                     // offset:0x468	type:FLOAT.0
	float                                                                           _0xDCE5E0D3;                     // offset:0x46C	type:FLOAT.0
	float                                                                           _0xA2425D33;                     // offset:0x470	type:FLOAT.0
	float                                                                           _0x5AF37E7D;                     // offset:0x474	type:FLOAT.0
	float                                                                           _0x993AE821;                     // offset:0x478	type:FLOAT.0
	bool                                                                            _0x5C3E1616;                     // offset:0x47C	type:BOOL.0
	uint                                                                            _0xEBE9A859;                     // offset:0x480	type:UINT.0
	float                                                                           _0x6134E1B8;                     // offset:0x484	type:FLOAT.0
	struct camFirstPersonShooterCameraMetadataStickyAim                             _0xEC640783;                     // offset:0x488	type:STRUCT.STRUCTURE
	struct camFirstPersonShooterCameraMetadataStickyAim                             _0x22E1A2DC;                     // offset:0x4F8	type:STRUCT.STRUCTURE
	bool                                                                            ShouldUseLockOnAiming;           // offset:0x568	type:BOOL.0
	bool                                                                            ShouldValidateLockOnTargetPosition; // offset:0x569	type:BOOL.0
	float                                                                           MinDistanceForLockOn;            // offset:0x56C	type:FLOAT.0
	float                                                                           MinDistanceForFineAimScaling;    // offset:0x570	type:FLOAT.0
	float                                                                           MaxDistanceForFineAimScaling;    // offset:0x574	type:FLOAT.0
	float                                                                           MaxAngleDeltaForLockOnSwitchBlendScaling; // offset:0x578	type:FLOAT.0
	float                                                                           FineAimBlendSpringConstant;      // offset:0x57C	type:FLOAT.0
	float                                                                           FineAimBlendSpringDampingRatio;  // offset:0x580	type:FLOAT.0
	uint                                                                            MinBlendDurationForLockOnSwitch; // offset:0x584	type:UINT.0
	uint                                                                            MaxBlendDurationForLockOnSwitch; // offset:0x588	type:UINT.0
	uint                                                                            MinBlendDurationForInitialLockOn; // offset:0x58C	type:UINT.0
	uint                                                                            MaxBlendDurationForInitialLockOn; // offset:0x590	type:UINT.0
	float                                                                           AttachPedPelvisOffsetSpringConstant; // offset:0x594	type:FLOAT.0
	float                                                                           AttachPedPelvisOffsetSpringDampingRatio; // offset:0x598	type:FLOAT.0
	float                                                                           _0x91E78A82;                     // offset:0x59C	type:FLOAT.0
	float                                                                           _0x84ACA96B;                     // offset:0x5A0	type:FLOAT.0
	float                                                                           _0x001CE6FA;                     // offset:0x5A4	type:FLOAT.0
	float                                                                           _0x2B34E10B;                     // offset:0x5A8	type:FLOAT.0
	vec2                                                                            _0x8FE01736;                     // offset:0x5AC	type:VECTOR2.0
	struct camFirstPersonShooterCameraMetadataCoverSettings                         CoverSettings;                   // offset:0x5B8	type:STRUCT.STRUCTURE
	array<struct camFirstPersonShooterCameraMetadataSprintBreakOutSettings, 2>      _0x77E58DF3;                     // offset:0x630	type:ARRAY.ATFIXEDARRAY
	string                                                                          MotionBlurSettings;              // offset:0x678	type:STRING.ATHASHVALUE
};

struct camFirstPersonShooterCameraMetadataCoverSettings
{
	float                                                       _0xB1149A68;                     // offset:0x008	type:FLOAT.0
	float                                                       _0x0F4D1CB4;                     // offset:0x00C	type:FLOAT.0
	float                                                       _0xA1EE1EBC;                     // offset:0x010	type:FLOAT.0
	float                                                       _0x44BD8A50;                     // offset:0x014	type:FLOAT.0
	float                                                       _0x00AB66C4;                     // offset:0x018	type:FLOAT.0
	float                                                       _0x642FA306;                     // offset:0x01C	type:FLOAT.0
	float                                                       _0x4D291CCD;                     // offset:0x020	type:FLOAT.0
	float                                                       _0xD3850BD5;                     // offset:0x024	type:FLOAT.0
	float                                                       _0xC4A75338;                     // offset:0x028	type:FLOAT.0
	float                                                       _0x59404CEE;                     // offset:0x02C	type:FLOAT.0
	float                                                       _0x2EB336B6;                     // offset:0x030	type:FLOAT.0
	float                                                       _0x9BFC1647;                     // offset:0x034	type:FLOAT.0
	struct camFirstPersonAimCameraMetadataHeadingCorrection     HeadingCorrection;               // offset:0x038	type:STRUCT.STRUCTURE
	int                                                         _0x361643AA;                     // offset:0x050	type:INT.0
	int                                                         _0xF6F439DA;                     // offset:0x054	type:INT.0
	int                                                         _0x0649C066;                     // offset:0x058	type:INT.0
	int                                                         _0x7D195325;                     // offset:0x05C	type:INT.0
	int                                                         _0x740009C2;                     // offset:0x060	type:INT.0
	int                                                         _0xD64DD06B;                     // offset:0x064	type:INT.0
	float                                                       _0x0924414B;                     // offset:0x068	type:FLOAT.0
	float                                                       _0x4BC4FE0B;                     // offset:0x06C	type:FLOAT.0
	uint                                                        _0x2142A418;                     // offset:0x070	type:UINT.0
};

struct camFirstPersonShooterCameraMetadataOrientationSpring
{
	vec2                             HeadingLimits;                   // offset:0x008	type:VECTOR2.0
	vec2                             PitchLimits;                     // offset:0x010	type:VECTOR2.0
	float                            SpringConstant;                  // offset:0x018	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x01C	type:FLOAT.0
	float                            _0x5AE57ACA;                     // offset:0x020	type:FLOAT.0
	float                            _0x4CE407ED;                     // offset:0x024	type:FLOAT.0
};

struct camFirstPersonShooterCameraMetadataOrientationSpringLite
{
	float                            SpringConstant;                  // offset:0x008	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x00C	type:FLOAT.0
};

struct camFirstPersonShooterCameraMetadataRelativeAttachOrientationSettings
{
	float                            _0xDE270733;                     // offset:0x008	type:FLOAT.0
	float                            _0xB9FADA98;                     // offset:0x00C	type:FLOAT.0
	float                            _0x8F8ABEF1;                     // offset:0x010	type:FLOAT.0
	float                            _0x33DA89B4;                     // offset:0x014	type:FLOAT.0
	float                            _0xC7232E0F;                     // offset:0x018	type:FLOAT.0
	float                            _0x82F4F80B;                     // offset:0x01C	type:FLOAT.0
	float                            _0x83087235;                     // offset:0x020	type:FLOAT.0
	bool                             _0xD6FAD2F2;                     // offset:0x024	type:BOOL.0
	float                            _0x62395A58;                     // offset:0x028	type:FLOAT.0
	float                            _0x1D431DD0;                     // offset:0x02C	type:FLOAT.0
	float                            _0x16A08D7D;                     // offset:0x030	type:FLOAT.0
	float                            _0x55F019C0;                     // offset:0x034	type:FLOAT.0
	float                            _0xE4E6AAE4;                     // offset:0x038	type:FLOAT.0
	float                            _0xC9A4E39F;                     // offset:0x03C	type:FLOAT.0
	float                            _0x6CC424D7;                     // offset:0x040	type:FLOAT.0
	float                            _0x4B108D9B;                     // offset:0x044	type:FLOAT.0
	vec3                             _0xB0B31936;                     // offset:0x050	type:VECTOR3.0
	vec3                             _0x916B5733;                     // offset:0x060	type:VECTOR3.0
};

struct camFirstPersonShooterCameraMetadataSprintBreakOutSettings
{
	float                            _0x2C2C1321;                     // offset:0x008	type:FLOAT.0
	float                            _0x0533A9D1;                     // offset:0x00C	type:FLOAT.0
	float                            _0xF9C61BEE;                     // offset:0x010	type:FLOAT.0
	float                            _0x55B90048;                     // offset:0x014	type:FLOAT.0
	float                            _0x6CA93FC7;                     // offset:0x018	type:FLOAT.0
	float                            _0x7FD98CCF;                     // offset:0x01C	type:FLOAT.0
};

struct camFirstPersonShooterCameraMetadataStickyAim
{
	float                            _0x37B018AE;                     // offset:0x008	type:FLOAT.0
	float                            _0x70A89139;                     // offset:0x00C	type:FLOAT.0
	float                            _0xAD8F22A7;                     // offset:0x010	type:FLOAT.0
	float                            _0x459F5084;                     // offset:0x014	type:FLOAT.0
	float                            _0x383C0FE2;                     // offset:0x018	type:FLOAT.0
	float                            _0x916F9515;                     // offset:0x01C	type:FLOAT.0
	float                            _0xD3617F2E;                     // offset:0x020	type:FLOAT.0
	float                            _0xDCB63760;                     // offset:0x024	type:FLOAT.0
	float                            _0x52E30477;                     // offset:0x028	type:FLOAT.0
	float                            _0x745D7AB4;                     // offset:0x02C	type:FLOAT.0
	float                            _0x6ED422E2;                     // offset:0x030	type:FLOAT.0
	float                            _0xD1250BA0;                     // offset:0x034	type:FLOAT.0
	float                            _0xF2B07A27;                     // offset:0x038	type:FLOAT.0
	float                            _0xB3927443;                     // offset:0x03C	type:FLOAT.0
	float                            _0x455DFD0C;                     // offset:0x040	type:FLOAT.0
	float                            _0xBBAD25E0;                     // offset:0x044	type:FLOAT.0
	float                            _0x88C4B724;                     // offset:0x048	type:FLOAT.0
	float                            _0xC2945E8B;                     // offset:0x04C	type:FLOAT.0
	float                            _0x19CB6842;                     // offset:0x050	type:FLOAT.0
	float                            _0xB9E08DEF;                     // offset:0x054	type:FLOAT.0
	float                            _0x78AB83DA;                     // offset:0x058	type:FLOAT.0
	float                            _0x6CBC2E41;                     // offset:0x05C	type:FLOAT.0
	float                            _0x2B072626;                     // offset:0x060	type:FLOAT.0
	float                            _0x35D71999;                     // offset:0x064	type:FLOAT.0
	float                            _0xB251F26C;                     // offset:0x068	type:FLOAT.0
};

struct camFollowCameraMetadata : camThirdPersonCameraMetadata
{
	string                                                     AttachParentInAirEnvelopeRef;    // offset:0x330	type:STRING.ATHASHVALUE
	string                                                     AttachParentUpwardSpeedScalingOnGroundEnvelopeRef; // offset:0x334	type:STRING.ATHASHVALUE
	string                                                     AttachParentUpwardSpeedScalingInAirEnvelopeRef; // offset:0x338	type:STRING.ATHASHVALUE
	string                                                     AimBehaviourEnvelopeRef;         // offset:0x33C	type:STRING.ATHASHVALUE
	string                                                     WaterBobShakeRef;                // offset:0x340	type:STRING.ATHASHVALUE
	bool                                                       ShouldIgnoreAttachParentMovementForOrientation; // offset:0x344	type:BOOL.0
	struct camFollowCameraMetadataPullAroundSettings           PullAroundSettings;              // offset:0x348	type:STRUCT.STRUCTURE
	struct camFollowCameraMetadataPullAroundSettings           PullAroundSettingsForLookBehind; // offset:0x388	type:STRUCT.STRUCTURE
	bool                                                       ShouldConsiderAttachParentLocalXYVelocityForPullAround; // offset:0x3C8	type:BOOL.0
	bool                                                       ShouldConsiderAttachParentForwardSpeedForPullAround; // offset:0x3C9	type:BOOL.0
	bool                                                       ShouldPullAroundToAttachParentFront; // offset:0x3CA	type:BOOL.0
	bool                                                       ShouldPullAroundToBasicAttachParentMatrix; // offset:0x3CB	type:BOOL.0
	bool                                                       ShouldPullAroundUsingSimpleSpringDamping; // offset:0x3CC	type:BOOL.0
	bool                                                       _0x9F3A371E;                     // offset:0x3CD	type:BOOL.0
	float                                                      MinAttachParentApproachSpeedForPitchLock; // offset:0x3D0	type:FLOAT.0
	bool                                                       ShouldLockHeading;               // offset:0x3D4	type:BOOL.0
	float                                                      MaxMoveSpeedForFollowOrientation; // offset:0x3D8	type:FLOAT.0
	float                                                      MaxLookAroundMoveSpeedMultiplier; // offset:0x3DC	type:FLOAT.0
	vec2                                                       SpeedLimitsForVerticalMoveSpeedScaling; // offset:0x3E0	type:VECTOR2.0
	float                                                      VerticalMoveSpeedScaling;        // offset:0x3E8	type:FLOAT.0
	float                                                      VerticalMoveSpeedScalingAtMaxSpeed; // offset:0x3EC	type:FLOAT.0
	float                                                      UpwardMoveSpeedScalingOnGround;  // offset:0x3F0	type:FLOAT.0
	float                                                      UpwardMoveSpeedScalingInAir;     // offset:0x3F4	type:FLOAT.0
	float                                                      MaxMoveOrientationSpeedDuringLookAround; // offset:0x3F8	type:FLOAT.0
	struct camFollowCameraMetadataFollowOrientationConing      FollowOrientationConing;         // offset:0x400	type:STRUCT.STRUCTURE
	struct camFollowCameraMetadataRollSettings                 RollSettings;                    // offset:0x420	type:STRUCT.STRUCTURE
	struct camFollowCameraMetadataHighAltitudeZoomSettings     HighAltitudeZoomSettings;        // offset:0x448	type:STRUCT.STRUCTURE
};

struct camFollowCameraMetadataFollowOrientationConing
{
	float                            MaxAngle;                        // offset:0x008	type:FLOAT.0
	float                            AspectRatio;                     // offset:0x00C	type:FLOAT.0
	float                            HeadingOffset;                   // offset:0x010	type:FLOAT.0
	float                            PitchOffset;                     // offset:0x014	type:FLOAT.0
	float                            SmoothRate;                      // offset:0x018	type:FLOAT.0
};

struct camFollowCameraMetadataHighAltitudeZoomSettings
{
	float                            MinAltitudeDelta;                // offset:0x008	type:FLOAT.0
	float                            MaxAltitudeDelta;                // offset:0x00C	type:FLOAT.0
	float                            SpringConstant;                  // offset:0x010	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x014	type:FLOAT.0
	float                            MaxBaseFovScaling;               // offset:0x018	type:FLOAT.0
};

struct camFollowCameraMetadataPullAroundSettings
{
	bool                             ShouldBlendOutWhenAttachParentIsInAir; // offset:0x008	type:BOOL.0
	bool                             ShouldBlendOutWhenAttachParentIsOnGround; // offset:0x009	type:BOOL.0
	bool                             ShouldBlendWithAttachParentMatrixForRelativeOrbitBlend; // offset:0x00A	type:BOOL.0
	float                            HeadingPullAroundMinMoveSpeed;   // offset:0x00C	type:FLOAT.0
	float                            HeadingPullAroundMaxMoveSpeed;   // offset:0x010	type:FLOAT.0
	float                            HeadingPullAroundSpeedAtMaxMoveSpeed; // offset:0x014	type:FLOAT.0
	float                            HeadingPullAroundErrorScalingBlendLevel; // offset:0x018	type:FLOAT.0
	float                            HeadingPullAroundSpringConstant; // offset:0x01C	type:FLOAT.0
	float                            HeadingPullAroundSpringDampingRatio; // offset:0x020	type:FLOAT.0
	float                            PitchPullAroundMinMoveSpeed;     // offset:0x024	type:FLOAT.0
	float                            PitchPullAroundMaxMoveSpeed;     // offset:0x028	type:FLOAT.0
	float                            PitchPullAroundSpeedAtMaxMoveSpeed; // offset:0x02C	type:FLOAT.0
	float                            PitchPullAroundErrorScalingBlendLevel; // offset:0x030	type:FLOAT.0
	float                            PitchPullAroundSpringConstant;   // offset:0x034	type:FLOAT.0
	float                            PitchPullAroundSpringDampingRatio; // offset:0x038	type:FLOAT.0
};

struct camFollowCameraMetadataRollSettings
{
	bool                             ShouldApplyRoll;                 // offset:0x008	type:BOOL.0
	float                            RollSpringConstant;              // offset:0x00C	type:FLOAT.0
	float                            RollSpringDampRatio;             // offset:0x010	type:FLOAT.0
	float                            MinForwardSpeed;                 // offset:0x014	type:FLOAT.0
	float                            MaxForwardSpeed;                 // offset:0x018	type:FLOAT.0
	float                            RollAngleScale;                  // offset:0x01C	type:FLOAT.0
	float                            MaxRoll;                         // offset:0x020	type:FLOAT.0
};

struct camFollowObjectCameraMetadata : camFollowCameraMetadata
{
};

struct camFollowParachuteCameraMetadata : camFollowObjectCameraMetadata
{
	struct camFollowParachuteCameraMetadataCustomSettings     CustomSettings;                  // offset:0x470	type:STRUCT.STRUCTURE
};

struct camFollowParachuteCameraMetadataCustomSettings
{
	string                           _0xD0B59A77;                     // offset:0x008	type:STRING.ATHASHVALUE
	float                            _0x5A4BB969;                     // offset:0x00C	type:FLOAT.0
	string                           DeployShakeRef;                  // offset:0x010	type:STRING.ATHASHVALUE
};

struct camFollowPedCameraMetadata : camFollowCameraMetadata
{
	bool                                                                           _0x705C17B8;                     // offset:0x470	type:BOOL.0
	bool                                                                           _0x4852DBE0;                     // offset:0x471	type:BOOL.0
	float                                                                          _0x1C3CB00F;                     // offset:0x474	type:FLOAT.0
	string                                                                         RagdollBlendEnvelopeRef;         // offset:0x478	type:STRING.ATHASHVALUE
	string                                                                         _0xD524F18E;                     // offset:0x47C	type:STRING.ATHASHVALUE
	uint                                                                           _0x889B0C09;                     // offset:0x480	type:UINT.0
	float                                                                          _0x1B62F2CC;                     // offset:0x484	type:FLOAT.0
	float                                                                          _0xF3F8FA0A;                     // offset:0x488	type:FLOAT.0
	float                                                                          _0x3D48A56C;                     // offset:0x48C	type:FLOAT.0
	vec2                                                                           _0x99AC880F;                     // offset:0x490	type:VECTOR2.0
	string                                                                         _0x9020F726;                     // offset:0x498	type:STRING.ATHASHVALUE
	bool                                                                           _0x11E2C655;                     // offset:0x49C	type:BOOL.0
	array<struct camFollowPedCameraMetadataCustomViewModeSettings, 5>              _0x05B0AD9D;                     // offset:0x4A0	type:ARRAY.MEMBER
	array<struct camFollowPedCameraMetadataCustomViewModeSettings, 5>              _0x2C3023A5;                     // offset:0x518	type:ARRAY.MEMBER
	bool                                                                           _0x5CDB4256;                     // offset:0x590	type:BOOL.0
	array<struct camFollowPedCameraMetadataCustomViewModeSettings, 5>              _0x5FCD0641;                     // offset:0x598	type:ARRAY.MEMBER
	array<struct camFollowPedCameraMetadataCustomViewModeSettings, 5>              _0x1BE0DD1B;                     // offset:0x610	type:ARRAY.MEMBER
	string                                                                         _0xFDFD8F76;                     // offset:0x688	type:STRING.ATHASHVALUE
	float                                                                          _0x8EE74477;                     // offset:0x68C	type:FLOAT.0
	float                                                                          _0x34D317DA;                     // offset:0x690	type:FLOAT.0
	float                                                                          _0xE90D756C;                     // offset:0x694	type:FLOAT.0
	float                                                                          _0xFF3AB73C;                     // offset:0x698	type:FLOAT.0
	float                                                                          _0x544FC2BA;                     // offset:0x69C	type:FLOAT.0
	float                                                                          _0x0DEA1FEA;                     // offset:0x6A0	type:FLOAT.0
	float                                                                          _0x307F6416;                     // offset:0x6A4	type:FLOAT.0
	float                                                                          _0x3341F1F3;                     // offset:0x6A8	type:FLOAT.0
	struct camFollowPedCameraMetadataAssistedMovementAlignment                     _0x8A7547E4;                     // offset:0x6B0	type:STRUCT.STRUCTURE
	struct camFollowPedCameraMetadataLadderAlignment                               LadderAlignment;                 // offset:0x708	type:STRUCT.STRUCTURE
	struct camFollowPedCameraMetadataRappellingAlignment                           RappellingAlignment;             // offset:0x7C0	type:STRUCT.STRUCTURE
	bool                                                                           _0x0CDE1435;                     // offset:0x7D0	type:BOOL.0
	struct camFollowCameraMetadataPullAroundSettings                               _0xF8068978;                     // offset:0x7D8	type:STRUCT.STRUCTURE
	vec2                                                                           _0xA33BD505;                     // offset:0x818	type:VECTOR2.0
	vec2                                                                           _0xCB4A5556;                     // offset:0x820	type:VECTOR2.0
	bool                                                                           _0x1F84E4E9;                     // offset:0x828	type:BOOL.0
	float                                                                          _0xE5F2F235;                     // offset:0x82C	type:FLOAT.0
	float                                                                          _0xA54B4EC2;                     // offset:0x830	type:FLOAT.0
	bool                                                                           _0xD6247E3F;                     // offset:0x834	type:BOOL.0
	vec2                                                                           _0xE8360A4D;                     // offset:0x838	type:VECTOR2.0
	struct camFollowPedCameraMetadataOrbitPitchLimitsForOverheadCollision          _0x8BC35BD9;                     // offset:0x840	type:STRUCT.STRUCTURE
	float                                                                          _0xB87E2D2E;                     // offset:0x860	type:FLOAT.0
	float                                                                          VehicleEntryExitPitchLevelSmoothRate; // offset:0x864	type:FLOAT.0
	float                                                                          _0x7B4B709C;                     // offset:0x868	type:FLOAT.0
	struct camFollowPedCameraMetadataRunningShakeSettings                          _0x654D84A9;                     // offset:0x870	type:STRUCT.STRUCTURE
	struct camFollowPedCameraMetadataSwimmingShakeSettings                         _0x1DB79BBD;                     // offset:0x890	type:STRUCT.STRUCTURE
	struct camFollowPedCameraMetadataDivingShakeSettings                           _0x8E320EF5;                     // offset:0x8B0	type:STRUCT.STRUCTURE
	struct camFollowPedCameraMetadataHighFallShakeSettings                         _0x0824E384;                     // offset:0x8D0	type:STRUCT.STRUCTURE
	struct camFollowPedCameraMetadataPushBeyondNearbyVehiclesInRagdollSettings     _0x0277430F;                     // offset:0x8E8	type:STRUCT.STRUCTURE
};

struct camFollowPedCameraMetadataAssistedMovementAlignment
{
	bool                                                 ShouldAlign;                     // offset:0x008	type:BOOL.0
	string                                               AlignmentEnvelopeRef;            // offset:0x00C	type:STRING.ATHASHVALUE
	float                                                _0xBB64228B;                     // offset:0x010	type:FLOAT.0
	float                                                _0x9B1C1553;                     // offset:0x014	type:FLOAT.0
	struct camFollowCameraMetadataPullAroundSettings     PullAroundSettings;              // offset:0x018	type:STRUCT.STRUCTURE
};

struct camFollowPedCameraMetadataCustomViewModeSettings
{
	float                            _0xF006ECCA;                     // offset:0x008	type:FLOAT.0
	float                            ScreenRatioForMinFootRoom;       // offset:0x00C	type:FLOAT.0
	float                            ScreenRatioForMaxFootRoom;       // offset:0x010	type:FLOAT.0
	float                            BaseOrbitPitchOffset;            // offset:0x014	type:FLOAT.0
};

struct camFollowPedCameraMetadataDivingShakeSettings
{
	string                           ShakeRef;                        // offset:0x008	type:STRING.ATHASHVALUE
	float                            MinHeight;                       // offset:0x00C	type:FLOAT.0
	float                            MaxHeight;                       // offset:0x010	type:FLOAT.0
	float                            MinAmplitude;                    // offset:0x014	type:FLOAT.0
	float                            MaxAmplitude;                    // offset:0x018	type:FLOAT.0
};

struct camFollowPedCameraMetadataHighFallShakeSettings
{
	string                           ShakeRef;                        // offset:0x008	type:STRING.ATHASHVALUE
	float                            MinSpeed;                        // offset:0x00C	type:FLOAT.0
	float                            MaxSpeed;                        // offset:0x010	type:FLOAT.0
	float                            MaxAmplitude;                    // offset:0x014	type:FLOAT.0
};

struct camFollowPedCameraMetadataLadderAlignment
{
	bool                                                 ShouldAlign;                     // offset:0x008	type:BOOL.0
	string                                               AlignmentEnvelopeRef;            // offset:0x00C	type:STRING.ATHASHVALUE
	vec2                                                 RelativeOrbitHeadingLimits;      // offset:0x010	type:VECTOR2.0
	vec2                                                 OrbitPitchLimits;                // offset:0x018	type:VECTOR2.0
	float                                                _0x0F914BA7;                     // offset:0x020	type:FLOAT.0
	float                                                VerticalMoveSpeedScaling;        // offset:0x024	type:FLOAT.0
	float                                                _0x27B92EC2;                     // offset:0x028	type:FLOAT.0
	uint                                                 _0xF6414178;                     // offset:0x02C	type:UINT.0
	float                                                _0xED41E0F9;                     // offset:0x030	type:FLOAT.0
	struct camFollowCameraMetadataPullAroundSettings     PullAroundSettings;              // offset:0x038	type:STRUCT.STRUCTURE
	struct camFollowCameraMetadataPullAroundSettings     _0x2C07845D;                     // offset:0x078	type:STRUCT.STRUCTURE
};

struct camFollowPedCameraMetadataOrbitPitchLimitsForOverheadCollision
{
	vec2                             _0x6811FA9A;                     // offset:0x008	type:VECTOR2.0
	float                            _0x0F440A09;                     // offset:0x010	type:FLOAT.0
	float                            SpringConstant;                  // offset:0x014	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x018	type:FLOAT.0
};

struct camFollowPedCameraMetadataPushBeyondNearbyVehiclesInRagdollSettings
{
	uint                             MaxDurationToTrackVehicles;      // offset:0x008	type:UINT.0
	float                            _0x451C5FEB;                     // offset:0x00C	type:FLOAT.0
	float                            _0xADA5B410;                     // offset:0x010	type:FLOAT.0
	float                            _0x2CDF0B70;                     // offset:0x014	type:FLOAT.0
	float                            _0x42798EE5;                     // offset:0x018	type:FLOAT.0
	float                            DetectionRadius;                 // offset:0x01C	type:FLOAT.0
	float                            DistanceToTestDownForVehiclesToReject; // offset:0x020	type:FLOAT.0
};

struct camFollowPedCameraMetadataRappellingAlignment
{
	bool                             ShouldAlign;                     // offset:0x008	type:BOOL.0
	float                            _0x0F914BA7;                     // offset:0x00C	type:FLOAT.0
};

struct camFollowPedCameraMetadataRunningShakeSettings
{
	string                           ShakeRef;                        // offset:0x008	type:STRING.ATHASHVALUE
	float                            MinAmplitude;                    // offset:0x00C	type:FLOAT.0
	float                            MaxAmplitude;                    // offset:0x010	type:FLOAT.0
	float                            _0x1D476472;                     // offset:0x014	type:FLOAT.0
	float                            _0xA0FDCCF7;                     // offset:0x018	type:FLOAT.0
};

struct camFollowPedCameraMetadataSwimmingShakeSettings
{
	string                           ShakeRef;                        // offset:0x008	type:STRING.ATHASHVALUE
	float                            MinAmplitude;                    // offset:0x00C	type:FLOAT.0
	float                            MaxAmplitude;                    // offset:0x010	type:FLOAT.0
	float                            _0x1D476472;                     // offset:0x014	type:FLOAT.0
	float                            _0x5610E4A3;                     // offset:0x018	type:FLOAT.0
	float                            _0x782074AF;                     // offset:0x01C	type:FLOAT.0
};

struct camFollowVehicleCameraMetadata : camFollowCameraMetadata
{
	struct camFollowVehicleCameraMetadataHandBrakeSwingSettings                 HandBrakeSwingSettings;          // offset:0x470	type:STRUCT.STRUCTURE
	struct camFollowVehicleCameraMetadataDuckUnderOverheadCollisionSettings     DuckUnderOverheadCollisionSettings; // offset:0x490	type:STRUCT.STRUCTURE
	struct camFollowVehicleCameraMetadataHighSpeedZoomSettings                  HighSpeedZoomSettings;           // offset:0x4C8	type:STRUCT.STRUCTURE
	struct camFollowVehicleCameraMetadataHighSpeedShakeSettings                 HighSpeedShakeSettings;          // offset:0x4E8	type:STRUCT.STRUCTURE
	struct camFollowVehicleCameraMetadataWaterEntryShakeSettings                WaterEntryShakeSettings;         // offset:0x500	type:STRUCT.STRUCTURE
	struct camFollowVehicleCameraMetadataVerticalFlightModeSettings             VerticalFlightModeSettings;      // offset:0x520	type:STRUCT.STRUCTURE
	struct camVehicleCustomSettingsMetadataDoorAlignmentSettings                DoorAlignmentSettings;           // offset:0x530	type:STRUCT.STRUCTURE
	float                                                                       VehicleEntryExitPitchLevelSmoothRate; // offset:0x558	type:FLOAT.0
	float                                                                       ExtraOrbitPitchOffsetForHighAngleMode; // offset:0x55C	type:FLOAT.0
	float                                                                       ExtraOrbitPitchOffsetForThirdPersonFarViewMode; // offset:0x560	type:FLOAT.0
	bool                                                                        ShouldForceCutToOrbitDistanceLimitsForThirdPersonFarViewMode; // offset:0x564	type:BOOL.0
	string                                                                      ThirdPersonVehicleAimCameraRef;  // offset:0x568	type:STRING.ATHASHVALUE
	bool                                                                        _0xF2E61275;                     // offset:0x56C	type:BOOL.0
	string                                                                      _0x9C7B7565;                     // offset:0x570	type:STRING.ATHASHVALUE
	vec2                                                                        _0xC78A2A89;                     // offset:0x574	type:VECTOR2.0
};

struct camFollowVehicleCameraMetadataDuckUnderOverheadCollisionSettings
{
	string                                                                                     EnvelopeRef;                     // offset:0x008	type:STRING.ATHASHVALUE
	bool                                                                                       ShouldDuck;                      // offset:0x00C	type:BOOL.0
	float                                                                                      OrbitPitchOffsetWhenFullyDucked; // offset:0x010	type:FLOAT.0
	float                                                                                      MaxDistanceToPersist;            // offset:0x014	type:FLOAT.0
	float                                                                                      SpringConstant;                  // offset:0x018	type:FLOAT.0
	struct camFollowVehicleCameraMetadataDuckUnderOverheadCollisionSettingsCapsuleSettings     CapsuleSettings;                 // offset:0x020	type:STRUCT.STRUCTURE
};

struct camFollowVehicleCameraMetadataDuckUnderOverheadCollisionSettingsCapsuleSettings
{
	uint                             NumTests;                        // offset:0x008	type:UINT.0
	float                            LengthScaling;                   // offset:0x00C	type:FLOAT.0
	vec2                             OffsetLimits;                    // offset:0x010	type:VECTOR2.0
};

struct camFollowVehicleCameraMetadataHandBrakeSwingSettings
{
	string                           HandBrakeInputEnvelopeRef;       // offset:0x008	type:STRING.ATHASHVALUE
	float                            SpringConstant;                  // offset:0x00C	type:FLOAT.0
	float                            MinLateralSkidSpeed;             // offset:0x010	type:FLOAT.0
	float                            MaxLateralSkidSpeed;             // offset:0x014	type:FLOAT.0
	float                            SwingSpeedAtMaxSkidSpeed;        // offset:0x018	type:FLOAT.0
};

struct camFollowVehicleCameraMetadataHighSpeedShakeSettings
{
	string                           ShakeRef;                        // offset:0x008	type:STRING.ATHASHVALUE
	float                            MinForwardSpeed;                 // offset:0x00C	type:FLOAT.0
	float                            MaxForwardSpeed;                 // offset:0x010	type:FLOAT.0
	float                            SpringConstant;                  // offset:0x014	type:FLOAT.0
};

struct camFollowVehicleCameraMetadataHighSpeedZoomSettings
{
	float                            MinForwardSpeed;                 // offset:0x008	type:FLOAT.0
	float                            MaxForwardSpeed;                 // offset:0x00C	type:FLOAT.0
	float                            SpringConstant;                  // offset:0x010	type:FLOAT.0
	float                            MaxBaseFovScaling;               // offset:0x014	type:FLOAT.0
	float                            CutsceneBlendSpringConstant;     // offset:0x018	type:FLOAT.0
	float                            CutsceneBlendSpringDampingRatio; // offset:0x01C	type:FLOAT.0
};

struct camFollowVehicleCameraMetadataVerticalFlightModeSettings
{
	vec2                             OrbitPitchLimits;                // offset:0x008	type:VECTOR2.0
};

struct camFollowVehicleCameraMetadataWaterEntryShakeSettings
{
	string                           ShakeRef;                        // offset:0x008	type:STRING.ATHASHVALUE
	uint                             MaxShakeInstances;               // offset:0x00C	type:UINT.0
	vec2                             DownwardSpeedLimits;             // offset:0x010	type:VECTOR2.0
	vec2                             AmplitudeLimits;                 // offset:0x018	type:VECTOR2.0
};

struct camFreeCameraMetadata : camBaseCameraMetadata
{
	vec3                             StartPosition;                   // offset:0x020	type:VECTOR3.0
	float                            ForwardAcceleration;             // offset:0x030	type:FLOAT.0
	float                            StrafeAcceleration;              // offset:0x034	type:FLOAT.0
	float                            VerticalAcceleration;            // offset:0x038	type:FLOAT.0
	float                            _0x19ABF108;                     // offset:0x03C	type:FLOAT.0
	float                            HeadingAcceleration;             // offset:0x040	type:FLOAT.0
	float                            PitchAcceleration;               // offset:0x044	type:FLOAT.0
	float                            RollAcceleration;                // offset:0x048	type:FLOAT.0
	float                            _0x3B1D1624;                     // offset:0x04C	type:FLOAT.0
	float                            FovAcceleration;                 // offset:0x050	type:FLOAT.0
	float                            _0x87AFAFDB;                     // offset:0x054	type:FLOAT.0
	float                            MaxPitch;                        // offset:0x058	type:FLOAT.0
	float                            _0x5246DCF8;                     // offset:0x05C	type:FLOAT.0
	float                            _0xC508AEF8;                     // offset:0x060	type:FLOAT.0
	uint                             _0xD8742DE7;                     // offset:0x064	type:UINT.0
};

struct camGameplayDirectorMetadata : camBaseDirectorMetadata
{
	string                                                             _0x7C8E2444;                     // offset:0x018	type:STRING.ATHASHVALUE
	string                                                             _0x1EF9BFC3;                     // offset:0x01C	type:STRING.ATHASHVALUE
	string                                                             _0xF5AA52D3;                     // offset:0x020	type:STRING.ATHASHVALUE
	string                                                             _0xC1F352C8;                     // offset:0x024	type:STRING.ATHASHVALUE
	string                                                             _0xC762C0DD;                     // offset:0x028	type:STRING.ATHASHVALUE
	string                                                             _0x8CF9AB10;                     // offset:0x02C	type:STRING.ATHASHVALUE
	string                                                             ThirdPersonVehicleAimCameraRef;  // offset:0x030	type:STRING.ATHASHVALUE
	string                                                             _0xDE9C6B6F;                     // offset:0x034	type:STRING.ATHASHVALUE
	string                                                             _0xAF0632A6;                     // offset:0x038	type:STRING.ATHASHVALUE
	string                                                             _0x237D12AB;                     // offset:0x03C	type:STRING.ATHASHVALUE
	string                                                             _0xFE5493F3;                     // offset:0x040	type:STRING.ATHASHVALUE
	string                                                             _0x3FCDA78D;                     // offset:0x044	type:STRING.ATHASHVALUE
	string                                                             _0x31F42BBC;                     // offset:0x048	type:STRING.ATHASHVALUE
	string                                                             _0x4AA65879;                     // offset:0x04C	type:STRING.ATHASHVALUE
	string                                                             _0x930305CE;                     // offset:0x050	type:STRING.ATHASHVALUE
	string                                                             _0xE53C1267;                     // offset:0x054	type:STRING.ATHASHVALUE
	string                                                             _0xC64DA51F;                     // offset:0x058	type:STRING.ATHASHVALUE
	string                                                             _0x164B812C;                     // offset:0x05C	type:STRING.ATHASHVALUE
	string                                                             _0x333899A9;                     // offset:0x060	type:STRING.ATHASHVALUE
	string                                                             _0x528B8EBF;                     // offset:0x064	type:STRING.ATHASHVALUE
	string                                                             _0x17C877CD;                     // offset:0x068	type:STRING.ATHASHVALUE
	string                                                             _0xEA3D9AA3;                     // offset:0x06C	type:STRING.ATHASHVALUE
	string                                                             _0x7BE3F649;                     // offset:0x070	type:STRING.ATHASHVALUE
	string                                                             _0x83D85C23;                     // offset:0x074	type:STRING.ATHASHVALUE
	string                                                             _0x6DA22CDB;                     // offset:0x078	type:STRING.ATHASHVALUE
	string                                                             _0x45A3DDB1;                     // offset:0x07C	type:STRING.ATHASHVALUE
	string                                                             _0xC5AD968D;                     // offset:0x080	type:STRING.ATHASHVALUE
	string                                                             _0xA5464BDD;                     // offset:0x084	type:STRING.ATHASHVALUE
	string                                                             _0x2DAADF5E;                     // offset:0x088	type:STRING.ATHASHVALUE
	string                                                             _0x97215437;                     // offset:0x08C	type:STRING.ATHASHVALUE
	string                                                             _0x099790B7;                     // offset:0x090	type:STRING.ATHASHVALUE
	string                                                             _0x1C82589B;                     // offset:0x094	type:STRING.ATHASHVALUE
	string                                                             _0xB290977E;                     // offset:0x098	type:STRING.ATHASHVALUE
	string                                                             _0x9BE2ACFD;                     // offset:0x09C	type:STRING.ATHASHVALUE
	uint                                                               _0x2E166A96;                     // offset:0x0A0	type:UINT.0
	float                                                              _0x3E18B4D8;                     // offset:0x0A4	type:FLOAT.0
	float                                                              _0x7922E944;                     // offset:0x0A8	type:FLOAT.0
	float                                                              _0x563AD63D;                     // offset:0x0AC	type:FLOAT.0
	float                                                              _0xED9FA606;                     // offset:0x0B0	type:FLOAT.0
	float                                                              _0x1E482238;                     // offset:0x0B4	type:FLOAT.0
	float                                                              _0xB1627A44;                     // offset:0x0B8	type:FLOAT.0
	float                                                              _0xCA74A7E8;                     // offset:0x0BC	type:FLOAT.0
	float                                                              _0xC047CB84;                     // offset:0x0C0	type:FLOAT.0
	float                                                              _0x50962736;                     // offset:0x0C4	type:FLOAT.0
	float                                                              _0x045EFCB1;                     // offset:0x0C8	type:FLOAT.0
	float                                                              _0x5456F923;                     // offset:0x0CC	type:FLOAT.0
	float                                                              _0xD515FB36;                     // offset:0x0D0	type:FLOAT.0
	float                                                              _0x3B246C70;                     // offset:0x0D4	type:FLOAT.0
	float                                                              _0x800C09AD;                     // offset:0x0D8	type:FLOAT.0
	uint                                                               _0x7054DA17;                     // offset:0x0DC	type:UINT.0
	vec2                                                               _0x320609CC;                     // offset:0x0E0	type:VECTOR2.0
	vec2                                                               _0xE94D151B;                     // offset:0x0E8	type:VECTOR2.0
	vec2                                                               _0x73578C35;                     // offset:0x0F0	type:VECTOR2.0
	vec2                                                               _0xCE8AE1A4;                     // offset:0x0F8	type:VECTOR2.0
	uint                                                               _0xA3A62695;                     // offset:0x100	type:UINT.0
	uint                                                               _0x012587F3;                     // offset:0x104	type:UINT.0
	float                                                              _0xC98894ED;                     // offset:0x108	type:FLOAT.0
	float                                                              _0xFEC1CA4A;                     // offset:0x10C	type:FLOAT.0
	uint                                                               _0xC88A1130;                     // offset:0x110	type:UINT.0
	float                                                              _0x21BC2D3F;                     // offset:0x114	type:FLOAT.0
	float                                                              _0x1BDF2559;                     // offset:0x118	type:FLOAT.0
	uint                                                               _0xBD8FF46E;                     // offset:0x11C	type:UINT.0
	uint                                                               _0x3720ADC5;                     // offset:0x120	type:UINT.0
	float                                                              _0x6F768DD8;                     // offset:0x124	type:FLOAT.0
	array<struct camGameplayDirectorMetadataVehicleCustomSettings>     VehicleCustomSettingsList;       // offset:0x128	type:ARRAY.ATARRAY
	float                                                              _0xD42FDA76;                     // offset:0x138	type:FLOAT.0
	float                                                              _0x0F7604F3;                     // offset:0x13C	type:FLOAT.0
	float                                                              _0x5AD573AB;                     // offset:0x140	type:FLOAT.0
	uint                                                               _0xDCCA3EC7;                     // offset:0x144	type:UINT.0
	uint                                                               _0x824A4BFD;                     // offset:0x148	type:UINT.0
	uint                                                               _0xA4E77069;                     // offset:0x14C	type:UINT.0
	uint                                                               _0xF3B3F821;                     // offset:0x150	type:UINT.0
	uint                                                               _0xAF490080;                     // offset:0x154	type:UINT.0
	uint                                                               _0x3732BFAE;                     // offset:0x158	type:UINT.0
	uint                                                               _0xDC737002;                     // offset:0x15C	type:UINT.0
	uint                                                               _0x16651C70;                     // offset:0x160	type:UINT.0
	uint                                                               _0xF2AC4070;                     // offset:0x164	type:UINT.0
	uint                                                               _0x314B3234;                     // offset:0x168	type:UINT.0
	uint                                                               _0xF4368926;                     // offset:0x16C	type:UINT.0
	uint                                                               _0xF9467FA5;                     // offset:0x170	type:UINT.0
	float                                                              _0xEC1DAC4E;                     // offset:0x174	type:FLOAT.0
	float                                                              _0x5F308511;                     // offset:0x178	type:FLOAT.0
	bool                                                               _0x882B05AA;                     // offset:0x17C	type:BOOL.0
	float                                                              _0xFB60C0F9;                     // offset:0x180	type:FLOAT.0
	string                                                             _0x25F07F8E;                     // offset:0x184	type:STRING.ATHASHVALUE
	uint                                                               _0x3AAC6F2D;                     // offset:0x188	type:UINT.0
	uint                                                               _0x90E51E88;                     // offset:0x18C	type:UINT.0
	vec2                                                               _0x46F68A6D;                     // offset:0x190	type:VECTOR2.0
	vec2                                                               _0xBE5D75CC;                     // offset:0x198	type:VECTOR2.0
	vec2                                                               _0xD0726624;                     // offset:0x1A0	type:VECTOR2.0
	vec2                                                               _0x0C1326BB;                     // offset:0x1A8	type:VECTOR2.0
	vec2                                                               _0x5F6058FF;                     // offset:0x1B0	type:VECTOR2.0
	vec2                                                               _0x12876A11;                     // offset:0x1B8	type:VECTOR2.0
	float                                                              _0x36423BD7;                     // offset:0x1C0	type:FLOAT.0
	float                                                              _0x5A7F0041;                     // offset:0x1C4	type:FLOAT.0
	float                                                              _0xABBCCCCD;                     // offset:0x1C8	type:FLOAT.0
	float                                                              _0x4C79B9E0;                     // offset:0x1CC	type:FLOAT.0
	uint                                                               _0x3C6A1311;                     // offset:0x1D0	type:UINT.0
	uint                                                               _0x591A06F6;                     // offset:0x1D4	type:UINT.0
	string                                                             _0xDA700A8D;                     // offset:0x1D8	type:STRING.ATHASHVALUE
	float                                                              _0x6F49F39C;                     // offset:0x1DC	type:FLOAT.0
	float                                                              _0x1963BF62;                     // offset:0x1E0	type:FLOAT.0
	float                                                              _0x7BF3FAE1;                     // offset:0x1E4	type:FLOAT.0
	string                                                             _0x562258DE;                     // offset:0x1E8	type:STRING.ATHASHVALUE
	float                                                              _0x3D5013AB;                     // offset:0x1EC	type:FLOAT.0
	float                                                              _0x82D8AA24;                     // offset:0x1F0	type:FLOAT.0
	float                                                              _0x5E81A79D;                     // offset:0x1F4	type:FLOAT.0
	float                                                              _0xD06070D2;                     // offset:0x1F8	type:FLOAT.0
	float                                                              _0xC31FA4B9;                     // offset:0x1FC	type:FLOAT.0
	float                                                              _0xE613D849;                     // offset:0x200	type:FLOAT.0
	float                                                              _0x8362E561;                     // offset:0x204	type:FLOAT.0
	float                                                              _0x06A61062;                     // offset:0x208	type:FLOAT.0
	float                                                              _0x8A68DD0B;                     // offset:0x20C	type:FLOAT.0
	float                                                              _0x264C5710;                     // offset:0x210	type:FLOAT.0
	float                                                              _0x799EC202;                     // offset:0x214	type:FLOAT.0
	float                                                              _0x375A576E;                     // offset:0x218	type:FLOAT.0
	uint                                                               _0xBFB84FD4;                     // offset:0x21C	type:UINT.0
	uint                                                               _0xCE952019;                     // offset:0x220	type:UINT.0
	uint                                                               _0xCA1A28DB;                     // offset:0x224	type:UINT.0
	uint                                                               _0x9FED07C5;                     // offset:0x228	type:UINT.0
	uint                                                               _0xBCF2AD94;                     // offset:0x22C	type:UINT.0
	uint                                                               _0xFF8B8345;                     // offset:0x230	type:UINT.0
	uint                                                               _0x06DBA15A;                     // offset:0x234	type:UINT.0
	uint                                                               _0x6DDCAE16;                     // offset:0x238	type:UINT.0
	string                                                             _0xBAD19832;                     // offset:0x23C	type:STRING.ATHASHVALUE
	string                                                             _0x5D424CD0;                     // offset:0x240	type:STRING.ATHASHVALUE
	struct camGameplayDirectorMetadataExplosionShakeSettings           _0x31B735C8;                     // offset:0x248	type:STRUCT.STRUCTURE
};

struct camGameplayDirectorMetadataExplosionShakeSettings
{
	string                           ShakeRef;                        // offset:0x008	type:STRING.ATHASHVALUE
	vec2                             DistanceLimits;                  // offset:0x00C	type:VECTOR2.0
	uint                             MaxInstances;                    // offset:0x014	type:UINT.0
	uint                             RumbleDuration;                  // offset:0x018	type:UINT.0
	uint                             _0xB6FF7D13;                     // offset:0x01C	type:UINT.0
	float                            _0x8B566755;                     // offset:0x020	type:FLOAT.0
	float                            _0x309ECB41;                     // offset:0x024	type:FLOAT.0
	float                            _0x7652927F;                     // offset:0x028	type:FLOAT.0
	float                            _0xEABE7731;                     // offset:0x02C	type:FLOAT.0
	float                            _0x38B2CBFD;                     // offset:0x030	type:FLOAT.0
};

struct camGameplayDirectorMetadataVehicleCustomSettings
{
	string                           ModelName;                       // offset:0x008	type:STRING.ATHASHVALUE
	string                           SettingsRef;                     // offset:0x00C	type:STRING.ATHASHVALUE
};

struct camHintHelperMetadata : camBaseObjectMetadata
{
	float                                                 FovScalar;                       // offset:0x010	type:FLOAT.0
	float                                                 _0x63C847EA;                     // offset:0x014	type:FLOAT.0
	float                                                 BaseOrbitPitchOffset;            // offset:0x018	type:FLOAT.0
	vec2                                                  OrbitPitchLimits;                // offset:0x01C	type:VECTOR2.0
	float                                                 _0x04035E2E;                     // offset:0x024	type:FLOAT.0
	struct camHintHelperMetadataPivotPositionAdditive     _0xA41A3772;                     // offset:0x028	type:STRUCT.STRUCTURE
	string                                                _0xB5E62F4A;                     // offset:0x040	type:STRING.ATHASHVALUE
	string                                                _0x17CCE7BE;                     // offset:0x044	type:STRING.ATHASHVALUE
	bool                                                  _0x12D167D1;                     // offset:0x048	type:BOOL.0
	bool                                                  _0xCBF3D6F1;                     // offset:0x049	type:BOOL.0
	float                                                 MinDistanceForLockOn;            // offset:0x04C	type:FLOAT.0
	bool                                                  _0x459D0FB0;                     // offset:0x050	type:BOOL.0
};

struct camHintHelperMetadataPivotPositionAdditive
{
	float                            _0xD1AA043A;                     // offset:0x008	type:FLOAT.0
	float                            _0x816C8B98;                     // offset:0x00C	type:FLOAT.0
	float                            _0xE2B7C6EE;                     // offset:0x010	type:FLOAT.0
	float                            _0x0B28CE6F;                     // offset:0x014	type:FLOAT.0
};

struct camInconsistentBehaviourZoomHelperAirborneSettings : camInconsistentBehaviourZoomHelperBaseSettings
{
	uint                             _0x19529CBB;                     // offset:0x020	type:UINT.0
};

struct camInconsistentBehaviourZoomHelperBaseSettings
{
	bool                             ShouldDetect;                    // offset:0x008	type:BOOL.0
	uint                             ReactionTime;                    // offset:0x00C	type:UINT.0
	uint                             _0x3AFBC0C8;                     // offset:0x010	type:UINT.0
	uint                             _0x84B0A47A;                     // offset:0x014	type:UINT.0
	float                            _0x9F00ADE4;                     // offset:0x018	type:FLOAT.0
};

struct camInconsistentBehaviourZoomHelperDetectFastCameraTurnSettings : camInconsistentBehaviourZoomHelperBaseSettings
{
	float                            _0x5A3DA545;                     // offset:0x020	type:FLOAT.0
	float                            _0x19369808;                     // offset:0x024	type:FLOAT.0
};

struct camInconsistentBehaviourZoomHelperDetectSuddenMovementSettings : camInconsistentBehaviourZoomHelperBaseSettings
{
	float                            _0xA7036825;                     // offset:0x020	type:FLOAT.0
};

struct camInconsistentBehaviourZoomHelperLosSettings : camInconsistentBehaviourZoomHelperBaseSettings
{
	uint                             _0x7258D2DB;                     // offset:0x020	type:UINT.0
};

struct camInconsistentBehaviourZoomHelperMetadata : camBaseObjectMetadata
{
	float                                                                     _0xA9013E00;                     // offset:0x010	type:FLOAT.0
	float                                                                     MaxFov;                          // offset:0x014	type:FLOAT.0
	struct camInconsistentBehaviourZoomHelperDetectSuddenMovementSettings     _0x0B779F71;                     // offset:0x018	type:STRUCT.STRUCTURE
	struct camInconsistentBehaviourZoomHelperDetectFastCameraTurnSettings     _0xBAFB1464;                     // offset:0x040	type:STRUCT.STRUCTURE
	struct camInconsistentBehaviourZoomHelperAirborneSettings                 _0xE9CA7388;                     // offset:0x068	type:STRUCT.STRUCTURE
	struct camInconsistentBehaviourZoomHelperLosSettings                      _0xD6D37C0D;                     // offset:0x090	type:STRUCT.STRUCTURE
};

struct camInterpolatorMetadata : camBaseObjectMetadata
{
	float                            Duration;                        // offset:0x010	type:FLOAT.0
	float                            EaseIn;                          // offset:0x014	type:FLOAT.0
	float                            EaseOut;                         // offset:0x018	type:FLOAT.0
	float                            Start;                           // offset:0x01C	type:FLOAT.0
	float                            End;                             // offset:0x020	type:FLOAT.0
};

struct camLongSwoopSwitchHelperMetadata : camBaseSwitchHelperMetadata
{
	float                            _0x2F730A3F;                     // offset:0x028	type:FLOAT.0
	bool                             _0x18E15F2F;                     // offset:0x02C	type:BOOL.0
	uint                             _0xEBF30F56;                     // offset:0x030	type:UINT.0
	enum eCurveType                  _0xAF2FE724;                     // offset:0x034	type:ENUM.32BIT
	float                            _0xA163A857;                     // offset:0x038	type:FLOAT.0
	float                            _0x0193322C;                     // offset:0x03C	type:FLOAT.0
	uint                             _0x13355DA6;                     // offset:0x040	type:UINT.0
	enum eCurveType                  _0xAB011797;                     // offset:0x044	type:ENUM.32BIT
	float                            _0xDA1CE79E;                     // offset:0x048	type:FLOAT.0
	float                            _0x31AB9BE2;                     // offset:0x04C	type:FLOAT.0
};

struct camLookAheadHelperMetadata : camBaseObjectMetadata
{
	float                            _0x2D9DA92D;                     // offset:0x010	type:FLOAT.0
	float                            _0x3AE55F74;                     // offset:0x014	type:FLOAT.0
	float                            MinSpeed;                        // offset:0x018	type:FLOAT.0
	float                            _0xEA540D09;                     // offset:0x01C	type:FLOAT.0
	float                            _0x60CACE86;                     // offset:0x020	type:FLOAT.0
	float                            MaxForwardSpeed;                 // offset:0x024	type:FLOAT.0
	bool                             _0xE0873C02;                     // offset:0x028	type:BOOL.0
	float                            _0x053FDA21;                     // offset:0x02C	type:FLOAT.0
	float                            _0x6E16C1DA;                     // offset:0x030	type:FLOAT.0
	float                            MaxReverseSpeed;                 // offset:0x034	type:FLOAT.0
	float                            SpringConstant;                  // offset:0x038	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x03C	type:FLOAT.0
};

struct camLookAtDampingHelperMetadata : camBaseObjectMetadata
{
	float                            _0xD336CF47;                     // offset:0x010	type:FLOAT.0
	float                            _0xA24639E6;                     // offset:0x014	type:FLOAT.0
	float                            _0xB75C5830;                     // offset:0x018	type:FLOAT.0
	float                            _0xCF8A46C2;                     // offset:0x01C	type:FLOAT.0
	float                            _0x65A1F372;                     // offset:0x020	type:FLOAT.0
	float                            _0x256A3AFF;                     // offset:0x024	type:FLOAT.0
	float                            _0xBBEC5101;                     // offset:0x028	type:FLOAT.0
	float                            _0xE74C8B98;                     // offset:0x02C	type:FLOAT.0
	float                            _0x5D0C7186;                     // offset:0x030	type:FLOAT.0
	float                            _0x44905B13;                     // offset:0x034	type:FLOAT.0
};

struct camMarketingAToBCameraMetadata : camMarketingFreeCameraMetadata
{
	string                           SplineCameraRef;                 // offset:0x0C8	type:STRING.ATHASHVALUE
	uint                             _0x445EDD55;                     // offset:0x0CC	type:UINT.0
	uint                             _0x6CCE75C8;                     // offset:0x0D0	type:UINT.0
};

struct camMarketingDirectorMetadata : camBaseDirectorMetadata
{
	array<struct camMarketingDirectorMetadataMode>     Modes;                           // offset:0x018	type:ARRAY.ATARRAY
};

struct camMarketingDirectorMetadataMode
{
	string                           CameraRef;                       // offset:0x008	type:STRING.ATHASHVALUE
	string                           TextLabel;                       // offset:0x00C	type:STRING.MEMBER
};

struct camMarketingFreeCameraMetadata : camBaseCameraMetadata
{
	struct camMarketingFreeCameraMetadataInputResponse     _0xE2FA2782;                     // offset:0x020	type:STRUCT.STRUCTURE
	struct camMarketingFreeCameraMetadataInputResponse     _0xAE5DA700;                     // offset:0x040	type:STRUCT.STRUCTURE
	struct camMarketingFreeCameraMetadataInputResponse     _0x01D9F496;                     // offset:0x060	type:STRUCT.STRUCTURE
	float                                                  _0xC46B0D38;                     // offset:0x080	type:FLOAT.0
	float                                                  _0x5ED51D13;                     // offset:0x084	type:FLOAT.0
	float                                                  _0x317652A1;                     // offset:0x088	type:FLOAT.0
	struct camMarketingFreeCameraMetadataInputResponse     _0xBD610410;                     // offset:0x090	type:STRUCT.STRUCTURE
	float                                                  _0xBB4263C2;                     // offset:0x0B0	type:FLOAT.0
	float                                                  _0xF7CB88B6;                     // offset:0x0B4	type:FLOAT.0
	float                                                  _0x76926E96;                     // offset:0x0B8	type:FLOAT.0
	float                                                  MaxPitch;                        // offset:0x0BC	type:FLOAT.0
	float                                                  MaxRoll;                         // offset:0x0C0	type:FLOAT.0
};

struct camMarketingFreeCameraMetadataInputResponse
{
	float                            _0xE5D0F39F;                     // offset:0x008	type:FLOAT.0
	float                            InputMagPowerFactor;             // offset:0x00C	type:FLOAT.0
	float                            Acceleration;                    // offset:0x010	type:FLOAT.0
	float                            Deceleration;                    // offset:0x014	type:FLOAT.0
	float                            MaxSpeed;                        // offset:0x018	type:FLOAT.0
};

struct camMarketingMountedCameraMetadata : camMarketingFreeCameraMetadata
{
	float                            _0x8996E7F1;                     // offset:0x0C8	type:FLOAT.0
	string                           SpringMountRef;                  // offset:0x0CC	type:STRING.ATHASHVALUE
};

struct camMarketingOrbitCameraMetadata : camMarketingFreeCameraMetadata
{
	float                            _0x8996E7F1;                     // offset:0x0C8	type:FLOAT.0
	string                           SpringMountRef;                  // offset:0x0CC	type:STRING.ATHASHVALUE
};

struct camMarketingStickyCameraMetadata : camMarketingFreeCameraMetadata
{
};

struct camMetadataStore
{
	array<struct camBaseObjectMetadata>       MetadataList;                    // offset:0x008	type:ARRAY.ATARRAY
	array<struct camBaseDirectorMetadata>     DirectorList;                    // offset:0x018	type:ARRAY.ATARRAY
};

struct camMotionBlurSettingsMetadata : camBaseObjectMetadata
{
	float                            MovementMotionBlurMinSpeed;      // offset:0x010	type:FLOAT.0
	float                            MovementMotionBlurMaxSpeed;      // offset:0x014	type:FLOAT.0
	float                            MovementMotionBlurMaxStrength;   // offset:0x018	type:FLOAT.0
	float                            DamageMotionBlurMinDamage;       // offset:0x01C	type:FLOAT.0
	float                            DamageMotionBlurMaxDamage;       // offset:0x020	type:FLOAT.0
	float                            DamageMotionBlurMaxStrength;     // offset:0x024	type:FLOAT.0
	uint                             DamageMotionBlurDuration;        // offset:0x028	type:UINT.0
	float                            _0xB94FE609;                     // offset:0x02C	type:FLOAT.0
	float                            _0xA19AADBE;                     // offset:0x030	type:FLOAT.0
	float                            _0x393CD5B4;                     // offset:0x034	type:FLOAT.0
	uint                             _0xDC25FE5E;                     // offset:0x038	type:UINT.0
};

struct camNearClipScannerMetadata : camBaseObjectMetadata
{
	float                            _0x1D748F0C;                     // offset:0x010	type:FLOAT.0
	float                            _0x66261E03;                     // offset:0x014	type:FLOAT.0
	float                            _0xB335DC3D;                     // offset:0x018	type:FLOAT.0
	float                            _0x598EE633;                     // offset:0x01C	type:FLOAT.0
	float                            _0xE45FE2ED;                     // offset:0x020	type:FLOAT.0
	float                            _0x41C690C4;                     // offset:0x024	type:FLOAT.0
	float                            _0x261E29BF;                     // offset:0x028	type:FLOAT.0
	float                            _0x741BB44F;                     // offset:0x02C	type:FLOAT.0
	float                            _0x46256223;                     // offset:0x030	type:FLOAT.0
	float                            _0x1F8D27F0;                     // offset:0x034	type:FLOAT.0
	float                            _0x5582C132;                     // offset:0x038	type:FLOAT.0
	float                            _0xBA9330A7;                     // offset:0x03C	type:FLOAT.0
	float                            _0x5AEA2A24;                     // offset:0x040	type:FLOAT.0
	float                            _0x122872D7;                     // offset:0x044	type:FLOAT.0
	float                            _0x93A53AE7;                     // offset:0x048	type:FLOAT.0
};

struct camOscillatorMetadata : camBaseObjectMetadata
{
	enum _0x35C3D8A5                 Waveform;                        // offset:0x010	type:ENUM.32BIT
	float                            Amplitude;                       // offset:0x014	type:FLOAT.0
	float                            Frequency;                       // offset:0x018	type:FLOAT.0
	float                            Phase;                           // offset:0x01C	type:FLOAT.0
	float                            _0xB1476162;                     // offset:0x020	type:FLOAT.0
	float                            Decay;                           // offset:0x024	type:FLOAT.0
};

struct camPreferredShotSelectionType
{
	string                           Shot;                            // offset:0x008	type:STRING.ATHASHVALUE
	enum _0xE7D67D78                 InputType;                       // offset:0x00C	type:ENUM.32BIT
};

struct camReplayBaseCameraMetadata : camBaseCameraMetadata
{
	float                            MaxCollisionTestRadius;          // offset:0x020	type:FLOAT.0
};

struct camReplayBaseCameraMetadataCollisionSettings
{
	float                            _0x80E3A069;                     // offset:0x008	type:FLOAT.0
	float                            WaterHeightSmoothRate;           // offset:0x00C	type:FLOAT.0
	float                            MinSafeRadiusReductionWithinPedMoverCapsule; // offset:0x010	type:FLOAT.0
	float                            _0x26F8444A;                     // offset:0x014	type:FLOAT.0
	float                            _0xC0A5061B;                     // offset:0x018	type:FLOAT.0
	float                            _0x30DB73AE;                     // offset:0x01C	type:FLOAT.0
	float                            _0x07477461;                     // offset:0x020	type:FLOAT.0
	float                            _0x2140984E;                     // offset:0x024	type:FLOAT.0
	bool                             ShouldPushBeyondAttachParentIfClipping; // offset:0x028	type:BOOL.0
};

struct camReplayBaseCameraMetadataInputResponse
{
	float                            InputMagPowerFactor;             // offset:0x008	type:FLOAT.0
	float                            MaxAcceleration;                 // offset:0x00C	type:FLOAT.0
	float                            MaxDeceleration;                 // offset:0x010	type:FLOAT.0
	float                            MaxSpeed;                        // offset:0x014	type:FLOAT.0
};

struct camReplayDirectorMetadata : camBaseDirectorMetadata
{
	string                           PresetFrontRef;                  // offset:0x018	type:STRING.ATHASHVALUE
	string                           PresetRearRef;                   // offset:0x01C	type:STRING.ATHASHVALUE
	string                           PresetRightRef;                  // offset:0x020	type:STRING.ATHASHVALUE
	string                           PresetLeftRef;                   // offset:0x024	type:STRING.ATHASHVALUE
	string                           _0xF2BA2F1E;                     // offset:0x028	type:STRING.ATHASHVALUE
	string                           _0x279B4142;                     // offset:0x02C	type:STRING.ATHASHVALUE
	string                           _0xE8AA3F4C;                     // offset:0x030	type:STRING.ATHASHVALUE
	float                            _0xE1D97A3D;                     // offset:0x034	type:FLOAT.0
	float                            _0x8A4472C6;                     // offset:0x038	type:FLOAT.0
	float                            _0x5F22B4E0;                     // offset:0x03C	type:FLOAT.0
	vec3                             _0x49D6919E;                     // offset:0x040	type:VECTOR3.0
	string                           _0x512F79CB;                     // offset:0x050	type:STRING.ATHASHVALUE
	float                            _0x9D6027D6;                     // offset:0x054	type:FLOAT.0
	float                            _0xB6EC5B3A;                     // offset:0x058	type:FLOAT.0
	float                            _0x04D46045;                     // offset:0x05C	type:FLOAT.0
	float                            _0xFD1E42C4;                     // offset:0x060	type:FLOAT.0
	float                            _0x63D22CA7;                     // offset:0x064	type:FLOAT.0
	string                           _0x0D924913;                     // offset:0x068	type:STRING.ATHASHVALUE
	string                           _0x762FFEB6;                     // offset:0x06C	type:STRING.ATHASHVALUE
	string                           _0x348D2550;                     // offset:0x070	type:STRING.ATHASHVALUE
	string                           _0x9AF628B1;                     // offset:0x074	type:STRING.ATHASHVALUE
	string                           _0xBF20604C;                     // offset:0x078	type:STRING.ATHASHVALUE
	float                            _0x64BD9234;                     // offset:0x07C	type:FLOAT.0
	float                            _0xF8A246EA;                     // offset:0x080	type:FLOAT.0
	float                            _0xC9C51D26;                     // offset:0x084	type:FLOAT.0
	float                            _0x38A98A64;                     // offset:0x088	type:FLOAT.0
	float                            _0x37289BF9;                     // offset:0x08C	type:FLOAT.0
	float                            _0xE987F24F;                     // offset:0x090	type:FLOAT.0
	float                            _0x523327D3;                     // offset:0x094	type:FLOAT.0
	float                            _0x85DA7FCC;                     // offset:0x098	type:FLOAT.0
};

struct camReplayFreeCameraMetadata : camReplayBaseCameraMetadata
{
	float                                                   NearClip;                        // offset:0x028	type:FLOAT.0
	struct camReplayBaseCameraMetadataInputResponse         _0x452BD6D8;                     // offset:0x030	type:STRUCT.STRUCTURE
	struct camReplayBaseCameraMetadataInputResponse         _0xA7063B94;                     // offset:0x048	type:STRUCT.STRUCTURE
	struct camReplayBaseCameraMetadataInputResponse         _0x88A3F3B2;                     // offset:0x060	type:STRUCT.STRUCTURE
	struct camReplayBaseCameraMetadataInputResponse         _0x01D9F496;                     // offset:0x078	type:STRUCT.STRUCTURE
	struct camReplayBaseCameraMetadataInputResponse         _0xBD610410;                     // offset:0x090	type:STRUCT.STRUCTURE
	struct camReplayBaseCameraMetadataInputResponse         _0x461B3A1F;                     // offset:0x0A8	type:STRUCT.STRUCTURE
	struct camReplayBaseCameraMetadataInputResponse         _0xF105DA6B;                     // offset:0x0C0	type:STRUCT.STRUCTURE
	struct camReplayBaseCameraMetadataInputResponse         _0x8E91F033;                     // offset:0x0D8	type:STRUCT.STRUCTURE
	struct camInterpolatorMetadata                          _0x5763E338;                     // offset:0x0F0	type:STRUCT.STRUCTURE
	struct camInterpolatorMetadata                          _0xDC87AE55;                     // offset:0x118	type:STRUCT.STRUCTURE
	struct camInterpolatorMetadata                          _0x92B6756E;                     // offset:0x140	type:STRUCT.STRUCTURE
	float                                                   MaxPitch;                        // offset:0x168	type:FLOAT.0
	float                                                   MinFov;                          // offset:0x16C	type:FLOAT.0
	float                                                   MaxFov;                          // offset:0x170	type:FLOAT.0
	float                                                   DefaultFov;                      // offset:0x174	type:FLOAT.0
	float                                                   CapsuleRadius;                   // offset:0x178	type:FLOAT.0
	float                                                   _0x20071E14;                     // offset:0x17C	type:FLOAT.0
	float                                                   _0x33E6AEC6;                     // offset:0x180	type:FLOAT.0
	float                                                   _0x3FB3AD63;                     // offset:0x184	type:FLOAT.0
	float                                                   _0xD853A54B;                     // offset:0x188	type:FLOAT.0
	float                                                   _0x1C976399;                     // offset:0x18C	type:FLOAT.0
	vec3                                                    _0x7BD4BCC3;                     // offset:0x190	type:VECTOR3.0
	struct camReplayBaseCameraMetadataCollisionSettings     CollisionSettings;               // offset:0x1A0	type:STRUCT.STRUCTURE
	float                                                   _0xF52AA671;                     // offset:0x1D0	type:FLOAT.0
	float                                                   _0x7D3C2565;                     // offset:0x1D4	type:FLOAT.0
	float                                                   _0x7CA00B1C;                     // offset:0x1D8	type:FLOAT.0
	float                                                   _0x0689BD60;                     // offset:0x1DC	type:FLOAT.0
	float                                                   _0x195D6CF3;                     // offset:0x1E0	type:FLOAT.0
	uint                                                    _0x88393FFE;                     // offset:0x1E4	type:UINT.0
	float                                                   _0xBDEBA43D;                     // offset:0x1E8	type:FLOAT.0
	float                                                   _0x33331795;                     // offset:0x1EC	type:FLOAT.0
	float                                                   _0x0A0538C3;                     // offset:0x1F0	type:FLOAT.0
	float                                                   _0x869080EA;                     // offset:0x1F4	type:FLOAT.0
	float                                                   _0xF590582B;                     // offset:0x1F8	type:FLOAT.0
	uint                                                    _0xB0FA92DE;                     // offset:0x1FC	type:UINT.0
	uint                                                    _0xCA4F4B14;                     // offset:0x200	type:UINT.0
	uint                                                    _0xA12D3306;                     // offset:0x204	type:UINT.0
	uint                                                    _0x64033BDA;                     // offset:0x208	type:UINT.0
	uint                                                    _0x14807A68;                     // offset:0x20C	type:UINT.0
	uint                                                    _0x28A5F467;                     // offset:0x210	type:UINT.0
	uint                                                    _0xA5DCF74D;                     // offset:0x214	type:UINT.0
	float                                                   _0xB46525F7;                     // offset:0x218	type:FLOAT.0
	float                                                   _0x4BDA6931;                     // offset:0x21C	type:FLOAT.0
};

struct camReplayPresetCameraMetadata : camReplayBaseCameraMetadata
{
	vec3                                                    _0xC14EA605;                     // offset:0x030	type:VECTOR3.0
	vec3                                                    RelativeLookAtPosition;          // offset:0x040	type:VECTOR3.0
	struct camReplayBaseCameraMetadataInputResponse         _0xE6A429B3;                     // offset:0x050	type:STRUCT.STRUCTURE
	struct camReplayBaseCameraMetadataInputResponse         _0x01D9F496;                     // offset:0x068	type:STRUCT.STRUCTURE
	struct camReplayBaseCameraMetadataInputResponse         _0xBD610410;                     // offset:0x080	type:STRUCT.STRUCTURE
	float                                                   MinFov;                          // offset:0x098	type:FLOAT.0
	float                                                   MaxFov;                          // offset:0x09C	type:FLOAT.0
	float                                                   DefaultFov;                      // offset:0x0A0	type:FLOAT.0
	float                                                   _0x2E5639D7;                     // offset:0x0A4	type:FLOAT.0
	float                                                   _0x5CDAAC76;                     // offset:0x0A8	type:FLOAT.0
	bool                                                    _0x40F0113C;                     // offset:0x0AC	type:BOOL.0
	bool                                                    _0x93D7DDDE;                     // offset:0x0AD	type:BOOL.0
	struct camReplayBaseCameraMetadataCollisionSettings     CollisionSettings;               // offset:0x0B0	type:STRUCT.STRUCTURE
	float                                                   _0x20BABD9B;                     // offset:0x0E0	type:FLOAT.0
	uint                                                    _0xCA4F4B14;                     // offset:0x0E4	type:UINT.0
	uint                                                    _0xA12D3306;                     // offset:0x0E8	type:UINT.0
	uint                                                    _0x64033BDA;                     // offset:0x0EC	type:UINT.0
	uint                                                    _0x14807A68;                     // offset:0x0F0	type:UINT.0
	uint                                                    _0x28A5F467;                     // offset:0x0F4	type:UINT.0
	uint                                                    _0xA5DCF74D;                     // offset:0x0F8	type:UINT.0
};

struct camReplayRecordedCameraMetadata : camReplayBaseCameraMetadata
{
};

struct camRoundedSplineCameraMetadata : camBaseSplineCameraMetadata
{
};

struct camScriptDirectorMetadata : camBaseDirectorMetadata
{
	string                           ScriptedCameraRef;               // offset:0x018	type:STRING.ATHASHVALUE
	string                           SplineCameraRef;                 // offset:0x01C	type:STRING.ATHASHVALUE
	uint                             _0x2456ADD8;                     // offset:0x020	type:UINT.0
};

struct camScriptedCameraMetadata : camBaseCameraMetadata
{
	float                            DefaultFov;                      // offset:0x020	type:FLOAT.0
};

struct camScriptedFlyCameraMetadata : camScriptedCameraMetadata
{
	struct camScriptedFlyCameraMetadataInputResponse     _0x452BD6D8;                     // offset:0x028	type:STRUCT.STRUCTURE
	struct camScriptedFlyCameraMetadataInputResponse     _0xA7063B94;                     // offset:0x040	type:STRUCT.STRUCTURE
	float                                                DefaultPitch;                    // offset:0x058	type:FLOAT.0
	float                                                _0x46256223;                     // offset:0x05C	type:FLOAT.0
	float                                                _0xA31B32AC;                     // offset:0x060	type:FLOAT.0
	float                                                MaxHeight;                       // offset:0x064	type:FLOAT.0
	float                                                CapsuleRadius;                   // offset:0x068	type:FLOAT.0
	float                                                MinHeightAboveWater;             // offset:0x06C	type:FLOAT.0
	uint                                                 _0xA5A518AA;                     // offset:0x070	type:UINT.0
};

struct camScriptedFlyCameraMetadataInputResponse
{
	float                            InputMagPowerFactor;             // offset:0x008	type:FLOAT.0
	float                            MaxAcceleration;                 // offset:0x00C	type:FLOAT.0
	float                            MaxDeceleration;                 // offset:0x010	type:FLOAT.0
	float                            MaxSpeed;                        // offset:0x014	type:FLOAT.0
};

struct camSeatSpecificCameras
{
	uint                             SeatIndex;                       // offset:0x008	type:UINT.0
	string                           PovCameraHash;                   // offset:0x00C	type:STRING.ATHASHVALUE
	vec3                             PovCameraOffset;                 // offset:0x010	type:VECTOR3.0
	float                            _0x86608CFC;                     // offset:0x020	type:FLOAT.0
	bool                             _0x1051D9FB;                     // offset:0x024	type:BOOL.0
};

struct camShakeMetadata : camBaseShakeMetadata
{
	array<struct camShakeMetadataFrameComponent>     FrameComponents;                 // offset:0x018	type:ARRAY.ATARRAY
	float                                            Vibration;                       // offset:0x028	type:FLOAT.0
};

struct camShakeMetadataFrameComponent
{
	enum _0xFAB6F340                 Component;                       // offset:0x008	type:ENUM.32BIT
	string                           OscillatorRef;                   // offset:0x00C	type:STRING.ATHASHVALUE
	string                           EnvelopeRef;                     // offset:0x010	type:STRING.ATHASHVALUE
};

struct camShortRotationSwitchHelperMetadata : camBaseSwitchHelperMetadata
{
	float                            _0x8898D1DF;                     // offset:0x028	type:FLOAT.0
};

struct camShortTranslationSwitchHelperMetadata : camBaseSwitchHelperMetadata
{
	float                            _0xD8A58751;                     // offset:0x028	type:FLOAT.0
};

struct camShortZoomInOutSwitchHelperMetadata : camBaseSwitchHelperMetadata
{
	float                            _0x46F6EB92;                     // offset:0x028	type:FLOAT.0
	float                            _0x20A20199;                     // offset:0x02C	type:FLOAT.0
	float                            _0x954DF34D;                     // offset:0x030	type:FLOAT.0
	float                            _0x0193322C;                     // offset:0x034	type:FLOAT.0
	float                            _0xF0AB22D1;                     // offset:0x038	type:FLOAT.0
};

struct camShortZoomToHeadSwitchHelperMetadata : camBaseSwitchHelperMetadata
{
	bool                             _0x338C4692;                     // offset:0x028	type:BOOL.0
	int                              _0xD4FA5865;                     // offset:0x02C	type:INT.0
	vec3                             _0x6D8CACDF;                     // offset:0x030	type:VECTOR3.0
	float                            _0x8ECFBD62;                     // offset:0x040	type:FLOAT.0
	float                            _0xF0AB22D1;                     // offset:0x044	type:FLOAT.0
};

struct camSmoothedSplineCameraMetadata : camRoundedSplineCameraMetadata
{
	int                              _0xE67EF8BF;                     // offset:0x028	type:INT.0
};

struct camSpeedRelativeShakeSettingsMetadata
{
	string                           ShakeRef;                        // offset:0x008	type:STRING.ATHASHVALUE
	float                            MinForwardSpeed;                 // offset:0x00C	type:FLOAT.0
	float                            MaxForwardSpeed;                 // offset:0x010	type:FLOAT.0
	float                            SpringConstant;                  // offset:0x014	type:FLOAT.0
	float                            _0xB84F15E1;                     // offset:0x018	type:FLOAT.0
};

struct camSpringMountMetadata : camBaseObjectMetadata
{
	vec3                             AccelerationLimit;               // offset:0x010	type:VECTOR3.0
	vec3                             AccelerationForce;               // offset:0x020	type:VECTOR3.0
	vec3                             SpringForce;                     // offset:0x030	type:VECTOR3.0
	vec3                             DampeningForce;                  // offset:0x040	type:VECTOR3.0
};

struct camStickyAimHelperMetadata : camBaseObjectMetadata
{
	string                           _0xB8E9EB09;                     // offset:0x010	type:STRING.ATHASHVALUE
	float                            _0x6134E1B8;                     // offset:0x014	type:FLOAT.0
	bool                             _0x7687E4F1;                     // offset:0x018	type:BOOL.0
	bool                             _0x0BE73D63;                     // offset:0x019	type:BOOL.0
	bool                             _0x8DF320B3;                     // offset:0x01A	type:BOOL.0
	uint                             _0xF8F631A6;                     // offset:0x01C	type:UINT.0
	uint                             _0x98384411;                     // offset:0x020	type:UINT.0
	uint                             _0x4812C42D;                     // offset:0x024	type:UINT.0
	float                            _0x2A2E37EC;                     // offset:0x028	type:FLOAT.0
	float                            _0xB7336FBF;                     // offset:0x02C	type:FLOAT.0
	float                            _0x26511CE4;                     // offset:0x030	type:FLOAT.0
	float                            _0x9E42AB13;                     // offset:0x034	type:FLOAT.0
	float                            _0xF1068D9B;                     // offset:0x038	type:FLOAT.0
	float                            _0x12E61D5C;                     // offset:0x03C	type:FLOAT.0
	float                            _0x52E30477;                     // offset:0x040	type:FLOAT.0
	float                            _0xF6C9A76E;                     // offset:0x044	type:FLOAT.0
	float                            _0x81835311;                     // offset:0x048	type:FLOAT.0
	float                            _0xCFDBFD28;                     // offset:0x04C	type:FLOAT.0
	float                            _0xA6EDC39B;                     // offset:0x050	type:FLOAT.0
	float                            _0x0F7433AF;                     // offset:0x054	type:FLOAT.0
	float                            _0x00554D2F;                     // offset:0x058	type:FLOAT.0
	float                            _0x8F8A7453;                     // offset:0x05C	type:FLOAT.0
	bool                             _0x6113745B;                     // offset:0x060	type:BOOL.0
	float                            _0x5BDCC619;                     // offset:0x064	type:FLOAT.0
	float                            _0x15F63D13;                     // offset:0x068	type:FLOAT.0
	float                            _0x229BCD93;                     // offset:0x06C	type:FLOAT.0
	float                            _0x73910F92;                     // offset:0x070	type:FLOAT.0
	float                            _0x7D8FD706;                     // offset:0x074	type:FLOAT.0
	bool                             _0xB581BC17;                     // offset:0x078	type:BOOL.0
	float                            _0xFF0A00F5;                     // offset:0x07C	type:FLOAT.0
	float                            _0x69B2BE08;                     // offset:0x080	type:FLOAT.0
	float                            _0x8E9B6CED;                     // offset:0x084	type:FLOAT.0
	bool                             _0x07906908;                     // offset:0x088	type:BOOL.0
	float                            _0xA6DC18EC;                     // offset:0x08C	type:FLOAT.0
	float                            _0x57645F2E;                     // offset:0x090	type:FLOAT.0
	bool                             _0x5D9D206F;                     // offset:0x094	type:BOOL.0
	float                            _0xBACC8570;                     // offset:0x098	type:FLOAT.0
	float                            _0x467C86E7;                     // offset:0x09C	type:FLOAT.0
	bool                             _0xDE38361D;                     // offset:0x0A0	type:BOOL.0
	float                            _0x3CCE8262;                     // offset:0x0A4	type:FLOAT.0
	float                            _0x136FD919;                     // offset:0x0A8	type:FLOAT.0
	float                            _0x931D82AF;                     // offset:0x0AC	type:FLOAT.0
	float                            _0x31A3B2B7;                     // offset:0x0B0	type:FLOAT.0
	float                            _0x3FECF75B;                     // offset:0x0B4	type:FLOAT.0
	float                            _0xF70E1475;                     // offset:0x0B8	type:FLOAT.0
};

struct camSwitchCameraMetadata : camBaseCameraMetadata
{
	string                           _0x4A3968E0;                     // offset:0x020	type:STRING.ATHASHVALUE
	vec3                             _0x7D78E383;                     // offset:0x030	type:VECTOR3.0
	float                            Fov;                             // offset:0x040	type:FLOAT.0
	float                            NearClip;                        // offset:0x044	type:FLOAT.0
	float                            MotionBlurStrength;              // offset:0x048	type:FLOAT.0
	float                            _0x3EFD399F;                     // offset:0x04C	type:FLOAT.0
	float                            _0x145E0642;                     // offset:0x050	type:FLOAT.0
	float                            _0x46256223;                     // offset:0x054	type:FLOAT.0
	float                            _0x8952C941;                     // offset:0x058	type:FLOAT.0
	float                            _0x3A4FA4EA;                     // offset:0x05C	type:FLOAT.0
	float                            DefaultPitch;                    // offset:0x060	type:FLOAT.0
	float                            _0x699BA172;                     // offset:0x064	type:FLOAT.0
	float                            _0x4876F952;                     // offset:0x068	type:FLOAT.0
	float                            _0x466C9825;                     // offset:0x06C	type:FLOAT.0
	uint                             _0x988A165B;                     // offset:0x070	type:UINT.0
	uint                             _0x3E4C04D0;                     // offset:0x074	type:UINT.0
	uint                             _0x4D65CA58;                     // offset:0x078	type:UINT.0
	uint                             _0xED002CA4;                     // offset:0x07C	type:UINT.0
	uint                             _0xBE55DAF2;                     // offset:0x080	type:UINT.0
	uint                             _0xCEA3B8F3;                     // offset:0x084	type:UINT.0
};

struct camSwitchDirectorMetadata : camBaseDirectorMetadata
{
	string                           _0xFF590D57;                     // offset:0x018	type:STRING.ATHASHVALUE
};

struct camSyncedSceneDirectorMetadata : camBaseDirectorMetadata
{
	string                           _0x8F6F489A;                     // offset:0x018	type:STRING.ATHASHVALUE
};

struct camThirdPersonAimCameraMetadata : camThirdPersonCameraMetadata
{
	string                           LockOnEnvelopeRef;               // offset:0x330	type:STRING.ATHASHVALUE
	string                           _0x3E5C7E72;                     // offset:0x334	type:STRING.ATHASHVALUE
	bool                             ShouldDisplayReticule;           // offset:0x338	type:BOOL.0
	bool                             ShouldDisplayReticuleDuringInterpolation; // offset:0x339	type:BOOL.0
	bool                             ShouldAllowInterpolationSourceCameraToPersistReticule; // offset:0x33A	type:BOOL.0
	bool                             ShouldApplyWeaponFov;            // offset:0x33B	type:BOOL.0
	bool                             ShouldUseLockOnAiming;           // offset:0x33C	type:BOOL.0
	bool                             ShouldLockOnToTargetEntityPosition; // offset:0x33D	type:BOOL.0
	bool                             ShouldValidateLockOnTargetPosition; // offset:0x33E	type:BOOL.0
	float                            TripleHeadNearClip;              // offset:0x340	type:FLOAT.0
	float                            RecoilShakeAmplitudeScaling;     // offset:0x344	type:FLOAT.0
	float                            MinDistanceForLockOn;            // offset:0x348	type:FLOAT.0
	float                            MinDistanceForFineAimScaling;    // offset:0x34C	type:FLOAT.0
	float                            MaxDistanceForFineAimScaling;    // offset:0x350	type:FLOAT.0
	float                            MaxAngleDeltaForLockOnSwitchBlendScaling; // offset:0x354	type:FLOAT.0
	uint                             MinBlendDurationForInitialLockOn; // offset:0x358	type:UINT.0
	uint                             MaxBlendDurationForInitialLockOn; // offset:0x35C	type:UINT.0
	uint                             MinBlendDurationForLockOnSwitch; // offset:0x360	type:UINT.0
	uint                             MaxBlendDurationForLockOnSwitch; // offset:0x364	type:UINT.0
	float                            FineAimBlendSpringConstant;      // offset:0x368	type:FLOAT.0
	float                            FineAimBlendSpringDampingRatio;  // offset:0x36C	type:FLOAT.0
	float                            WeaponZoomFactorSpringConstant;  // offset:0x370	type:FLOAT.0
	float                            WeaponZoomFactorSpringDampingRatio; // offset:0x374	type:FLOAT.0
	bool                             ShouldFocusOnLockOnTarget;       // offset:0x378	type:BOOL.0
	float                            BaseFovToEmulateWithFocalLengthMultiplier; // offset:0x37C	type:FLOAT.0
	float                            FocusParentToTargetBlendLevel;   // offset:0x380	type:FLOAT.0
	float                            SecondaryFocusParentToTargetBlendLevel; // offset:0x384	type:FLOAT.0
	float                            MinFocusToSecondaryFocusDistance; // offset:0x388	type:FLOAT.0
};

struct camThirdPersonCameraMetadata : camBaseCameraMetadata
{
	string                                                                        ControlHelperRef;                // offset:0x020	type:STRING.ATHASHVALUE
	string                                                                        HintHelperRef;                   // offset:0x024	type:STRING.ATHASHVALUE
	string                                                                        CatchUpHelperRef;                // offset:0x028	type:STRING.ATHASHVALUE
	string                                                                        BaseAttachVelocityToIgnoreEnvelopeRef; // offset:0x02C	type:STRING.ATHASHVALUE
	float                                                                         BaseFov;                         // offset:0x030	type:FLOAT.0
	float                                                                         BaseNearClip;                    // offset:0x034	type:FLOAT.0
	float                                                                         _0xC500A940;                     // offset:0x038	type:FLOAT.0
	bool                                                                          ShouldOrbitRelativeToAttachParentOrientation; // offset:0x03C	type:BOOL.0
	bool                                                                          ShouldPersistOrbitOrientationRelativeToAttachParent; // offset:0x03D	type:BOOL.0
	float                                                                         AttachParentMatrixForRelativeOrbitSpringConstant; // offset:0x040	type:FLOAT.0
	float                                                                         AttachParentMatrixForRelativeOrbitSpringDampingRatio; // offset:0x044	type:FLOAT.0
	float                                                                         _0x8F6C2678;                     // offset:0x048	type:FLOAT.0
	float                                                                         _0x2B6283C4;                     // offset:0x04C	type:FLOAT.0
	float                                                                         MaxAttachParentSubmergedLevelToApplyFullAttachParentMatrixForRelativeOrbit; // offset:0x050	type:FLOAT.0
	float                                                                         MinAircraftGroundSpeedToApplyFullAttachParentMatrixForRelativeOrbit; // offset:0x054	type:FLOAT.0
	float                                                                         MinAircraftContactSpeedToApplyFullAttachParentMatrixForRelativeOrbit; // offset:0x058	type:FLOAT.0
	uint                                                                          MinHoldTimeToBlockFullAttachParentMatrixForRelativeOrbit; // offset:0x05C	type:UINT.0
	float                                                                         MaxAttachParentSpeedToClonePitchFromCinematicMountedCameras; // offset:0x060	type:FLOAT.0
	bool                                                                          ShouldUseCustomFramingInTightSpace; // offset:0x064	type:BOOL.0
	float                                                                         MinAttachSpeedToUpdateTightSpaceLevel; // offset:0x068	type:FLOAT.0
	float                                                                         TightSpaceSpringConstant;        // offset:0x06C	type:FLOAT.0
	float                                                                         TightSpaceSpringDampingRatio;    // offset:0x070	type:FLOAT.0
	string                                                                        DofSettingsInTightSpace;         // offset:0x074	type:STRING.ATHASHVALUE
	bool                                                                          ShouldAttachToParentCentreOfGravity; // offset:0x078	type:BOOL.0
	bool                                                                          ShouldUseDynamicCentreOfGravity; // offset:0x079	type:BOOL.0
	bool                                                                          ShouldIgnoreVelocityOfAttachParentAttachEntity; // offset:0x07A	type:BOOL.0
	struct camThirdPersonCameraMetadataCustomBoundingBoxSettings                  CustomBoundingBoxSettings;       // offset:0x080	type:STRUCT.STRUCTURE
	bool                                                                          ShouldApplyAttachPedPelvisOffset; // offset:0x098	type:BOOL.0
	float                                                                         AttachPedPelvisOffsetSpringConstant; // offset:0x09C	type:FLOAT.0
	float                                                                         AttachPedPelvisOffsetSpringDampingRatio; // offset:0x0A0	type:FLOAT.0
	struct camThirdPersonCameraMetadataBasePivotPosition                          BasePivotPosition;               // offset:0x0B0	type:STRUCT.STRUCTURE
	struct camThirdPersonCameraMetadataPivotPosition                              PivotPosition;                   // offset:0x110	type:STRUCT.STRUCTURE
	struct camThirdPersonCameraMetadataPivotOverBoungingBoxSettings               PivotOverBoundingBoxSettings;    // offset:0x140	type:STRUCT.STRUCTURE
	float                                                                         ScreenRatioForMinFootRoom;       // offset:0x158	type:FLOAT.0
	float                                                                         ScreenRatioForMaxFootRoom;       // offset:0x15C	type:FLOAT.0
	float                                                                         ScreenRatioForMinFootRoomInTightSpace; // offset:0x160	type:FLOAT.0
	float                                                                         ScreenRatioForMaxFootRoomInTightSpace; // offset:0x164	type:FLOAT.0
	float                                                                         BasePivotHeightScalingForFootRoom; // offset:0x168	type:FLOAT.0
	bool                                                                          ShouldIgnoreVerticalPivotOffsetForFootRoom; // offset:0x16C	type:BOOL.0
	struct _0x5AA44B6A                                                            _0x0372E6E0;                     // offset:0x170	type:STRUCT.STRUCTURE
	float                                                                         MinSafeOrbitDistanceScalingForExtensions; // offset:0x190	type:FLOAT.0
	float                                                                         _0x216B9E03;                     // offset:0x194	type:FLOAT.0
	vec2                                                                          CustomOrbitDistanceLimitsToForce; // offset:0x198	type:VECTOR2.0
	float                                                                         OrbitDistanceLimitSpringConstant; // offset:0x1A0	type:FLOAT.0
	float                                                                         OrbitDistanceLimitSpringDampingRatio; // offset:0x1A4	type:FLOAT.0
	float                                                                         OrbitDistanceScalingForCustomFirstPersonFallBack; // offset:0x1A8	type:FLOAT.0
	struct camThirdPersonCameraMetadataBuoyancySettings                           BuoyancySettings;                // offset:0x1B0	type:STRUCT.STRUCTURE
	bool                                                                          ShouldIgnoreCollisionWithAttachParent; // offset:0x1E0	type:BOOL.0
	bool                                                                          ShouldIgnoreCollisionWithFollowVehicle; // offset:0x1E1	type:BOOL.0
	bool                                                                          ShouldIgnoreFollowVehicleForCollisionOrigin; // offset:0x1E2	type:BOOL.0
	bool                                                                          ShouldIgnoreFollowVehicleForCollisionRoot; // offset:0x1E3	type:BOOL.0
	bool                                                                          ShouldPushBeyondAttachParentIfClipping; // offset:0x1E4	type:BOOL.0
	float                                                                         MaxCollisionTestRadius;          // offset:0x1E8	type:FLOAT.0
	float                                                                         MinSafeRadiusReductionWithinPedMoverCapsule; // offset:0x1EC	type:FLOAT.0
	float                                                                         CollisionTestRadiusSpringConstant; // offset:0x1F0	type:FLOAT.0
	float                                                                         CollisionTestRadiusSpringDampingRatio; // offset:0x1F4	type:FLOAT.0
	vec3                                                                          CustomCollisionOriginRelativePosition; // offset:0x200	type:VECTOR3.0
	vec3                                                                          _0xF9FDAF1D;                     // offset:0x210	type:VECTOR3.0
	bool                                                                          ShouldUseCustomCollisionOrigin;  // offset:0x220	type:BOOL.0
	bool                                                                          _0x772195F1;                     // offset:0x221	type:BOOL.0
	bool                                                                          _0x853FA59D;                     // offset:0x222	type:BOOL.0
	vec3                                                                          _0xCF6714C5;                     // offset:0x230	type:VECTOR3.0
	float                                                                         _0x592CE832;                     // offset:0x240	type:FLOAT.0
	struct camThirdPersonCameraMetadataCollisionFallBackPosition                  CollisionFallBackPosition;       // offset:0x248	type:STRUCT.STRUCTURE
	float                                                                         CollisionRootPositionFallBackToPivotBlendValue; // offset:0x270	type:FLOAT.0
	bool                                                                          ShouldConstrainCollisionRootPositionAgainstClippingTypes; // offset:0x274	type:BOOL.0
	float                                                                         CollisionRootPositionSpringConstant; // offset:0x278	type:FLOAT.0
	float                                                                         CollisionRootPositionSpringDampingRatio; // offset:0x27C	type:FLOAT.0
	struct camThirdPersonCameraMetadataVehicleOnTopOfVehicleCollisionSettings     VehicleOnTopOfVehicleCollisionSettings; // offset:0x280	type:STRUCT.STRUCTURE
	float                                                                         IdealHeadingOffsetForLimiting;   // offset:0x298	type:FLOAT.0
	vec2                                                                          RelativeOrbitHeadingLimits;      // offset:0x29C	type:VECTOR2.0
	vec2                                                                          OrbitPitchLimits;                // offset:0x2A4	type:VECTOR2.0
	float                                                                         BaseOrbitPitchOffset;            // offset:0x2AC	type:FLOAT.0
	float                                                                         BaseOrbitPitchOffsetInTightSpace; // offset:0x2B0	type:FLOAT.0
	struct camThirdPersonCameraMetadataLookOverSettings                           LookOverSettings;                // offset:0x2B8	type:STRUCT.STRUCTURE
	bool                                                                          ShouldIgnoreAttachParentPitchForLookBehind; // offset:0x2D0	type:BOOL.0
	vec2                                                                          OrbitDistanceLimitsForBasePosition; // offset:0x2D4	type:VECTOR2.0
	float                                                                         PreToPostCollisionLookAtOrientationBlendValue; // offset:0x2DC	type:FLOAT.0
	float                                                                         AttachParentRollSpringConstant;  // offset:0x2E0	type:FLOAT.0
	float                                                                         AttachParentRollSpringDampingRatio; // offset:0x2E4	type:FLOAT.0
	vec2                                                                          AttachParentRollDampingPitchSoftLimits; // offset:0x2E8	type:VECTOR2.0
	vec2                                                                          AttachParentRollDampingPitchHardLimits; // offset:0x2F0	type:VECTOR2.0
	struct camThirdPersonCameraMetadataStealthZoomSettings                        StealthZoomSettings;             // offset:0x2F8	type:STRUCT.STRUCTURE
	struct camThirdPersonCameraMetadataQuadrupedalHeightSpring                    _0x74116D07;                     // offset:0x310	type:STRUCT.STRUCTURE
	string                                                                        MotionBlurSettings;              // offset:0x328	type:STRING.ATHASHVALUE
	bool                                                                          _0x7E7E9C53;                     // offset:0x32C	type:BOOL.0
};

struct camThirdPersonCameraMetadataBasePivotPosition
{
	bool                                                                 ShouldUseBaseAttachPosition;     // offset:0x008	type:BOOL.0
	float                                                                AttachParentHeightRatioToAttain; // offset:0x00C	type:FLOAT.0
	float                                                                AttachParentHeightRatioToAttainInTightSpace; // offset:0x010	type:FLOAT.0
	bool                                                                 ShouldApplyInAttachParentLocalSpace; // offset:0x014	type:BOOL.0
	struct camThirdPersonCameraMetadataBasePivotPositionRollSettings     RollSettings;                    // offset:0x018	type:STRUCT.STRUCTURE
	vec3                                                                 RelativeOffset;                  // offset:0x040	type:VECTOR3.0
	bool                                                                 ShouldLockVerticalOffset;        // offset:0x050	type:BOOL.0
};

struct camThirdPersonCameraMetadataBasePivotPositionRollSettings
{
	bool                             ShouldApplyAttachParentRoll;     // offset:0x008	type:BOOL.0
	float                            MinForwardSpeed;                 // offset:0x00C	type:FLOAT.0
	float                            MaxForwardSpeed;                 // offset:0x010	type:FLOAT.0
	float                            AngleScalingFactor;              // offset:0x014	type:FLOAT.0
	float                            MaxAngle;                        // offset:0x018	type:FLOAT.0
	float                            SpringConstant;                  // offset:0x01C	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x020	type:FLOAT.0
};

struct camThirdPersonCameraMetadataBuoyancySettings
{
	bool                             ShouldApplyBuoyancy;             // offset:0x008	type:BOOL.0
	uint                             MinDelayBetweenBuoyancyStateChanges; // offset:0x00C	type:UINT.0
	uint                             MinDelayOnSubmerging;            // offset:0x010	type:UINT.0
	uint                             MinDelayOnSurfacing;             // offset:0x014	type:UINT.0
	uint                             MinTimeSpentSwimmingToRespectMotionTask; // offset:0x018	type:UINT.0
	float                            MaxAttachParentDepthUnderWaterToRemainBuoyant; // offset:0x01C	type:FLOAT.0
	float                            MaxAttachParentDepthUnderWaterToRemainBuoyantOut; // offset:0x020	type:FLOAT.0
	float                            MaxCollisionFallBackBlendLevelToForceUnderWater; // offset:0x024	type:FLOAT.0
	bool                             ShouldSetBuoyantWhenAttachParentNotFullySubmerged; // offset:0x028	type:BOOL.0
};

struct camThirdPersonCameraMetadataCollisionFallBackPosition
{
	float                            AttachParentHeightRatioToAttain; // offset:0x008	type:FLOAT.0
	float                            MinAttachParentHeightRatioToPushAwayFromCollision; // offset:0x00C	type:FLOAT.0
	float                            _0xEEB25CA0;                     // offset:0x010	type:FLOAT.0
	float                            MinBlendLevelAfterPushAwayFromCollision; // offset:0x014	type:FLOAT.0
	float                            _0x01E2E9F5;                     // offset:0x018	type:FLOAT.0
	bool                             _0xA1148A9C;                     // offset:0x01C	type:BOOL.0
	bool                             _0x01342909;                     // offset:0x01D	type:BOOL.0
	bool                             ShouldApplyInAttachParentLocalSpace; // offset:0x01E	type:BOOL.0
	float                            SpringConstant;                  // offset:0x020	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x024	type:FLOAT.0
};

struct camThirdPersonCameraMetadataCustomBoundingBoxSettings
{
	float                            HeightScaling;                   // offset:0x008	type:FLOAT.0
	float                            MaxExtraHeightForVehicleTrailers; // offset:0x00C	type:FLOAT.0
	float                            MaxExtraHeightForTowedVehicles;  // offset:0x010	type:FLOAT.0
	float                            MinHeightAboveVehicleDriverSeat; // offset:0x014	type:FLOAT.0
};

struct camThirdPersonCameraMetadataLookOverSettings
{
	float                            MinHeight;                       // offset:0x008	type:FLOAT.0
	float                            MaxHeight;                       // offset:0x00C	type:FLOAT.0
	float                            PitchOffsetAtMinHeight;          // offset:0x010	type:FLOAT.0
	float                            PitchOffsetAtMaxHeight;          // offset:0x014	type:FLOAT.0
};

struct camThirdPersonCameraMetadataPivotOverBoungingBoxSettings
{
	float                            BlendLevel;                      // offset:0x008	type:FLOAT.0
	float                            ExtraCameraRelativeVerticalOffset; // offset:0x00C	type:FLOAT.0
	float                            AttachParentHeightScalingForExtraCameraRelativeVerticalOffset; // offset:0x010	type:FLOAT.0
};

struct camThirdPersonCameraMetadataPivotPosition
{
	float                            CameraRelativeSideOffset;        // offset:0x008	type:FLOAT.0
	float                            CameraRelativeVerticalOffset;    // offset:0x00C	type:FLOAT.0
	float                            AttachParentWidthScalingForCameraRelativeSideOffset; // offset:0x010	type:FLOAT.0
	float                            AttachParentHeightScalingForCameraRelativeVerticalOffset; // offset:0x014	type:FLOAT.0
	float                            timeAfterAimingToApplyAlternateScalingMin; // offset:0x018	type:FLOAT.0
	float                            timeAfterAimingToApplyAlternateScalingMax; // offset:0x01C	type:FLOAT.0
	float                            maxDistanceAfterAimingToApplyAlternateScalingMax; // offset:0x020	type:FLOAT.0
	float                            timeAfterAimingToApplyDistanceBlend; // offset:0x024	type:FLOAT.0
	float                            AttachParentHeightScalingForCameraRelativeVerticalOffset_AfterAiming; // offset:0x028	type:FLOAT.0
	float                            _0xAC286CD7;                     // offset:0x02C	type:FLOAT.0
};

struct camThirdPersonCameraMetadataQuadrupedalHeightSpring
{
	bool                             ShouldApply;                     // offset:0x008	type:BOOL.0
	float                            SpringConstant;                  // offset:0x00C	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x010	type:FLOAT.0
	float                            _0x3F82207F;                     // offset:0x014	type:FLOAT.0
};

struct camThirdPersonCameraMetadataStealthZoomSettings
{
	bool                             ShouldApply;                     // offset:0x008	type:BOOL.0
	float                            MaxZoomFactor;                   // offset:0x00C	type:FLOAT.0
	float                            SpringConstant;                  // offset:0x010	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x014	type:FLOAT.0
};

struct camThirdPersonCameraMetadataVehicleOnTopOfVehicleCollisionSettings
{
	bool                             ShouldApply;                     // offset:0x008	type:BOOL.0
	uint                             MaxDurationToTrackVehicles;      // offset:0x00C	type:UINT.0
	float                            DistanceToTestDownForVehiclesToReject; // offset:0x010	type:FLOAT.0
};

struct camThirdPersonPedAimCameraMetadata : camThirdPersonAimCameraMetadata
{
	string                                                                   LockOnTargetStunnedEnvelopeRef;  // offset:0x390	type:STRING.ATHASHVALUE
	struct camThirdPersonPedAimCameraMetadataLockOnTargetDampingSettings     LockOnTargetDampingSettings;     // offset:0x398	type:STRUCT.STRUCTURE
	struct camThirdPersonPedAimCameraMetadataLockOnOrbitDistanceSettings     LockOnOrbitDistanceSettings;     // offset:0x3C0	type:STRUCT.STRUCTURE
	vec3                                                                     ParentRelativeAttachOffset;      // offset:0x3F0	type:VECTOR3.0
	vec3                                                                     ParentRelativeAttachOffsetAtOrbitHeadingLimits; // offset:0x400	type:VECTOR3.0
	int                                                                      AttachBoneTag;                   // offset:0x410	type:INT.0
	bool                                                                     ShouldScriptedAimTaskOverrideOrbitPitchLimits; // offset:0x414	type:BOOL.0
	bool                                                                     ShouldAimSweepOverrideOrbitPitchLimits; // offset:0x415	type:BOOL.0
	string                                                                   DofSettingsForMobilePhoneShallowDofMode; // offset:0x418	type:STRING.ATHASHVALUE
	float                                                                    _0x1277D2A9;                     // offset:0x41C	type:FLOAT.0
	bool                                                                     _0xE0BA5510;                     // offset:0x420	type:BOOL.0
	bool                                                                     _0xCA29D3BF;                     // offset:0x421	type:BOOL.0
};

struct camThirdPersonPedAimCameraMetadataLockOnOrbitDistanceSettings
{
	bool                             ShouldApplyScaling;              // offset:0x008	type:BOOL.0
	vec2                             LockOnDistanceLimits;            // offset:0x00C	type:VECTOR2.0
	vec2                             OrbitDistanceScalingLimits;      // offset:0x014	type:VECTOR2.0
	float                            OrbitDistanceScalingSpringConstant; // offset:0x01C	type:FLOAT.0
	float                            OrbitDistanceScalingSpringDampingRatio; // offset:0x020	type:FLOAT.0
};

struct camThirdPersonPedAimCameraMetadataLockOnTargetDampingSettings
{
	bool                             ShouldApplyDamping;              // offset:0x008	type:BOOL.0
	float                            StunnedHeadingSpringConstant;    // offset:0x00C	type:FLOAT.0
	float                            StunnedHeadingSpringDampingRatio; // offset:0x010	type:FLOAT.0
	float                            StunnedPitchSpringConstant;      // offset:0x014	type:FLOAT.0
	float                            StunnedPitchSpringDampingRatio;  // offset:0x018	type:FLOAT.0
	float                            StunnedDistanceSpringConstant;   // offset:0x01C	type:FLOAT.0
	float                            StunnedDistanceSpringDampingRatio; // offset:0x020	type:FLOAT.0
};

struct camThirdPersonPedAimInCoverCameraMetadata : camThirdPersonPedAimCameraMetadata
{
	float                                                                _0x076A5C05;                     // offset:0x430	type:FLOAT.0
	float                                                                _0x6E6B028C;                     // offset:0x434	type:FLOAT.0
	float                                                                _0x7223C1D4;                     // offset:0x438	type:FLOAT.0
	float                                                                _0x7EB64C20;                     // offset:0x43C	type:FLOAT.0
	float                                                                _0xCE042099;                     // offset:0x440	type:FLOAT.0
	float                                                                streamedMusc;                    // offset:0x444	type:FLOAT.0
	float                                                                _0xA65C2A20;                     // offset:0x448	type:FLOAT.0
	bool                                                                 _0x4FA7D326;                     // offset:0x44C	type:BOOL.0
	float                                                                _0x6E1F074C;                     // offset:0x450	type:FLOAT.0
	float                                                                _0x15B9298A;                     // offset:0x454	type:FLOAT.0
	float                                                                _0xCA8E411F;                     // offset:0x458	type:FLOAT.0
	float                                                                _0xA0E72642;                     // offset:0x45C	type:FLOAT.0
	float                                                                _0x84141B5C;                     // offset:0x460	type:FLOAT.0
	float                                                                _0x7F96EE1E;                     // offset:0x464	type:FLOAT.0
	float                                                                _0x7FA27B62;                     // offset:0x468	type:FLOAT.0
	float                                                                _0x008B3CBE;                     // offset:0x46C	type:FLOAT.0
	float                                                                _0x145C2C8F;                     // offset:0x470	type:FLOAT.0
	float                                                                _0xB82FFBE6;                     // offset:0x474	type:FLOAT.0
	float                                                                _0xD1B1FA49;                     // offset:0x478	type:FLOAT.0
	float                                                                _0xA1D34E27;                     // offset:0x47C	type:FLOAT.0
	float                                                                _0xF13D3C05;                     // offset:0x480	type:FLOAT.0
	float                                                                _0x009EFEB7;                     // offset:0x484	type:FLOAT.0
	vec2                                                                 _0x30B873C8;                     // offset:0x488	type:VECTOR2.0
	bool                                                                 _0xE219388B;                     // offset:0x490	type:BOOL.0
	float                                                                _0x3524E544;                     // offset:0x494	type:FLOAT.0
	float                                                                _0x4F6DBDB4;                     // offset:0x498	type:FLOAT.0
	float                                                                _0xDD4456EA;                     // offset:0x49C	type:FLOAT.0
	float                                                                _0x7EC320E7;                     // offset:0x4A0	type:FLOAT.0
	float                                                                _0x1BDFF976;                     // offset:0x4A4	type:FLOAT.0
	float                                                                _0xE9B3E351;                     // offset:0x4A8	type:FLOAT.0
	uint                                                                 _0x53E10C3B;                     // offset:0x4AC	type:UINT.0
	struct camThirdPersonPedAimInCoverCameraMetadataLowCoverSettings     _0x507BEAF6;                     // offset:0x4B0	type:STRUCT.STRUCTURE
	struct camThirdPersonPedAimInCoverCameraMetadataAimingSettings       AimingSettings;                  // offset:0x4D8	type:STRUCT.STRUCTURE
};

struct camThirdPersonPedAimInCoverCameraMetadataAimingSettings
{
	bool                             ShouldApply;                     // offset:0x008	type:BOOL.0
	string                           DofSettings;                     // offset:0x00C	type:STRING.ATHASHVALUE
	float                            _0xE22E4FCA;                     // offset:0x010	type:FLOAT.0
	float                            _0xB4ACC204;                     // offset:0x014	type:FLOAT.0
	float                            _0x304A78BF;                     // offset:0x018	type:FLOAT.0
	float                            _0x89443E3F;                     // offset:0x01C	type:FLOAT.0
	float                            ScreenRatioForMinFootRoom;       // offset:0x020	type:FLOAT.0
	float                            ScreenRatioForMaxFootRoom;       // offset:0x024	type:FLOAT.0
};

struct camThirdPersonPedAimInCoverCameraMetadataLowCoverSettings
{
	float                            BlendInSpringConstant;           // offset:0x008	type:FLOAT.0
	float                            _0xA7927AEC;                     // offset:0x00C	type:FLOAT.0
	float                            BlendOutSpringConstant;          // offset:0x010	type:FLOAT.0
	float                            _0x17214A7D;                     // offset:0x014	type:FLOAT.0
	float                            _0xF006ECCA;                     // offset:0x018	type:FLOAT.0
	float                            _0xB1315A6C;                     // offset:0x01C	type:FLOAT.0
	float                            ScreenRatioForMinFootRoom;       // offset:0x020	type:FLOAT.0
	float                            ScreenRatioForMaxFootRoom;       // offset:0x024	type:FLOAT.0
};

struct camThirdPersonPedAssistedAimCameraCinematicMomentSettings
{
	float                                                                _0xB982BFA6;                     // offset:0x008	type:FLOAT.0
	uint                                                                 _0xC4A1195F;                     // offset:0x00C	type:UINT.0
	uint                                                                 _0xE9EA6D56;                     // offset:0x010	type:UINT.0
	float                                                                _0x84121C76;                     // offset:0x014	type:FLOAT.0
	float                                                                _0x36B0DE51;                     // offset:0x018	type:FLOAT.0
	uint                                                                 _0x65AC08F0;                     // offset:0x01C	type:UINT.0
	uint                                                                 _0xD05D1940;                     // offset:0x020	type:UINT.0
	float                                                                _0x77E4B657;                     // offset:0x024	type:FLOAT.0
	uint                                                                 _0xEB1EAD01;                     // offset:0x028	type:UINT.0
	string                                                               _0xC31F2A30;                     // offset:0x02C	type:STRING.ATHASHVALUE
	float                                                                ZoomFactor;                      // offset:0x030	type:FLOAT.0
	float                                                                _0x4D20B663;                     // offset:0x034	type:FLOAT.0
	struct camThirdPersonPedAssistedAimCameraLockOnAlignmentSettings     _0xEA87B8AC;                     // offset:0x038	type:STRUCT.STRUCTURE
	float                                                                _0xFAEEA33B;                     // offset:0x070	type:FLOAT.0
	float                                                                _0xC01A0C60;                     // offset:0x074	type:FLOAT.0
	struct camThirdPersonPedAssistedAimCameraPlayerFramingSettings       _0x54204A10;                     // offset:0x078	type:STRUCT.STRUCTURE
	float                                                                ScreenRatioForMinFootRoom;       // offset:0x0A8	type:FLOAT.0
	float                                                                ScreenRatioForMaxFootRoom;       // offset:0x0AC	type:FLOAT.0
	float                                                                ScreenRatioForMinFootRoomInTightSpace; // offset:0x0B0	type:FLOAT.0
	float                                                                ScreenRatioForMaxFootRoomInTightSpace; // offset:0x0B4	type:FLOAT.0
};

struct camThirdPersonPedAssistedAimCameraInCoverSettings
{
	float                            SpringConstant;                  // offset:0x008	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x00C	type:FLOAT.0
	float                            ScreenRatioForMinFootRoom;       // offset:0x010	type:FLOAT.0
	float                            ScreenRatioForMaxFootRoom;       // offset:0x014	type:FLOAT.0
	bool                             _0xB5715FCA;                     // offset:0x018	type:BOOL.0
	float                            _0x8BA742C0;                     // offset:0x01C	type:FLOAT.0
	float                            _0x8CE7341B;                     // offset:0x020	type:FLOAT.0
	float                            _0xEE393F92;                     // offset:0x024	type:FLOAT.0
	float                            _0xB14CD7FB;                     // offset:0x028	type:FLOAT.0
	float                            _0x455E7C44;                     // offset:0x02C	type:FLOAT.0
	float                            _0x44BE4812;                     // offset:0x030	type:FLOAT.0
	float                            _0x34E9FFB7;                     // offset:0x034	type:FLOAT.0
	float                            parameterIntensity;              // offset:0x038	type:FLOAT.0
	float                            _0xB5168DE5;                     // offset:0x03C	type:FLOAT.0
	float                            _0x2F640E5D;                     // offset:0x040	type:FLOAT.0
	float                            _0x89670AD1;                     // offset:0x044	type:FLOAT.0
	float                            _0x79C8DA5F;                     // offset:0x048	type:FLOAT.0
	float                            _0x4C7B18C8;                     // offset:0x04C	type:FLOAT.0
	float                            _0xE731E840;                     // offset:0x050	type:FLOAT.0
	float                            _0xD8FE44A2;                     // offset:0x054	type:FLOAT.0
	float                            _0xE00C9B09;                     // offset:0x058	type:FLOAT.0
	float                            _0x6927EA45;                     // offset:0x05C	type:FLOAT.0
	float                            _0xBF9BBC52;                     // offset:0x060	type:FLOAT.0
	float                            _0x423C7ED8;                     // offset:0x064	type:FLOAT.0
	float                            _0xB5DA39C7;                     // offset:0x068	type:FLOAT.0
	float                            _0x46A6B96F;                     // offset:0x06C	type:FLOAT.0
};

struct camThirdPersonPedAssistedAimCameraLockOnAlignmentSettings
{
	string                           DofSettings;                     // offset:0x008	type:STRING.ATHASHVALUE
	float                            _0x82A7D5F5;                     // offset:0x00C	type:FLOAT.0
	float                            _0x47FD2640;                     // offset:0x010	type:FLOAT.0
	float                            _0x74776271;                     // offset:0x014	type:FLOAT.0
	float                            IdleCmini;                       // offset:0x018	type:FLOAT.0
	float                            _0xB6D98496;                     // offset:0x01C	type:FLOAT.0
	float                            _0xEA2A0BC3;                     // offset:0x020	type:FLOAT.0
	float                            _0xF56CBD9F;                     // offset:0x024	type:FLOAT.0
	float                            _0xD364A47F;                     // offset:0x028	type:FLOAT.0
	float                            _0x911384EC;                     // offset:0x02C	type:FLOAT.0
	float                            _0xAC83EBCC;                     // offset:0x030	type:FLOAT.0
};

struct camThirdPersonPedAssistedAimCameraMetadata : camThirdPersonPedAimCameraMetadata
{
	bool                                                                      _0x9BB62106;                     // offset:0x430	type:BOOL.0
	string                                                                    IdleShakeRef;                    // offset:0x434	type:STRING.ATHASHVALUE
	float                                                                     _0xBCB2C3EC;                     // offset:0x438	type:FLOAT.0
	float                                                                     _0x12B5C146;                     // offset:0x43C	type:FLOAT.0
	float                                                                     _0xCE0652D2;                     // offset:0x440	type:FLOAT.0
	float                                                                     _0xC063B0A0;                     // offset:0x444	type:FLOAT.0
	struct camThirdPersonPedAssistedAimCameraShakeActivityScalingSettings     _0x9AAFA35C;                     // offset:0x448	type:STRUCT.STRUCTURE
	struct camThirdPersonPedAssistedAimCameraRunningShakeSettings             _0x654D84A9;                     // offset:0x460	type:STRUCT.STRUCTURE
	struct camThirdPersonPedAssistedAimCameraRunningShakeSettings             _0x95E7A27D;                     // offset:0x478	type:STRUCT.STRUCTURE
	struct camThirdPersonPedAssistedAimCameraPivotScalingSettings             _0xCE362611;                     // offset:0x490	type:STRUCT.STRUCTURE
	struct camThirdPersonPedAssistedAimCameraShootingFocusSettings            _0x3DF4912D;                     // offset:0x4C8	type:STRUCT.STRUCTURE
	struct camThirdPersonPedAssistedAimCameraCinematicMomentSettings          _0x8AF622D4;                     // offset:0x500	type:STRUCT.STRUCTURE
	struct camThirdPersonPedAssistedAimCameraRecoilShakeScalingSettings       _0xECF9FDA9;                     // offset:0x5B8	type:STRUCT.STRUCTURE
	struct camThirdPersonPedAssistedAimCameraInCoverSettings                  _0x99C5FA43;                     // offset:0x5D8	type:STRUCT.STRUCTURE
};

struct camThirdPersonPedAssistedAimCameraPivotScalingSettings
{
	float                            SpringConstant;                  // offset:0x008	type:FLOAT.0
	float                            _0xC426AA5A;                     // offset:0x00C	type:FLOAT.0
	float                            MaxZoomFactor;                   // offset:0x010	type:FLOAT.0
	float                            _0x49E2F46D;                     // offset:0x014	type:FLOAT.0
	float                            _0xFE525DE5;                     // offset:0x018	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x01C	type:FLOAT.0
	float                            _0x946AED60;                     // offset:0x020	type:FLOAT.0
	float                            _0x5E4D19C1;                     // offset:0x024	type:FLOAT.0
	float                            ErrorThreshold;                  // offset:0x028	type:FLOAT.0
	float                            SideOffset;                      // offset:0x02C	type:FLOAT.0
	float                            _0xBDE3A23D;                     // offset:0x030	type:FLOAT.0
	float                            _0xA358298B;                     // offset:0x034	type:FLOAT.0
};

struct camThirdPersonPedAssistedAimCameraPlayerFramingSettings
{
	uint                             AttackDelay;                     // offset:0x008	type:UINT.0
	uint                             AttackDuration;                  // offset:0x00C	type:UINT.0
	uint                             ReleaseDelay;                    // offset:0x010	type:UINT.0
	float                            _0x7259B542;                     // offset:0x014	type:FLOAT.0
	float                            DesiredPitch;                    // offset:0x018	type:FLOAT.0
	float                            _0xB6D98496;                     // offset:0x01C	type:FLOAT.0
	float                            _0xEA2A0BC3;                     // offset:0x020	type:FLOAT.0
	float                            _0xF56CBD9F;                     // offset:0x024	type:FLOAT.0
	float                            _0xD97076F4;                     // offset:0x028	type:FLOAT.0
};

struct camThirdPersonPedAssistedAimCameraRecoilShakeScalingSettings
{
	bool                             _0x25B90CBD;                     // offset:0x008	type:BOOL.0
	float                            _0xD0AE64B7;                     // offset:0x00C	type:FLOAT.0
	float                            _0x6DC4B401;                     // offset:0x010	type:FLOAT.0
	float                            _0x182BC63C;                     // offset:0x014	type:FLOAT.0
	float                            _0x8996E7F1;                     // offset:0x018	type:FLOAT.0
};

struct camThirdPersonPedAssistedAimCameraRunningShakeSettings
{
	string                           ShakeRef;                        // offset:0x008	type:STRING.ATHASHVALUE
	float                            MinAmplitude;                    // offset:0x00C	type:FLOAT.0
	float                            MaxAmplitude;                    // offset:0x010	type:FLOAT.0
	bool                             _0xB7CE28C9;                     // offset:0x014	type:BOOL.0
	bool                             _0x911A0EAC;                     // offset:0x015	type:BOOL.0
	bool                             _0x54E998B8;                     // offset:0x016	type:BOOL.0
};

struct camThirdPersonPedAssistedAimCameraShakeActivityScalingSettings
{
	float                            AmplitudeScale;                  // offset:0x008	type:FLOAT.0
	float                            BlendInSpringConstant;           // offset:0x00C	type:FLOAT.0
	float                            BlendOutSpringConstant;          // offset:0x010	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x014	type:FLOAT.0
};

struct camThirdPersonPedAssistedAimCameraShootingFocusSettings
{
	bool                             _0x69FFF224;                     // offset:0x008	type:BOOL.0
	float                            _0x15046499;                     // offset:0x00C	type:FLOAT.0
	float                            BlendInSpringConstant;           // offset:0x010	type:FLOAT.0
	float                            BlendOutSpringConstant;          // offset:0x014	type:FLOAT.0
	float                            SpringDampingRatio;              // offset:0x018	type:FLOAT.0
	float                            _0x9534E50A;                     // offset:0x01C	type:FLOAT.0
	float                            ScreenRatioForMinFootRoom;       // offset:0x020	type:FLOAT.0
	float                            ScreenRatioForMaxFootRoom;       // offset:0x024	type:FLOAT.0
	float                            ScreenRatioForMinFootRoomInTightSpace; // offset:0x028	type:FLOAT.0
	float                            ScreenRatioForMaxFootRoomInTightSpace; // offset:0x02C	type:FLOAT.0
	float                            MaxZoomFactor;                   // offset:0x030	type:FLOAT.0
};

struct camThirdPersonPedMeleeAimCameraMetadata : camThirdPersonPedAimCameraMetadata
{
	float                            _0xBE7AFDE3;                     // offset:0x430	type:FLOAT.0
	vec2                             _0xAC2A47E8;                     // offset:0x434	type:VECTOR2.0
	float                            _0x9513CCF3;                     // offset:0x43C	type:FLOAT.0
	float                            _0xAD126040;                     // offset:0x440	type:FLOAT.0
	float                            _0x796D7CE7;                     // offset:0x444	type:FLOAT.0
	float                            _0xFB85BBF5;                     // offset:0x448	type:FLOAT.0
	float                            _0xD38F103F;                     // offset:0x44C	type:FLOAT.0
	float                            _0x3BA40144;                     // offset:0x450	type:FLOAT.0
	float                            _0x76BB124B;                     // offset:0x454	type:FLOAT.0
};

struct camThirdPersonVehicleAimCameraMetadata : camThirdPersonAimCameraMetadata
{
	bool                             ShouldUseLockOnAimingForDriver;  // offset:0x390	type:BOOL.0
	bool                             ShouldUseLockOnAimingForPassenger; // offset:0x391	type:BOOL.0
	float                            ExtraSideOffsetForHangingOnLeftSide; // offset:0x394	type:FLOAT.0
	float                            ExtraSideOffsetForHangingOnRightSide; // offset:0x398	type:FLOAT.0
};

struct camTimedSplineCameraMetadata : camSmoothedSplineCameraMetadata
{
};

struct camVehicleCustomSettingsMetadata : camBaseObjectMetadata
{
	struct camVehicleCustomSettingsMetadataDoorAlignmentSettings                          DoorAlignmentSettings;           // offset:0x010	type:STRUCT.STRUCTURE
	struct camVehicleCustomSettingsMetadataExitSeatPhaseForCameraExitSettings             _0xA2A5F416;                     // offset:0x038	type:STRUCT.STRUCTURE
	struct camVehicleCustomSettingsMetadataMultiplayerPassengerCameraHashSettings         _0x21261304;                     // offset:0x048	type:STRUCT.STRUCTURE
	struct camVehicleCustomSettingsMetadataInvalidCinematcShotsRefsForVehicleSettings     _0x3A847E97;                     // offset:0x068	type:STRUCT.STRUCTURE
	struct camVehicleCustomSettingsMetadataAdditionalBoundScalingVehicleSettings          _0x38F7F865;                     // offset:0x088	type:STRUCT.STRUCTURE
	struct camVehicleCustomSettingsMetadataSeatSpecficCameras                             _0xE5055EA6;                     // offset:0x098	type:STRUCT.STRUCTURE
	bool                                                                                  _0xC4A59764;                     // offset:0x0B8	type:BOOL.0
};

struct camVehicleCustomSettingsMetadataAdditionalBoundScalingVehicleSettings
{
	bool                             ShouldConsiderData;              // offset:0x008	type:BOOL.0
	float                            HeightScaling;                   // offset:0x00C	type:FLOAT.0
};

struct camVehicleCustomSettingsMetadataDoorAlignmentSettings
{
	bool                             ShouldConsiderData;              // offset:0x008	type:BOOL.0
	bool                             ShouldAlignOnVehicleExit;        // offset:0x009	type:BOOL.0
	bool                             _0x27E5CEF0;                     // offset:0x00A	type:BOOL.0
	float                            AlignmentConeOffsetTowardsVehicleFrontAngle; // offset:0x00C	type:FLOAT.0
	float                            AlignmentConeAngle;              // offset:0x010	type:FLOAT.0
	float                            AlignmentConeAngleWithTrailer;   // offset:0x014	type:FLOAT.0
	float                            MinOrientationDeltaToCut;        // offset:0x018	type:FLOAT.0
	float                            MinOrientationDeltaToCutForReverseAngle; // offset:0x01C	type:FLOAT.0
	float                            MinOrientationDeltaToCutWithTrailer; // offset:0x020	type:FLOAT.0
};

struct camVehicleCustomSettingsMetadataExitSeatPhaseForCameraExitSettings
{
	bool                             ShouldConsiderData;              // offset:0x008	type:BOOL.0
	float                            _0x97EFC192;                     // offset:0x00C	type:FLOAT.0
};

struct camVehicleCustomSettingsMetadataInvalidCinematcShotsRefsForVehicleSettings
{
	bool                             ShouldConsiderData;              // offset:0x008	type:BOOL.0
	array<string>                    _0xD5548AC6;                     // offset:0x010	type:ARRAY.ATARRAY
};

struct camVehicleCustomSettingsMetadataMultiplayerPassengerCameraHashSettings
{
	bool                             ShouldConsiderData;              // offset:0x008	type:BOOL.0
	string                           _0x068B232F;                     // offset:0x00C	type:STRING.ATHASHVALUE
	array<uint>                      _0x8F0E278E;                     // offset:0x010	type:ARRAY.ATARRAY
};

struct camVehicleCustomSettingsMetadataSeatSpecficCameras
{
	bool                                     ShouldConsiderData;              // offset:0x008	type:BOOL.0
	array<struct camSeatSpecificCameras>     _0x5A7546E2;                     // offset:0x010	type:ARRAY.ATARRAY
};

struct camVehicleRocketSettings
{
	string                           ShakeRef;                        // offset:0x008	type:STRING.ATHASHVALUE
	float                            ShakeAmplitude;                  // offset:0x00C	type:FLOAT.0
};

struct cutf_bool : rage__cutfAttribute
{
	bool                             Value;                           // offset:0x010	type:BOOL.0
};

struct cutf_float : rage__cutfAttribute
{
	float                            Value;                           // offset:0x010	type:FLOAT.0
};

struct cutf_int : rage__cutfAttribute
{
	int                              Value;                           // offset:0x010	type:INT.0
};

struct cutf_string : rage__cutfAttribute
{
	string                           Value;                           // offset:0x010	type:STRING.ATSTRING
};

struct debugLocation
{
	string                           name;                            // offset:0x000	type:STRING.ATHASHVALUE
	vec3                             playerPos;                       // offset:0x010	type:VECTOR3.0
	matrix34                         cameraMtx;                       // offset:0x020	type:MATRIX34.0
	uint                             hour;                            // offset:0x060	type:UINT.0
};

struct debugLocationList
{
	array<struct debugLocation>      locationList;                    // offset:0x000	type:ARRAY.ATARRAY
};

struct fwAllConfigs
{
	array<struct fwConfigWithFilter>     ConfigArray;                     // offset:0x000	type:ARRAY.ATARRAY
};

struct fwClipDictionaryBuildMetadata
{
	uint                             sizeBefore;                      // offset:0x008	type:UINT.0
	uint                             sizeAfter;                       // offset:0x00C	type:UINT.0
};

struct fwClipDictionaryMetadata
{
	bitset<enum eStreamingPolicy>     streamingPolicy;                 // offset:0x000	type:BITSET.32BIT
	string                            memoryGroup;                     // offset:0x004	type:STRING.ATHASHVALUE
	enum eStreamingPriority           streamingPriority;               // offset:0x008	type:ENUM.32BIT
};

struct fwClipItem
{
};

struct fwClipItemWithProps : fwClipItem
{
	bitset<enum eAnimPlayerFlag>     flags;                           // offset:0x008	type:BITSET.32BIT
	enum eAnimPriority               priority;                        // offset:0x00C	type:ENUM.32BIT
	string                           boneMask;                        // offset:0x010	type:STRING.ATHASHVALUE
};

struct fwClipRpfBuildMetadata
{
	string                                                name;                            // offset:0x008	type:STRING.ATHASHVALUE
	map<string, struct fwClipDictionaryBuildMetadata>     dictionaries;                    // offset:0x010	type:MAP.ATBINARYMAP
};

struct fwClipSet
{
	string                             fallbackId;                      // offset:0x010	type:STRING.ATHASHVALUE
	string                             clipDictionaryName;              // offset:0x014	type:STRING.ATHASHVALUE
	map<string, struct fwClipItem>     clipItems;                       // offset:0x018	type:MAP.ATBINARYMAP
	array<string>                      moveNetworkFlags;                // offset:0x030	type:ARRAY.ATARRAY
};

struct fwClipSetManager
{
	map<string, struct fwClipSet>                    clipSets;                        // offset:0x000	type:MAP.ATBINARYMAP
	map<string, struct fwClipDictionaryMetadata>     clipDictionaryMetadatas;         // offset:0x018	type:MAP.ATBINARYMAP
	map<string, struct fwMemoryGroupMetadata>        memoryGroupMetadatas;            // offset:0x030	type:MAP.ATBINARYMAP
	map<string, struct fwMemorySituation>            memorySituations;                // offset:0x048	type:MAP.ATBINARYMAP
	map<string, struct fwClipVariationSet>           clipVariationSets;               // offset:0x060	type:MAP.ATBINARYMAP
};

struct fwClipSetWithGetup : fwClipSet
{
	string                           GetupSet;                        // offset:0x058	type:STRING.ATHASHVALUE
	string                           DeadBlendOutSet;                 // offset:0x05C	type:STRING.ATHASHVALUE
	bool                             AllowAnimatedDeadFall;           // offset:0x060	type:BOOL.0
	string                           AnimatedDeadFallSet;             // offset:0x064	type:STRING.ATHASHVALUE
};

struct fwClipVariationSet
{
	array<string>                    clips;                           // offset:0x000	type:ARRAY.ATARRAY
};

struct fwConfig
{
	struct fwConfigManager__fwPoolSizeEntryArray     PoolSizes;                       // offset:0x008	type:STRUCT.STRUCTURE
};

struct fwConfigManager__fwPoolSizeEntry
{
	string                           PoolName;                        // offset:0x000	type:STRING.CONST_STRING
	int                              PoolSize;                        // offset:0x008	type:INT.0
};

struct fwConfigManager__fwPoolSizeEntryArray
{
	array<struct fwConfigManager__fwPoolSizeEntry>     Entries;                         // offset:0x000	type:ARRAY.ATARRAY
};

struct fwConfigWithFilter : fwConfigWithFilterBase
{
};

struct fwConfigWithFilterBase
{
	string                           Build;                           // offset:0x000	type:STRING.CONST_STRING
	string                           Platforms;                       // offset:0x008	type:STRING.CONST_STRING
	struct fwConfig                  Config;                          // offset:0x010	type:STRUCT.POINTER
};

struct fwDirectedClipItemWithProps : fwClipItemWithProps
{
	float                            direction;                       // offset:0x018	type:FLOAT.0
};

struct fwExpressionSet
{
	string                           dictionaryName;                  // offset:0x000	type:STRING.ATHASHVALUE
	array<string>                    expressions;                     // offset:0x008	type:ARRAY.ATARRAY
};

struct fwExpressionSetManager
{
	map<string, struct fwExpressionSet>     expressionSets;                  // offset:0x000	type:MAP.ATBINARYMAP
};

struct fwFacialClipSetGroup
{
	string                                         baseClipSet;                     // offset:0x000	type:STRING.ATHASHVALUE
	array<struct fwFacialClipSetVariationInfo>     Variations;                      // offset:0x008	type:ARRAY.ATARRAY
};

struct fwFacialClipSetGroupManager
{
	map<string, struct fwFacialClipSetGroup>     facialClipSetGroups;             // offset:0x000	type:MAP.ATBINARYMAP
};

struct fwFacialClipSetVariationInfo
{
	enum VariationMood               mood;                            // offset:0x000	type:ENUM.32BIT
	string                           clipSet;                         // offset:0x004	type:STRING.ATHASHVALUE
	float                            minimumResidentTime;             // offset:0x008	type:FLOAT.0
	float                            baseMinimumPlaybackTime;         // offset:0x00C	type:FLOAT.0
	float                            baseMaximumPlaybackTime;         // offset:0x010	type:FLOAT.0
	float                            minimumPlaybackTime;             // offset:0x014	type:FLOAT.0
	float                            maximumPlaybackTime;             // offset:0x018	type:FLOAT.0
	float                            blendInTime;                     // offset:0x01C	type:FLOAT.0
	float                            blendOutTime;                    // offset:0x020	type:FLOAT.0
};

struct fwFrameFilter
{
	string                                       Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct fwFrameFilter_TrackIdIndex>     TrackIdIndices;                  // offset:0x008	type:ARRAY.ATARRAY
	array<float>                                 Weights;                         // offset:0x018	type:ARRAY.ATARRAY
};

struct fwFrameFilterDictionary
{
	string                           Name;                            // offset:0x000	type:STRING.ATHASHVALUE
	array<struct fwFrameFilter>      FrameFilters;                    // offset:0x008	type:ARRAY.ATARRAY
};

struct fwFrameFilterDictionaryStore
{
	array<struct fwFrameFilterDictionary>     FrameFilterDictionaries;         // offset:0x000	type:ARRAY.ATARRAY
};

struct fwFrameFilter_TrackIdIndex
{
	uchar                            Track;                           // offset:0x000	type:UCHAR.0
	enum eAnimBoneTag                Id;                              // offset:0x004	type:ENUM.32BIT
	uchar                            WeightIndex;                     // offset:0x008	type:UCHAR.0
};

struct fwMemoryGroupMetadata
{
	uint                             _0x284DDB57;                     // offset:0x000	type:UINT.0
	uint                             _0x63013DEC;                     // offset:0x004	type:UINT.0
};

struct fwMemorySituation
{
	array<struct fwMemorySituation__Adjustment>     Adjustments;                     // offset:0x000	type:ARRAY.ATARRAY
};

struct fwMemorySituation__Adjustment
{
	string                           MemoryGroup;                     // offset:0x000	type:STRING.ATHASHVALUE
	int                              Amount;                          // offset:0x004	type:INT.0
};

struct fwMoveNetworkDefs
{
	array<string>                    moveNetworkDefs;                 // offset:0x008	type:ARRAY.ATARRAY
};

struct fwProfanityFilter
{
	array<string>                    profaneTerms;                    // offset:0x000	type:ARRAY.ATARRAY
	array<string>                    reservedTerms;                   // offset:0x010	type:ARRAY.ATARRAY
	array<string>                    reservedFSCharacters;            // offset:0x020	type:ARRAY.ATARRAY
};

struct naOcclusionInteriorMetadata
{
	array<struct naOcclusionPortalInfoMetadata>     PortalInfoList;                  // offset:0x000	type:ARRAY.ATARRAY
	array<struct naOcclusionPathNodeMetadata>       PathNodeList;                    // offset:0x010	type:ARRAY.ATARRAY
};

struct naOcclusionPathNodeChildMetadata
{
	uint                             PathNodeKey;                     // offset:0x000	type:UINT.0
	int                              PortalInfoIdx;                   // offset:0x004	type:INT.0
};

struct naOcclusionPathNodeMetadata
{
	uint                                               Key;                             // offset:0x000	type:UINT.0
	array<struct naOcclusionPathNodeChildMetadata>     PathNodeChildList;               // offset:0x008	type:ARRAY.ATARRAY
};

struct naOcclusionPortalEntityMetadata
{
	uint                             LinkType;                        // offset:0x000	type:UINT.0
	float                            MaxOcclusion;                    // offset:0x004	type:FLOAT.0
	uint                             EntityModelHashkey;              // offset:0x008	type:UINT.0
	bool                             IsDoor;                          // offset:0x00C	type:BOOL.0
	bool                             IsGlass;                         // offset:0x00D	type:BOOL.0
};

struct naOcclusionPortalInfoMetadata
{
	uint                                              InteriorProxyHash;               // offset:0x000	type:UINT.0
	int                                               PortalIdx;                       // offset:0x004	type:INT.0
	int                                               RoomIdx;                         // offset:0x008	type:INT.0
	uint                                              DestInteriorHash;                // offset:0x00C	type:UINT.0
	int                                               DestRoomIdx;                     // offset:0x010	type:INT.0
	array<struct naOcclusionPortalEntityMetadata>     PortalEntityList;                // offset:0x018	type:ARRAY.ATARRAY
};

struct netCatalog
{
	map<string, struct netCatalogBaseItem>     catalog;                         // offset:0x058	type:MAP.ATMAP
};

struct netCatalogBaseItem
{
	int                              keyhash;                         // offset:0x008	type:INT.0
	string                           category;                        // offset:0x00C	type:STRING.ATHASHVALUE
	int                              price;                           // offset:0x010	type:INT.0
};

struct netCatalogGeneralItem : netCatalogBaseItem
{
	string                           statName;                        // offset:0x018	type:STRING.ATSTRING
	enum _0x745177BA                 storageType;                     // offset:0x028	type:ENUM.8BIT
	uchar                            bitShift;                        // offset:0x029	type:UCHAR.0
	uchar                            bitSize;                         // offset:0x02A	type:UCHAR.0
	bool                             _0x28B294D5;                     // offset:0x02B	type:BOOL.0
};

struct netCatalogInventoryItem : netCatalogBaseItem
{
	string                           statName;                        // offset:0x018	type:STRING.ATSTRING
	bool                             _0x28B294D5;                     // offset:0x028	type:BOOL.0
};

struct netCatalogOnlyItem : netCatalogBaseItem
{
};

struct netCatalogOnlyItemWithStat : netCatalogBaseItem
{
	int                              statValue;                       // offset:0x018	type:INT.0
};

struct netCatalogPackedStatInventoryItem : netCatalogBaseItem
{
	int                              statEnumValue;                   // offset:0x018	type:INT.0
};

struct netCatalogServiceItem : netCatalogBaseItem
{
};

struct netCatalogServiceLimitedItem : netCatalogBaseItem
{
};

struct netCatalogServiceWithThresholdItem : netCatalogBaseItem
{
};

struct netInventoryBaseItem
{
	string                           itemKey;                         // offset:0x008	type:STRING.ATHASHVALUE
	int64                            amount;                          // offset:0x010	type:INT64.0
	int64                            statvalue;                       // offset:0x018	type:INT64.0
	int64                            pricepaid;                       // offset:0x020	type:INT64.0
};

struct netInventoryPackedStatsItem : netInventoryBaseItem
{
	int                              charSlot;                        // offset:0x028	type:INT.0
};

struct phMaterialMgrGta__RumbleProfileList
{
	array<struct phRumbleProfile>     rumbleProfiles;                  // offset:0x000	type:ARRAY.ATARRAY
};

struct phRumbleProfile
{
	string                           profileName;                     // offset:0x004	type:STRING.ATHASHVALUE
	float                            triggerProbability;              // offset:0x008	type:FLOAT.0
	float                            minVelocity;                     // offset:0x00C	type:FLOAT.0
	float                            maxVelocity;                     // offset:0x010	type:FLOAT.0
	uint                             triggerInterval;                 // offset:0x014	type:UINT.0
	ushort                           durationMin;                     // offset:0x018	type:USHORT.0
	ushort                           durationMax;                     // offset:0x01A	type:USHORT.0
	uchar                            minVelocityFrequency;            // offset:0x01C	type:UCHAR.0
	uchar                            frequencyMin_1;                  // offset:0x01D	type:UCHAR.0
	uchar                            frequencyMax_1;                  // offset:0x01E	type:UCHAR.0
	uchar                            frequencyMin_2;                  // offset:0x01F	type:UCHAR.0
	uchar                            frequencyMax_2;                  // offset:0x020	type:UCHAR.0
};

struct rage__ControlInput__AxisDefinition
{
	enum rage__InputType             Input;                           // offset:0x008	type:ENUM.32BIT
	enum rage__InputType             Negative;                        // offset:0x00C	type:ENUM.32BIT
	enum rage__InputType             Positive;                        // offset:0x010	type:ENUM.32BIT
};

struct rage__ControlInput__ConflictList
{
	array<string>                    Categories;                      // offset:0x008	type:ARRAY.ATARRAY
};

struct rage__ControlInput__ControlSettings
{
	array<struct rage__ControlInput__Mapping>     Mappings;                        // offset:0x008	type:ARRAY.ATARRAY
};

struct rage__ControlInput__DeviceSettings
{
	string                                         Description;                     // offset:0x008	type:STRING.WIDE_MEMBER
	struct rage__ControlInput__ControlSettings     ControlSettings;                 // offset:0x070	type:STRUCT.STRUCTURE
};

struct rage__ControlInput__DynamicMappingList
{
	map<string, struct rage__ControlInput__DynamicMappings>     DynamicMappings;                 // offset:0x008	type:MAP.ATMAP
};

struct rage__ControlInput__DynamicMappings
{
	array<struct _0xBDBD4990, 19>     Mappings;                        // offset:0x008	type:ARRAY.ATFIXEDARRAY
};

struct rage__ControlInput__Gamepad__Definition
{
	array<struct rage__ControlInput__Gamepad__Source>     Definitions;                     // offset:0x008	type:ARRAY.ATARRAY
};

struct rage__ControlInput__Gamepad__DefinitionList
{
	map<string, struct rage__ControlInput__Gamepad__Definition>     Devices;                         // offset:0x008	type:MAP.ATMAP
};

struct rage__ControlInput__Gamepad__Source
{
	enum rage__ioMapperParameter     PadParameter;                    // offset:0x008	type:ENUM.32BIT
	enum rage__ioMapperParameter     JoystickParameter;               // offset:0x00C	type:ENUM.32BIT
	enum rage__ioMapperSource        JoystickSource;                  // offset:0x010	type:ENUM.32BIT
};

struct rage__ControlInput__InputGroupDefinition
{
	enum rage__InputGroup              InputGroup;                      // offset:0x008	type:ENUM.32BIT
	array<enum rage__InputType, 6>     Inputs;                          // offset:0x00C	type:ARRAY.ATFIXEDARRAY
};

struct rage__ControlInput__InputList
{
	array<enum rage__InputType>      Inputs;                          // offset:0x008	type:ARRAY.ATARRAY
};

struct rage__ControlInput__InputSettings
{
	array<enum rage__InputType>                                    HistorySupport;                  // offset:0x008	type:ARRAY.ATARRAY
	array<struct _0x9D1D47E9>                                      MapperAssignements;              // offset:0x018	type:ARRAY.ATARRAY
	array<struct rage__ControlInput__RelatedInputs>                RelatedInputs;                   // offset:0x028	type:ARRAY.ATARRAY
	array<struct rage__ControlInput__AxisDefinition>               AxisDefinitions;                 // offset:0x038	type:ARRAY.ATARRAY
	array<struct rage__ControlInput__InputGroupDefinition, 32>     InputGroupDefinitions;           // offset:0x048	type:ARRAY.ATFIXEDARRAY
};

struct rage__ControlInput__Keyboard__KeyInfo
{
	enum rage__ioMapperParameter     Key;                             // offset:0x008	type:ENUM.32BIT
	uint                             Icon;                            // offset:0x00C	type:UINT.0
	string                           Text;                            // offset:0x010	type:STRING.MEMBER
};

struct rage__ControlInput__Keyboard__Layout
{
	array<struct rage__ControlInput__Keyboard__KeyInfo, 255>     Keys;                            // offset:0x008	type:ARRAY.ATFIXEDARRAY
};

struct rage__ControlInput__Mapping
{
	enum rage__InputType                    Input;                           // offset:0x008	type:ENUM.32BIT
	enum rage__ioMapperSource               Source;                          // offset:0x00C	type:ENUM.32BIT
	array<enum rage__ioMapperParameter>     Parameters;                      // offset:0x010	type:ARRAY.ATARRAY
};

struct rage__ControlInput__MappingList
{
	string                           Name;                            // offset:0x008	type:STRING.ATHASHVALUE
	array<string>                    Categories;                      // offset:0x010	type:ARRAY.ATARRAY
};

struct rage__ControlInput__MappingSettings
{
	map<string, struct rage__ControlInput__InputList>     Categories;                      // offset:0x008	type:MAP.ATMAP
	array<struct rage__ControlInput__ConflictList>        ConflictList;                    // offset:0x018	type:ARRAY.ATARRAY
	array<struct rage__ControlInput__InputList>           ConflictExceptions;              // offset:0x028	type:ARRAY.ATARRAY
	array<struct rage__ControlInput__MappingList>         MappingList;                     // offset:0x038	type:ARRAY.ATARRAY
	array<string>                                         UnmappableList;                  // offset:0x048	type:ARRAY.ATARRAY
	array<struct rage__ControlInput__InputList>           IdenticalMappingLists;           // offset:0x058	type:ARRAY.ATARRAY
	struct rage__ControlInput__MouseSettings              MouseSettings;                   // offset:0x068	type:STRUCT.STRUCTURE
};

struct rage__ControlInput__MouseSettings
{
	float                            OnFootMinMouseSensitivity;       // offset:0x008	type:FLOAT.0
	float                            OnFootMaxMouseSensitivity;       // offset:0x00C	type:FLOAT.0
	float                            OnFootMouseSensitivityPower;     // offset:0x010	type:FLOAT.0
	float                            InVehicleMinMouseSensitivity;    // offset:0x014	type:FLOAT.0
	float                            InVehicleMaxMouseSensitivity;    // offset:0x018	type:FLOAT.0
	float                            InVehicleMouseSensitivityPower;  // offset:0x01C	type:FLOAT.0
};

struct rage__ControlInput__RelatedInputs
{
	array<enum rage__InputType>      Inputs;                          // offset:0x008	type:ARRAY.ATARRAY
};

struct rage__InputCalibration__Calibration
{
	array<struct rage__InputCalibration__Data>     Data;                            // offset:0x008	type:ARRAY.ATARRAY
};

struct rage__InputCalibration__Calibrations
{
	map<string, struct rage__InputCalibration__Calibration>     Devices;                         // offset:0x008	type:MAP.ATMAP
};

struct rage__InputCalibration__Data
{
	enum rage__ioMapperParameter     Parameter;                       // offset:0x008	type:ENUM.32BIT
	int                              Value;                           // offset:0x00C	type:INT.0
};

struct rage__NMBehavior
{
	string                           name;                            // offset:0x008	type:STRING.MEMBER
	string                           description;                     // offset:0x048	type:STRING.ATHASHVALUE
	bool                             allowDuplicates;                 // offset:0x04C	type:BOOL.0
	bool                             taskMessage;                     // offset:0x04D	type:BOOL.0
	array<struct rage__NMParam>      params;                          // offset:0x050	type:ARRAY.ATARRAY
};

struct rage__NMBehaviorInst
{
	string                           name;                            // offset:0x008	type:STRING.MEMBER
	string                           description;                     // offset:0x048	type:STRING.ATHASHVALUE
	struct void                      pBehavior;                       // offset:0x050	type:STRUCT.EXTERNAL_NAMED
	array<struct rage__NMValue>      values;                          // offset:0x058	type:ARRAY.ATARRAY
};

struct rage__NMBehaviorPool
{
	array<struct rage__NMBehavior>     behaviors;                       // offset:0x008	type:ARRAY.ATARRAY
};

struct rage__NMParam
{
	string                           name;                            // offset:0x008	type:STRING.MEMBER
	string                           type;                            // offset:0x048	type:STRING.MEMBER
	string                           init;                            // offset:0x050	type:STRING.MEMBER
	string                           description;                     // offset:0x090	type:STRING.ATHASHVALUE
	float                            min;                             // offset:0x094	type:FLOAT.0
	float                            max;                             // offset:0x098	type:FLOAT.0
	float                            step;                            // offset:0x09C	type:FLOAT.0
};

struct rage__NMValue
{
	string                           name;                            // offset:0x008	type:STRING.MEMBER
};

struct rage__NMValueBool : rage__NMValue
{
	bool                             value;                           // offset:0x048	type:BOOL.0
};

struct rage__NMValueFloat : rage__NMValue
{
	float                            value;                           // offset:0x048	type:FLOAT.0
};

struct rage__NMValueInt : rage__NMValue
{
	int                              value;                           // offset:0x048	type:INT.0
};

struct rage__NMValueString : rage__NMValue
{
	string                           value;                           // offset:0x048	type:STRING.MEMBER
};

struct rage__NMValueVector3 : rage__NMValue
{
	vec3                             value;                           // offset:0x050	type:VECTOR3.0
};

struct rage__SAttachmentDetails
{
	int                              parent;                          // offset:0x000	type:INT.0
	int                              child;                           // offset:0x004	type:INT.0
	int                              boneid;                          // offset:0x008	type:INT.0
};

struct rage__SBlockDetails
{
	array<vec3, 4>                   vCorners;                        // offset:0x000	type:ARRAY.MEMBER
	float                            fHeight;                         // offset:0x040	type:FLOAT.0
};

struct rage__SCamcorderOverlay
{
	int                              iStartTime;                      // offset:0x000	type:INT.0
	int                              iEndTime;                        // offset:0x004	type:INT.0
};

struct rage__SDrawDistanceDetails
{
	int                              iStartTime;                      // offset:0x000	type:INT.0
	float                            fNearClip;                       // offset:0x004	type:FLOAT.0
	float                            fFarClip;                        // offset:0x008	type:FLOAT.0
	float                            fDistance;                       // offset:0x00C	type:FLOAT.0
};

struct rage__SEffectsDetails
{
	int                              iType;                           // offset:0x000	type:INT.0
	int                              SectionCreated;                  // offset:0x004	type:INT.0
	int                              iAttachedTo;                     // offset:0x018	type:INT.0
	int                              iStartTime;                      // offset:0x01C	type:INT.0
	int                              iEndTime;                        // offset:0x020	type:INT.0
	int                              iBoneTag;                        // offset:0x024	type:INT.0
	vec3                             vPos;                            // offset:0x030	type:VECTOR3.0
	vec3                             vDir;                            // offset:0x040	type:VECTOR3.0
	int                              iEffectId;                       // offset:0x050	type:INT.0
	string                           cOriginalEffectName;             // offset:0x054	type:STRING.MEMBER
	string                           cEffectName;                     // offset:0x0B8	type:STRING.MEMBER
	string                           cEffectAnim;                     // offset:0x0EA	type:STRING.MEMBER
	array<string, 4>                 cEvoName;                        // offset:0x11C	type:ARRAY.MEMBER
	array<float, 4>                  fEvoValue;                       // offset:0x16C	type:ARRAY.MEMBER
};

struct rage__SFixupObjectDetails
{
	vec3                             vPosition;                       // offset:0x000	type:VECTOR3.0
	string                           cObjectName;                     // offset:0x010	type:STRING.MEMBER
	float                            fRadius;                         // offset:0x050	type:FLOAT.0
};

struct rage__SHiddenObjectDetails
{
	vec3                             vPosition;                       // offset:0x000	type:VECTOR3.0
	string                           cObjectName;                     // offset:0x010	type:STRING.MEMBER
	float                            fRadius;                         // offset:0x050	type:FLOAT.0
};

struct rage__SLightDetails
{
	string                           cLightName;                      // offset:0x000	type:STRING.MEMBER
};

struct rage__SModelDetails
{
	int                              iId;                             // offset:0x000	type:INT.0
	string                           cModelName;                      // offset:0x004	type:STRING.MEMBER
	string                           cAnimName;                       // offset:0x044	type:STRING.MEMBER
	string                           cAnimName2;                      // offset:0x084	type:STRING.MEMBER
	int                              iFlags;                          // offset:0x0C4	type:INT.0
	string                           cCompression;                    // offset:0x0C8	type:STRING.MEMBER
	bool                             bEmpty;                          // offset:0x109	type:BOOL.0
};

struct rage__SPropDetails
{
	int                              parent;                          // offset:0x000	type:INT.0
	int                              prop;                            // offset:0x004	type:INT.0
	int                              anchor;                          // offset:0x008	type:INT.0
	int                              iSectionCreatedIn;               // offset:0x00C	type:INT.0
};

struct rage__STextIdDetails
{
	int                              iTextStartTime;                  // offset:0x000	type:INT.0
	int                              iTextDuration;                   // offset:0x004	type:INT.0
	string                           cTextOutput;                     // offset:0x008	type:STRING.MEMBER
	int                              iManualSectionCreatedIn;         // offset:0x018	type:INT.0
};

struct rage__SVariationDetails
{
	int                              iId;                             // offset:0x000	type:INT.0
	int                              iComponentId;                    // offset:0x004	type:INT.0
	int                              iDrawableId;                     // offset:0x008	type:INT.0
	int                              iTextureId;                      // offset:0x00C	type:INT.0
	int                              iStartTime;                      // offset:0x010	type:INT.0
	int                              iSectionCreatedIn;               // offset:0x014	type:INT.0
};

struct rage__SVehicleDetails
{
	int                              iId;                             // offset:0x000	type:INT.0
	uint                             iColour;                         // offset:0x004	type:UINT.1
	uchar                            iDirtLevel;                      // offset:0x008	type:UCHAR.0
	char                             iTexture;                        // offset:0x009	type:CHAR.0
};

struct rage__SVehicleRemoval
{
	int                              iId;                             // offset:0x000	type:INT.0
	int                              iBone;                           // offset:0x004	type:INT.0
};

struct rage__bgConfig
{
	array<string>                             crackTypes;                      // offset:0x008	type:ARRAY.ATARRAY
	array<struct rage__bgGlassTypeConfig>     glassTypes;                      // offset:0x018	type:ARRAY.ATARRAY
	struct rage__bgShaderVars                 shaderVars;                      // offset:0x028	type:STRUCT.STRUCTURE
};

struct rage__bgCrackStarMap
{
	string                                   cracks;                          // offset:0x008	type:STRING.CONST_STRING
	array<float, 4>                          LodPixelSizeArray;               // offset:0x010	type:ARRAY.ATRANGEARRAY
	array<struct rage__bgFloat4VarData>      float4Vars;                      // offset:0x020	type:ARRAY.ATARRAY
	array<struct rage__bgFloat2VarData>      float2Vars;                      // offset:0x030	type:ARRAY.ATARRAY
	array<struct rage__bgFloatVarData>       floatVars;                       // offset:0x040	type:ARRAY.ATARRAY
	array<struct rage__bgTextureVarData>     textureVars;                     // offset:0x050	type:ARRAY.ATARRAY
};

struct rage__bgCrackType
{
	array<struct rage__bgCrackStarMap>       crackArray;                      // offset:0x008	type:ARRAY.ATARRAY
	float                                    initialImpactKillRadius1;        // offset:0x018	type:FLOAT.0
	float                                    initialImpactKillRadius2;        // offset:0x01C	type:FLOAT.0
	float                                    subsequentImpactKillRadiusMin;   // offset:0x020	type:FLOAT.0
	float                                    subsequentImpactKillRadiusMax;   // offset:0x024	type:FLOAT.0
	float                                    decalRadiusImpactShowValueMin;   // offset:0x028	type:FLOAT.0
	float                                    decalRadiusImpactShowValueMax;   // offset:0x02C	type:FLOAT.0
	float                                    crackRadiusImpactShowValueMin;   // offset:0x030	type:FLOAT.0
	float                                    crackRadiusImpactShowValueMax;   // offset:0x034	type:FLOAT.0
	float                                    breakPieceSizeMin;               // offset:0x038	type:FLOAT.0
	float                                    breakPieceSizeMax;               // offset:0x03C	type:FLOAT.0
	float                                    crackInBetweenPiecesSizeMax;     // offset:0x040	type:FLOAT.0
	float                                    bevelSizeMax;                    // offset:0x044	type:FLOAT.0
	float                                    minThickness;                    // offset:0x048	type:FLOAT.0
	float                                    decalTextureScaleMin;            // offset:0x04C	type:FLOAT.0
	float                                    decalTextureScaleMax;            // offset:0x050	type:FLOAT.0
	bool                                     enableSequentialHit;             // offset:0x054	type:BOOL.0
	float                                    minSequentialHitPieceSize;       // offset:0x058	type:FLOAT.0
	enum bgDecalChannel                      decalTextureChannel;             // offset:0x05C	type:ENUM.32BIT
	enum bgCrackPlacementType                crackMapCenterLocation;          // offset:0x060	type:ENUM.32BIT
	enum bgCrackRotationType                 crackMapRotationType;            // offset:0x064	type:ENUM.32BIT
	enum bgCrackScalingType                  crackMapScalingType;             // offset:0x068	type:ENUM.32BIT
	float                                    crackMapOverwriteScalingX;       // offset:0x06C	type:FLOAT.0
	float                                    crackMapOverwriteScalingY;       // offset:0x070	type:FLOAT.0
	array<struct rage__bgFloat4VarData>      float4Vars;                      // offset:0x078	type:ARRAY.ATARRAY
	array<struct rage__bgFloat2VarData>      float2Vars;                      // offset:0x088	type:ARRAY.ATARRAY
	array<struct rage__bgFloatVarData>       floatVars;                       // offset:0x098	type:ARRAY.ATARRAY
	array<struct rage__bgTextureVarData>     textureVars;                     // offset:0x0A8	type:ARRAY.ATARRAY
};

struct rage__bgFloat2VarData
{
	string                           varName;                         // offset:0x008	type:STRING.CONST_STRING
	vec2                             value;                           // offset:0x010	type:VECTOR2.0
};

struct rage__bgFloat4VarData
{
	string                           varName;                         // offset:0x008	type:STRING.CONST_STRING
	vec4                             value;                           // offset:0x010	type:VECTOR4.0
};

struct rage__bgFloatVarData
{
	string                           varName;                         // offset:0x008	type:STRING.CONST_STRING
	float                            value;                           // offset:0x010	type:FLOAT.0
};

struct rage__bgGlassSize
{
	string                           glassSize;                       // offset:0x008	type:STRING.CONST_STRING
};

struct rage__bgGlassTypeConfig
{
	string                              glassType;                       // offset:0x008	type:STRING.CONST_STRING
	enum bgGlassPieceMaxNum             maxNumPieces;                    // offset:0x010	type:ENUM.32BIT
	array<struct rage__bgGlassSize>     glassSizes;                      // offset:0x018	type:ARRAY.ATARRAY
};

struct rage__bgShaderVars
{
	array<struct rage__bgTextureVarData>     textureVarDefaults;              // offset:0x008	type:ARRAY.ATARRAY
	array<struct rage__bgFloat4VarData>      float4VarDefaults;               // offset:0x018	type:ARRAY.ATARRAY
	array<struct rage__bgFloat2VarData>      float2VarDefaults;               // offset:0x028	type:ARRAY.ATARRAY
	array<struct rage__bgFloatVarData>       floatVarDefaults;                // offset:0x038	type:ARRAY.ATARRAY
	string                                   matrixGlobalVarName;             // offset:0x048	type:STRING.CONST_STRING
	int                                      matrixCount;                     // offset:0x050	type:INT.0
};

struct rage__bgTextureVarData
{
	string                           varName;                         // offset:0x008	type:STRING.CONST_STRING
	string                           textureName;                     // offset:0x010	type:STRING.CONST_STRING
};

struct rage__characterCloth
{
	array<struct rage__dataVec3V>     Poses;                           // offset:0x010	type:ARRAY.ATARRAY
	struct rage__phBoundComposite     BoundComposite;                  // offset:0x028	type:STRUCT.POINTER
	array<int>                        BoneIndex;                       // offset:0x090	type:ARRAY.ATARRAY
};

struct rage__characterClothController
{
	array<ushort>                                                 TriIndices;                      // offset:0x080	type:ARRAY.ATARRAY
	array<vec3V>                                                  OriginalPos;                     // offset:0x090	type:ARRAY.ATARRAY
	array<int>                                                    BoneIndexMap;                    // offset:0x0B0	type:ARRAY.ATARRAY
	array<struct rage__characterClothController__BindingInfo>     BindingInfo;                     // offset:0x0C0	type:ARRAY.ATARRAY
};

struct rage__characterClothControllerTuning
{
	bitset<enum rage__characterClothControllerTuning__enFlags>     Flags;                           // offset:0x000	type:BITSET.32BIT
	int                                                            ExtraPinRadiusChannels;          // offset:0x004	type:INT.0
};

struct rage__characterClothController__BindingInfo
{
	vec4                             weights;                         // offset:0x000	type:VECTOR4.0
	array<int, 4>                    blendIndices;                    // offset:0x010	type:ARRAY.MEMBER
};

struct rage__characterClothDebug
{
	array<vec3V>                     Poses;                           // offset:0x010	type:ARRAY.ATARRAY
};

struct rage__clothBridgeSimGfx
{
	array<array<float>, 4>           PinRadius;                       // offset:0x020	type:ARRAY.ATRANGEARRAY
	array<array<float>, 4>           VertexWeight;                    // offset:0x060	type:ARRAY.ATRANGEARRAY
	array<array<float>, 4>           InflationScale;                  // offset:0x0A0	type:ARRAY.ATRANGEARRAY
	array<array<ushort>, 4>          ClothDisplayMap;                 // offset:0x0E0	type:ARRAY.ATRANGEARRAY
};

struct rage__clothInstanceTuning
{
	float                                                          RotationRate;                    // offset:0x010	type:FLOAT.0
	float                                                          AngleThreshold;                  // offset:0x014	type:FLOAT.0
	vec3V                                                          ExtraForce;                      // offset:0x020	type:VEC3V.0
	bitset<enum rage__clothInstanceTuning__enCLOTH_TUNE_FLAGS>     Flags;                           // offset:0x030	type:BITSET.32BIT
	float                                                          Weight;                          // offset:0x034	type:FLOAT.0
	float                                                          DistanceThreshold;               // offset:0x038	type:FLOAT.0
	uchar                                                          PinVert;                         // offset:0x03C	type:UCHAR.0
	uchar                                                          NonPinVert0;                     // offset:0x03D	type:UCHAR.0
	uchar                                                          NonPinVert1;                     // offset:0x03E	type:UCHAR.0
};

struct rage__clothVertexBlend
{
	array<vec3V>                     Vertex0;                         // offset:0x010	type:ARRAY.ATARRAY
	array<vec3V>                     Vertex1;                         // offset:0x020	type:ARRAY.ATARRAY
};

struct rage__crJointData
{
	array<struct _0xA07679CC, 48>     RotationLimits;                  // offset:0x010	type:ARRAY.POINTER_WITH_COUNT_16BIT_IDX
	array<struct _0xE37EB5FF, 50>     TranslationLimits;               // offset:0x018	type:ARRAY.POINTER_WITH_COUNT_16BIT_IDX
	array<struct _0x27A58D7A, 52>     ScaleLimits;                     // offset:0x020	type:ARRAY.POINTER_WITH_COUNT_16BIT_IDX
};

struct rage__cutfAnimatedLightObject : rage__cutfLightObject
{
	uint                             AnimStreamingBase;               // offset:0x0E0	type:UINT.0
};

struct rage__cutfAnimatedParticleEffectObject : rage__cutfNamedAnimatedStreamedObject
{
	string                           athFxListHash;                   // offset:0x058	type:STRING.ATHASHVALUE
};

struct rage__cutfAnimationManagerObject : rage__cutfObject
{
};

struct rage__cutfAssetManagerObject : rage__cutfObject
{
};

struct rage__cutfAttachmentEventArgs : rage__cutfObjectIdEventArgs
{
	string                           cBoneName;                       // offset:0x038	type:STRING.ATHASHVALUE
};

struct rage__cutfAttribute
{
	string                           Name;                            // offset:0x008	type:STRING.ATFINALHASHSTRING
};

struct rage__cutfAttributeList
{
	array<struct rage__cutfAttribute>     Items;                           // offset:0x000	type:ARRAY.ATARRAY
};

struct rage__cutfAudioObject : rage__cutfFinalNamedObject
{
	float                            fOffset;                         // offset:0x050	type:FLOAT.0
};

struct rage__cutfBlockingBoundsObject : rage__cutfNamedObject
{
	array<vec3, 4>                   vCorners;                        // offset:0x050	type:ARRAY.MEMBER
	float                            fHeight;                         // offset:0x090	type:FLOAT.0
};

struct rage__cutfBoolValueEventArgs : rage__cutfEventArgs
{
	bool                             bValue;                          // offset:0x030	type:BOOL.0
};

struct rage__cutfCameraCutCharacterLightParams
{
	bool                             bUseTimeCycleValues;             // offset:0x008	type:BOOL.0
	vec3                             vDirection;                      // offset:0x010	type:VECTOR3.0
	vec3                             vColour;                         // offset:0x020	type:VECTOR3.0
	float                            fIntensity;                      // offset:0x030	type:FLOAT.0
};

struct rage__cutfCameraCutEventArgs : rage__cutfNameEventArgs
{
	vec3                                                      vPosition;                       // offset:0x040	type:VECTOR3.0
	vec4                                                      vRotationQuaternion;             // offset:0x050	type:VECTOR4.0
	float                                                     fNearDrawDistance;               // offset:0x060	type:FLOAT.0
	float                                                     fFarDrawDistance;                // offset:0x064	type:FLOAT.0
	float                                                     fMapLodScale;                    // offset:0x068	type:FLOAT.0
	float                                                     ReflectionLodRangeStart;         // offset:0x06C	type:FLOAT.0
	float                                                     ReflectionLodRangeEnd;           // offset:0x070	type:FLOAT.0
	float                                                     ReflectionSLodRangeStart;        // offset:0x074	type:FLOAT.0
	float                                                     ReflectionSLodRangeEnd;          // offset:0x078	type:FLOAT.0
	float                                                     LodMultHD;                       // offset:0x07C	type:FLOAT.0
	float                                                     LodMultOrphanedHD;               // offset:0x080	type:FLOAT.0
	float                                                     LodMultLod;                      // offset:0x084	type:FLOAT.0
	float                                                     LodMultSLod1;                    // offset:0x088	type:FLOAT.0
	float                                                     LodMultSLod2;                    // offset:0x08C	type:FLOAT.0
	float                                                     LodMultSLod3;                    // offset:0x090	type:FLOAT.0
	float                                                     LodMultSLod4;                    // offset:0x094	type:FLOAT.0
	float                                                     WaterReflectionFarClip;          // offset:0x098	type:FLOAT.0
	float                                                     SSAOLightInten;                  // offset:0x09C	type:FLOAT.0
	float                                                     ExposurePush;                    // offset:0x0A0	type:FLOAT.0
	float                                                     LightFadeDistanceMult;           // offset:0x0A4	type:FLOAT.0
	float                                                     LightShadowFadeDistanceMult;     // offset:0x0A8	type:FLOAT.0
	float                                                     LightSpecularFadeDistMult;       // offset:0x0AC	type:FLOAT.0
	float                                                     LightVolumetricFadeDistanceMult; // offset:0x0B0	type:FLOAT.0
	float                                                     DirectionalLightMultiplier;      // offset:0x0B4	type:FLOAT.0
	float                                                     LensArtefactMultiplier;          // offset:0x0B8	type:FLOAT.0
	float                                                     BloomMax;                        // offset:0x0BC	type:FLOAT.0
	bool                                                      DisableHighQualityDof;           // offset:0x0C0	type:BOOL.0
	bool                                                      FreezeReflectionMap;             // offset:0x0C1	type:BOOL.0
	bool                                                      DisableDirectionalLighting;      // offset:0x0C2	type:BOOL.0
	bool                                                      AbsoluteIntensityEnabled;        // offset:0x0C3	type:BOOL.0
	struct rage__cutfCameraCutCharacterLightParams            CharacterLight;                  // offset:0x0D0	type:STRUCT.STRUCTURE
	array<struct rage__cutfCameraCutTimeOfDayDofModifier>     TimeOfDayDofModifers;            // offset:0x110	type:ARRAY.ATARRAY
};

struct rage__cutfCameraCutTimeOfDayDofModifier
{
	uint                             TimeOfDayFlags;                  // offset:0x008	type:UINT.0
	int                              DofStrengthModifier;             // offset:0x00C	type:INT.0
};

struct rage__cutfCameraObject : rage__cutfNamedAnimatedObject
{
	float                            fNearDrawDistance;               // offset:0x050	type:FLOAT.0
	float                            fFarDrawDistance;                // offset:0x054	type:FLOAT.0
};

struct rage__cutfCascadeShadowEventArgs : rage__cutfEventArgs
{
	string                           cameraCutHashName;               // offset:0x030	type:STRING.ATHASHVALUE
	vec3                             position;                        // offset:0x040	type:VECTOR3.0
	float                            radius;                          // offset:0x050	type:FLOAT.0
	float                            interpTime;                      // offset:0x054	type:FLOAT.0
	int                              cascadeIndex;                    // offset:0x058	type:INT.0
	bool                             enabled;                         // offset:0x05C	type:BOOL.0
	bool                             interpolateToDisabled;           // offset:0x05D	type:BOOL.0
};

struct rage__cutfChildEvents
{
	array<uint>                      ChildEvents;                     // offset:0x000	type:ARRAY.ATARRAY
};

struct rage__cutfCutsceneFile
{
	string                                            cName;                           // offset:0x001	type:STRING.MEMBER
	int                                               iNameHash;                       // offset:0x01C	type:INT.0
	float                                             fTotalDuration;                  // offset:0x020	type:FLOAT.0
	int                                               iPlayerId;                       // offset:0x024	type:INT.0
	int                                               iCutsceneFlags;                  // offset:0x028	type:INT.0
	vec3                                              vPlayerStartingPos;              // offset:0x030	type:VECTOR3.0
	string                                            cMissionTextName;                // offset:0x040	type:STRING.MEMBER
	array<struct rage__cutfCutsceneSection, 15>       pSections;                       // offset:0x048	type:ARRAY.MEMBER
	array<struct rage__SDrawDistanceDetails, 100>     pDrawDistances;                  // offset:0x0C0	type:ARRAY.MEMBER
	array<struct rage__SEffectsDetails, 50>           pEffects;                        // offset:0x3E0	type:ARRAY.MEMBER
	array<struct rage__SBlockDetails, 10>             pBlockingBounds;                 // offset:0x570	type:ARRAY.MEMBER
	array<struct rage__STextIdDetails, 500>           pSubtitles;                      // offset:0x5C0	type:ARRAY.MEMBER
	array<struct rage__SCamcorderOverlay, 30>         pCamcorderOverlays;              // offset:0x1560	type:ARRAY.MEMBER
	array<struct rage__SFixupObjectDetails, 50>       pFixupObjects;                   // offset:0x1650	type:ARRAY.MEMBER
	array<struct rage__SVariationDetails, 100>        pVariations;                     // offset:0x17E0	type:ARRAY.MEMBER
	array<struct rage__SPropDetails, 50>              pProps;                          // offset:0x1B00	type:ARRAY.MEMBER
	int                                               iSectionCount;                   // offset:0x1C90	type:INT.0
	int                                               iVariationCount;                 // offset:0x1C94	type:INT.0
	int                                               iPropCount;                      // offset:0x1C98	type:INT.0
	int                                               iFixupObjectCount;               // offset:0x1C9C	type:INT.0
	int                                               iCamcorderOverlayCount;          // offset:0x1CA0	type:INT.0
	int                                               iDrawDistanceCount;              // offset:0x1CA4	type:INT.0
	int                                               iEffectCount;                    // offset:0x1CA8	type:INT.0
	int                                               iBlockingBoundCount;             // offset:0x1CAC	type:INT.0
	int                                               iSubtitleCount;                  // offset:0x1CB0	type:INT.0
	string                                            cExtraRoom;                      // offset:0x1CB7	type:STRING.MEMBER
	vec3                                              vExtraRoomPos;                   // offset:0x1CD0	type:VECTOR3.0
	int                                               iStartFrame;                     // offset:0x1CE0	type:INT.0
	array<int, 15>                                    iSectionSplitFrames;             // offset:0x1CE4	type:ARRAY.MEMBER
	int                                               iSectionSplitFrameCount;         // offset:0x1D20	type:INT.0
	int                                               iEndFrame;                       // offset:0x1D24	type:INT.0
};

struct rage__cutfCutsceneFile2
{
	float                                                          fTotalDuration;                  // offset:0x10C	type:FLOAT.0
	string                                                         cFaceDir;                        // offset:0x110	type:STRING.MEMBER
	array<uint, 4>                                                 iCutsceneFlags;                  // offset:0x210	type:ARRAY.MEMBER
	vec3                                                           vOffset;                         // offset:0x230	type:VECTOR3.0
	float                                                          fRotation;                       // offset:0x240	type:FLOAT.0
	vec3                                                           vTriggerOffset;                  // offset:0x250	type:VECTOR3.0
	array<struct rage__cutfObject>                                 pCutsceneObjects;                // offset:0x260	type:ARRAY.ATARRAY
	array<struct rage__cutfEvent>                                  pCutsceneLoadEventList;          // offset:0x270	type:ARRAY.ATARRAY
	array<struct rage__cutfEvent>                                  pCutsceneEventList;              // offset:0x280	type:ARRAY.ATARRAY
	array<struct rage__cutfEventArgs>                              pCutsceneEventArgsList;          // offset:0x290	type:ARRAY.ATARRAY
	struct rage__parAttributeList                                  attributes;                      // offset:0x2A0	type:STRUCT.STRUCTURE
	struct rage__cutfAttributeList                                 cutfAttributes;                  // offset:0x2B8	type:STRUCT.SIMPLE_POINTER
	int                                                            iRangeStart;                     // offset:0x2C0	type:INT.0
	int                                                            iRangeEnd;                       // offset:0x2C4	type:INT.0
	int                                                            iAltRangeEnd;                    // offset:0x2C8	type:INT.0
	float                                                          fSectionByTimeSliceDuration;     // offset:0x2CC	type:FLOAT.0
	float                                                          fFadeOutCutsceneDuration;        // offset:0x2D0	type:FLOAT.0
	float                                                          fFadeInGameDuration;             // offset:0x2D4	type:FLOAT.0
	uint                                                           fadeInColor;                     // offset:0x2D8	type:UINT.1
	int                                                            iBlendOutCutsceneDuration;       // offset:0x2DC	type:INT.0
	int                                                            iBlendOutCutsceneOffset;         // offset:0x2E0	type:INT.0
	float                                                          fFadeOutGameDuration;            // offset:0x2E4	type:FLOAT.0
	float                                                          fFadeInCutsceneDuration;         // offset:0x2E8	type:FLOAT.0
	uint                                                           fadeOutColor;                    // offset:0x2EC	type:UINT.1
	uint                                                           DayCoCHours;                     // offset:0x2F0	type:UINT.0
	array<float>                                                   cameraCutList;                   // offset:0x2F8	type:ARRAY.ATARRAY
	array<float>                                                   sectionSplitList;                // offset:0x308	type:ARRAY.ATARRAY
	array<struct rage__cutfCutsceneFile2__SConcatData, 40>         concatDataList;                  // offset:0x320	type:ARRAY.ATFIXEDARRAY
	array<struct rage__cutfCutsceneFile2__SDiscardedFrameData>     discardFrameList;                // offset:0xD30	type:ARRAY.ATARRAY
};

struct rage__cutfCutsceneFile2__SConcatData
{
	string                           cSceneName;                      // offset:0x000	type:STRING.ATHASHVALUE
	vec3                             vOffset;                         // offset:0x010	type:VECTOR3.0
	float                            fStartTime;                      // offset:0x020	type:FLOAT.0
	float                            fRotation;                       // offset:0x024	type:FLOAT.0
	float                            fPitch;                          // offset:0x028	type:FLOAT.0
	float                            fRoll;                           // offset:0x02C	type:FLOAT.0
	int                              iRangeStart;                     // offset:0x030	type:INT.0
	int                              iRangeEnd;                       // offset:0x034	type:INT.0
	bool                             bValidForPlayBack;               // offset:0x038	type:BOOL.0
};

struct rage__cutfCutsceneFile2__SDiscardedFrameData
{
	string                           cSceneName;                      // offset:0x000	type:STRING.ATHASHVALUE
	array<int>                       frames;                          // offset:0x008	type:ARRAY.ATARRAY
};

struct rage__cutfCutsceneSection
{
	vec3                                             vOffset;                         // offset:0x000	type:VECTOR3.0
	float                                            fRotation;                       // offset:0x010	type:FLOAT.0
	float                                            fDuration;                       // offset:0x014	type:FLOAT.0
	array<struct rage__SModelDetails, 70>            models;                          // offset:0x018	type:ARRAY.MEMBER
	array<struct rage__SVehicleDetails, 5>           vehicles;                        // offset:0x4960	type:ARRAY.MEMBER
	array<struct rage__SVehicleRemoval, 50>          vehicleRemovals;                 // offset:0x499C	type:ARRAY.MEMBER
	array<struct rage__SAttachmentDetails, 1>        attachments;                     // offset:0x4B2C	type:ARRAY.MEMBER
	array<struct rage__SHiddenObjectDetails, 20>     hiddenObjects;                   // offset:0x4B40	type:ARRAY.MEMBER
	array<struct rage__SLightDetails, 10>            lights;                          // offset:0x52C0	type:ARRAY.MEMBER
	string                                           cAudioTrackName;                 // offset:0x5540	type:STRING.MEMBER
	string                                           cCameraAnimName;                 // offset:0x5580	type:STRING.MEMBER
	string                                           cAnimDictName;                   // offset:0x55C0	type:STRING.MEMBER
	int                                              iModelCount;                     // offset:0x5600	type:INT.0
	int                                              iVehicleCount;                   // offset:0x5604	type:INT.0
	int                                              iVehicleRemovalCount;            // offset:0x5608	type:INT.0
	int                                              iAttachmentCount;                // offset:0x560C	type:INT.0
	int                                              iHiddenObjectCount;              // offset:0x5610	type:INT.0
	int                                              iLightCount;                     // offset:0x5614	type:INT.0
	int                                              iManualSectionToUse;             // offset:0x5618	type:INT.0
	int                                              iManualSectionToUseForAudio;     // offset:0x561C	type:INT.0
	bool                                             bManualSection;                  // offset:0x5620	type:BOOL.0
	bool                                             bUseRange;                       // offset:0x5621	type:BOOL.0
	float                                            fRangeStart;                     // offset:0x5624	type:FLOAT.0
	float                                            fRangeEnd;                       // offset:0x5628	type:FLOAT.0
	array<uint, 70>                                  iModelSize;                      // offset:0x562C	type:ARRAY.MEMBER
	uint                                             iStaticSize;                     // offset:0x5744	type:UINT.0
	int                                              iFrameOffset;                    // offset:0x5748	type:INT.0
};

struct rage__cutfDecalEventArgs : rage__cutfEventArgs
{
	vec3                             vPosition;                       // offset:0x030	type:VECTOR3.0
	vec4                             vRotation;                       // offset:0x040	type:VECTOR4.0
	float                            fWidth;                          // offset:0x050	type:FLOAT.0
	float                            fHeight;                         // offset:0x054	type:FLOAT.0
	uint                             Colour;                          // offset:0x058	type:UINT.1
	float                            fLifeTime;                       // offset:0x05C	type:FLOAT.0
};

struct rage__cutfDecalObject : rage__cutfNamedStreamedObject
{
	uint                             RenderId;                        // offset:0x050	type:UINT.0
};

struct rage__cutfEvent
{
	float                            fTime;                           // offset:0x018	type:FLOAT.0
	int                              iEventId;                        // offset:0x01C	type:INT.0
	int                              iEventArgsIndex;                 // offset:0x020	type:INT.0
	struct rage__cutfChildEvents     pChildEvents;                    // offset:0x030	type:STRUCT.POINTER
	uint                             StickyId;                        // offset:0x038	type:UINT.0
	bool                             IsChild;                         // offset:0x03C	type:BOOL.0
};

struct rage__cutfEventArgs
{
	struct rage__parAttributeList      attributeList;                   // offset:0x010	type:STRUCT.STRUCTURE
	struct rage__cutfAttributeList     cutfAttributes;                  // offset:0x028	type:STRUCT.SIMPLE_POINTER
};

struct rage__cutfEventArgsDef
{
	int                                iEventArgsTypeOffset;            // offset:0x008	type:INT.0
	string                             cName;                           // offset:0x00E	type:STRING.MEMBER
	struct rage__parAttributeList      attributeList;                   // offset:0x050	type:STRUCT.STRUCTURE
	struct rage__cutfAttributeList     cutfAttributes;                  // offset:0x068	type:STRUCT.SIMPLE_POINTER
};

struct rage__cutfEventArgsList : rage__cutfEventArgs
{
	array<int>                       iEventArgsIndexList;             // offset:0x030	type:ARRAY.ATARRAY
};

struct rage__cutfEventDef
{
	int                              iEventIdOffset;                  // offset:0x008	type:INT.0
	string                           cName;                           // offset:0x00C	type:STRING.MEMBER
	int                              iRank;                           // offset:0x04C	type:INT.0
	int                              iOppositeEventIdOffset;          // offset:0x050	type:INT.0
	int                              iEventArgsDefIndex;              // offset:0x054	type:INT.0
};

struct rage__cutfEventDefs
{
	string                                   cHeaderFilename;                 // offset:0x008	type:STRING.MEMBER
	string                                   cHeaderNamespace;                // offset:0x108	type:STRING.MEMBER
	array<struct rage__cutfEventDef>         eventDefList;                    // offset:0x148	type:ARRAY.ATARRAY
	array<struct rage__cutfEventArgsDef>     eventArgsDefList;                // offset:0x158	type:ARRAY.ATARRAY
};

struct rage__cutfEventObject : rage__cutfObject
{
};

struct rage__cutfFinalNameEventArgs : rage__cutfEventArgs
{
	string                           cName;                           // offset:0x030	type:STRING.ATSTRING
};

struct rage__cutfFinalNamedObject : rage__cutfObject
{
	string                           cName;                           // offset:0x040	type:STRING.ATSTRING
};

struct rage__cutfFindModelObject : rage__cutfNamedObject
{
	vec3                             vPosition;                       // offset:0x050	type:VECTOR3.0
	float                            fRadius;                         // offset:0x060	type:FLOAT.0
};

struct rage__cutfFixupModelObject : rage__cutfFindModelObject
{
};

struct rage__cutfFloatBoolValueEventArgs : rage__cutfBoolValueEventArgs
{
	float                            fValue;                          // offset:0x038	type:FLOAT.0
};

struct rage__cutfFloatValueEventArgs : rage__cutfEventArgs
{
	float                            fValue;                          // offset:0x030	type:FLOAT.0
};

struct rage__cutfHiddenModelObject : rage__cutfFindModelObject
{
};

struct rage__cutfLightObject : rage__cutfNamedObject
{
	vec3                             vDirection;                      // offset:0x060	type:VECTOR3.0
	vec3                             vColour;                         // offset:0x070	type:VECTOR3.0
	vec3                             vPosition;                       // offset:0x080	type:VECTOR3.0
	float                            fIntensity;                      // offset:0x090	type:FLOAT.0
	float                            fFallOff;                        // offset:0x094	type:FLOAT.0
	float                            fConeAngle;                      // offset:0x098	type:FLOAT.0
	float                            fVolumeIntensity;                // offset:0x09C	type:FLOAT.0
	float                            fVolumeSizeScale;                // offset:0x0A0	type:FLOAT.0
	float                            fCoronaSize;                     // offset:0x0A4	type:FLOAT.0
	float                            fCoronaIntensity;                // offset:0x0A8	type:FLOAT.0
	float                            fCoronaZBias;                    // offset:0x0AC	type:FLOAT.0
	float                            fInnerConeAngle;                 // offset:0x0B0	type:FLOAT.0
	float                            fExponentialFallOff;             // offset:0x0B4	type:FLOAT.0
	float                            fShadowBlur;                     // offset:0x0B8	type:FLOAT.0
	int                              iLightType;                      // offset:0x0BC	type:INT.0
	int                              iLightProperty;                  // offset:0x0C0	type:INT.0
	int                              TextureDictID;                   // offset:0x0C4	type:INT.0
	int                              TextureKey;                      // offset:0x0C8	type:INT.0
	uint                             uLightFlags;                     // offset:0x0D0	type:UINT.0
	uint                             uHourFlags;                      // offset:0x0D4	type:UINT.0
	bool                             bStatic;                         // offset:0x0DA	type:BOOL.0
};

struct rage__cutfLoadSceneEventArgs : rage__cutfNameEventArgs
{
	vec3                             vOffset;                         // offset:0x040	type:VECTOR3.0
	float                            fRotation;                       // offset:0x050	type:FLOAT.0
	float                            fPitch;                          // offset:0x054	type:FLOAT.0
	float                            fRoll;                           // offset:0x058	type:FLOAT.0
};

struct rage__cutfModelObject : rage__cutfNamedAnimatedStreamedObject
{
	string                           cAnimExportCtrlSpecFile;         // offset:0x058	type:STRING.ATHASHVALUE
	string                           cFaceExportCtrlSpecFile;         // offset:0x05C	type:STRING.ATHASHVALUE
	string                           cAnimCompressionFile;            // offset:0x060	type:STRING.ATHASHVALUE
	string                           cHandle;                         // offset:0x06C	type:STRING.ATHASHVALUE
	string                           typeFile;                        // offset:0x070	type:STRING.ATHASHVALUE
};

struct rage__cutfNameEventArgs : rage__cutfEventArgs
{
	string                           cName;                           // offset:0x030	type:STRING.ATHASHVALUE
};

struct rage__cutfNamedAnimatedObject : rage__cutfNamedObject
{
	uint                             AnimStreamingBase;               // offset:0x048	type:UINT.0
};

struct rage__cutfNamedAnimatedStreamedObject : rage__cutfNamedStreamedObject
{
	uint                             AnimStreamingBase;               // offset:0x050	type:UINT.0
};

struct rage__cutfNamedObject : rage__cutfObject
{
	string                           cName;                           // offset:0x040	type:STRING.ATHASHVALUE
};

struct rage__cutfNamedStreamedObject : rage__cutfNamedObject
{
	string                           StreamingName;                   // offset:0x048	type:STRING.ATHASHVALUE
};

struct rage__cutfObject
{
	int                                iObjectId;                       // offset:0x008	type:INT.0
	struct rage__parAttributeList      attributeList;                   // offset:0x020	type:STRUCT.STRUCTURE
	struct rage__cutfAttributeList     cutfAttributes;                  // offset:0x038	type:STRUCT.SIMPLE_POINTER
};

struct rage__cutfObjectIdEvent : rage__cutfEvent
{
	int                              iObjectId;                       // offset:0x040	type:INT.0
};

struct rage__cutfObjectIdEventArgs : rage__cutfEventArgs
{
	int                              iObjectId;                       // offset:0x030	type:INT.0
};

struct rage__cutfObjectIdListEvent : rage__cutfEvent
{
	array<int>                       iObjectIdList;                   // offset:0x040	type:ARRAY.ATARRAY
	array<int>                       iEventArgsIndexList;             // offset:0x050	type:ARRAY.ATARRAY
};

struct rage__cutfObjectIdListEventArgs : rage__cutfEventArgs
{
	array<int>                       iObjectIdList;                   // offset:0x030	type:ARRAY.ATARRAY
};

struct rage__cutfObjectIdNameEventArgs : rage__cutfObjectIdEventArgs
{
	string                           cName;                           // offset:0x038	type:STRING.ATHASHVALUE
};

struct rage__cutfObjectIdPartialHashEventArgs : rage__cutfObjectIdEventArgs
{
	uint                             PartialHash;                     // offset:0x038	type:UINT.0
};

struct rage__cutfObjectVariationEventArgs : rage__cutfObjectIdEventArgs
{
	int                              iComponent;                      // offset:0x038	type:INT.0
	int                              iDrawable;                       // offset:0x03C	type:INT.0
	int                              iTexture;                        // offset:0x040	type:INT.0
};

struct rage__cutfOverlayObject : rage__cutfFinalNamedObject
{
	string                           cRenderTargetName;               // offset:0x050	type:STRING.ATSTRING
	uint                             iOverlayType;                    // offset:0x060	type:UINT.0
	string                           modelHashName;                   // offset:0x064	type:STRING.ATHASHVALUE
};

struct rage__cutfParticleEffectObject : rage__cutfNamedStreamedObject
{
	string                           athFxListHash;                   // offset:0x050	type:STRING.ATHASHVALUE
};

struct rage__cutfPedModelObject : rage__cutfModelObject
{
	string                           overrideFaceAnimationFilename;   // offset:0x078	type:STRING.ATHASHVALUE
	bool                             bFoundFaceAnimation;             // offset:0x080	type:BOOL.0
	bool                             bFaceAndBodyAreMerged;           // offset:0x081	type:BOOL.0
	bool                             bOverrideFaceAnimation;          // offset:0x082	type:BOOL.0
	string                           faceAnimationNodeName;           // offset:0x084	type:STRING.ATHASHVALUE
	string                           faceAttributesFilename;          // offset:0x088	type:STRING.ATHASHVALUE
};

struct rage__cutfPlayParticleEffectEventArgs : rage__cutfEventArgs
{
	vec4                             vInitialBoneRotation;            // offset:0x030	type:VECTOR4.0
	vec3                             vInitialBoneOffset;              // offset:0x040	type:VECTOR3.0
	int                              iAttachParentId;                 // offset:0x050	type:INT.0
	ushort                           iAttachBoneHash;                 // offset:0x054	type:USHORT.0
};

struct rage__cutfPropModelObject : rage__cutfModelObject
{
};

struct rage__cutfRayfireObject : rage__cutfNamedStreamedObject
{
	vec3                             vStartPosition;                  // offset:0x050	type:VECTOR3.0
};

struct rage__cutfRemovalBoundsObject : rage__cutfBlockingBoundsObject
{
};

struct rage__cutfScreenFadeEventArgs : rage__cutfFloatValueEventArgs
{
	uint                             color;                           // offset:0x038	type:UINT.1
};

struct rage__cutfScreenFadeObject : rage__cutfNamedObject
{
};

struct rage__cutfSubtitleEventArgs : rage__cutfNameEventArgs
{
	int                              iLanguageID;                     // offset:0x038	type:INT.0
	int                              iTransitionIn;                   // offset:0x03C	type:INT.0
	float                            fTransitionInDuration;           // offset:0x040	type:FLOAT.0
	int                              iTransitionOut;                  // offset:0x044	type:INT.0
	float                            fTransitionOutDuration;          // offset:0x048	type:FLOAT.0
	float                            fSubtitleDuration;               // offset:0x04C	type:FLOAT.0
};

struct rage__cutfSubtitleObject : rage__cutfNamedObject
{
};

struct rage__cutfTriggerLightEffectEventArgs : rage__cutfEventArgs
{
	int                              iAttachParentId;                 // offset:0x030	type:INT.0
	ushort                           iAttachBoneHash;                 // offset:0x034	type:USHORT.0
	string                           AttachedParentName;              // offset:0x038	type:STRING.ATHASHVALUE
};

struct rage__cutfTwoFloatValuesEventArgs : rage__cutfFloatValueEventArgs
{
	float                            fValue2;                         // offset:0x038	type:FLOAT.0
};

struct rage__cutfVehicleExtraEventArgs : rage__cutfObjectIdEventArgs
{
	array<int>                       pExtraBoneIds;                   // offset:0x038	type:ARRAY.ATARRAY
};

struct rage__cutfVehicleModelObject : rage__cutfModelObject
{
	array<string>                    cRemoveBoneNameList;             // offset:0x078	type:ARRAY.ATARRAY
	bool                             bCanApplyRealDamage;             // offset:0x088	type:BOOL.0
};

struct rage__cutfVehicleVariationEventArgs : rage__cutfObjectIdEventArgs
{
	int                              iMainBodyColour;                 // offset:0x038	type:INT.0
	int                              iSecondBodyColour;               // offset:0x03C	type:INT.0
	int                              iSpecularColour;                 // offset:0x040	type:INT.0
	int                              iWheelTrimColour;                // offset:0x044	type:INT.0
	int                              _0xA3C41D37;                     // offset:0x048	type:INT.0
	int                              iLivery;                         // offset:0x050	type:INT.0
	int                              iLivery2;                        // offset:0x054	type:INT.0
	float                            fDirtLevel;                      // offset:0x058	type:FLOAT.0
};

struct rage__cutfWeaponModelObject : rage__cutfModelObject
{
	uint                             GenericWeaponType;               // offset:0x078	type:UINT.0
};

struct rage__dataVec3V
{
	array<uint, 4>                   Data;                            // offset:0x000	type:ARRAY.MEMBER
};

struct rage__environmentCloth
{
	array<int>                       UserData;                        // offset:0x060	type:ARRAY.ATARRAY
};

struct rage__fiDeviceInstaller__InitData
{
	string                           sourceFile;                      // offset:0x000	type:STRING.CONST_STRING
	string                           partitionName;                   // offset:0x008	type:STRING.CONST_STRING
	string                           partitionDesc;                   // offset:0x010	type:STRING.CONST_STRING
	string                           mount;                           // offset:0x018	type:STRING.CONST_STRING
	string                           platform;                        // offset:0x020	type:STRING.CONST_STRING
	bool                             cached;                          // offset:0x028	type:BOOL.0
	bool                             readOnly;                        // offset:0x029	type:BOOL.0
};

struct rage__fiDeviceInstaller__InitDataList
{
	array<struct rage__fiDeviceInstaller__InitData>     initDatas;                       // offset:0x000	type:ARRAY.ATARRAY
};

struct rage__fragTuneBreakPreset
{
	string                           Name;                            // offset:0x008	type:STRING.CONST_STRING
	float                            Strength;                        // offset:0x010	type:FLOAT.0
	float                            ForceTransmissionUp;             // offset:0x014	type:FLOAT.0
	float                            ForceTransmissionDown;           // offset:0x018	type:FLOAT.0
	float                            MinDamageForce;                  // offset:0x01C	type:FLOAT.0
	float                            DamageHealth;                    // offset:0x020	type:FLOAT.0
	float                            WeaponHealth;                    // offset:0x024	type:FLOAT.0
	float                            WeaponScale;                     // offset:0x028	type:FLOAT.0
	float                            MeleeScale;                      // offset:0x02C	type:FLOAT.0
	float                            VehicleScale;                    // offset:0x030	type:FLOAT.0
	float                            PedScale;                        // offset:0x034	type:FLOAT.0
	float                            RagdollScale;                    // offset:0x038	type:FLOAT.0
	float                            ExplosionScale;                  // offset:0x03C	type:FLOAT.0
	float                            ObjectScale;                     // offset:0x040	type:FLOAT.0
};

struct rage__fragTuneStruct
{
	float                                       GlobalMaxDrawingDistance;        // offset:0x010	type:FLOAT.0
	float                                       GlobalForceTransmissionScaleDown; // offset:0x014	type:FLOAT.0
	float                                       GlobalForceTransmissionScaleUp;  // offset:0x018	type:FLOAT.0
	float                                       GlobalRootBreakHealthScale;      // offset:0x01C	type:FLOAT.0
	float                                       GlobalBreakHealthScale;          // offset:0x020	type:FLOAT.0
	float                                       GlobalDamageHealthScale;         // offset:0x024	type:FLOAT.0
	float                                       BreakingFrameRateLimit;          // offset:0x028	type:FLOAT.0
	bool                                        _0x9EDE771A;                     // offset:0x02C	type:BOOL.0
	bool                                        AggressiveAssetTouching;         // offset:0x02D	type:BOOL.0
	bool                                        FragDebug1;                      // offset:0x02E	type:BOOL.0
	bool                                        FragDebug2;                      // offset:0x02F	type:BOOL.0
	bool                                        AllowArticulation;               // offset:0x030	type:BOOL.0
	bool                                        AllowSimplifiedColliders;        // offset:0x031	type:BOOL.0
	float                                       CollisionDamageScale;            // offset:0x034	type:FLOAT.0
	float                                       CollisionDamageMinThreshold;     // offset:0x038	type:FLOAT.0
	float                                       CollisionDamageMaxThreshold;     // offset:0x03C	type:FLOAT.0
	float                                       ReferenceMassForDefaultTuning;   // offset:0x040	type:FLOAT.0
	array<struct rage__fragTuneBreakPreset>     BreakPresets;                    // offset:0x048	type:ARRAY.ATARRAY
};

struct rage__fwArchetypeDef
{
	float                                     lodDist;                         // offset:0x008	type:FLOAT.0
	uint                                      flags;                           // offset:0x00C	type:UINT.0
	uint                                      specialAttribute;                // offset:0x010	type:UINT.0
	vec3                                      bbMin;                           // offset:0x020	type:VECTOR3.0
	vec3                                      bbMax;                           // offset:0x030	type:VECTOR3.0
	vec3                                      bsCentre;                        // offset:0x040	type:VECTOR3.0
	float                                     bsRadius;                        // offset:0x050	type:FLOAT.0
	float                                     hdTextureDist;                   // offset:0x054	type:FLOAT.0
	string                                    name;                            // offset:0x058	type:STRING.ATHASHVALUE
	string                                    textureDictionary;               // offset:0x05C	type:STRING.ATHASHVALUE
	string                                    clipDictionary;                  // offset:0x060	type:STRING.ATHASHVALUE
	string                                    drawableDictionary;              // offset:0x064	type:STRING.ATHASHVALUE
	string                                    physicsDictionary;               // offset:0x068	type:STRING.ATHASHVALUE
	enum rage__fwArchetypeDef__eAssetType     assetType;                       // offset:0x06C	type:ENUM.32BIT
	string                                    assetName;                       // offset:0x070	type:STRING.ATHASHVALUE
	array<struct rage__fwExtensionDef>        extensions;                      // offset:0x078	type:ARRAY.ATARRAY
};

struct rage__fwContainerLodDef
{
	string                           name;                            // offset:0x000	type:STRING.ATHASHVALUE
	uint                             parentIndex;                     // offset:0x004	type:UINT.0
};

struct rage__fwEntityDef
{
	string                                 archetypeName;                   // offset:0x008	type:STRING.ATHASHVALUE
	uint                                   flags;                           // offset:0x00C	type:UINT.0
	uint                                   guid;                            // offset:0x010	type:UINT.0
	vec3                                   position;                        // offset:0x020	type:VECTOR3.0
	vec4                                   rotation;                        // offset:0x030	type:VECTOR4.0
	float                                  scaleXY;                         // offset:0x040	type:FLOAT.0
	float                                  scaleZ;                          // offset:0x044	type:FLOAT.0
	int                                    parentIndex;                     // offset:0x048	type:INT.0
	float                                  lodDist;                         // offset:0x04C	type:FLOAT.0
	float                                  childLodDist;                    // offset:0x050	type:FLOAT.0
	enum rage__eLodType                    lodLevel;                        // offset:0x054	type:ENUM.32BIT
	uint                                   numChildren;                     // offset:0x058	type:UINT.0
	enum rage__ePriorityLevel              priorityLevel;                   // offset:0x05C	type:ENUM.32BIT
	array<struct rage__fwExtensionDef>     extensions;                      // offset:0x060	type:ARRAY.ATARRAY
};

struct rage__fwExtensionDef
{
	string                           name;                            // offset:0x008	type:STRING.ATHASHVALUE
};

struct rage__fwExtraTextFiles
{
	array<struct rage__fwExtraTextPackage>     FileTable;                       // offset:0x008	type:ARRAY.ATARRAY
};

struct rage__fwExtraTextPackage
{
	string                           PathFormatString;                // offset:0x008	type:STRING.POINTER
	bool                             ShouldOverlay;                   // offset:0x010	type:BOOL.0
};

struct rage__fwGrassInstanceListDef
{
	struct rage__spdAABB                                         BatchAABB;                       // offset:0x000	type:STRUCT.STRUCTURE
	vec3V                                                        ScaleRange;                      // offset:0x020	type:VEC3V.0
	string                                                       archetypeName;                   // offset:0x030	type:STRING.ATHASHVALUE
	uint                                                         lodDist;                         // offset:0x034	type:UINT.0
	float                                                        LodFadeStartDist;                // offset:0x038	type:FLOAT.0
	float                                                        LodInstFadeRange;                // offset:0x03C	type:FLOAT.0
	float                                                        OrientToTerrain;                 // offset:0x040	type:FLOAT.0
	array<struct rage__fwGrassInstanceListDef__InstanceData>     InstanceList;                    // offset:0x048	type:ARRAY.ATARRAY
};

struct rage__fwGrassInstanceListDef__InstanceData
{
	array<ushort, 3>                 Position;                        // offset:0x000	type:ARRAY.MEMBER
	uchar                            NormalX;                         // offset:0x006	type:UCHAR.0
	uchar                            NormalY;                         // offset:0x007	type:UCHAR.0
	array<uchar, 3>                  Color;                           // offset:0x008	type:ARRAY.MEMBER
	uchar                            Scale;                           // offset:0x00B	type:UCHAR.0
	uchar                            Ao;                              // offset:0x00C	type:UCHAR.0
	array<uchar, 3>                  Pad;                             // offset:0x00D	type:ARRAY.MEMBER
};

struct rage__fwInstancedMapData
{
	string                                         ImapLink;                        // offset:0x008	type:STRING.ATHASHVALUE
	array<struct rage__fwPropInstanceListDef>      PropInstanceList;                // offset:0x010	type:ARRAY.ATARRAY
	array<struct rage__fwGrassInstanceListDef>     GrassInstanceList;               // offset:0x020	type:ARRAY.ATARRAY
};

struct rage__fwMapData
{
	string                                    name;                            // offset:0x008	type:STRING.ATHASHVALUE
	string                                    parent;                          // offset:0x00C	type:STRING.ATHASHVALUE
	uint                                      flags;                           // offset:0x010	type:UINT.0
	uint                                      contentFlags;                    // offset:0x014	type:UINT.0
	vec3                                      streamingExtentsMin;             // offset:0x020	type:VECTOR3.0
	vec3                                      streamingExtentsMax;             // offset:0x030	type:VECTOR3.0
	vec3                                      entitiesExtentsMin;              // offset:0x040	type:VECTOR3.0
	vec3                                      entitiesExtentsMax;              // offset:0x050	type:VECTOR3.0
	array<struct rage__fwEntityDef>           entities;                        // offset:0x060	type:ARRAY.ATARRAY
	array<struct rage__fwContainerLodDef>     containerLods;                   // offset:0x070	type:ARRAY.ATARRAY
	array<struct BoxOccluder>                 boxOccluders;                    // offset:0x080	type:ARRAY.ATARRAY
	array<struct OccludeModel>                occludeModels;                   // offset:0x090	type:ARRAY.ATARRAY
	array<string>                             physicsDictionaries;             // offset:0x0A0	type:ARRAY.ATARRAY
	struct rage__fwInstancedMapData           instancedData;                   // offset:0x0B0	type:STRUCT.STRUCTURE
};

struct rage__fwMapTypes
{
	array<struct rage__fwExtensionDef>     extensions;                      // offset:0x008	type:ARRAY.ATARRAY
	array<struct rage__fwArchetypeDef>     archetypes;                      // offset:0x018	type:ARRAY.ATARRAY
	string                                 name;                            // offset:0x028	type:STRING.ATHASHVALUE
	array<string>                          dependencies;                    // offset:0x030	type:ARRAY.ATARRAY
};

struct rage__fwPropInstanceListDef
{
	array<struct rage__fwPropInstanceListDef__InstanceData>     InstanceList;                    // offset:0x000	type:ARRAY.ATARRAY
	struct rage__spdAABB                                        BatchAABB;                       // offset:0x010	type:STRUCT.STRUCTURE
	string                                                      archetypeName;                   // offset:0x030	type:STRING.ATHASHVALUE
	uint                                                        lodDist;                         // offset:0x034	type:UINT.0
};

struct rage__fwPropInstanceListDef__InstanceData
{
	array<vec4V, 3>                  InstMat;                         // offset:0x000	type:ARRAY.MEMBER
	uint                             Tint;                            // offset:0x040	type:UINT.1
	uint                             Index;                           // offset:0x044	type:UINT.0
};

struct rage__fwTextDatabaseEntry
{
	string                           Key;                             // offset:0x008	type:STRING.POINTER
	string                           DisplayText;                     // offset:0x010	type:STRING.POINTER
};

struct rage__fwTextDatabaseSource
{
	array<struct rage__fwTextDatabaseEntry>     TextTable;                       // offset:0x008	type:ARRAY.ATARRAY
};

struct rage__parAttributeList
{
	uchar                            UserData1;                       // offset:0x010	type:UCHAR.0
	uchar                            UserData2;                       // offset:0x011	type:UCHAR.0
};

struct rage__phBound
{
	uchar                            Type;                            // offset:0x010	type:UCHAR.0
	uchar                            Flags;                           // offset:0x011	type:UCHAR.0
	ushort                           PartIndex;                       // offset:0x012	type:USHORT.0
	float                            RadiusAroundCentroid;            // offset:0x014	type:FLOAT.0
	vec4V                            BoundingBoxMaxXYZMarginW;        // offset:0x020	type:VEC4V.0
	vec4V                            BoundingBoxMinXYZRefCountW;      // offset:0x030	type:VEC4V.0
	vec4V                            CentroidOffsetXYZMaterialId0W;   // offset:0x040	type:VEC4V.0
	vec4V                            CGOffsetXYZMaterialId1W;         // offset:0x050	type:VEC4V.0
	vec4V                            VolumeDistribution;              // offset:0x060	type:VEC4V.0
};

struct rage__phBoundCapsule : rage__phBound
{
	float                            CapsuleHalfHeight;               // offset:0x070	type:FLOAT.0
};

struct rage__phBoundComposite : rage__phBound
{
	array<struct rage__phBound, 160>     Bounds;                          // offset:0x070	type:ARRAY.POINTER_WITH_COUNT_16BIT_IDX
	array<matrix34V, 160>                CurrentMatrices;                 // offset:0x078	type:ARRAY.POINTER_WITH_COUNT_16BIT_IDX
	array<matrix34V, 160>                LastMatrices;                    // offset:0x080	type:ARRAY.POINTER_WITH_COUNT_16BIT_IDX
	array<vec3V, 160>                    _0x1EBBF47A;                     // offset:0x088	type:ARRAY.POINTER_WITH_COUNT_16BIT_IDX
	array<uint, 160>                     TypeAndIncludeFlags;             // offset:0x090	type:ARRAY.POINTER_WITH_COUNT_16BIT_IDX
	array<uint, 160>                     OwnedTypeAndIncludeFlags;        // offset:0x098	type:ARRAY.POINTER_WITH_COUNT_16BIT_IDX
	ushort                               MaxNumBounds;                    // offset:0x0A0	type:USHORT.0
	ushort                               NumBounds;                       // offset:0x0A2	type:USHORT.0
};

struct rage__phCapsuleBoundDef
{
	string                                                        OwnerName;                       // offset:0x000	type:STRING.ATSTRING
	vec4V                                                         Rotation;                        // offset:0x010	type:VEC4V.0
	vec3V                                                         Position;                        // offset:0x020	type:VEC3V.0
	vec3V                                                         Normal;                          // offset:0x030	type:VEC3V.0
	float                                                         CapsuleRadius;                   // offset:0x040	type:FLOAT.0
	float                                                         CapsuleLen;                      // offset:0x044	type:FLOAT.0
	float                                                         CapsuleHalfHeight;               // offset:0x048	type:FLOAT.0
	float                                                         CapsuleHalfWidth;                // offset:0x04C	type:FLOAT.0
	bitset<enum rage__phCapsuleBoundDef__enCollisionBoundDef>     Flags;                           // offset:0x050	type:BITSET.32BIT
};

struct rage__phClothData
{
	array<struct rage__phVec3V>      VertexPinnedPositions;           // offset:0x010	type:ARRAY.ATARRAY
	array<struct rage__phVec3V>      VertexPositions;                 // offset:0x030	type:ARRAY.ATARRAY
	array<struct rage__phVec3V>      VertexPrevPositions;             // offset:0x040	type:ARRAY.ATARRAY
	ushort                           NumVerts;                        // offset:0x050	type:USHORT.0
	ushort                           NumPinVerts;                     // offset:0x052	type:USHORT.0
};

struct rage__phClothDataDebug
{
	array<vec3V>                     VertexPositions;                 // offset:0x010	type:ARRAY.ATARRAY
	array<vec3V>                     VertexPrevPositions;             // offset:0x020	type:ARRAY.ATARRAY
	ushort                           NumVerts;                        // offset:0x030	type:USHORT.0
	ushort                           NumPinVerts;                     // offset:0x032	type:USHORT.0
};

struct rage__phEdgeData
{
	array<ushort, 2>                 vertIndices;                     // offset:0x000	type:ARRAY.MEMBER
	float                            EdgeLength2;                     // offset:0x004	type:FLOAT.0
	float                            Weight0;                         // offset:0x008	type:FLOAT.0
	float                            CompressionWeight;               // offset:0x00C	type:FLOAT.0
};

struct rage__phVec3V
{
	array<uint, 4>                   Data;                            // offset:0x000	type:ARRAY.MEMBER
};

struct rage__phVerletCloth
{
	int                                NumEdges;                        // offset:0x0EC	type:INT.0
	array<struct rage__phEdgeData>     CustomEdgeData;                  // offset:0x100	type:ARRAY.ATARRAY
	array<struct rage__phEdgeData>     EdgeData;                        // offset:0x110	type:ARRAY.ATARRAY
};

struct rage__phVerletClothCustomBounds : rage__fwExtensionDef
{
	array<struct rage__phCapsuleBoundDef>     CollisionData;                   // offset:0x010	type:ARRAY.ATARRAY
};

struct rage__ptxDrawable
{
	string                           name;                            // offset:0x010	type:STRING.CONST_STRING
};

struct rage__ptxKeyframe
{
};

struct rage__ptxKeyframeSpec
{
	string                           pDefnName;                       // offset:0x000	type:STRING.POINTER
	string                           pRuleName;                       // offset:0x008	type:STRING.POINTER
	int                              ruleType;                        // offset:0x010	type:INT.0
	uint                             propertyId;                      // offset:0x014	type:UINT.0
};

struct rage__ptxKeyframeXmlData
{
	int                              numKeyEntries;                   // offset:0x000	type:INT.0
	array<float>                     keyEntryData;                    // offset:0x008	type:ARRAY.ATARRAY
};

struct rage__ptxgpuDropEmitterSettings
{
	vec3                             boxCentreOffset;                 // offset:0x010	type:VECTOR3.0
	vec3                             boxSize;                         // offset:0x020	type:VECTOR3.0
	vec2                             lifeMinMax;                      // offset:0x030	type:VECTOR2.0
	vec3                             velocityMin;                     // offset:0x040	type:VECTOR3.0
	vec3                             velocityMax;                     // offset:0x050	type:VECTOR3.0
	bool                             clampToGround;                   // offset:0x060	type:BOOL.0
};

struct rage__ptxgpuDropRenderSettings
{
	vec4                             textureRowsColsStartEnd;         // offset:0x020	type:VECTOR4.0
	vec4                             textureAnimRateScaleOverLifeStart2End2; // offset:0x030	type:VECTOR4.0
	vec4                             sizeMinMax;                      // offset:0x040	type:VECTOR4.0
	vec4                             colour;                          // offset:0x050	type:VECTOR4.0
	vec2                             fadeInOut;                       // offset:0x060	type:VECTOR2.0
	vec2                             fadeNearFar;                     // offset:0x068	type:VECTOR2.0
	vec4                             fadeGrdOffLoHi;                  // offset:0x070	type:VECTOR4.0
	vec2                             rotSpeedMinMax;                  // offset:0x080	type:VECTOR2.0
	vec3                             directionalZOffsetMinMax;        // offset:0x090	type:VECTOR3.0
	vec3                             dirVelAddCamSpeedMinMaxMult;     // offset:0x0A0	type:VECTOR3.0
	float                            edgeSoftness;                    // offset:0x0B0	type:FLOAT.0
	float                            particleColorPercentage;         // offset:0x0BC	type:FLOAT.0
	float                            backgroundDistortionVisibilityPercentage; // offset:0x0C0	type:FLOAT.0
	float                            backgroundDistortionAlphaBooster; // offset:0x0C4	type:FLOAT.0
	float                            backgroundDistortionAmount;      // offset:0x0C8	type:FLOAT.0
	int                              backgroundDistortionBlurLevel;   // offset:0x0CC	type:INT.0
	float                            localLightsMultiplier;           // offset:0x0D0	type:FLOAT.0
	float                            directionalLightShadowAmount;    // offset:0x0D8	type:FLOAT.0
};

struct rage__ropeData
{
	int                              NumSections;                     // offset:0x008	type:INT.0
	float                            Radius;                          // offset:0x00C	type:FLOAT.0
	string                           DiffuseTextureName;              // offset:0x010	type:STRING.ATHASHVALUE
	string                           NormalMapName;                   // offset:0x014	type:STRING.ATHASHVALUE
	float                            distanceMappingScale;            // offset:0x028	type:FLOAT.0
	vec2                             UVScale;                         // offset:0x02C	type:VECTOR2.0
	float                            specularFresnel;                 // offset:0x034	type:FLOAT.0
	float                            specularFalloff;                 // offset:0x038	type:FLOAT.0
	float                            specularIntensity;               // offset:0x03C	type:FLOAT.0
	float                            bumpiness;                       // offset:0x040	type:FLOAT.0
	uint                             color;                           // offset:0x044	type:UINT.1
};

struct rage__ropeDataManager
{
	array<struct rage__ropeData>     TypeData;                        // offset:0x008	type:ARRAY.ATARRAY
};

struct rage__ropeMesh : rage__ropeData
{
};

struct rage__ropeReins : rage__ropeData
{
};

struct rage__ropeThin : rage__ropeData
{
};

struct rage__ropeThin4 : rage__ropeData
{
};

struct rage__ropeThinWire32 : rage__ropeData
{
};

struct rage__ropeWire32 : rage__ropeData
{
};

struct rage__ropeWire6 : rage__ropeData
{
};

struct rage__spdAABB
{
	vec4V                            min;                             // offset:0x000	type:VEC4V.0
	vec4V                            max;                             // offset:0x010	type:VEC4V.0
};

struct rage__spdGrid2D
{
	int                              MinCellX;                        // offset:0x00C	type:INT.0
	int                              MaxCellX;                        // offset:0x010	type:INT.0
	int                              MinCellY;                        // offset:0x014	type:INT.0
	int                              MaxCellY;                        // offset:0x018	type:INT.0
	float                            CellDimX;                        // offset:0x02C	type:FLOAT.0
	float                            CellDimY;                        // offset:0x030	type:FLOAT.0
};

struct rage__spdPlane
{
	vec4V                            PlaneCoeffs;                     // offset:0x000	type:VEC4V.0
};

struct rage__spdSphere
{
	vec4V                            centerAndRadius;                 // offset:0x000	type:VEC4V.0
};

struct rage__tcInstBoxInst
{
	float                            x;                               // offset:0x000	type:FLOAT.0
	float                            y;                               // offset:0x004	type:FLOAT.0
	float                            z;                               // offset:0x008	type:FLOAT.0
	string                           typeName;                        // offset:0x00C	type:STRING.ATHASHVALUE
};

struct rage__tcInstBoxInstLoader
{
	array<struct rage__tcInstBoxInst>     boxInstances;                    // offset:0x000	type:ARRAY.ATARRAY
};

struct rage__tcInstBoxType
{
	struct rage__spdAABB             aabb;                            // offset:0x000	type:STRUCT.STRUCTURE
	string                           name;                            // offset:0x020	type:STRING.ATHASHVALUE
	string                           modifier;                        // offset:0x024	type:STRING.ATHASHVALUE
	float                            percentage;                      // offset:0x028	type:FLOAT.0
	float                            range;                           // offset:0x02C	type:FLOAT.0
	uchar                            startHour;                       // offset:0x030	type:UCHAR.0
	uchar                            endHour;                         // offset:0x031	type:UCHAR.0
};

struct rage__tcInstBoxTypeLoader
{
	array<struct rage__tcInstBoxType>     boxTypes;                        // offset:0x000	type:ARRAY.ATARRAY
};

struct sDefaultTaskData
{
	enum DefaultTaskType             Type;                            // offset:0x000	type:ENUM.32BIT
};

struct sLevelData
{
	string                           cTitle;                          // offset:0x008	type:STRING.ATSTRING
	string                           cFilename;                       // offset:0x018	type:STRING.ATSTRING
	string                           cBugstarName;                    // offset:0x028	type:STRING.ATSTRING
	string                           cFriendlyName;                   // offset:0x038	type:STRING.ATSTRING
};

struct sMapZoomData
{
	array<struct sMapZoomData__sMapZoomLevel>     zoomLevels;                      // offset:0x000	type:ARRAY.ATARRAY
};

struct sMapZoomData__sMapZoomLevel
{
	float                            fZoomScale;                      // offset:0x000	type:FLOAT.0
	float                            fZoomSpeed;                      // offset:0x004	type:FLOAT.0
	float                            fScrollSpeed;                    // offset:0x008	type:FLOAT.0
	vec2                             vTiles;                          // offset:0x00C	type:VECTOR2.0
};

struct sMotionTaskData
{
	enum MotionTaskType              Type;                            // offset:0x000	type:ENUM.32BIT
	string                           JumpClipSetHash;                 // offset:0x008	type:STRING.ATHASHVALUE
	string                           JumpNetworkName;                 // offset:0x010	type:STRING.CONST_STRING
	string                           FallClipSetHash;                 // offset:0x018	type:STRING.ATHASHVALUE
	string                           SlopeScrambleClipSetHash;        // offset:0x01C	type:STRING.ATHASHVALUE
	string                           SwimmingClipSetHash;             // offset:0x020	type:STRING.ATHASHVALUE
	string                           SwimmingClipSetBaseHash;         // offset:0x024	type:STRING.ATHASHVALUE
	bool                             UseQuadrupedJump;                // offset:0x028	type:BOOL.0
	float                            WalkTurnRate;                    // offset:0x02C	type:FLOAT.0
	float                            RunTurnRate;                     // offset:0x030	type:FLOAT.0
	float                            SprintTurnRate;                  // offset:0x034	type:FLOAT.0
	float                            MotionAnimRateScale;             // offset:0x038	type:FLOAT.0
	float                            QuadWalkRunTransitionTime;       // offset:0x03C	type:FLOAT.0
	float                            QuadRunWalkTransitionTime;       // offset:0x040	type:FLOAT.0
	float                            QuadRunSprintTransitionTime;     // offset:0x044	type:FLOAT.0
	float                            QuadSprintRunTransitionTime;     // offset:0x048	type:FLOAT.0
	float                            QuadWalkTurnScaleFactor;         // offset:0x04C	type:FLOAT.0
	float                            QuadRunTurnScaleFactor;          // offset:0x050	type:FLOAT.0
	float                            QuadSprintTurnScaleFactor;       // offset:0x054	type:FLOAT.0
	float                            QuadWalkTurnScaleFactorPlayer;   // offset:0x058	type:FLOAT.0
	float                            QuadRunTurnScaleFactorPlayer;    // offset:0x05C	type:FLOAT.0
	float                            QuadSprintTurnScaleFactorPlayer; // offset:0x060	type:FLOAT.0
	float                            PlayerBirdFlappingSpeedMultiplier; // offset:0x064	type:FLOAT.0
	float                            PlayerBirdGlidingSpeedMultiplier; // offset:0x068	type:FLOAT.0
	bool                             HasWalkStarts;                   // offset:0x06C	type:BOOL.0
	bool                             HasRunStarts;                    // offset:0x06D	type:BOOL.0
	bool                             HasQuickStops;                   // offset:0x06E	type:BOOL.0
	bool                             CanTrot;                         // offset:0x06F	type:BOOL.0
	bool                             CanCanter;                       // offset:0x070	type:BOOL.0
	bool                             CanReverse;                      // offset:0x071	type:BOOL.0
	bool                             HasDualGaits;                    // offset:0x072	type:BOOL.0
	bool                             HasSlopeGaits;                   // offset:0x073	type:BOOL.0
	bool                             HasCmplxTurnGaits;               // offset:0x074	type:BOOL.0
};

struct sOverlayInfo
{
	string                           nameId;                          // offset:0x004	type:STRING.ATHASHVALUE
	string                           changeSet;                       // offset:0x008	type:STRING.ATHASHVALUE
	string                           changeSetGroupToExecuteWith;     // offset:0x00C	type:STRING.ATHASHVALUE
	char                             version;                         // offset:0x014	type:CHAR.0
};

struct sOverlayInfos
{
	array<struct sOverlayInfo>       overlayInfos;                    // offset:0x000	type:ARRAY.ATARRAY
};

struct sPedAccuracyModifiers
{
	float                            PLAYER_RECOIL_MODIFIER_MIN;      // offset:0x000	type:FLOAT.0
	float                            PLAYER_RECOIL_MODIFIER_MAX;      // offset:0x004	type:FLOAT.0
	float                            PLAYER_RECOIL_CROUCHED_MODIFIER; // offset:0x008	type:FLOAT.0
	float                            PLAYER_BLIND_FIRE_MODIFIER_MIN;  // offset:0x00C	type:FLOAT.0
	float                            PLAYER_BLIND_FIRE_MODIFIER_MAX;  // offset:0x010	type:FLOAT.0
	float                            PLAYER_RECENTLY_DAMAGED_MODIFIER; // offset:0x014	type:FLOAT.0
	float                            AI_GLOBAL_MODIFIER;              // offset:0x018	type:FLOAT.0
	float                            AI_TARGET_IN_COMBAT_ROLL_MODIFIER; // offset:0x01C	type:FLOAT.0
	float                            AI_TARGET_COMING_OUT_OF_COVER_MODIFIER; // offset:0x020	type:FLOAT.0
	float                            AI_TARGET_IN_COVER_MODIFIER;     // offset:0x024	type:FLOAT.0
	float                            AI_TARGET_WALKING_MODIFIER;      // offset:0x028	type:FLOAT.0
	float                            AI_TARGET_RUNNING_MODIFIER;      // offset:0x02C	type:FLOAT.0
	float                            AI_TARGET_IN_AIR_MODIFIER;       // offset:0x030	type:FLOAT.0
	float                            AI_TARGET_DRIVING_AT_SPEED_MODIFIER; // offset:0x034	type:FLOAT.0
	float                            AI_BLIND_FIRE_MODIFIER;          // offset:0x038	type:FLOAT.0
	float                            AI_DISTANCE_FOR_MAX_ACCURACY_BOOST; // offset:0x03C	type:FLOAT.0
	float                            AI_DISTANCE_FOR_MIN_ACCURACY_BOOST; // offset:0x040	type:FLOAT.0
	float                            AI_HURT_ON_GROUND_MODIFIER;      // offset:0x044	type:FLOAT.0
	float                            AI_HURT_MODIFIER;                // offset:0x048	type:FLOAT.0
	float                            AI_PROFESSIONAL_PISTOL_VS_AI_MODIFIER; // offset:0x04C	type:FLOAT.0
};

struct sStatsMetadataTuning
{
	uint                             _0x3F6708E8;                     // offset:0x008	type:UINT.0
	uint                             AwardVehicleJumpTime;            // offset:0x00C	type:UINT.0
	uint                             AwardParachuteJumpTime;          // offset:0x010	type:UINT.0
	float                            SPLargeAccidenThresold;          // offset:0x014	type:FLOAT.0
	float                            MPLargeAccidenThresold;          // offset:0x018	type:FLOAT.0
	float                            FreefallThresold;                // offset:0x01C	type:FLOAT.0
	float                            AwardVehicleJumpDistanceA;       // offset:0x020	type:FLOAT.0
	float                            AwardVehicleJumpDistanceB;       // offset:0x024	type:FLOAT.0
	float                            AwardParachuteJumpDistanceA;     // offset:0x028	type:FLOAT.0
	float                            AwardParachuteJumpDistanceB;     // offset:0x02C	type:FLOAT.0
	struct NonFlyableAreaArray       nonFlyableAreas;                 // offset:0x030	type:STRUCT.STRUCTURE
};

struct sWeaponInfoList
{
	array<struct CItemInfo>          Infos;                           // offset:0x000	type:ARRAY.ATARRAY
};

struct sirenCorona
{
	float                            intensity;                       // offset:0x000	type:FLOAT.0
	float                            size;                            // offset:0x004	type:FLOAT.0
	float                            pull;                            // offset:0x008	type:FLOAT.0
	bool                             faceCamera;                      // offset:0x00C	type:BOOL.0
};

struct sirenLight
{
	struct sirenRotation             rotation;                        // offset:0x000	type:STRUCT.STRUCTURE
	struct sirenRotation             flashiness;                      // offset:0x014	type:STRUCT.STRUCTURE
	struct sirenCorona               corona;                          // offset:0x028	type:STRUCT.STRUCTURE
	uint                             color;                           // offset:0x038	type:UINT.1
	float                            intensity;                       // offset:0x03C	type:FLOAT.0
	uchar                            lightGroup;                      // offset:0x040	type:UCHAR.0
	uchar                            scaleFactor;                     // offset:0x041	type:UCHAR.0
	bool                             scale;                           // offset:0x042	type:BOOL.0
	bool                             rotate;                          // offset:0x043	type:BOOL.0
	bool                             flash;                           // offset:0x044	type:BOOL.0
	bool                             light;                           // offset:0x045	type:BOOL.0
	bool                             spotLight;                       // offset:0x046	type:BOOL.0
	bool                             castShadows;                     // offset:0x047	type:BOOL.0
};

struct sirenRotation
{
	float                            delta;                           // offset:0x000	type:FLOAT.0
	float                            start;                           // offset:0x004	type:FLOAT.0
	float                            speed;                           // offset:0x008	type:FLOAT.0
	uint                             sequencer;                       // offset:0x00C	type:UINT.0
	uchar                            multiples;                       // offset:0x010	type:UCHAR.0
	bool                             direction;                       // offset:0x011	type:BOOL.0
	bool                             syncToBpm;                       // offset:0x012	type:BOOL.0
};

struct sirenSettings
{
	uchar                                   id;                              // offset:0x000	type:UCHAR.0
	float                                   timeMultiplier;                  // offset:0x004	type:FLOAT.0
	float                                   lightFalloffMax;                 // offset:0x008	type:FLOAT.0
	float                                   lightFalloffExponent;            // offset:0x00C	type:FLOAT.0
	float                                   lightInnerConeAngle;             // offset:0x010	type:FLOAT.0
	float                                   lightOuterConeAngle;             // offset:0x014	type:FLOAT.0
	float                                   lightOffset;                     // offset:0x018	type:FLOAT.0
	string                                  textureName;                     // offset:0x01C	type:STRING.ATHASHVALUE
	uint                                    sequencerBpm;                    // offset:0x020	type:UINT.0
	struct sirenSettings__sequencerData     leftHeadLight;                   // offset:0x024	type:STRUCT.STRUCTURE
	struct sirenSettings__sequencerData     rightHeadLight;                  // offset:0x028	type:STRUCT.STRUCTURE
	struct sirenSettings__sequencerData     leftTailLight;                   // offset:0x02C	type:STRUCT.STRUCTURE
	struct sirenSettings__sequencerData     rightTailLight;                  // offset:0x030	type:STRUCT.STRUCTURE
	uchar                                   leftHeadLightMultiples;          // offset:0x034	type:UCHAR.0
	uchar                                   rightHeadLightMultiples;         // offset:0x035	type:UCHAR.0
	uchar                                   leftTailLightMultiples;          // offset:0x036	type:UCHAR.0
	uchar                                   rightTailLightMultiples;         // offset:0x037	type:UCHAR.0
	bool                                    useRealLights;                   // offset:0x038	type:BOOL.0
	array<struct sirenLight, 20>            sirens;                          // offset:0x03C	type:ARRAY.ATFIXEDARRAY
	string                                  name;                            // offset:0x5E0	type:STRING.POINTER
};

struct sirenSettings__sequencerData
{
	uint                             sequencer;                       // offset:0x000	type:UINT.0
};

struct strRecordedRequest
{
	struct strResourceReference      Resource;                        // offset:0x000	type:STRUCT.STRUCTURE
	int                              Flags;                           // offset:0x018	type:INT.0
};

struct strRequestRecording
{
	array<struct strRecordedRequest>     Requests;                        // offset:0x000	type:ARRAY.ATARRAY
};

struct strResourceReference
{
	string                           AssetName;                       // offset:0x000	type:STRING.ATSTRING
	string                           Extension;                       // offset:0x010	type:STRING.MEMBER
};

struct sveArray : sveNode
{
	array<struct sveNode>            Values;                          // offset:0x008	type:ARRAY.ATARRAY
};

struct sveBool : sveNode
{
	bool                             Value;                           // offset:0x008	type:BOOL.0
};

struct sveDict : sveNode
{
	map<string, struct sveNode>      Values;                          // offset:0x008	type:MAP.ATMAP
};

struct sveFloat : sveNode
{
	float                            Value;                           // offset:0x008	type:FLOAT.0
};

struct sveInt : sveNode
{
	int                              Value;                           // offset:0x008	type:INT.0
};

struct sveNode
{
};

struct sveString : sveNode
{
	string                           Value;                           // offset:0x008	type:STRING.ATSTRING
};

struct sveVec3 : sveNode
{
	vec3V                            Value;                           // offset:0x010	type:VEC3V.0
};

struct vehicleCorona
{
	float                            size;                            // offset:0x000	type:FLOAT.0
	float                            size_far;                        // offset:0x004	type:FLOAT.0
	float                            intensity;                       // offset:0x008	type:FLOAT.0
	float                            intensity_far;                   // offset:0x00C	type:FLOAT.0
	uint                             color;                           // offset:0x010	type:UINT.1
	uchar                            numCoronas;                      // offset:0x014	type:UCHAR.0
	uchar                            distBetweenCoronas;              // offset:0x015	type:UCHAR.0
	uchar                            distBetweenCoronas_far;          // offset:0x016	type:UCHAR.0
	float                            zBias;                           // offset:0x018	type:FLOAT.0
	float                            xRotation;                       // offset:0x01C	type:FLOAT.0
	float                            yRotation;                       // offset:0x020	type:FLOAT.0
	float                            zRotation;                       // offset:0x024	type:FLOAT.0
	bool                             pullCoronaIn;                    // offset:0x028	type:BOOL.0
};

struct vehicleLight
{
	float                            intensity;                       // offset:0x000	type:FLOAT.0
	float                            falloffMax;                      // offset:0x004	type:FLOAT.0
	float                            falloffExponent;                 // offset:0x008	type:FLOAT.0
	float                            innerConeAngle;                  // offset:0x00C	type:FLOAT.0
	float                            outerConeAngle;                  // offset:0x010	type:FLOAT.0
	uint                             color;                           // offset:0x014	type:UINT.1
	bool                             emmissiveBoost;                  // offset:0x018	type:BOOL.0
	string                           textureName;                     // offset:0x01C	type:STRING.ATHASHVALUE
	bool                             mirrorTexture;                   // offset:0x020	type:BOOL.0
};

struct vehicleLightSettings
{
	uchar                            id;                              // offset:0x000	type:UCHAR.0
	struct vehicleLight              indicator;                       // offset:0x004	type:STRUCT.STRUCTURE
	struct vehicleCorona             rearIndicatorCorona;             // offset:0x028	type:STRUCT.STRUCTURE
	struct vehicleCorona             frontIndicatorCorona;            // offset:0x054	type:STRUCT.STRUCTURE
	struct vehicleLight              tailLight;                       // offset:0x080	type:STRUCT.STRUCTURE
	struct vehicleCorona             tailLightCorona;                 // offset:0x0A4	type:STRUCT.STRUCTURE
	struct vehicleCorona             tailLightMiddleCorona;           // offset:0x0D0	type:STRUCT.STRUCTURE
	struct vehicleLight              headLight;                       // offset:0x0FC	type:STRUCT.STRUCTURE
	struct vehicleCorona             headLightCorona;                 // offset:0x120	type:STRUCT.STRUCTURE
	struct vehicleLight              reversingLight;                  // offset:0x14C	type:STRUCT.STRUCTURE
	struct vehicleCorona             reversingLightCorona;            // offset:0x170	type:STRUCT.STRUCTURE
	string                           name;                            // offset:0x1A0	type:STRING.POINTER
};

enum Affluence
{
	AFF_POOR = 0,
	AFF_AVERAGE = 1,
	AFF_RICH = 2,
};

enum AgitatedType
{
	AT_Insulted = 0,
	AT_Bumped = 1,
	AT_BumpedByVehicle = 2,
	AT_BumpedInVehicle = 3,
	AT_Dodged = 4,
	AT_DodgedVehicle = 5,
	AT_HonkedAt = 6,
	_0x2CD48E5E = 7,
	AT_Harassed = 8,
	AT_Hostile = 9,
	AT_Loitering = 10,
	AT_Following = 11,
	AT_BecomingArmed = 12,
	AT_TerritoryIntruded = 13,
	AT_Intimidate = 14,
	AT_Ranting = 15,
	AT_Intervene = 16,
	_0xEF176934 = 17,
	_0xDF63F8BD = 18,
	AT_Griefing = 19,
};

enum AmbientEventType
{
	AET_No_Type = 0,
	AET_Interesting = 1,
	AET_Threatening = 2,
	AET_Threatened = 3,
	AET_In_Place = 4,
	AET_Directed_In_Place = 5,
	AET_Flinch = 6,
};

enum CAgitatedActionFlee__Flags
{
	_0x58AAE75E = 0,
	_0x7D51D662 = 1,
};

enum CAgitatedPersonality__Flags
{
	IsAggressive = 0,
};

enum CAgitatedReaction__Flags
{
	DontClearFlags = 0,
	DontClearSay = 1,
};

enum CAgitatedResponse__Flags
{
	ProcessLeader = 0,
};

enum CAgitatedSay__Flags
{
	CanInterrupt = 0,
	IgnoreForcedFailure = 1,
	WaitForExistingAudioToFinish = 2,
	WaitUntilFacing = 3,
};

enum CAgitatedState__Flags
{
	InitialState = 0,
	FinalState = 1,
	UseWhenForcedAudioFails = 2,
	ClearHostility = 3,
};

enum CAmbientAudio__Flags
{
	IsInsulting = 0,
	IsHarassing = 1,
	ForcePlay = 2,
	AllowRepeat = 3,
	IsIgnored = 4,
	IsRant = 5,
	IsHostile = 6,
	IsConversation = 7,
};

enum CAmbientVehicleModelVariations__UseExtra
{
	Either = 0,
	MustUse = 1,
	CantUse = 2,
};

enum CAmmoInfo__Flags
{
	InfiniteAmmo = 0,
	AddSmokeOnExplosion = 1,
	Fuse = 2,
	FixedAfterExplosion = 3,
};

enum CAmmoProjectileInfo__Flags
{
	Sticky = 0,
	DestroyOnImpact = 1,
	ProcessImpacts = 2,
	HideDrawable = 3,
	TrailFxInactiveOnceWet = 4,
	TrailFxRemovedOnImpact = 5,
	DoGroundDisturbanceFx = 6,
	CanBePlaced = 7,
	NoPullPin = 8,
	DelayUntilSettled = 9,
	CanBeDestroyedByDamage = 10,
	CanBounce = 11,
	DoubleDamping = 12,
	_0x8B0D0C23 = 13,
	_0x2E3F9CBA = 14,
	ThrustUnderwater = 15,
	ApplyDamageOnImpact = 16,
	SetOnFireOnImpact = 17,
	DontFireAnyEvents = 18,
	AlignWithTrajectory = 19,
	ExplodeAtTrailFxPos = 20,
	ProximityDetonation = 21,
	AlignWithTrajectoryYAxis = 22,
	HomingAttractor = 23,
	Cluster = 24,
	_0xE792E56F = 25,
	_0x8A7D429C = 26,
	UseGravityOutOfWater = 27,
};

enum CDispatchHelperVolumes__Tunables__EnclosedSearchRegionFlags
{
	UseAABB = 0,
};

enum CEventShocking__ShockingEventReactionMode
{
	NO_REACTION = 0,
	SMALL_REACTION = 1,
	BIG_REACTION = 2,
};

enum CExtensionDefLadderMaterialType
{
	METAL_SOLID_LADDER = 0,
	METAL_LIGHT_LADDER = 1,
	WOODEN_LADDER = 2,
};

enum CExtensionDefLightShaftDensityType
{
	LIGHTSHAFT_DENSITYTYPE_CONSTANT = 0,
	LIGHTSHAFT_DENSITYTYPE_SOFT = 1,
	LIGHTSHAFT_DENSITYTYPE_SOFT_SHADOW = 2,
	LIGHTSHAFT_DENSITYTYPE_SOFT_SHADOW_HD = 3,
	LIGHTSHAFT_DENSITYTYPE_LINEAR = 4,
	LIGHTSHAFT_DENSITYTYPE_LINEAR_GRADIENT = 5,
	LIGHTSHAFT_DENSITYTYPE_QUADRATIC = 6,
	LIGHTSHAFT_DENSITYTYPE_QUADRATIC_GRADIENT = 7,
};

enum CExtensionDefLightShaftVolumeType
{
	LIGHTSHAFT_VOLUMETYPE_SHAFT = 0,
	LIGHTSHAFT_VOLUMETYPE_CYLINDER = 1,
};

enum CExtraVehiclePoint__eLocationType
{
	BONE = 0,
	SEAT_RELATIVE = 1,
	DRIVER_SEAT_RELATIVE = 2,
	WHEEL_GROUND_RELATIVE = 3,
	ENTITY_RELATIVE = 4,
};

enum CExtraVehiclePoint__ePointType
{
	GET_IN = 0,
	GET_IN_2 = 1,
	GET_IN_3 = 2,
	GET_IN_4 = 3,
	GET_OUT = 4,
	VAULT_HAND_HOLD = 5,
	UPSIDE_DOWN_EXIT = 6,
	PICK_UP_POINT = 7,
	PULL_UP_POINT = 8,
	QUICK_GET_ON_POINT = 9,
	_0xE757607E = 10,
	CLIMB_UP_FIXUP_POINT = 11,
	ON_BOARD_JACK = 12,
	POINT_TYPE_MAX = 13,
};

enum CLoadOutWeapon__Flags
{
	EquipThisWeapon = 0,
	SelectThisWeapon = 1,
	InfiniteAmmo = 2,
	SPOnly = 3,
	MPOnly = 4,
};

enum CPedCompRestriction__Restriction
{
	CantUse = 0,
	MustUse = 1,
};

enum CPedPropRestriction__Restriction
{
	CantUse = 0,
	MustUse = 1,
};

enum CScenarioChainingEdge__eAction
{
	Move = 0,
	_0x0078054E = 1,
	MoveFollowMaster = 2,
};

enum CScenarioChainingEdge__eNavMode
{
	Direct = 0,
	NavMesh = 1,
	Roads = 2,
};

enum CScenarioChainingEdge__eNavSpeed
{
	_0xC37A552E = 0,
	_0x83E68A42 = 1,
	_0xEFC70D2A = 2,
	_0x54FA088E = 3,
	_0x3915A963 = 4,
	_0xE2361616 = 5,
	_0xA8F4E639 = 6,
	_0x6FD9F15C = 7,
	_0x29A2EEB5 = 8,
	_0x5C0A9DD2 = 9,
	_0xA2758EF7 = 10,
	_0xF066C09C = 11,
	_0xB614B349 = 12,
	_0xE91D34C4 = 13,
	_0xDD96D27E = 14,
	_0xC808E512 = 15,
};

enum CScenarioConditionSpeed__Speed
{
	Stand = 0,
	Walk = 1,
	Run = 2,
	Sprint = 3,
};

enum CScenarioConditionTime__Time
{
	0 = 0,
	1 = 1,
	2 = 2,
	3 = 3,
	4 = 4,
	5 = 5,
	6 = 6,
	7 = 7,
	8 = 8,
	9 = 9,
	10 = 10,
	11 = 11,
	12 = 12,
	13 = 13,
	14 = 14,
	15 = 15,
	16 = 16,
	17 = 17,
	18 = 18,
	19 = 19,
	20 = 20,
	21 = 21,
	22 = 22,
	23 = 23,
};

enum CScenarioCondition__Result
{
	True = 0,
	False = 1,
};

enum CScenarioPointFlags__Flags
{
	IgnoreMaxInRange = 0,
	NoSpawn = 1,
	StationaryReactions = 2,
	OnlySpawnInSameInterior = 3,
	SpawnedPedIsArrestable = 4,
	ActivateVehicleSiren = 5,
	AggressiveVehicleDriving = 6,
	LandVehicleOnArrival = 7,
	IgnoreThreatsIfLosNotClear = 8,
	EventsInRadiusTriggerDisputes = 9,
	AerialVehiclePoint = 10,
	TerritorialScenario = 11,
	EndScenarioIfPlayerWithinRadius = 12,
	EventsInRadiusTriggerThreatResponse = 13,
	TaxiPlaneOnGround = 14,
	FlyOffToOblivion = 15,
	InWater = 16,
	AllowInvestigation = 17,
	OpenDoor = 18,
	PreciseUseTime = 19,
	NoRespawnUntilStreamedOut = 20,
	NoVehicleSpawnMaxDistance = 21,
	ExtendedRange = 22,
	ShortRange = 23,
	HighPriority = 24,
	IgnoreLoitering = 25,
	UseSearchlight = 26,
	ResetNoCollisionOnCleanUp = 27,
	CheckCrossedArrivalPlane = 28,
	UseVehicleFrontForArrival = 29,
	IgnoreWeatherRestrictions = 30,
};

enum CSeatOverrideAnimInfo__eSeatOverrideAnimFlags
{
	WeaponVisibleAttachedToRightHand = 0,
	UseBasicAnims = 1,
};

enum CSpawnPoint__AvailabilityMpSp
{
	kBoth = 0,
	kOnlySp = 1,
	kOnlyMp = 2,
};

enum CTaskCover__eAnimFlags
{
	AF_Low = 0,
	AF_EnterLeft = 1,
	AF_FaceLeft = 2,
	AF_AtEdge = 3,
	AF_ToLow = 4,
	AF_AimDirect = 5,
	AF_Center = 6,
	AF_ToPeek = 7,
	AF_Scope = 8,
};

enum CTaskExitVehicleSeat__eSeatPosition
{
	SF_FrontDriverSide = 0,
	SF_FrontPassengerSide = 1,
	SF_BackDriverSide = 2,
	SF_BackPassengerSide = 3,
	SF_AltFrontDriverSide = 4,
	SF_AltFrontPassengerSide = 5,
	SF_AltBackDriverSide = 6,
	SF_AltBackPassengerSide = 7,
};

enum CTaskVariedAimPose__AimPose__Transition__Flags
{
	OnlyUseForReactions = 0,
	CanUseForReactions = 1,
	Urgent = 2,
	OnlyUseForLawEnforcementPeds = 3,
	OnlyUseForGangPeds = 4,
};

enum CTaskVehicleDeadDriver__BrakeControl
{
	BC_Retain = 0,
	BC_Minimum = 1,
	BC_Maximum = 2,
	BC_Randomize = 3,
};

enum CTaskVehicleDeadDriver__HandBrakeControl
{
	HBC_Retain = 0,
	HBC_Minimum = 1,
	HBC_Maximum = 2,
	HBC_Randomize = 3,
};

enum CTaskVehicleDeadDriver__SteerAngleControl
{
	SAC_Retain = 0,
	SAC_Minimum = 1,
	SAC_Maximum = 2,
	SAC_Randomize = 3,
};

enum CTaskVehicleDeadDriver__ThrottleControl
{
	TC_Retain = 0,
	TC_Minimum = 1,
	TC_Maximum = 2,
	TC_Randomize = 3,
};

enum CVehicleLayoutInfo__eLayoutFlags
{
	NoDriver = 0,
	StreamAnims = 1,
	WaitForRerservationInGroup = 2,
	WarpIntoAndOut = 3,
	BikeLeansUnlessMoving = 4,
	UsePickUpPullUp = 5,
	AllowEarlyDoorAndSeatUnreservation = 6,
	UseVanOpenDoorBlendParams = 7,
	UseStillToSitTransition = 8,
	MustCloseDoor = 9,
	UseDoorOscillation = 10,
	NoArmIkOnInsideCloseDoor = 11,
	NoArmIkOnOutsideCloseDoor = 12,
	UseLeanSteerAnims = 13,
	NoArmIkOnOutsideOpenDoor = 14,
	UseSteeringWheelIk = 15,
	PreventJustPullingOut = 16,
	_0x6780DB19 = 17,
	OnlyExitIfDoorIsClosed = 18,
	DisableJackingAndBusting = 19,
	ClimbUpAfterOpenDoor = 20,
	UseFinerAlignTolerance = 21,
	Use2DBodyBlend = 22,
	IgnoreFrontSeatsWhenOnVehicle = 23,
	AutomaticCloseDoor = 24,
	WarpInWhenStoodOnTop = 25,
	DisableFastPoseWhenDrivebying = 26,
	DisableTargetRearDoorOpenRatio = 27,
	PreventInterruptAfterClimbUp = 28,
	PreventInterruptAfterOpenDoor = 29,
	UseLowerDoorBlockTest = 30,
	LockedForSpecialEdition = 31,
};

enum CVehicleModVisible__eVehicleModBone
{
	none = 4294967295,
	chassis = 0,
	bodyshell = 48,
	bumper_f = 49,
	bumper_r = 50,
	wing_rf = 51,
	wing_lf = 52,
	bonnet = 53,
	boot = 54,
	exhaust = 56,
	exhaust_2 = 57,
	exhaust_3 = 58,
	exhaust_4 = 59,
	exhaust_5 = 60,
	exhaust_6 = 61,
	exhaust_7 = 62,
	exhaust_8 = 63,
	exhaust_9 = 64,
	exhaust_10 = 65,
	exhaust_11 = 66,
	exhaust_12 = 67,
	exhaust_13 = 68,
	exhaust_14 = 69,
	exhaust_15 = 70,
	exhaust_16 = 71,
	exhaust_17 = 72,
	exhaust_18 = 73,
	exhaust_19 = 74,
	exhaust_20 = 75,
	exhaust_21 = 76,
	exhaust_22 = 77,
	exhaust_23 = 78,
	exhaust_24 = 79,
	exhaust_25 = 80,
	exhaust_26 = 81,
	exhaust_27 = 82,
	exhaust_28 = 83,
	exhaust_29 = 84,
	exhaust_30 = 85,
	exhaust_31 = 86,
	exhaust_32 = 87,
	extra_1 = 420,
	extra_2 = 421,
	extra_3 = 422,
	extra_4 = 423,
	extra_5 = 424,
	extra_6 = 425,
	extra_7 = 426,
	extra_8 = 427,
	extra_9 = 428,
	extra_10 = 429,
	extra_11 = 430,
	extra_12 = 431,
	extra_13 = 432,
	extra_14 = 433,
	break_extra_1 = 436,
	break_extra_2 = 437,
	break_extra_3 = 438,
	break_extra_4 = 439,
	break_extra_5 = 440,
	break_extra_6 = 441,
	break_extra_7 = 442,
	break_extra_8 = 443,
	break_extra_9 = 444,
	break_extra_10 = 445,
	mod_col_1 = 446,
	mod_col_2 = 447,
	mod_col_3 = 448,
	mod_col_4 = 449,
	mod_col_5 = 450,
	mod_col_6 = 451,
	mod_col_7 = 452,
	mod_col_8 = 453,
	mod_col_9 = 454,
	mod_col_10 = 455,
	mod_col_11 = 456,
	mod_col_12 = 457,
	mod_col_13 = 458,
	mod_col_14 = 459,
	mod_col_15 = 460,
	mod_col_16 = 461,
	misc_a = 385,
	misc_b = 386,
	misc_c = 387,
	misc_d = 388,
	misc_e = 389,
	misc_f = 390,
	misc_g = 391,
	misc_h = 392,
	misc_i = 393,
	misc_j = 394,
	misc_k = 395,
	misc_l = 396,
	misc_m = 397,
	misc_n = 398,
	misc_o = 399,
	misc_p = 400,
	misc_q = 401,
	misc_r = 402,
	misc_s = 403,
	misc_t = 404,
	misc_u = 405,
	misc_v = 406,
	misc_w = 407,
	misc_x = 408,
	misc_y = 409,
	misc_z = 410,
	misc_1 = 411,
	misc_2 = 412,
	handlebars = 95,
	steeringwheel = 96,
	swingarm = 29,
	forks_u = 21,
	forks_l = 22,
	headlight_l = 107,
	headlight_r = 108,
	indicator_lr = 113,
	indicator_lf = 111,
	indicator_rr = 114,
	indicator_rf = 112,
	taillight_l = 109,
	taillight_r = 110,
	window_lf = 42,
	window_rf = 43,
	window_rr = 45,
	window_lr = 44,
	window_lm = 46,
	window_rm = 47,
	hub_lf = 30,
	hub_rf = 31,
	windscreen_r = 41,
	neon_l = 120,
	neon_r = 121,
	neon_f = 122,
	neon_b = 123,
	door_dside_f = 3,
	door_dside_r = 4,
	door_pside_f = 5,
	door_pside_r = 6,
	bobble_head = 377,
	bobble_base = 378,
	bobble_hand = 379,
	engineblock = 380,
	spoiler = 381,
	mod_a = 493,
	mod_b = 494,
	mod_c = 495,
	mod_d = 496,
	mod_e = 497,
	mod_f = 498,
	mod_g = 499,
	mod_h = 500,
	mod_i = 501,
	mod_j = 502,
	mod_k = 503,
	mod_l = 504,
	mod_m = 505,
	mod_n = 506,
	mod_o = 507,
	mod_p = 508,
	mod_q = 509,
	mod_r = 510,
	mod_s = 511,
	mod_t = 512,
	mod_u = 513,
	mod_v = 514,
	mod_w = 515,
	mod_x = 516,
	mod_y = 517,
	mod_z = 518,
	mod_aa = 519,
	mod_ab = 520,
	mod_ac = 521,
	mod_ad = 522,
	mod_ae = 523,
	mod_af = 524,
	mod_ag = 525,
	mod_ah = 526,
	mod_ai = 527,
	mod_aj = 528,
	mod_ak = 529,
	turret_a1 = 530,
	turret_a2 = 531,
	turret_a3 = 532,
	turret_a4 = 533,
	turret_b1 = 543,
	turret_b2 = 544,
	turret_b3 = 545,
	turret_b4 = 546,
	rblade_1mod = 579,
	rblade_1fast = 580,
	rblade_2mod = 581,
	rblade_2fast = 582,
	rblade_3mod = 583,
	rblade_3fast = 584,
	fblade_1mod = 585,
	fblade_1fast = 586,
	fblade_2mod = 587,
	fblade_2fast = 588,
	fblade_3mod = 589,
	fblade_3fast = 590,
	sblade_1mod = 591,
	sblade_1_lfast = 592,
	sblade_1_rfast = 593,
	sblade_2mod = 594,
	sblade_2_1fast = 595,
	sblade_2_1fast = 596,
	sblade_3mod = 597,
	sblade_3_lfast = 598,
	sblade_3_rfast = 599,
	spike_1mod = 600,
	spike_1ped_col = 601,
	spike1car_col = 602,
	spike_2mod = 603,
	spike_2ped_col = 604,
	spike_2car_col = 605,
	spike_3mod = 606,
	spike_3ped_col = 607,
	spike_3car_col = 608,
	scoop_1mod = 609,
	scoop_2mod = 610,
	scoop_3mod = 611,
	ramp_1mod = 612,
	ramp_2mod = 613,
	ramp_3mod = 614,
	spike_1modf = 615,
	spike_2modf = 616,
	spike_3modf = 617,
	ram_1modf = 618,
	ram_2modf = 619,
	ram_3modf = 620,
	ram_4modf = 621,
	miscwobble_1 = 622,
	miscwobble_2 = 623,
	miscwobble_3 = 624,
	miscwobble_4 = 625,
	miscwobble_5 = 626,
	miscwobble_6 = 627,
	miscwobble_7 = 628,
	miscwobble_8 = 629,
	supercharger_1 = 630,
	supercharger_2 = 631,
	supercharger_3 = 632,
	reversinglight_l = 118,
	reversinglight_r = 119,
};

enum CVehicleModelInfoFlags__Flags
{
	FLAG_SMALL_WORKER = 0,
	FLAG_BIG = 1,
	FLAG_NO_BOOT = 2,
	FLAG_ONLY_DURING_OFFICE_HOURS = 3,
	FLAG_BOOT_IN_FRONT = 4,
	FLAG_IS_VAN = 5,
	FLAG_AVOID_TURNS = 6,
	FLAG_HAS_LIVERY = 7,
	FLAG_LIVERY_MATCH_EXTRA = 8,
	FLAG_SPORTS = 9,
	FLAG_DELIVERY = 10,
	_0xB5A93F62 = 11,
	FLAG_ONLY_ON_HIGHWAYS = 12,
	FLAG_TALL_SHIP = 13,
	FLAG_SPAWN_ON_TRAILER = 14,
	FLAG_SPAWN_BOAT_ON_TRAILER = 15,
	FLAG_EXTRAS_GANG = 16,
	FLAG_EXTRAS_CONVERTIBLE = 17,
	FLAG_EXTRAS_TAXI = 18,
	FLAG_EXTRAS_RARE = 19,
	FLAG_EXTRAS_REQUIRE = 20,
	FLAG_EXTRAS_STRONG = 21,
	FLAG_EXTRAS_ONLY_BREAK_WHEN_DESTROYED = 22,
	FLAG_EXTRAS_SCRIPT = 23,
	FLAG_EXTRAS_ALL = 24,
	FLAG_EXTRAS_MATCH_LIVERY = 25,
	FLAG_DONT_ROTATE_TAIL_ROTOR = 26,
	FLAG_PARKING_SENSORS = 27,
	FLAG_PEDS_CAN_STAND_ON_TOP = 28,
	_0x77C9F804 = 29,
	FLAG_GEN_NAVMESH = 30,
	FLAG_LAW_ENFORCEMENT = 31,
	FLAG_EMERGENCY_SERVICE = 32,
	FLAG_DRIVER_NO_DRIVE_BY = 33,
	FLAG_NO_RESPRAY = 34,
	FLAG_IGNORE_ON_SIDE_CHECK = 35,
	FLAG_RICH_CAR = 36,
	FLAG_AVERAGE_CAR = 37,
	FLAG_POOR_CAR = 38,
	FLAG_ALLOWS_RAPPEL = 39,
	FLAG_DONT_CLOSE_DOOR_UPON_EXIT = 40,
	FLAG_USE_HIGHER_DOOR_TORQUE = 41,
	FLAG_DISABLE_THROUGH_WINDSCREEN = 42,
	FLAG_IS_ELECTRIC = 43,
	FLAG_NO_BROKEN_DOWN_SCENARIO = 44,
	FLAG_IS_JETSKI = 45,
	FLAG_DAMPEN_STICKBOMB_DAMAGE = 46,
	FLAG_DONT_SPAWN_IN_CARGEN = 47,
	FLAG_IS_OFFROAD_VEHICLE = 48,
	FLAG_INCREASE_PED_COMMENTS = 49,
	FLAG_EXPLODE_ON_CONTACT = 50,
	FLAG_USE_FAT_INTERIOR_LIGHT = 51,
	FLAG_HEADLIGHTS_USE_ACTUAL_BONE_POS = 52,
	FLAG_FAKE_EXTRALIGHTS = 53,
	FLAG_CANNOT_BE_MODDED = 54,
	FLAG_DONT_SPAWN_AS_AMBIENT = 55,
	FLAG_IS_BULKY = 56,
	FLAG_BLOCK_FROM_ATTRACTOR_SCENARIO = 57,
	FLAG_IS_BUS = 58,
	FLAG_USE_STEERING_PARAM_FOR_LEAN = 59,
	FLAG_CANNOT_BE_DRIVEN_BY_PLAYER = 60,
	FLAG_SPRAY_PETROL_BEFORE_EXPLOSION = 61,
	FLAG_ATTACH_TRAILER_ON_HIGHWAY = 62,
	FLAG_ATTACH_TRAILER_IN_CITY = 63,
	FLAG_HAS_NO_ROOF = 64,
	FLAG_ALLOW_TARGETING_OF_OCCUPANTS = 65,
	FLAG_RECESSED_HEADLIGHT_CORONAS = 66,
	FLAG_RECESSED_TAILLIGHT_CORONAS = 67,
	FLAG_IS_TRACKED_FOR_TRAILS = 68,
	FLAG_HEADLIGHTS_ON_LANDINGGEAR = 69,
	FLAG_CONSIDERED_FOR_VEHICLE_ENTRY_WHEN_STOOD_ON = 70,
	FLAG_GIVE_SCUBA_GEAR_ON_EXIT = 71,
	FLAG_IS_DIGGER = 72,
	FLAG_IS_TANK = 73,
	FLAG_USE_COVERBOUND_INFO_FOR_COVERGEN = 74,
	FLAG_CAN_BE_DRIVEN_ON = 75,
	FLAG_HAS_BULLETPROOF_GLASS = 76,
	FLAG_CANNOT_TAKE_COVER_WHEN_STOOD_ON = 77,
	FLAG_INTERIOR_BLOCKED_BY_BOOT = 78,
	FLAG_DONT_TIMESLICE_WHEELS = 79,
	FLAG_FLEE_FROM_COMBAT = 80,
	FLAG_DRIVER_SHOULD_BE_FEMALE = 81,
	FLAG_DRIVER_SHOULD_BE_MALE = 82,
	FLAG_COUNT_AS_FACEBOOK_DRIVEN = 83,
	FLAG_BIKE_CLAMP_PICKUP_LEAN_RATE = 84,
	FLAG_PLANE_WEAR_ALTERNATIVE_HELMET = 85,
	FLAG_USE_STRICTER_EXIT_COLLISION_TESTS = 86,
	FLAG_TWO_DOORS_ONE_SEAT = 87,
	FLAG_USE_LIGHTING_INTERIOR_OVERRIDE = 88,
	FLAG_USE_RESTRICTED_DRIVEBY_HEIGHT = 89,
	FLAG_CAN_HONK_WHEN_FLEEING = 90,
	FLAG_PEDS_INSIDE_CAN_BE_SET_ON_FIRE_MP = 91,
	FLAG_REPORT_CRIME_IF_STANDING_ON = 92,
	FLAG_HELI_USES_FIXUPS_ON_OPEN_DOOR = 93,
	FLAG_FORCE_ENABLE_CHASSIS_COLLISION = 94,
	FLAG_CANNOT_BE_PICKUP_BY_CARGOBOB = 95,
	FLAG_CAN_HAVE_NEONS = 96,
	FLAG_HAS_INTERIOR_EXTRAS = 97,
	FLAG_HAS_TURRET_SEAT_ON_VEHICLE = 98,
	FLAG_ALLOW_OBJECT_LOW_LOD_COLLISION = 99,
	FLAG_DISABLE_AUTO_VAULT_ON_VEHICLE = 100,
	FLAG_USE_TURRET_RELATIVE_AIM_CALCULATION = 101,
	FLAG_USE_FULL_ANIMS_FOR_MP_WARP_ENTRY_POINTS = 102,
	FLAG_HAS_DIRECTIONAL_SHUFFLES = 103,
	FLAG_DISABLE_WEAPON_WHEEL_IN_FIRST_PERSON = 104,
	FLAG_USE_PILOT_HELMET = 105,
	FLAG_USE_WEAPON_WHEEL_WITHOUT_HELMET = 106,
	FLAG_PREFER_ENTER_TURRET_AFTER_DRIVER = 107,
	FLAG_USE_SMALLER_OPEN_DOOR_RATIO_TOLERANCE = 108,
	FLAG_USE_HEADING_ONLY_IN_TURRET_MATRIX = 109,
	FLAG_DONT_STOP_WHEN_GOING_TO_CLIMB_UP_POINT = 110,
	FLAG_HAS_REAR_MOUNTED_TURRET = 111,
	FLAG_DISABLE_BUSTING = 112,
	FLAG_IGNORE_RWINDOW_COLLISION = 113,
	FLAG_HAS_GULL_WING_DOORS = 114,
	FLAG_CARGOBOB_HOOK_UP_CHASSIS = 115,
	FLAG_USE_FIVE_ANIM_THROW_FP = 116,
	FLAG_ALLOW_HATS_NO_ROOF = 117,
	FLAG_HAS_REAR_SEAT_ACTIVITIES = 118,
	FLAG_HAS_LOWRIDER_HYDRAULICS = 119,
	FLAG_HAS_BULLET_RESISTANT_GLASS = 120,
	FLAG_HAS_INCREASED_RAMMING_FORCE = 121,
	FLAG_HAS_CAPPED_EXPLOSION_DAMAGE = 122,
	FLAG_HAS_LOWRIDER_DONK_HYDRAULICS = 123,
	FLAG_HELICOPTER_WITH_LANDING_GEAR = 124,
	FLAG_JUMPING_CAR = 125,
	FLAG_HAS_ROCKET_BOOST = 126,
	FLAG_RAMMING_SCOOP = 127,
	FLAG_HAS_PARACHUTE = 128,
	FLAG_RAMP = 129,
	FLAG_HAS_EXTRA_SHUFFLE_SEAT_ON_VEHICLE = 130,
	FLAG_FRONT_BOOT = 131,
	FLAG_HALF_TRACK = 132,
	FLAG_RESET_TURRET_SEAT_HEADING = 133,
	FLAG_TURRET_MODS_ON_ROOF = 134,
	FLAG_UPDATE_WEAPON_BATTERY_BONES = 135,
	FLAG_DONT_HOLD_LOW_GEARS_WHEN_ENGINE_UNDER_LOAD = 136,
	FLAG_HAS_GLIDER = 137,
	FLAG_INCREASE_LOW_SPEED_TORQUE = 138,
	FLAG_USE_AIRCRAFT_STYLE_WEAPON_TARGETING = 139,
	FLAG_KEEP_ALL_TURRETS_SYNCHRONISED = 140,
	FLAG_SET_WANTED_FOR_ATTACHED_VEH = 141,
	FLAG_TURRET_ENTRY_ATTACH_TO_DRIVER_SEAT = 142,
	FLAG_USE_STANDARD_FLIGHT_HELMET = 143,
	FLAG_SECOND_TURRET_MOD = 144,
	FLAG_THIRD_TURRET_MOD = 145,
	FLAG_HAS_EJECTOR_SEATS = 146,
	_0x2028D687 = 147,
	FLAG_HAS_JATO_BOOST_MOD = 148,
	FLAG_IGNORE_TRAPPED_HULL_CHECK = 149,
	FLAG_HOLD_TO_SHUFFLE = 150,
	FLAG_TURRET_MOD_WITH_NO_STOCK_TURRET = 151,
	FLAG_EQUIP_UNARMED_ON_ENTER = 152,
	FLAG_DISABLE_CAMERA_PUSH_BEYOND = 153,
	FLAG_HAS_VERTICAL_FLIGHT_MODE = 154,
	FLAG_HAS_OUTRIGGER_LEGS = 155,
	FLAG_CAN_NAVIGATE_TO_ON_VEHICLE_ENTRY = 156,
	FLAG_DROP_SUSPENSION_WHEN_STOPPED = 157,
	FLAG_DONT_CRASH_ABANDONED_NEAR_GROUND = 158,
	FLAG_USE_INTERIOR_RED_LIGHT = 159,
	FLAG_HAS_HELI_STRAFE_MODE = 160,
	FLAG_HAS_VERTICAL_ROCKET_BOOST = 161,
	FLAG_CREATE_WEAPON_MANAGER_ON_SPAWN = 162,
	FLAG_USE_ROOT_AS_BASE_LOCKON_POS = 163,
	FLAG_HEADLIGHTS_ON_TAP_ONLY = 164,
	FLAG_CHECK_WARP_TASK_FLAG_DURING_ENTER = 165,
	FLAG_USE_RESTRICTED_DRIVEBY_HEIGHT_HIGH = 166,
	FLAG_INCREASE_CAMBER_WITH_SUSPENSION_MOD = 167,
	FLAG_NO_HEAVY_BRAKE_ANIMATION = 168,
	FLAG_HAS_TWO_BONNET_BONES = 169,
	FLAG_DONT_LINK_BOOT2 = 170,
	FLAG_HAS_INCREASED_RAMMING_FORCE_WITH_CHASSIS_MOD = 171,
	_0x4C8630D9 = 172,
	FLAG_HAS_EXTENDED_COLLISION_MODS = 173,
	FLAG_HAS_NITROUS_MOD = 174,
	FLAG_HAS_JUMP_MOD = 175,
	FLAG_HAS_RAMMING_SCOOP_MOD = 176,
	FLAG_HAS_SUPER_BRAKES_MOD = 177,
	FLAG_CRUSHES_OTHER_VEHICLES = 178,
	FLAG_HAS_WEAPON_BLADE_MODS = 179,
	FLAG_HAS_WEAPON_SPIKE_MODS = 180,
	FLAG_FORCE_BONNET_CAMERA_INSTEAD_OF_POV = 181,
	FLAG_RAMP_MOD = 182,
	FLAG_HAS_TOMBSTONE = 183,
	FLAG_HAS_SIDE_SHUNT = 184,
	FLAG_HAS_FRONT_SPIKE_MOD = 185,
	FLAG_HAS_RAMMING_BAR_MOD = 186,
	FLAG_TURRET_MODS_ON_CHASSIS5 = 187,
	FLAG_HAS_SUPERCHARGER = 188,
	FLAG_IS_TANK_WITH_FLAME_DAMAGE = 189,
	FLAG_DISABLE_DEFORMATION = 190,
	FLAG_ALLOW_RAPPEL_AI_ONLY = 191,
	FLAG_USE_RESTRICTED_DRIVEBY_HEIGHT_MID_ONLY = 192,
	_0xE5391C19 = 193,
	FLAG_SPOILER_MOD_DOESNT_INCREASE_GRIP = 194,
	FLAG_NO_REVERSING_ANIMATION = 195,
	FLAG_IS_QUADBIKE_USING_BIKE_ANIMATIONS = 196,
	FLAG_IS_FORMULA_VEHICLE = 197,
	FLAG_LATCH_ALL_JOINTS = 198,
	FLAG_REJECT_ENTRY_TO_VEHICLE_WHEN_STOOD_ON = 199,
	FLAG_CHECK_IF_DRIVER_SEAT_IS_CLOSER_THAN_TURRETS_WITH_ON_BOARD_ENTER = 200,
	FLAG_RENDER_WHEELS_WITH_ZERO_COMPRESSION = 201,
	FLAG_USE_LENGTH_OF_VEHICLE_BOUNDS_FOR_PLAYER_LOCKON_POS = 202,
	_0x366E8045 = 203,
};

enum CWeaponComponentScopeInfo__SpecialScopeType
{
	None = 0,
	NightVision = 1,
	ThermalVision = 2,
};

enum CWeaponInfoFlags__Flags
{
	CarriedInHand = 0,
	Automatic = 1,
	Silenced = 2,
	FirstPersonScope = 3,
	ArmourPenetrating = 4,
	ApplyBulletForce = 5,
	Gun = 6,
	CanLockonOnFoot = 7,
	CanLockonInVehicle = 8,
	Homing = 9,
	CanFreeAim = 10,
	Heavy = 11,
	TwoHanded = 12,
	Launched = 13,
	MeleeBlade = 14,
	MeleeClub = 15,
	AnimReload = 16,
	AnimCrouchFire = 17,
	CreateVisibleOrdnance = 18,
	TreatAsOneHandedInCover = 19,
	_0x433706FF = 20,
	Thrown = 21,
	Bomb = 22,
	UsableOnFoot = 23,
	UsableUnderwater = 24,
	UsableClimbing = 25,
	UsableInCover = 26,
	AllowEarlyExitFromFireAnimAfterBulletFired = 27,
	DisableRightHandIk = 28,
	DisableLeftHandIkInCover = 29,
	DontSwapWeaponIfNoAmmo = 30,
	UseLoopedReloadAnim = 31,
	DoesRevivableDamage = 32,
	NoFriendlyFireDamage = 33,
	Detonator = 34,
	DisplayRechargeTimeHUD = 35,
	OnlyFireOneShot = 36,
	OnlyFireOneShotPerTriggerPress = 37,
	UseLegDamageVoice = 38,
	Lasso = 39,
	CanBeFiredLikeGun = 40,
	OnlyAllowFiring = 41,
	NoLeftHandIK = 42,
	NoLeftHandIKWhenBlocked = 43,
	_0x94214125 = 44,
	IgnoreStrafing = 45,
	Vehicle = 46,
	EnforceAimingRestrictions = 47,
	ForceEjectShellAfterFiring = 48,
	NonViolent = 49,
	NonLethal = 50,
	Scary = 51,
	AllowCloseQuarterKills = 52,
	DisablePlayerBlockingInMP = 53,
	StaticReticulePosition = 54,
	CanPerformArrest = 55,
	_0xF1DA2249 = 56,
	AllowMeleeIntroAnim = 57,
	ManualDetonation = 58,
	SuppressGunshotEvent = 59,
	HiddenFromWeaponWheel = 60,
	AllowDriverLockOnToAmbientPeds = 61,
	NeedsGunCockingInCover = 62,
	ThrowOnly = 63,
	NoAutoRunWhenFiring = 64,
	DisableIdleVariations = 65,
	HasLowCoverReloads = 66,
	HasLowCoverSwaps = 67,
	DontBreakRopes = 68,
	CookWhileAiming = 69,
	UseLeftHandIkWhenAiming = 70,
	DropWhenCooked = 71,
	NotAWeapon = 72,
	RemoveEarlyWhenEnteringVehicles = 73,
	DontBlendFireOutro = 74,
	DiscardWhenOutOfAmmo = 75,
	DelayedFiringAfterAutoSwap = 76,
	EnforceFiringAngularThreshold = 77,
	ForcesActionMode = 78,
	CreatesAPotentialExplosionEventWhenFired = 79,
	CreateBulletExplosionWhenOutOfTime = 80,
	DelayedFiringAfterAutoSwapPreviousWeapon = 81,
	DisableCombatRoll = 82,
	NoWheelStats = 83,
	ProcessGripAnim = 84,
	DisableStealth = 85,
	DangerousLookingMeleeWeapon = 86,
	QuitTransitionToIdleIntroOnWeaponChange = 87,
	DisableLeftHandIkWhenOnFoot = 88,
	IgnoreHelmets = 89,
	Rpg = 90,
	NoAmmoDisplay = 91,
	TorsoIKForWeaponBlock = 92,
	LongWeapon = 93,
	_0xAF443B5F = 94,
	_0xE3C63C3B = 95,
	_0x1E3D23FF = 96,
	AssistedAimVehicleWeapon = 97,
	CanBlowUpVehicleAtZeroBodyHealth = 98,
	IgnoreAnimReloadRateModifiers = 99,
	DisableIdleAnimationFilter = 100,
	_0x7B27E96A = 101,
	_0xBDBBC7FE = 102,
	HomingToggle = 103,
	ApplyVehicleDamageToEngine = 104,
	Turret = 105,
	DisableAimAngleChecksForReticule = 106,
	AllowMovementDuringFirstPersonScope = 107,
	DriveByMPOnly = 108,
	_0xD5E173D6 = 109,
	CreateWeaponWithNoModel = 110,
	RemoveWhenUnequipped = 111,
	BlockAmbientIdles = 112,
	NotUnarmed = 113,
	UseFPSAimIK = 114,
	DisableFPSScope = 115,
	DisableFPSAimForScope = 116,
	EnableFPSRNGOnly = 117,
	EnableFPSIdleOnly = 118,
	MeleeHatchet = 119,
	UseAlternateFPDrivebyClipset = 120,
	AttachFPSLeftHandIKToRight = 121,
	OnlyUseAimingInfoInFPS = 122,
	UseFPSAnimatedRecoil = 123,
	UseFPSSecondaryMotion = 124,
	HasFPSProjectileWeaponAnims = 125,
	AllowMeleeBlock = 126,
	DontPlayDryFireAnim = 127,
	SwapToUnarmedWhenOutOfThrownAmmo = 128,
	PlayOutOfAmmoAnim = 129,
	DisableIdleAnimationFilterWhenReloading = 130,
	OnFootHoming = 131,
	DamageCausesDisputes = 132,
	UsePlaneExplosionDamageCapInMP = 133,
	FPSOnlyExitFireAnimAfterRecoilEnds = 134,
	SkipVehiclePetrolTankDamage = 135,
	DontAutoSwapOnPickUp = 136,
	DisableTorsoIKAboveAngleThreshold = 137,
	MeleeFist = 138,
	NotAllowedForDriveby = 139,
	AttachReloadObjectToRightHand = 140,
	CanBeAimedLikeGunWithoutFiring = 141,
	MeleeMachete = 142,
	HideReticule = 143,
	UseHolsterAnimation = 144,
	BlockFirstPersonStateTransitionWhileFiring = 145,
	ForceFullFireAnimation = 146,
	DisableLeftHandIkInDriveby = 147,
	CanUseInVehMelee = 148,
	UseVehicleWeaponBoneForward = 149,
	UseManualTargetingMode = 150,
	IgnoreTracerVfxMuzzleDirectionCheck = 151,
	IgnoreHomingCloseThresholdCheck = 152,
	LockOnRequiresAim = 153,
	DisableCameraPullAround = 154,
	VehicleChargedLaunch = 155,
	ForcePedAsFiringEntity = 156,
	FiringEntityIgnoresExplosionDamage = 157,
	IdlePhaseBasedOnTrigger = 158,
	HighSpinRate = 159,
	EnabledOnlyWhenVehTransformed = 160,
	IncendiaryGuaranteedChance = 161,
	UseCameraHeadingForHomingTargetCheck = 162,
	UseWeaponRangeForTargetProbe = 163,
	SkipProjectileLOSCheck = 164,
	UseRevolverBehaviour = 165,
	UseSingleActionBehaviour = 166,
	_0x68F30C0A = 167,
	_0x614E1388 = 168,
	_0xA9CB74E6 = 169,
	_0x53D0CED3 = 170,
	_0x3E678BAC = 171,
	_0xC2A180AE = 172,
	_0xC03C4B08 = 173,
	_0x7CACFF1F = 174,
	BoatWeaponIsNotSearchLight = 175,
	AllowFireInterruptWhenReady = 176,
	ResponsiveRecoilRecovery = 177,
	OnlyLockOnToAquaticVehicles = 178,
};

enum CWitnessInformation__Flags
{
	MustBeWitnessed = 0,
	MustNotifyLawEnforcement = 1,
	OnlyVictimCanNotifyLawEnforcement = 2,
};

enum CWitnessPersonality__Flags
{
	CanWitnessCrimes = 0,
	WillCallLawEnforcement = 1,
	WillMoveToLawEnforcement = 2,
};

enum ConfigBool
{
	CB_INHERIT = 4294966296,
	CB_FALSE = 0,
	CB_TRUE = 1,
};

enum ConfigThreadPriority
{
	PRIO_INHERIT = 4294966296,
	PRIO_IDLE = 4294967281,
	PRIO_LOWEST = 4294967294,
	PRIO_BELOW_NORMAL = 4294967295,
	PRIO_NORMAL = 0,
	PRIO_ABOVE_NORMAL = 1,
	PRIO_HIGHEST = 2,
	PRIO_TIME_CRITICAL = 15,
};

enum DataFileContents
{
	CONTENTS_DEFAULT = 0,
	CONTENTS_PROPS = 1,
	CONTENTS_MAP = 2,
	CONTENTS_LODS = 3,
	CONTENTS_PEDS = 4,
	CONTENTS_VEHICLES = 5,
	CONTENTS_ANIMATION = 6,
	CONTENTS_CUTSCENE = 7,
	CONTENTS_DLC_MAP_DATA = 8,
	CONTENTS_DEBUG_ONLY = 9,
	CONTENTS_MAX = 10,
};

enum DataFileType
{
	RPF_FILE = 0,
	IDE_FILE = 1,
	DELAYED_IDE_FILE = 2,
	IPL_FILE = 3,
	PERMANENT_ITYP_FILE = 4,
	_0xF8DBB290 = 5,
	HANDLING_FILE = 6,
	VEHICLEEXTRAS_FILE = 7,
	CHINESE_SHUFFLING_CHECKS_FILE = 8,
	PEDSTREAM_FILE = 9,
	CARCOLS_FILE = 10,
	POPGRP_FILE = 11,
	PEDGRP_FILE = 12,
	CARGRP_FILE = 13,
	POPSCHED_FILE = 14,
	ZONEBIND_FILE = 15,
	RADIO_FILE = 16,
	EXTRAMAP_CONVERSION_OCC_FILE = 17,
	THROWNWEAPONINFO_FILE = 18,
	RMPTFX_FILE = 19,
	PED_PERSONALITY_FILE = 20,
	PED_PERCEPTION_FILE = 21,
	VEHICLE_CAMERA_OFFSETS_FILE = 22,
	FRONTEND_MENU_FILE = 23,
	LEADERBOARD_DATA_FILE = 24,
	LEADERBOARD_ICONS_FILE = 25,
	NETWORKOPTIONS_FILE = 26,
	TIMECYCLE_FILE = 27,
	TIMECYCLEMOD_FILE = 28,
	WEATHER_FILE = 29,
	_0x8F3DC129 = 30,
	_0x90E80E66 = 31,
	PROCOBJ_FILE = 32,
	PROC_META_FILE = 33,
	VFX_SETTINGS_FILE = 34,
	SP_STATS_DISPLAY_LIST_FILE = 35,
	MP_STATS_DISPLAY_LIST_FILE = 36,
	PED_VARS_FILE = 37,
	DISABLE_FILE = 38,
	BUILDING_META_DISPLACEMENT_FILE = 39,
	HUD_TXD_FILE = 40,
	FRONTEND_DAT_FILE = 41,
	SCROLLBARS_FILE = 42,
	TIME_FILE = 43,
	BLOODFX_FILE = 44,
	ENTITYFX_FILE = 45,
	EXPLOSIONFX_FILE = 46,
	MATERIALFX_FILE = 47,
	MOTION_TASK_DATA_FILE = 48,
	DEFAULT_TASK_DATA_FILE = 49,
	MOUNT_TUNE_FILE = 50,
	PED_BOUNDS_FILE = 51,
	PED_HEALTH_FILE = 52,
	PED_COMPONENT_SETS_FILE = 53,
	PED_IK_SETTINGS_FILE = 54,
	PED_TASK_DATA_FILE = 55,
	PED_SPECIAL_ABILITIES_FILE = 56,
	WHEELFX_FILE = 57,
	WEAPONFX_FILE = 58,
	DECALS_FILE = 59,
	NAVMESH_INDEXREMAPPING_FILE = 60,
	NAVNODE_INDEXREMAPPING_FILE = 61,
	AUDIOMESH_INDEXREMAPPING_FILE = 62,
	JUNCTION_TEMPLATES_FILE = 63,
	PATH_ZONES_FILE = 64,
	DISTANT_LIGHTS_FILE = 65,
	DISTANT_LIGHTS_HD_FILE = 66,
	FLIGHTZONES_FILE = 67,
	WATER_FILE = 68,
	TRAINCONFIGS_FILE = 69,
	TRAINTRACK_FILE = 70,
	PED_METADATA_FILE = 71,
	WEAPON_METADATA_FILE = 72,
	VEHICLE_METADATA_FILE = 73,
	DISPATCH_DATA_FILE = 74,
	DEFORMABLE_OBJECTS_FILE = 75,
	TUNABLE_OBJECTS_FILE = 76,
	PED_NAV_CAPABILITES_FILE = 77,
	WEAPONINFO_FILE = 78,
	WEAPONCOMPONENTSINFO_FILE = 79,
	LOADOUTS_FILE = 80,
	FIRINGPATTERNS_FILE = 81,
	MOTIVATIONS_FILE = 82,
	SCENARIO_POINTS_FILE = 83,
	SCENARIO_POINTS_PSO_FILE = 84,
	STREAMING_FILE = 85,
	STREAMING_FILE_PLATFORM_PS3 = 86,
	STREAMING_FILE_PLATFORM_XENON = 87,
	STREAMING_FILE_PLATFORM_OTHER = 88,
	PED_BRAWLING_STYLE_FILE = 89,
	AMBIENT_PED_MODEL_SET_FILE = 90,
	AMBIENT_PROP_MODEL_SET_FILE = 91,
	AMBIENT_VEHICLE_MODEL_SET_FILE = 92,
	LADDER_METADATA_FILE = 93,
	_0xF4E48104 = 94,
	SLOWNESS_ZONES_FILE = 95,
	LIQUIDFX_FILE = 96,
	VFXVEHICLEINFO_FILE = 97,
	VFXPEDINFO_FILE = 98,
	DOOR_TUNING_FILE = 99,
	PTFXASSETINFO_FILE = 100,
	SCRIPTFX_FILE = 101,
	VFXREGIONINFO_FILE = 102,
	VFXINTERIORINFO_FILE = 103,
	CAMERA_METADATA_FILE = 104,
	STREET_VEHICLE_ASSOCIATION_FILE = 105,
	VFXWEAPONINFO_FILE = 106,
	EXPLOSION_INFO_FILE = 107,
	JUNCTION_TEMPLATES_PSO_FILE = 108,
	MAPZONES_FILE = 109,
	SP_STATS_UI_LIST_FILE = 110,
	MP_STATS_UI_LIST_FILE = 111,
	OBJ_COVER_TUNING_FILE = 112,
	STREAMING_REQUEST_LISTS_FILE = 113,
	PLAYER_CARD_SETUP = 114,
	WORLD_HEIGHTMAP_FILE = 115,
	WORLD_WATERHEIGHT_FILE = 116,
	PED_OVERLAY_FILE = 117,
	WEAPON_ANIMATIONS_FILE = 118,
	VEHICLE_POPULATION_FILE = 119,
	ACTION_TABLE_DEFINITIONS = 120,
	ACTION_TABLE_RESULTS = 121,
	ACTION_TABLE_IMPULSES = 122,
	ACTION_TABLE_RUMBLES = 123,
	ACTION_TABLE_INTERRELATIONS = 124,
	ACTION_TABLE_HOMINGS = 125,
	ACTION_TABLE_DAMAGES = 126,
	ACTION_TABLE_STRIKE_BONES = 127,
	ACTION_TABLE_BRANCHES = 128,
	ACTION_TABLE_STEALTH_KILLS = 129,
	ACTION_TABLE_VFX = 130,
	ACTION_TABLE_FACIAL_ANIM_SETS = 131,
	VEHGEN_MARKUP_FILE = 132,
	PED_COMPONENT_CLOTH_FILE = 133,
	TATTOO_SHOP_DLC_FILE = 134,
	VEHICLE_VARIATION_FILE = 135,
	CONTENT_UNLOCKING_META_FILE = 136,
	SHOP_PED_APPAREL_META_FILE = 137,
	AUDIO_SOUNDDATA = 138,
	AUDIO_CURVEDATA = 139,
	AUDIO_GAMEDATA = 140,
	AUDIO_DYNAMIXDATA = 141,
	AUDIO_SPEECHDATA = 142,
	AUDIO_SYNTHDATA = 143,
	AUDIO_WAVEPACK = 144,
	CLIP_SETS_FILE = 145,
	EXPRESSION_SETS_FILE = 146,
	FACIAL_CLIPSET_GROUPS_FILE = 147,
	_0x5F9656FF = 148,
	VEHICLE_SHOP_DLC_FILE = 149,
	WEAPON_SHOP_INFO_METADATA_FILE = 150,
	SCALEFORM_PREALLOC_FILE = 151,
	CONTROLLER_LABELS_FILE = 152,
	CONTROLLER_LABELS_FILE_360 = 153,
	CONTROLLER_LABELS_FILE_PS3 = 154,
	CONTROLLER_LABELS_FILE_PS3_JPN = 155,
	CONTROLLER_LABELS_FILE_ORBIS = 156,
	CONTROLLER_LABELS_FILE_ORBIS_JPN = 157,
	CONTROLLER_LABELS_FILE_DURANGO = 158,
	_0x0187B845 = 159,
	TEXTFILE_METAFILE = 160,
	NM_TUNING_FILE = 161,
	MOVE_NETWORK_DEFS = 162,
	WEAPONINFO_FILE_PATCH = 163,
	DLC_SCRIPT_METAFILE = 164,
	VEHICLE_LAYOUTS_FILE = 165,
	DLC_WEAPON_PICKUPS = 166,
	EXTRA_TITLE_UPDATE_DATA = 167,
	SCALEFORM_DLC_FILE = 168,
	OVERLAY_INFO_FILE = 169,
	ALTERNATE_VARIATIONS_FILE = 170,
	HORSE_REINS_FILE = 171,
	FIREFX_FILE = 172,
	INTERIOR_PROXY_ORDER_FILE = 173,
	DLC_ITYP_REQUEST = 174,
	EXTRA_FOLDER_MOUNT_DATA = 175,
	AMB_PROCEDURAL_BLOOD_FILE = 176,
	SCRIPT_BRAIN_FILE = 177,
	SCALEFORM_VALID_METHODS_FILE = 178,
	DLC_POP_GROUPS = 179,
	_0x7FE69508 = 180,
	SCENARIO_INFO_FILE = 181,
	CONDITIONAL_ANIMS_FILE = 182,
	STATS_METADATA_PSO_FILE = 183,
	VFXFOGVOLUMEINFO_FILE = 184,
	RPF_FILE_PRE_INSTALL = 185,
	_0x145AC698 = 186,
	LEVEL_STREAMING_FILE = 187,
	SCENARIO_POINTS_OVERRIDE_FILE = 188,
	_0xA6F20ADA = 189,
	DRIVER_RULES_STD_FILE = 190,
	PED_FIRST_PERSON_ASSET_DATA = 191,
	GTXD_PARENTING_DATA = 192,
	COMBAT_BEHAVIOUR_OVERRIDE_FILE = 193,
	EVENTS_OVERRIDE_FILE = 194,
	PED_DAMAGE_OVERRIDE_FILE = 195,
	PED_DAMAGE_APPEND_FILE = 196,
	BACKGROUND_SCRIPT_FILE = 197,
	PS3_SCRIPT_RPF = 198,
	X360_SCRIPT_RPF = 199,
	PED_FIRST_PERSON_ALTERNATE_DATA = 200,
	ZONED_ASSET_FILE = 201,
	_0xCD973D75 = 202,
	_0xAF202026 = 203,
	_0xDEE8D933 = 204,
	COMMUNITY_STATS_FILE = 205,
};

enum DefaultSpawnPreference
{
	DSP_AERIAL = 0,
	DSP_AQUATIC = 1,
	DSP_GROUND_WILDLIFE = 2,
	DSP_NORMAL = 3,
};

enum DefaultTaskType
{
	WANDER = 0,
	DO_NOTHING = 1,
	_0xB34C3659 = 2,
};

enum DispatchType
{
	DT_Invalid = 0,
	DT_PoliceAutomobile = 1,
	DT_PoliceHelicopter = 2,
	DT_FireDepartment = 3,
	DT_SwatAutomobile = 4,
	DT_AmbulanceDepartment = 5,
	DT_PoliceRiders = 6,
	DT_PoliceVehicleRequest = 7,
	DT_PoliceRoadBlock = 8,
	DT_PoliceAutomobileWaitPulledOver = 9,
	DT_PoliceAutomobileWaitCruising = 10,
	DT_Gangs = 11,
	DT_SwatHelicopter = 12,
	DT_PoliceBoat = 13,
	DT_ArmyVehicle = 14,
	DT_BikerBackup = 15,
	DT_Assassins = 16,
	DT_Max = 17,
};

enum EVehicleModelAudioColor
{
	POLICE_SCANNER_COLOUR_black = 0,
	POLICE_SCANNER_COLOUR_blue = 1,
	POLICE_SCANNER_COLOUR_brown = 2,
	POLICE_SCANNER_COLOUR_beige = 3,
	POLICE_SCANNER_COLOUR_graphite = 4,
	POLICE_SCANNER_COLOUR_green = 5,
	POLICE_SCANNER_COLOUR_grey = 6,
	POLICE_SCANNER_COLOUR_orange = 7,
	POLICE_SCANNER_COLOUR_pink = 8,
	POLICE_SCANNER_COLOUR_red = 9,
	POLICE_SCANNER_COLOUR_silver = 10,
	POLICE_SCANNER_COLOUR_white = 11,
	POLICE_SCANNER_COLOUR_yellow = 12,
};

enum EVehicleModelAudioPrefix
{
	none = 0,
	POLICE_SCANNER_PREFIX_bright = 1,
	POLICE_SCANNER_PREFIX_light = 2,
	POLICE_SCANNER_PREFIX_dark = 3,
};

enum EVehicleModelColorMetallicID
{
	none = 4294967295,
	EVehicleModelColorMetallic_normal = 0,
	EVehicleModelColorMetallic_1 = 1,
	EVehicleModelColorMetallic_2 = 2,
	EVehicleModelColorMetallic_3 = 3,
	EVehicleModelColorMetallic_4 = 4,
	EVehicleModelColorMetallic_5 = 5,
	EVehicleModelColorMetallic_6 = 6,
	EVehicleModelColorMetallic_7 = 7,
	EVehicleModelColorMetallic_8 = 8,
	EVehicleModelColorMetallic_9 = 9,
};

enum GarageType
{
	GARAGE_NONE = 0,
	GARAGE_MISSION = 1,
	_0x705A988F = 2,
	GARAGE_FOR_SCRIPT_TO_OPEN_AND_CLOSE = 3,
	_0x71FEAB0F = 4,
	GARAGE_SAFEHOUSE_PARKING_ZONE = 5,
};

enum Gender
{
	GENDER_MALE = 0,
	GENDER_FEMALE = 1,
	GENDER_DONTCARE = 2,
};

enum InstallPartition
{
	PARTITION_NONE = 4294967295,
	PARTITION_0 = 0,
	PARTITION_1 = 1,
	PARTITION_2 = 2,
	PARTITION_MAX = 3,
};

enum LoadingScreenContext
{
	LOADINGSCREEN_CONTEXT_NONE = 0,
	LOADINGSCREEN_CONTEXT_INTRO_MOVIE = 1,
	LOADINGSCREEN_CONTEXT_LEGALSPLASH = 2,
	LOADINGSCREEN_CONTEXT_LEGALMAIN = 3,
	LOADINGSCREEN_CONTEXT_SWAP = 4,
	LOADINGSCREEN_CONTEXT_PC_LANDING = 5,
	LOADINGSCREEN_CONTEXT_LOADGAME = 6,
	LOADINGSCREEN_CONTEXT_INSTALL = 7,
	LOADINGSCREEN_CONTEXT_LOADLEVEL = 8,
	LOADINGSCREEN_CONTEXT_MAPCHANGE = 9,
	LOADINGSCREEN_CONTEXT_LAST_FRAME = 10,
};

enum LockType
{
	LT_Hard = 0,
	LT_Soft = 1,
	LT_None = 2,
};

enum LookIkBlendRate
{
	LOOKIK_BLEND_RATE_SLOWEST = 0,
	LOOKIK_BLEND_RATE_SLOW = 1,
	LOOKIK_BLEND_RATE_NORMAL = 2,
	LOOKIK_BLEND_RATE_FAST = 3,
	LOOKIK_BLEND_RATE_FASTEST = 4,
	LOOKIK_BLEND_RATE_INSTANT = 5,
};

enum LookIkRotationLimit
{
	LOOKIK_ROT_LIM_OFF = 0,
	LOOKIK_ROT_LIM_NARROWEST = 1,
	LOOKIK_ROT_LIM_NARROW = 2,
	LOOKIK_ROT_LIM_WIDE = 3,
	LOOKIK_ROT_LIM_WIDEST = 4,
};

enum LookIkTurnRate
{
	LOOKIK_TURN_RATE_SLOW = 0,
	LOOKIK_TURN_RATE_NORMAL = 1,
	LOOKIK_TURN_RATE_FAST = 2,
};

enum MM_BITMAP_VERSION
{
	MM_BITMAP_VERSION_SEA = 0,
	MM_BITMAP_VERSION_MINIMAP = 1,
	MM_BITMAP_VERSION_ALPHA = 2,
};

enum MotionTaskType
{
	PED_ON_FOOT = 0,
	PED_IN_WATER = 1,
	_0x154DC041 = 2,
	BIRD_ON_FOOT = 3,
	FLIGHTLESS_BIRD_ON_FOOT = 4,
	HORSE_ON_FOOT = 5,
	BOAR_ON_FOOT = 6,
	COW_ON_FOOT = 7,
	COUGAR_ON_FOOT = 8,
	COYOTE_ON_FOOT = 9,
	DEER_ON_FOOT = 10,
	PIG_ON_FOOT = 11,
	RAT_ON_FOOT = 12,
	RETRIEVER_ON_FOOT = 13,
	ROTTWEILER_ON_FOOT = 14,
	FISH_IN_WATER = 15,
	HORSE_SWIMMING = 16,
	CAT_ON_FOOT = 17,
	RABBIT_ON_FOOT = 18,
	_0xAA460456 = 19,
};

enum MovementModeType
{
	Invalid = 0,
	Action = 1,
	Stealth = 2,
	Any = 3,
};

enum PedTypes
{
	HUMAN = 0,
	DOG = 1,
	DEER = 2,
	BOAR = 3,
	COYOTE = 4,
	MTLION = 5,
	PIG = 6,
	CHIMP = 7,
	COW = 8,
	ROTTWEILER = 9,
	ELK = 10,
	RETRIEVER = 11,
	RAT = 12,
	BIRD = 13,
	FISH = 14,
	SMALL_MAMMAL = 15,
};

enum PlantInfoFlags
{
	PROCPLANT_LOD0 = 0,
	PROCPLANT_LOD1 = 1,
	PROCPLANT_LOD2 = 2,
	PROCPLANT_FURGRASS = 3,
	PROCPLANT_CAMERADONOTCULL = 4,
	PROCPLANT_UNDERWATER = 5,
	PROCPLANT_GROUNDSCALE1VERT = 6,
	PROCPLANT_NOGROUNDSKEW_LOD0 = 7,
	PROCPLANT_NOGROUNDSKEW_LOD1 = 8,
	PROCPLANT_NOGROUNDSKEW_LOD2 = 9,
	PROCPLANT_NOSHADOW = 10,
};

enum ProcTagLookupFlags
{
	_0x5C2E4DE9 = 0,
};

enum RagdollComponent
{
	RAGDOLL_BUTTOCKS = 0,
	RAGDOLL_THIGH_LEFT = 1,
	RAGDOLL_SHIN_LEFT = 2,
	RAGDOLL_FOOT_LEFT = 3,
	RAGDOLL_THIGH_RIGHT = 4,
	RAGDOLL_SHIN_RIGHT = 5,
	RAGDOLL_FOOT_RIGHT = 6,
	RAGDOLL_SPINE0 = 7,
	RAGDOLL_SPINE1 = 8,
	RAGDOLL_SPINE2 = 9,
	RAGDOLL_SPINE3 = 10,
	RAGDOLL_CLAVICLE_LEFT = 11,
	RAGDOLL_UPPER_ARM_LEFT = 12,
	RAGDOLL_LOWER_ARM_LEFT = 13,
	RAGDOLL_HAND_LEFT = 14,
	RAGDOLL_CLAVICLE_RIGHT = 15,
	RAGDOLL_UPPER_ARM_RIGHT = 16,
	RAGDOLL_LOWER_ARM_RIGHT = 17,
	RAGDOLL_HAND_RIGHT = 18,
	RAGDOLL_NECK = 19,
	RAGDOLL_HEAD = 20,
};

enum SpecialAbilityType
{
	SAT_NONE = 4294967295,
	SAT_CAR_SLOWDOWN = 0,
	SAT_RAGE = 1,
	SAT_BULLET_TIME = 2,
	SAT_SNAPSHOT = 3,
	SAT_INSULT = 4,
	SAT_ENRAGED = 5,
	SAT_GHOST = 6,
	SAT_SPRINT_SPEED_BOOST = 7,
};

enum StdDoorRotDir
{
	StdDoorOpenBothDir = 0,
	StdDoorOpenNegDir = 1,
	StdDoorOpenPosDir = 2,
};

enum TechSavvy
{
	TS_LOW = 0,
	TS_HIGH = 1,
};

enum ThermalBehaviour
{
	TB_DEAD = 0,
	TB_COLD = 1,
	TB_WARM = 2,
	TB_HOT = 3,
};

enum VariationMood
{
	MoodAiming = 0,
	MoodAngry = 1,
	MoodHappy = 2,
	MoodInjured = 3,
	MoodNormal = 4,
	MoodStressed = 5,
	MoodExcited = 6,
	MoodFrustrated = 7,
	MoodTalking = 8,
	_0x65DDE917 = 9,
	_0x1DC987B1 = 10,
	_0x45D8337E = 11,
	_0x34EAA02D = 12,
};

enum VehicleType
{
	VEHICLE_TYPE_NONE = 4294967295,
	VEHICLE_TYPE_CAR = 0,
	VEHICLE_TYPE_PLANE = 1,
	VEHICLE_TYPE_TRAILER = 2,
	VEHICLE_TYPE_QUADBIKE = 3,
	VEHICLE_TYPE_DRAFT = 4,
	VEHICLE_TYPE_SUBMARINECAR = 5,
	VEHICLE_TYPE_AMPHIBIOUS_AUTOMOBILE = 6,
	VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE = 7,
	VEHICLE_TYPE_HELI = 8,
	VEHICLE_TYPE_BLIMP = 9,
	VEHICLE_TYPE_AUTOGYRO = 10,
	VEHICLE_TYPE_BIKE = 11,
	VEHICLE_TYPE_BICYCLE = 12,
	VEHICLE_TYPE_BOAT = 13,
	VEHICLE_TYPE_TRAIN = 14,
	VEHICLE_TYPE_SUBMARINE = 15,
};

enum _0x00000000
{
};

enum _0x0090661F
{
	SpawnPropInLeftHand = 0,
	OverrideOnFootClipSetWithBase = 1,
	DestroyPropInsteadOfDrop = 2,
	IgnoreLowPriShockingEvents = 3,
	MobilePhoneConversation = 4,
	OverrideWeaponClipSetWithBase = 5,
	ForceBaseUntilIdleStreams = 6,
	DontPickOnEnter = 7,
};

enum _0x05DA4244
{
	NoCoverNorthFaceEast = 0,
	NoCoverNorthFaceWest = 1,
	NoCoverNorthFaceCenter = 2,
	NoCoverSouthFaceEast = 3,
	NoCoverSouthFaceWest = 4,
	NoCoverSouthFaceCenter = 5,
	NoCoverEastFaceNorth = 6,
	NoCoverEastFaceSouth = 7,
	NoCoverEastFaceCenter = 8,
	NoCoverWestFaceNorth = 9,
	NoCoverWestFaceSouth = 10,
	NoCoverWestFaceCenter = 11,
	ForceLowCornerNorthFaceEast = 12,
	ForceLowCornerNorthFaceWest = 13,
	ForceLowCornerSouthFaceEast = 14,
	ForceLowCornerSouthFaceWest = 15,
	ForceLowCornerEastFaceNorth = 16,
	ForceLowCornerEastFaceSouth = 17,
	ForceLowCornerWestFaceNorth = 18,
	ForceLowCornerWestFaceSouth = 19,
	NoCoverVehicleDoors = 20,
};

enum _0x06D7CC37
{
	UseVehicleRelativeEntryPosition = 0,
	HasClimbUp = 1,
	WarpOut = 2,
	_0xE87FBDA9 = 3,
	HasVaultUp = 4,
	_0x9F414AB8 = 5,
	HasGetInFromWater = 6,
	ExitAnimHasLongDrop = 7,
	JackIncludesGetIn = 8,
	ForcedEntryIncludesGetIn = 9,
	UsesNoDoorTransitionForEnter = 10,
	UsesNoDoorTransitionForExit = 11,
	HasGetOutToVehicle = 12,
	UseNewPlaneSystem = 13,
	DontCloseDoorInside = 14,
	DisableJacking = 15,
	UseOpenDoorBlendAnims = 16,
	PreventJackInterrupt = 17,
	DontCloseDoorOutside = 18,
	HasOnVehicleEntry = 19,
	HasClimbDown = 20,
	FixUpMoverToEntryPointOnExit = 21,
	CannotBeUsedByCuffedPed = 22,
	HasClimbUpFromWater = 23,
	_0x0FA8D80C = 24,
	UseSeatClipSetAnims = 25,
	NavigateToWarpEntryPoint = 26,
	UseGetUpAfterJack = 27,
	JackVariationsIncludeGetIn = 28,
	DeadJackIncludesGetIn = 29,
	HasCombatEntry = 30,
	UseStandOnGetIn = 31,
};

enum _0x0B95AB21
{
	Equal = 0,
	LessThan = 1,
	GreaterThan = 2,
};

enum _0x0E4F7AC4
{
	GENRE_GENERIC = 0,
	GENRE_COUNTRY = 1,
	GENRE_HIPHOP = 2,
	GENRE_MEXICAN = 3,
	GENRE_MOTOWN = 4,
	GENRE_PUNK = 5,
};

enum _0x0E8E7201
{
	BF_CanUseCover = 0,
	BF_CanUseVehicles = 1,
	BF_CanDoDrivebys = 2,
	BF_CanLeaveVehicle = 3,
	BF_CanUseDynamicStrafeDecisions = 4,
	BF_AlwaysFight = 5,
	getFutureResult = 6,
	_0x6837DA41 = 7,
	_0xB4A13A5A = 8,
	_0xEE326AAD = 9,
	_0x7DF2CCFA = 10,
	_0x0036D422 = 11,
	BF_BlindFireWhenInCover = 12,
	BF_Aggressive = 13,
	BF_CanInvestigate = 14,
	BF_HasRadio = 15,
	_0x6BDE28D1 = 16,
	BF_AlwaysFlee = 17,
	_0x7852797D = 18,
	_0x33497B95 = 19,
	BF_CanTauntInVehicle = 20,
	BF_CanChaseTargetOnFoot = 21,
	BF_WillDragInjuredPedsToSafety = 22,
	_0xCD7168B8 = 23,
	BF_UseProximityFiringRate = 24,
	_0x48F914F8 = 25,
	_0x2EA543D0 = 26,
	BF_PerfectAccuracy = 27,
	BF_CanUseFrustratedAdvance = 28,
	_0x3D131AC1 = 29,
	_0x3AD95F27 = 30,
	BF_MaintainMinDistanceToTarget = 31,
	_0xEAD68AD2 = 32,
	_0xA206C2E0 = 33,
	BF_CanUsePeekingVariations = 34,
	_0xA5715184 = 35,
	_0xD5265533 = 36,
	_0x2B84C2BF = 37,
	BF_DisableBulletReactions = 38,
	BF_CanBust = 39,
	_0xAA525726 = 40,
	BF_CanCommandeerVehicles = 41,
	BF_CanFlank = 42,
	BF_SwitchToAdvanceIfCantFindCover = 43,
	BF_SwitchToDefensiveIfInCover = 44,
	_0xEB4786A0 = 45,
	BF_CanFightArmedPedsWhenNotArmed = 46,
	_0xA08E9402 = 47,
	_0x952EAD7D = 48,
	BF_UseEnemyAccuracyScaling = 49,
	BF_CanCharge = 50,
	_0xDA8C2BD3 = 51,
	_0x6562F017 = 52,
	_0xA2C3D53B = 53,
	BF_AlwaysEquipBestWeapon = 54,
	BF_CanSeeUnderwaterPeds = 55,
	_0xF619486B = 56,
	_0x61EB63A3 = 57,
	BF_DisableFleeFromCombat = 58,
	_0x8976D12B = 59,
	BF_CanThrowSmokeGrenade = 60,
	BF_NonMissionPedsFleeFromThisPedUnlessArmed = 61,
	_0x5452A10C = 62,
	BF_FleesFromInvincibleOpponents = 63,
	BF_DisableBlockFromPursueDuringVehicleChase = 64,
	BF_DisableSpinOutDuringVehicleChase = 65,
	BF_DisableCruiseInFrontDuringBlockDuringVehicleChase = 66,
	_0x0B404731 = 67,
	BF_DisableReactToBuddyShot = 68,
	_0x7FFD6AEB = 69,
	_0x51F4AEF8 = 70,
	BF_PermitChargeBeyondDefensiveArea = 71,
	_0x63E0A8E2 = 72,
	_0xDF974436 = 73,
	_0x556C080B = 74,
	_0xA4D50035 = 75,
	BF_SetDisableShoutTargetPositionOnCombatStart = 76,
	BF_DisableRespondedToThreatBroadcast = 77,
	_0xCBB01765 = 78,
	_0x4F862ED4 = 79,
	_0xEF9C7C40 = 80,
	_0xE51B494F = 81,
	_0x054D0199 = 82,
	_0xD36BCE94 = 83,
	_0xFB11F690 = 84,
	_0xD208A9AD = 85,
	BF_AllowDogFighting = 86,
	_0x07A6E531 = 87,
	_0x34F9317B = 88,
	_0x4240F5A9 = 89,
	_0xEE129DBD = 90,
	_0x053AEAD9 = 91,
};

enum _0x0FDA7738
{
	ValidOnFoot = 0,
	ValidInCar = 1,
	ValidInHeli = 2,
	ValidOnBicycle = 3,
	NotValidInComplexScenario = 4,
	ValidOnlyInComplexScenario = 5,
	InvalidInCrosswalk = 6,
	ValidOnlyInCrosswalk = 7,
	InvalidWhenAfraid = 8,
	ValidOnlyForDrivers = 9,
	ValidOnlyForPassengersWithDriver = 10,
	ValidOnlyForPassengersWithNoDriver = 11,
	ValidForTargetInsideVehicle = 12,
	ValidForTargetOutsideVehicle = 13,
	_0xAA52970F = 14,
	_0xA9F323FD = 15,
	ValidOnlyIfInsideScenarioRadius = 16,
	ValidOnlyIfOutsideScenarioRadius = 17,
	ValidOnlyIfNoScenarioRadius = 18,
	InvalidIfHasARider = 19,
	ValidOnlyIfFriendlyWithTarget = 20,
	InvalidIfFriendlyWithTarget = 21,
	InvalidInAnInterior = 22,
	ValidOnlyInAnInterior = 23,
	ValidOnlyIfSourceIsPlayer = 24,
	ValidOnlyIfRandom = 25,
	_0xE90135B5 = 26,
	_0x5724ECF4 = 27,
	ValidOnlyIfTargetIsInvalidOrFriendly = 28,
	ValidOnlyIfTargetIsValidAndNotFriendly = 29,
	ValidOnlyIfSource = 30,
	ValidOnlyIfSourceIsInvalid = 31,
	ValidOnlyIfSourceIsAnAnimal = 32,
	ValidOnlyForStationaryPeds = 33,
	InvalidForStationaryPeds = 34,
	InvalidIfSourceEntityIsOtherEntity = 35,
	ValidOnlyIfSourceEntityIsOtherEntity = 36,
	ValidOnlyIfOtherVehicleIsYourVehicle = 37,
	InvalidIfOtherVehicleIsYourVehicle = 38,
	InvalidIfTargetDoesNotInfluenceWanted = 39,
	ValidOnlyIfSourcePed = 40,
	InvalidIfSourcePed = 41,
	InvalidIfSourceIsAnAnimal = 42,
	InvalidIfThereAreAttackingSharks = 43,
	InvalidIfMissionPedInMP = 44,
	ValidOnlyIfMissionPedInMP = 45,
	ValidOnlyIfSourceIsThreatening = 46,
	ValidOnlyIfSourceIsNotThreatening = 47,
};

enum _0x1639985A
{
	I_NONE = 0,
	I_ATTACK_LIGHT = 1,
	I_ATTACK_HEAVY = 2,
	I_FIRE = 3,
	I_ATTACK_ALTERNATE = 4,
	I_BLOCK = 5,
	I_SPECIAL_ABILITY = 6,
	I_SPECIAL_ABILITY_SECONDARY = 7,
	I_ANALOG_LEFT_RIGHT = 8,
	I_ANALOG_UP_DOWN = 9,
	I_ANALOG_FROM_CENTER = 10,
};

enum _0x1A0C237C
{
	_0xC3CD0E44 = 0,
};

enum _0x1D4C6710
{
	TT_ENTITY_ROOT = 0,
	TT_ENTITY_ROOT_PREDICTED = 1,
	_0xF03DA9E9 = 2,
	_0x317257FD = 3,
	TT_PED_NECK = 4,
	TT_PED_CHEST = 5,
	_0x015746DB = 6,
	_0x956D6685 = 7,
	TT_PED_CLOSEST_BONE = 8,
	TT_SURFACE_PROBE = 9,
	_0xCE6EBAAA = 10,
};

enum _0x1EA25D4E
{
	ON_FOOT = 0,
	IN_VEHICLE = 1,
	ON_BIKE = 2,
	IN_BOAT = 3,
	IN_AIRCRAFT = 4,
	IN_SUBMARINE = 5,
	IN_HELI = 6,
	IN_TURRET = 7,
};

enum _0x1ECF3B6A
{
	_0x09DAD914 = 0,
	_0x17015F4D = 1,
	_0xE1449E70 = 2,
};

enum _0x21AB971E
{
	RemoveWeapons = 0,
	IsSkyDive = 1,
	IsArrest = 2,
	_0x8EE802B4 = 3,
	IsSynchronized = 4,
	EndsInWalk = 5,
	ConsiderOrientation = 6,
	MobilePhoneConversation = 7,
	_0x6630AA85 = 8,
	ForceIdleThroughBlendOut = 9,
};

enum _0x21F00F8A
{
	MS_STRAFING = 0,
	MS_STILL = 1,
	MS_WALKING = 2,
	MS_RUNNING = 3,
	MS_ANY = 4,
};

enum _0x2320574A
{
	ENTER_VEHICLE_STD = 0,
	MOUNT_ANIMAL = 1,
};

enum _0x2538A9CA
{
	AT_HIT_REACTION = 0,
	AT_FROM_ON_FOOT = 1,
	AT_MELEE = 2,
	AT_BLOCK = 3,
	AT_COUNTER = 4,
	AT_TAUNT = 5,
	AT_INTRO = 6,
	AT_CONDITION = 7,
	AT_RECOIL = 8,
	AT_DAZED_HIT_REACTION = 9,
	AT_SWIMMING = 10,
	AT_ANY = 11,
};

enum _0x28B8378B
{
	CollectableOnFoot = 0,
	CollectableInCar = 1,
	CollectableInBoat = 2,
	CollectableInPlane = 3,
	CollectableOnShot = 4,
	LowPriority = 5,
	AlwaysFixed = 6,
	ManualPickUp = 7,
	InvisibleWhenCarried = 8,
	RequiresButtonPressToPickup = 9,
	CanBeDamaged = 10,
	Rotates = 11,
	FacePlayer = 12,
	ShareWithPassengers = 13,
	IgnoreAmmoCheck = 14,
	DoesntCollideWithRagdolls = 15,
	DoesntCollideWithPeds = 16,
	DoesntCollideWithVehicles = 17,
	OrientateUpright = 18,
	AirbornePickup = 19,
	CollectableInCarByPassengers = 20,
	AutoCollectIfInInventory = 21,
};

enum _0x2B545AB0
{
	_0x8D94F5BB = 0,
	_0x3A5765EE = 1,
	_0x1492F191 = 2,
	_0xA21FD309 = 3,
	_0x3EE521DF = 4,
};

enum _0x351E42DB
{
	CF_CommonAnims = 0,
	CF_EntryAnims = 1,
	CF_InVehicleAnims = 2,
	CF_ExitAnims = 3,
	CF_BreakInAnims = 4,
	CF_JackingAnims = 5,
};

enum _0x35C3D8A5
{
	_0x4582A12F = 0,
	_0x35A11B0E = 1,
};

enum _0x3847C7AF
{
	SCR_CHAR_MICHAEL = 0,
	SCR_CHAR_FRANKLIN = 1,
	SCR_CHAR_TREVOR = 2,
	SCR_CHAR_MULTIPLAYER = 3,
	SCR_CHAR_MULTIPLAYER_F = 4,
	SCR_CHAR_ANY = 5,
};

enum _0x38FFB219
{
	PROCOBJ_ALIGN_OBJ = 0,
	PROCOBJ_USE_GRID = 1,
	PROCOBJ_USE_SEED = 2,
	PROCOBJ_IS_FLOATING = 3,
	PROCOBJ_CAST_SHADOW = 4,
	PROCOBJ_NETWORK_GAME = 5,
};

enum _0x3E2999EA
{
	CT_PED_HEAD = 0,
	CT_PED_ROOT = 1,
	CT_PED_NECK = 2,
	CT_PED_CHEST = 3,
	CT_PED_KNEE_LEFT = 4,
	CT_PED_KNEE_RIGHT = 5,
};

enum _0x3F33AEDD
{
	VEHICLE_DEFAULT = 0,
	VEHICLE_BICYCLE = 1,
	VEHICLE_TURRET_SEATED = 2,
	VEHICLE_TURRET_STANDING = 3,
};

enum _0x47D468BC
{
	MayClimb = 0,
	MayDrop = 1,
	MayJump = 2,
	MayEnterWater = 3,
	MayUseLadders = 4,
	MayFly = 5,
	AvoidObjects = 6,
	_0x9E48784B = 7,
	PreferToAvoidWater = 8,
	AvoidFire = 9,
	PreferNearWaterSurface = 10,
	SearchForPathsAbovePed = 11,
	NeverStopNavmeshTaskEarlyInFollowLeader = 12,
};

enum _0x4E8E5163
{
	BOSF_ForceDefaultBlendOutSet = 0,
	BOSF_ForceNoBlendOutSet = 1,
	BOSF_AllowRootSlopeFixup = 2,
	BOSF_AllowWhenDead = 3,
	BOSF_DontAbortOnFall = 4,
};

enum _0x4F456B61
{
	CM_Stationary = 0,
	CM_Defensive = 1,
	CM_WillAdvance = 2,
	CM_WillRetreat = 3,
};

enum _0x51C4A404
{
	NMBT_NONE = 0,
	NMBT_SINGLECLIP = 1,
	NMBT_DIRECTIONALBLEND = 2,
	NMBT_AIMFROMGROUND = 3,
	NMBT_FORCEMOTIONSTATE = 4,
	NMBT_SETBLEND = 5,
	NMBT_DIRECTBLENDOUT = 6,
	NMBT_UPPERBODYREACTION = 7,
	NMBT_DISALLOWBLENDOUT = 8,
	NMBT_CRAWL = 9,
};

enum _0x588B6307
{
	COL_DATA_TYPE_STANDARD = 0,
	COL_DATA_TYPE_LOAD_FILES = 1,
	COL_DATA_TYPE_AUDIO_LIST = 2,
};

enum _0x5A5AAF32
{
	COL_TYPE_LIST = 0,
	COL_TYPE_BASIC_PAGE = 1,
	COL_TYPE_LOAD_PROJ_INFO = 2,
	_0x1A7DCFCD = 3,
	_0x5511D04E = 4,
	_0x33D3FC31 = 5,
	_0x8544EC72 = 6,
	COL_TYPE_TEXT_PLACEMENT = 7,
	COL_TYPE_LIST_LONG_AUDIO = 8,
};

enum _0x64703CC5
{
	None = 0,
	ArmorPiercing = 1,
	Explosive = 2,
	FMJ = 3,
	HollowPoint = 4,
	Incendiary = 5,
	Tracer = 6,
};

enum _0x658F32E6
{
	ikSolverTypeArm = 0,
	ikSolverTypeBodyLook = 1,
	ikSolverTypeBodyRecoil = 2,
	ikSolverTypeHead = 3,
	ikSolverTypeLeg = 4,
	ikSolverTypeTorso = 5,
	ikSolverTypeTorsoReact = 6,
	ikSolverTypeTorsoVehicle = 7,
	ikSolverTypeRootSlopeFixup = 8,
	ikSolverTypeCount = 9,
};

enum _0x68AD7E0D
{
	IS_NONE = 0,
	IS_DOWN = 1,
	IS_HELD_DOWN = 2,
	IS_HELD_UP = 3,
	_0x3038DBCE = 4,
	_0xE5D13DFF = 5,
	IS_PRESSED = 6,
	IS_PRESSED_NO_HISTORY = 7,
	IS_RELEASED = 8,
	IS_COMBO_1 = 9,
	IS_COMBO_2 = 10,
	IS_COMBO_3 = 11,
	IS_COMBO_ANY = 12,
};

enum _0x68B21B94
{
	_0x60731D70 = 0,
	_0x136A626F = 1,
	_0x4356041D = 2,
	_0xA5F39069 = 3,
	_0xBEAAFE71 = 4,
	_0x9ED1F3C7 = 5,
};

enum _0x6D695820
{
	IsExercising = 0,
	WillJeerAtHotPeds = 1,
	IsFriendlyWithTarget = 2,
	IsNotFriendlyWithTarget = 3,
	IsThreatenedByTarget = 4,
	IsNotThreatenedByTarget = 5,
	IsTargetHot = 6,
	_0x5C6278C7 = 7,
	IsTargetPlayer = 8,
	IsTargetNotPlayer = 9,
	TargetMustHaveResponse = 10,
	IsTargetOnFoot = 11,
	IsTargetMale = 12,
	IsTargetNotMale = 13,
	TargetMustBeKnockedDown = 14,
	IsTargetCop = 15,
	IsTargetGang = 16,
	IsTargetFat = 17,
	DidNotTalkToTargetLast = 18,
	_0x22343C50 = 19,
	IsTargetNotFriendlyWithUs = 20,
	_0x5D897C63 = 21,
	IsUsingScenario = 22,
	_0xC5ED32BC = 23,
	_0xBD57786C = 24,
	_0x0AE6E0C7 = 25,
	TargetMustBeInCombat = 26,
	_0x5F82730F = 27,
	TargetMustBeDead = 28,
	IsFriendFollowedByPlayer = 29,
	IsInGangTerritory = 30,
	HasTargetAchievedCombatVictory = 31,
};

enum _0x6F76F55E
{
	_0x321680D6 = 0,
	_0xE89E3963 = 1,
	_0xD5975B3A = 2,
};

enum _0x745177BA
{
	INT = 0,
	INT64 = 1,
	BITFIELD = 2,
};

enum _0x76382FA4
{
	PAFT_PLAYER_SP = 0,
	PAFT_PLAYER_MP = 1,
	PAFT_AI = 2,
	PAFT_NOT_ANIMAL = 3,
	PAFT_NOT_FISH = 4,
	PAFT_ANY = 5,
};

enum _0x7A3BED50
{
	AdjustHeight = 0,
	DampenRecoil = 1,
	AllowDamageToVehicle = 2,
	AllowDamageToVehicleOccupants = 3,
	UsePedAsCamEntity = 4,
	NeedToOpenDoors = 5,
	UseThreeAnimIntroOutro = 6,
	UseMountedProjectileTask = 7,
	UseThreeAnimThrow = 8,
	UseSpineAdditive = 9,
	LeftHandedProjctiles = 10,
	LeftHandedFirstPersonAnims = 11,
	LeftHandedUnarmedFirstPersonAnims = 12,
	WeaponAttachedToLeftHand1HOnly = 13,
	UseBlockingAnimsOutsideAimRange = 14,
	AllowSingleSideOvershoot = 15,
	_0x38B88AE9 = 16,
};

enum _0x7C84137D
{
	IgnoreHonkedAt = 0,
};

enum _0x7F5C19FF
{
	LOOK_FORWARD_RELATIVE_TO_ATTACH = 0,
	_0xF269F8D8 = 1,
	_0xDAA66FF0 = 2,
};

enum _0x801E0379
{
	DontReset = 0,
};

enum _0x80C72BC0
{
	IF_JackedPedExitsWillingly = 0,
	IF_ScriptFlagOnly = 1,
};

enum _0x813B6C49
{
	_0x07F80F07 = 4294967295,
	_0xEBB8940D = 0,
	_0x0C0744DF = 1,
	_0x7242674A = 2,
	_0x1E4507DA = 3,
	_0x7265F4DD = 4,
	_0xF654CC69 = 5,
	_0x1DBFDE73 = 6,
};

enum _0x8B92195C
{
	AllowWrapping = 0,
	AbortOnIdle = 1,
	UseAdditiveFiring = 2,
	UseDirectionalBreatheAdditives = 3,
	TrackRopeOrientation = 4,
	ForcedAiming = 5,
	ForceFireFromCamera = 6,
};

enum _0x8CFC2EE4
{
	FRONT_LEFT = 0,
	FRONT_RIGHT = 1,
	REAR_LEFT = 2,
	REAR_RIGHT = 3,
	FRONT_WINDSCREEN = 4,
	REAR_WINDSCREEN = 5,
	MID_LEFT = 6,
	MID_RIGHT = 7,
	INVALID = 8,
};

enum _0x8FC87130
{
	TET_BIPED = 0,
	TET_QUADRUPED = 1,
	TET_SURFACE = 2,
	TET_ANY = 3,
};

enum _0x9138840C
{
	AllowConversations = 0,
	AllowEquippedWeapons = 1,
	AttachPed = 2,
	BlockGestures = 3,
	BlockLegIk = 4,
	BreakForNearbyPlayer = 5,
	CantBeReused = 6,
	ChangeToSafeTypeOnResume = 7,
	_0xC3E77DC7 = 8,
	DespawnOnUse = 9,
	DistantGroundVehicleSpawn = 10,
	DontActivatePhysicsOnRelease = 11,
	_0xF5E9D3A4 = 12,
	DontActivateRagdollForCollisionWithPlayerBumpImpact = 13,
	_0xAB7BA3A7 = 14,
	DontAdjustStationaryReactionStatus = 15,
	DontSpawnIfCopsAreOff = 16,
	DontSpawnIfUnderStreamingPressure = 17,
	DontSpawnInRain = 18,
	_0xAD56D659 = 19,
	DontTimeoutUntilBaseFinishes = 20,
	DontTimeoutUntilIdleFinishes = 21,
	DoSimpleBlendoutForEvents = 22,
	_0x5DE9B4C0 = 23,
	EnableKinematicPhysicsForPed = 24,
	FinishExitAnimationBeforeLeaving = 25,
	ForceAlertWhenVehicleStartedByPlayer = 26,
	ForceModel = 27,
	_0xCDFF1826 = 28,
	_0xB95A69A7 = 29,
	IgnoreLowShockingEvents = 30,
	IgnoreNavMesh = 31,
	IgnoreObstructions = 32,
	IgnorePavementChecks = 33,
	IgnoreScenarioPointHeading = 34,
	IgnoreScenarioPointHeadingOnExit = 35,
	IgnoreSlideToCoordOnArrival = 36,
	IgnoreSlideToCoordOnExit = 37,
	IgnoreWorldGeometryDuringExitProbeCheck = 38,
	InstanceCreationTiedToSpawnProbability = 39,
	LeaveScenarioIfGivenGroundPhysical = 40,
	MustUseRealVehiclePhysics = 41,
	NavmeshBlocking = 42,
	NoBulkyItems = 43,
	NoIncomingLinks = 44,
	NoMeleeTakedowns = 45,
	NoOutgoingLinks = 46,
	NotAvailableInMultiplayer = 47,
	_0x33ECA4A8 = 48,
	OnlyUseIdleVehicleSeats = 49,
	PreciseUseTime = 50,
	PreferMeleeRagdoll = 51,
	QuickExitsFromHassling = 52,
	_0x2B3447B4 = 53,
	RandomizeSpawnedPedHeading = 54,
	RagdollEasilyFromPlayerContact = 55,
	RagdollPanicExit = 56,
	RejectApproachIfTooSteep = 57,
	ScenarioGivesCombatRadio = 58,
	ScenarioGrantsExtraCash = 59,
	SeatedScenario = 60,
	SpawnFemalePedsOnly = 61,
	SpawnMalePedsOnly = 62,
	TurnToFacePlayerStanding = 63,
	_0x6B7C25E4 = 64,
	UseNMGetupWhenExiting = 65,
	UsePropFromEnvironment = 66,
	UseRoamTask = 67,
	ValidateExitsWithProbeChecks = 68,
	VehicleCreationRuleBrokenDown = 69,
	VehicleSetupBrokenDown = 70,
	WaitOnStreamingBeforeNavigatingToStartPosition = 71,
	WillAttractPeds = 72,
	WillAttractVehicles = 73,
	_0xF82DCD0E = 74,
	DisableAgitation = 75,
	_0xC82250BE = 76,
	_0xDB32E86A = 77,
	_0xC6AF5264 = 78,
	_0x4C3697E0 = 79,
	_0xA8193060 = 80,
	_0xD005A4F0 = 81,
	_0x23EBF2CA = 82,
	_0x1F2DBBC5 = 83,
};

enum _0x92A659FE
{
	MotionState_None = 4000413475,
	MotionState_Idle = 2423432979,
	MotionState_Walk = 3626484699,
	MotionState_Run = 4294436772,
	MotionState_Sprint = 3179812827,
	MotionState_Crouch_Idle = 1140525470,
	MotionState_Crouch_Walk = 147004056,
	MotionState_Crouch_Run = 898879241,
	MotionState_DoNothing = 247561816,
	_0xE18CF8D9 = 1427811395,
	MotionState_InVehicle = 2497303949,
	MotionState_Aiming = 1063765679,
	MotionState_Diving_Idle = 1212730861,
	MotionState_Diving_Swim = 2439938700,
	MotionState_Swimming_TreadWater = 3518960071,
	MotionState_Dead = 230360860,
	MotionState_Stealth_Idle = 1110276645,
	MotionState_Stealth_Walk = 69908130,
	MotionState_Stealth_Run = 4211833313,
	MotionState_Parachuting = 3133206795,
	MotionState_ActionMode_Idle = 3661668572,
	MotionState_ActionMode_Walk = 3532676775,
	MotionState_ActionMode_Run = 834330132,
	_0x13C3816B = 1398696542,
};

enum _0x9380894B
{
	IsPassengerOnlyEntry = 0,
	IgnoreSmashWindowCheck = 1,
	TryLockedDoorOnGround = 2,
	MPWarpInOut = 3,
	SPEntryAllowedAlso = 4,
	WarpOutInPlace = 5,
	BlockJackReactionUntilJackerIsReady = 6,
	UseFirstMulipleAccessSeatForDirectEntryPoint = 7,
	IsPlaneHatchEntry = 8,
	ClimbUpOnly = 9,
	NotUsableOutsideVehicle = 10,
	AutoCloseThisDoor = 11,
	HasClimbDownToWater = 12,
	ForceSkyDiveExitInAir = 13,
};

enum _0x9395154F
{
	POSTFX_IN_HOLD_OUT = 0,
	POSTFX_EASE_IN_HOLD_EASE_OUT = 1,
	POSTFX_EASE_IN = 2,
	POSTFX_EASE_OUT = 3,
};

enum _0x952D10C9
{
	Park_Parallel = 0,
	Park_Perpendicular_NoseIn = 1,
	Park_Perpendicular_BackIn = 2,
	Park_PullOver = 3,
	_0x1537BF98 = 4,
	_0x091B96CC = 5,
	Park_PassengerExit = 6,
};

enum _0x96AFDEA5
{
	IsFrontSeat = 0,
	IsIdleSeat = 1,
	NoIndirectExit = 2,
	PedInSeatTargetable = 3,
	KeepOnHeadProp = 4,
	DontDetachOnWorldCollision = 5,
	DisableFinerAlignTolerance = 6,
	IsExtraShuffleSeat = 7,
	DisableWhenTrailerAttached = 8,
	UseSweepsForTurret = 9,
	UseSweepLoopsForTurret = 10,
	GivePilotHelmetForSeat = 11,
	FakeSeat = 12,
	CameraSkipWaitingForTurretAlignment = 13,
	DisallowHeadProp = 14,
	_0x1BCBEC16 = 15,
};

enum _0x982F0A37
{
	ConsiderAsInWaterInLowLodPhysics = 0,
	DisableCover = 1,
	DisableCower = 2,
	DisableHandsUp = 3,
	DisableVehicleUsage = 4,
	DisableNonStandardDamageTypes = 5,
	DisableUseScenariosWithNoModelSet = 6,
	DisableWallHitAnimation = 7,
	DisableReactAndFleeAnimation = 8,
	DisablePotentialBlastResponse = 9,
	DisablePotentialToBeWalkedIntoResponse = 10,
	PreferFleeOnPavements = 11,
	DisableMeleeIntroAnimation = 12,
	PlayNudgeAnimationForBumps = 13,
	DontInfluenceWantedLevel = 14,
	DisableBraceForImpact = 15,
	CanScreamDuringFlee = 16,
	IgnorePavementCheckWhenLeavingScenarios = 17,
	DiesInstantlyToFire = 18,
	UseAmbientScaling = 19,
	CanBeShoved = 20,
	DisableEvasiveStep = 21,
	FleeFromCombatWhenTargetIsInVehicle = 22,
	CanBeTalkedTo = 23,
	AlwaysSprintWhenFleeingInThreatResponse = 24,
	UseAquaticRoamMode = 25,
	ApplyExtraHeadingChangesInFishLocomotion = 26,
	AlignPitchToWavesInFishLocomotion = 27,
	UseSimplePitchingInFishLocomotion = 28,
	ProbeForCollisionsInScenarioFlee = 29,
	SwimStraightInSwimmingWander = 30,
	UseSimpleWander = 31,
	BlockIdleTurnsInSmartFleeWhileWaitingOnPath = 32,
	ForceSlowChaseInAnimalMelee = 33,
	ExpandAvoidanceRadius = 34,
	DependentAmbientFriend = 35,
	UseLooseCrowdAroundMetrics = 36,
	UseLooseHeadingAdjustmentsInMelee = 37,
	ForceNoTurningInFishLocomotion = 38,
	UseLongerBlendsInFishLocomotion = 39,
	ForceSlowSwimWhenUnderPlayerControl = 40,
	CanShove = 41,
	BlockPlayerFishPitchingWhenSlow = 42,
	UseSlowPlayerFishPitchAcceleration = 43,
	IgnoreDelaysOnGunshotEvents = 44,
	DiesInstantlyToMelee = 45,
};

enum _0x9989A624
{
	kSkinOnly = 0,
	kClothOnly = 1,
};

enum _0x9AF56963
{
	kNoRotation = 0,
	kRandomRotation = 1,
	kGravityRotation = 2,
	kAutoDetectRotation = 3,
};

enum _0x9B2EFC0E
{
	IO_OR_IMPULSE_1 = 0,
	IO_AND_IMPULSE_1 = 1,
	_0x1C441DF1 = 2,
};

enum _0x9B409521
{
	RA_IS_INTRO = 0,
	RA_IS_TAUNT = 1,
	RA_PLAYER_IS_UPPERBODY_ONLY = 2,
	RA_AI_IS_UPPERBODY_ONLY = 3,
	RA_IS_STEALTH_KILL = 4,
	RA_IS_BLOCK = 5,
	RA_IS_KNOCKOUT = 6,
	RA_IS_TAKEDOWN = 7,
	RA_IS_HIT_REACTION = 8,
	RA_IS_DAZED_HIT_REACTION = 9,
	RA_IS_STANDARD_ATTACK = 10,
	RA_IS_COUNTER_ATTACK = 11,
	RA_IS_RECOIL = 12,
	RA_RESET_COMBO = 13,
	RA_ALLOW_AIM_INTERRUPT = 14,
	RA_FORCE_DAMAGE = 15,
	RA_ALLOW_ADDITIVE_ANIMS = 16,
	RA_IS_LETHAL = 17,
	RA_USE_LEG_IK = 18,
	RA_VALID_FOR_RECOIL = 19,
	RA_IS_NON_MELEE_HIT_REACTION = 20,
	RA_ALLOW_STRAFING = 21,
	RA_RESET_MIN_TIME_IN_MELEE = 22,
	RA_ALLOW_NO_TARGET_INTERRUPT = 23,
	RA_QUIT_TASK_AFTER_ACTION = 24,
	RA_ACTIVATE_RAGDOLL_ON_COLLISION = 25,
	RA_ALLOW_INITIAL_ACTION_COMBO = 26,
	RA_ALLOW_MELEE_TARGET_EVALUATION = 27,
	RA_PROCESS_POST_HIT_RESULTS_ON_CONTACT_FRAME = 28,
	_0x47CCD383 = 29,
	RA_GIVE_THREAT_RESPONSE_AFTER_ACTION = 30,
	RA_ALLOW_DAZED_REACTION = 31,
	RA_IGNORE_HIT_DOT_THRESHOLD = 32,
	RA_INTERRUPT_WHEN_OUT_OF_WATER = 33,
	RA_ALLOW_SCRIPT_TASK_ABORT = 34,
	RA_TAG_SYNC_BLEND_OUT = 35,
	RA_UPDATE_MOVEBLENDRATIO = 36,
	RA_ENDS_IN_IDLE_POSE = 37,
	RA_DISABLE_PED_TO_PED_RAGDOLL = 38,
	RA_ALLOW_NO_TARGET_BRANCHES = 39,
	RA_USE_KINEMATIC_PHYSICS = 40,
	_0x93F4CF6A = 41,
	RA_USE_CACHED_DESIRED_HEADING = 42,
	RA_ADD_ORIENT_TO_SPINE_Z_OFFSET = 43,
	RA_ALLOW_PLAYER_EARLY_OUT = 44,
	_0x76BEAEBE = 45,
};

enum _0x9CB34EAC
{
	_0xDD11BEC0 = 0,
	_0x7F5863DF = 1,
	_0xD4AC75B6 = 2,
};

enum _0x9E68FA23
{
	CanDetachViaRagdoll = 0,
	WeaponAttachedToLeftHand = 1,
	WeaponRemainsVisible = 2,
	AttachLeftHand = 3,
	AttachLeftFoot = 4,
	AttachRightHand = 5,
	AttachRightFoot = 6,
	CannotBeJacked = 7,
	UseStandardInVehicleAnims = 8,
	UseBikeInVehicleAnims = 9,
	UseJetSkiInVehicleAnims = 10,
	HasPanicAnims = 11,
	UseCloseDoorBlendAnims = 12,
	SupportsInAirState = 13,
	UseBasicAnims = 14,
	PreventShuffleJack = 15,
	RagdollWhenVehicleUpsideDown = 16,
	FallsOutWhenDead = 17,
	CanExitEarlyInCombat = 18,
	UseBoatInVehicleAnims = 19,
	CanWarpToDriverSeatIfNoDriver = 20,
	NoIK = 21,
	DisableAbnormalExits = 22,
	SimulateBumpiness = 23,
	IsLowerPrioritySeatInSP = 24,
	KeepCollisionOnWhenInVehicle = 25,
	UseDirectEntryOnlyWhenEntering = 26,
	UseTorsoLeanIK = 27,
	UseRestrictedTorsoLeanIK = 28,
	WarpIntoSeatIfStoodOnIt = 29,
	RagdollAtExtremeVehicleOrientation = 30,
	NoShunts = 31,
};

enum _0x9EE5ECA0
{
	_0x933D7768 = 0,
	_0x8FB96299 = 1,
	_0x7D5B910E = 2,
	_0xD2C13BD4 = 3,
	_0xCE0517CF = 4,
};

enum _0xA105E618
{
	HA_CHECK_TARGET_DISTANCE = 0,
	HA_CHECK_TARGET_HEADING = 1,
	HA_USE_DISPLACEMENT_MAGNITUDE = 2,
	HA_USE_CACHED_POSITION = 3,
	_0x2AC96923 = 4,
	HA_USE_ACTIVATION_DISTANCE = 5,
	HA_USE_LOW_ROOT_Z_OFFSET = 6,
	HA_IGNORE_SPEED_MATCHING_CHECK = 7,
};

enum _0xA11D7CA8
{
	THIRD_PERSON_NEAR = 0,
	THIRD_PERSON_MEDIUM = 1,
	THIRD_PERSON_FAR = 2,
	CINEMATIC = 3,
	FIRST_PERSON = 4,
};

enum _0xA5D84583
{
	_0xB9D72D30 = 0,
	_0x15925C61 = 1,
	_0x63C5CBA1 = 2,
};

enum _0xA77304C3
{
	DontCloseWhenTouched = 0,
	AutoOpensForSPVehicleWithPedsOnly = 1,
	AutoOpensForSPPlayerPedsOnly = 2,
	AutoOpensForMPVehicleWithPedsOnly = 3,
	AutoOpensForMPPlayerPedsOnly = 4,
	DelayDoorClosingForPlayer = 5,
	AutoOpensForAllVehicles = 6,
	IgnoreOpenDoorTaskEdgeLerp = 7,
	AutoOpensForLawEnforcement = 8,
};

enum _0xA7DA38FF
{
	RWT_UNARMED = 0,
	RWT_ONE_HANDED_GUN = 1,
	RWT_TWO_HANDED_GUN = 2,
	RWT_PISTOL = 3,
	RWT_KNIFE = 4,
	RWT_ONE_HANDED_CLUB = 5,
	RWT_TWO_HANDED_CLUB = 6,
	RWT_THROWN = 7,
	RWT_THROWN_SPECIAL = 8,
	RWT_HATCHET = 9,
	RWT_ONE_HANDED_CLUB_NO_HATCHET = 10,
	RWT_MELEE_FIST = 11,
	RWT_MACHETE = 12,
	RWT_ANY = 13,
};

enum _0xAA73DD0C
{
	DA_IS_ENABLED = 0,
	DA_PLAYER_ENTRY_ACTION = 1,
	DA_AI_ENTRY_ACTION = 2,
	DA_REQUIRE_TARGET = 3,
	DA_REQUIRE_NO_TARGET = 4,
	DA_REQUIRE_TARGET_LOCK_ON = 5,
	DA_REQUIRE_NO_TARGET_LOCK_ON = 6,
	DA_PREFER_RAGDOLL_RESULT = 7,
	DA_PREFER_BODY_IK_RESULT = 8,
	DA_ALLOW_IN_WATER = 9,
	DA_DISABLE_IN_FIRST_PERSON = 10,
	_0x0035C98D = 11,
};

enum _0xAC899F59
{
	FPTC_LINEAR = 0,
	FPTC_POW2 = 1,
	FPTC_POW4 = 2,
};

enum _0xB2CEB155
{
	DisableCrouch = 0,
	DisableHandsUp = 1,
	DisableCover = 2,
	DisableVehicleExit = 3,
	_0xB3B7B1EB = 4,
	_0xD5B96C52 = 5,
};

enum _0xB3D45189
{
	TLR_ExitTask = 0,
	TLR_NeverLoseTarget = 1,
	TLR_SearchForTarget = 2,
};

enum _0xB44A8258
{
	TASK_DRIVE_WANDER = 0,
	_0x59502A38 = 1,
};

enum _0xB53CD812
{
	SIDE_LEFT = 0,
	SIDE_RIGHT = 1,
	SIDE_REAR = 2,
};

enum _0xB69160F5
{
	CR_Near = 0,
	CR_Medium = 1,
	CR_Far = 2,
	CR_VeryFar = 3,
	CR_NumRanges = 4,
};

enum _0xBC8DB6A8
{
	DD_FORWARD = 0,
	DD_BACKWARD_LEFT = 1,
	DD_BACKWARD_RIGHT = 2,
	DD_LEFT = 3,
	DD_RIGHT = 4,
	DD_ANY = 5,
};

enum _0xBEFF3185
{
	_0xBA3EAE1E = 0,
	_0x64176477 = 1,
	_0x6FCD43DD = 2,
};

enum _0xC267EF1F
{
	_0xA3212A23 = 0,
	_0x33124C4B = 1,
	_0x59BE8C0B = 2,
	_0xA8F31131 = 3,
	_0x16447BCC = 4,
};

enum _0xC744E0AD
{
	Invalid = 0,
	Master = 1,
	Slave = 2,
};

enum _0xC7B8413A
{
	TIR_TreatAsDead = 0,
	_0x207F8574 = 1,
	TIR_Execute = 2,
	TIR_Count = 3,
};

enum _0xCAEC3EE2
{
	_0xE1B23EA8 = 0,
	_0x265E5869 = 1,
	_0x68A3350E = 2,
	ABON_YEA = 3,
	_0x743C7FA9 = 4,
	_0x7B1B9D68 = 5,
	_0x4A7D7D59 = 6,
	_0xB50B86B9 = 7,
	_0x77CA5C5F = 8,
	_0xDA267213 = 9,
	_0xEFE56403 = 10,
	_0xF33FBF07 = 11,
	_0xBA2E24EF = 12,
	_0x6404FC12 = 13,
	_0x4C0838A5 = 14,
	DEVINS_SNOWLIGHT = 15,
	_0x87AC81A3 = 16,
	_0x1D6DC5A1 = 17,
	_0x3DD79AD9 = 18,
	_0x45507806 = 19,
	_0x2C1362D5 = 20,
	_0x2862E051 = 21,
	_0x67B1C549 = 22,
	_0xAEC66B2D = 23,
	_0x60180457 = 24,
	_0x25853FB1 = 25,
	_0xD277418D = 26,
	_0x6974258D = 27,
	_0x6C450963 = 28,
	_0xCD9B626E = 29,
};

enum _0xCBB4F135
{
	COL_1 = 0,
	COL_2 = 1,
	COL_3 = 2,
};

enum _0xD261D19D
{
	CAR = 0,
	PLANE = 1,
	TRAILER = 2,
	QUADBIKE = 3,
	HELI = 4,
	AUTOGYRO = 5,
	BIKE = 6,
	BICYCLE = 7,
	BOAT = 8,
	TRAIN = 9,
	SUBMARINE = 10,
	ALL = 11,
};

enum _0xDC4FDE9C
{
	POSTFX_LOOP_ALL = 0,
	POSTFX_LOOP_HOLD_ONLY = 1,
	POSTFX_LOOP_NONE = 2,
};

enum _0xE62BC9A9
{
	STD_CAR_DRIVEBY = 0,
	BIKE_DRIVEBY = 1,
	TRAILER_DRIVEBY = 2,
	REAR_HELI_DRIVEBY = 3,
	_0xDA1029E6 = 4,
	MOUNTED_DRIVEBY = 5,
	MOUNTED_THROW = 6,
};

enum _0xE793438C
{
	CA_Poor = 0,
	CA_Average = 1,
	CA_Professional = 2,
	CA_NumTypes = 3,
};

enum _0xE7D67D78
{
	_0x8E57CC56 = 0,
	_0x4E0AA744 = 1,
	_0x8F971D0F = 2,
	_0x53C34AF3 = 3,
	_0xBDB9C13B = 4,
};

enum _0xEE5256A0
{
	kLayoutOriginVehicle = 0,
	kLayoutOriginVehicleFront = 1,
	kLayoutOriginVehicleBack = 2,
};

enum _0xF0C79AAE
{
	DisableWhenAgitated = 0,
	DisableWhenFriendlyIsAgitated = 1,
	MustBeUsingScenario = 2,
	MustBeUsingScenarioBeforeInitialReaction = 3,
	_0xF1D422FE = 4,
	MustBeWanderingBeforeInitialReaction = 5,
	NoLineOfSightNeeded = 6,
	UseDistanceFromScenario = 7,
	MustBeUsingATerritorialScenario = 8,
	_0x0E7C7136 = 9,
	DisableWhenStill = 10,
	_0x8940A4F0 = 11,
	MustBeOnFoot = 12,
	TargetMustBeOnFoot = 13,
	MustBeInVehicle = 14,
	MustBeStationary = 15,
};

enum _0xF393B0AB
{
	RRA_CHECK_HEIGHT_RANGE = 0,
	RRA_CHECK_GROUND_RANGE = 1,
	RRA_CHECK_DISTANCE_RANGE = 2,
	RRA_CHECK_ANGULAR_RANGE = 3,
	RRA_ALLOW_PED_GETUP_GROUND_OVERRIDE = 4,
	RRA_ALLOW_PED_DEAD_GROUND_OVERRIDE = 5,
};

enum _0xF4161D51
{
	SPECIAL_NONE = 0,
	SPECIAL_AIRPORT = 1,
};

enum _0xF5B84E35
{
	DRA_FORCE_IMMEDIATE_REACTION = 0,
	DRA_DROP_WEAPON = 1,
	_0x8162E33F = 2,
	DRA_KNOCK_OFF_PROPS = 3,
	_0x425CC06D = 4,
	DRA_STOP_TARGET_DISTANCE_HOMING = 5,
	DRA_ADD_SMALL_ABILITY_CHARGE = 6,
	DRA_DISABLE_INJURED_GROUND_BEHAVIOR = 7,
	DRA_IGNORE_ARMOR = 8,
	DRA_IGNORE_STAT_MODIFIERS = 9,
	DRA_USE_DEFAULT_UNARMED_WEAPON = 10,
	DRA_FATAL_HEAD_SHOT = 11,
	DRA_FATAL_SHOT = 12,
	DRA_MOVE_LOWER_ARM_AND_HAND_HITS_TO_CLAVICLE = 13,
	_0xCF2B92DC = 14,
	DRA_INVOKE_FACIAL_PAIN_ANIMATION = 15,
	DRA_PRESERVE_STEALTH_MODE = 16,
	DRA_DONT_DAMAGE_PEDS = 17,
};

enum _0xFA5B2E49
{
	NoRoof = 0,
	HasRoof = 1,
	RoofIsDown = 2,
	RoofIsUp = 3,
};

enum _0xFAB6F340
{
	_0xB8399694 = 0,
	_0x2A957B52 = 1,
	_0xD3164C4D = 2,
	_0xCBDBD35C = 3,
	_0xE19EFEE2 = 4,
	_0xB2111FC7 = 5,
	_0x7C9153CD = 6,
	_0x2E4E3748 = 7,
	_0x470E68C8 = 8,
	_0x7690E085 = 9,
	_0x7F1F9DFC = 10,
	_0x57020141 = 11,
	_0x2DE25158 = 12,
	_0x148D3DF9 = 13,
	_0x9B679E60 = 14,
};

enum _0xFF842F1B
{
	VEHICLE_RESPONSE_DEFAULT = 0,
	VEHICLE_RESPONSE_COUNTRYSIDE = 1,
	VEHICLE_RESPONSE_ARMY_BASE = 2,
	_0xAD76C606 = 3,
};

enum bgCrackPlacementType
{
	glassImpactLocation = 0,
	glassCenter = 1,
	glassRandom = 2,
};

enum bgCrackRotationType
{
	none = 0,
	0_to_360 = 1,
	stepOf90 = 2,
	flip = 3,
	rectangle = 4,
	rectangleFlip = 5,
};

enum bgCrackScalingType
{
	none = 0,
	automatic = 1,
	forceSquared = 2,
	overwrite = 3,
	overwriteSquared = 4,
};

enum bgDecalChannel
{
	red = 0,
	green = 1,
	blue = 2,
	alpha = 3,
	randomRedGreen = 4,
	randomRedGreenAlpha = 5,
	randomAll = 6,
};

enum bgGlassPieceMaxNum
{
	_0x185282B8 = 1,
	_0x8520E1FF = 2,
	_0x828FD97D = 3,
	_0x233C9744 = 4,
	_0x6DAC3AAE = 5,
};

enum eAgilityFlags
{
	AF_CAN_DIVE = 0,
	AF_AVOID_IMMINENT_DANGER = 1,
	AF_RAGDOLL_BRACE_STRONG = 2,
	AF_RAGDOLL_ON_FIRE_STRONG = 3,
	AF_RAGDOLL_HIGH_FALL_STRONG = 4,
	AF_RECOVER_BALANCE = 5,
	AF_GET_UP_FAST = 6,
	AF_BALANCE_STRONG = 7,
	AF_STRONG_WITH_HEAVY_WEAPON = 8,
	AF_DONT_FLINCH_ON_EXPLOSION = 9,
	AF_DONT_FLINCH_ON_MELEE = 10,
};

enum eAnchorPoints
{
	ANCHOR_HEAD = 0,
	ANCHOR_EYES = 1,
	ANCHOR_EARS = 2,
	ANCHOR_MOUTH = 3,
	ANCHOR_LEFT_HAND = 4,
	ANCHOR_RIGHT_HAND = 5,
	ANCHOR_LEFT_WRIST = 6,
	ANCHOR_RIGHT_WRIST = 7,
	ANCHOR_HIP = 8,
	ANCHOR_LEFT_FOOT = 9,
	ANCHOR_RIGHT_FOOT = 10,
	ANCHOR_PH_L_HAND = 11,
	ANCHOR_PH_R_HAND = 12,
	NUM_ANCHORS = 13,
};

enum eAnimBoneTag
{
	BONETAG_INVALID = 4294967295,
	BONETAG_ROOT = 0,
	BONETAG_PELVISROOT = 17916,
	BONETAG_PELVIS = 11816,
	BONETAG_PELVIS1 = 53251,
	BONETAG_SPINE_ROOT = 57597,
	BONETAG_SPINE0 = 23553,
	BONETAG_SPINE1 = 24816,
	BONETAG_SPINE2 = 24817,
	BONETAG_SPINE3 = 24818,
	BONETAG_NECK = 39317,
	BONETAG_NECK2 = 24532,
	BONETAG_HEAD = 31086,
	BONETAG_R_CLAVICLE = 10706,
	BONETAG_R_UPPERARM = 40269,
	BONETAG_R_FOREARM = 28252,
	BONETAG_R_HAND = 57005,
	BONETAG_R_FINGER0 = 58866,
	BONETAG_R_FINGER01 = 64016,
	BONETAG_R_FINGER02 = 64017,
	BONETAG_R_FINGER1 = 58867,
	BONETAG_R_FINGER11 = 64096,
	BONETAG_R_FINGER12 = 64097,
	BONETAG_R_FINGER2 = 58868,
	BONETAG_R_FINGER21 = 64112,
	BONETAG_R_FINGER22 = 64113,
	BONETAG_R_FINGER3 = 58869,
	BONETAG_R_FINGER31 = 64064,
	BONETAG_R_FINGER32 = 64065,
	BONETAG_R_FINGER4 = 58870,
	BONETAG_R_FINGER41 = 64080,
	BONETAG_R_FINGER42 = 64081,
	BONETAG_L_CLAVICLE = 64729,
	BONETAG_L_UPPERARM = 45509,
	BONETAG_L_FOREARM = 61163,
	BONETAG_L_HAND = 18905,
	BONETAG_L_FINGER0 = 26610,
	BONETAG_L_FINGER01 = 4089,
	BONETAG_L_FINGER02 = 4090,
	BONETAG_L_FINGER1 = 26611,
	BONETAG_L_FINGER11 = 4169,
	BONETAG_L_FINGER12 = 4170,
	BONETAG_L_FINGER2 = 26612,
	BONETAG_L_FINGER21 = 4185,
	BONETAG_L_FINGER22 = 4186,
	BONETAG_L_FINGER3 = 26613,
	BONETAG_L_FINGER31 = 4137,
	BONETAG_L_FINGER32 = 4138,
	BONETAG_L_FINGER4 = 26614,
	BONETAG_L_FINGER41 = 4153,
	BONETAG_L_FINGER42 = 4154,
	BONETAG_L_THIGH = 58271,
	BONETAG_L_CALF = 63931,
	BONETAG_L_FOOT = 14201,
	BONETAG_L_TOE = 2108,
	BONETAG_L_TOE1 = 7531,
	BONETAG_R_THIGH = 51826,
	BONETAG_R_CALF = 36864,
	BONETAG_R_FOOT = 52301,
	BONETAG_R_TOE = 20781,
	BONETAG_R_TOE1 = 45631,
	BONETAG_NECKROLL = 35731,
	BONETAG_L_ARMROLL = 5232,
	BONETAG_R_ARMROLL = 37119,
	BONETAG_L_FOREARMROLL = 61007,
	BONETAG_R_FOREARMROLL = 43810,
	BONETAG_L_THIGHROLL = 23639,
	BONETAG_R_THIGHROLL = 6442,
	BONETAG_L_PH_HAND = 60309,
	BONETAG_R_PH_HAND = 28422,
	BONETAG_WEAPON_GRIP = 41922,
	BONETAG_WEAPON_GRIP2 = 18212,
	BONETAG_CAMERA = 33399,
	_0xFFAEFCDF = 38180,
	BONETAG_L_STIRRUP = 39126,
	BONETAG_R_STIRRUP = 39638,
	BONETAG_L_IK_HAND = 36029,
	BONETAG_R_IK_HAND = 6286,
	BONETAG_TAIL0 = 838,
	BONETAG_TAIL1 = 839,
	BONETAG_TAIL2 = 840,
	BONETAG_TAIL3 = 841,
	BONETAG_TAIL4 = 842,
	BONETAG_TAIL5 = 843,
	_0x421C25DF = 30992,
	_0x2FE58172 = 30993,
	_0x25A66CF4 = 30994,
	_0x1338C819 = 30995,
	_0x005A225C = 30996,
	_0xF68C0EC0 = 30997,
	_0x8FB7434A = 6986,
	_0xA1F5E7C7 = 6987,
	_0x704A0470 = 6988,
	BONETAG_JAW = 16351,
	BONETAG_L_CLAW = 1805,
	BONETAG_R_CLAW = 39905,
	BONETAG_L_EYE = 5956,
	BONETAG_R_EYE = 6468,
	BONETAG_L_EYE2 = 25260,
	BONETAG_R_EYE2 = 27474,
	BONETAG_FACING_DIR = 56604,
	BONETAG_LOOK_DIR = 12844,
	BONETAG_L_PH_FOOT = 57717,
	BONETAG_R_PH_FOOT = 24806,
	BONETAG_L_IK_FOOT = 65245,
	BONETAG_R_IK_FOOT = 35502,
	BONETAG_HIGH_HEELS = 15570,
	_0x70328671 = 28462,
	BONETAG_HAIR_SCALE = 13201,
	BONETAG_HAIR_HEIGHT = 48472,
	_0xF3C4AC3D = 5930,
	BONETAG_BAGROOT = 44297,
	BONETAG_BAGPIVOTROOT = 47158,
	BONETAG_BAGPIVOT = 19729,
	BONETAG_BAGBODY = 43885,
	_0xF174EFBF = 2359,
	_0x3D4A076C = 2449,
	BONETAG_HEAD_X = 19336,
	BONETAG_NECK_X = 64744,
	BONETAG_NECK_Y = 64745,
	BONETAG_NECK_Z = 64746,
	_0xBAA782A6 = 56194,
	_0x488ECBC1 = 45733,
	_0xFA46AF32 = 45734,
	_0x75E3A66A = 45735,
	_0x9B0BF8B7 = 48389,
	_0x820E46BC = 48390,
	_0xBB35B90A = 48391,
	_0x1B20EC20 = 30929,
	_0xE2AE184D = 33869,
	_0x2C83817A = 4126,
};

enum eAnimPlayerFlag
{
	APF_USE_SECONDARY_SLOT = 0,
	_0x353335A9 = 1,
	APF_UNUSED_3 = 2,
	APF_UNUSED_4 = 3,
	APF_ISPLAYING = 4,
	APF_ISLOOPED = 5,
	APF_SELFSIXD = 6,
	APF_XPCOOLBD = 7,
	APF_SELFSIXL = 8,
	APF_SCRIPT = 9,
	APF_UNUSED_6 = 10,
	APF_UNUSED_7 = 11,
	APF_UNUSED_8 = 12,
	APF_XPCOOLBE = 13,
	APF_ISBLENDAUTOREMOVE = 14,
	APF_ISFINISHAUTOREMOVE = 15,
	APF_SELFSIXK = 16,
	APF_ADDITIVE = 17,
	APF_FACIAL = 18,
	_0x751A6746 = 19,
	APF_SELFSIXM = 20,
	APF_UPPERBODYONLY = 21,
	_0x01AC19EC = 22,
	APF_SELFSIXJ = 23,
	APF_SELFSIXI = 24,
	APF_XPCOOLBG = 25,
	APF_BLOCK_IK = 26,
	_0x89B73976 = 27,
	APF_BLOCK_HEAD_IK = 28,
	_0x05D78308 = 29,
	APF_UNUSED_9 = 30,
	_0xE0788A20 = 31,
};

enum eAnimPriority
{
	AP_LOW = 0,
	AP_MEDIUM = 1,
	AP_HIGH = 2,
	AP_FACE_LOW = 3,
	AP_FACE_MEDIUM = 4,
	AP_FACE_HIGH = 5,
};

enum eAnimSceneFlags
{
	_0xB61D182C = 0,
	_0xF6429512 = 1,
	_0x95EF9A56 = 2,
};

enum eBraveryFlags
{
	BF_INTERVENE_ON_MELEE_ACTION = 0,
	BF_DONT_RUN_ON_MELEE_ATTACK = 1,
	BF_WATCH_ON_CAR_STOLEN = 2,
	BF_INTIMIDATE_PLAYER = 3,
	BF_GET_PISSED_WHEN_HIT_BY_CAR = 4,
	BF_DONT_SCREAM_ON_FLEE = 5,
	BF_DONT_SAY_PANIC_ON_FLEE = 6,
	BF_REACT_ON_COMBAT = 7,
	BF_PLAY_CAR_HORN = 8,
	BF_ARGUMENTATIVE = 9,
	BF_CONFRONTATIONAL = 10,
	BF_LIMIT_COMBATANTS = 11,
	BF_PURSUE_WHEN_HIT_BY_CAR = 12,
	BF_COWARDLY_FOR_SHOCKING_EVENTS = 13,
	BF_BOOST_BRAVERY_IN_GROUP = 14,
	BF_CAN_ACCELERATE_IN_CAR = 15,
	BF_CAN_GET_OUT_WHEN_HIT_BY_CAR = 16,
	BF_AGGRESSIVE_AFTER_RUNNING_PED_OVER = 17,
	BF_CAN_FLEE_WHEN_HIT_BY_CAR = 18,
	BF_ALLOW_CONFRONT_FOR_TERRITORY_REACTIONS = 19,
	BF_DONT_FORCE_FLEE_COMBAT = 20,
};

enum eCameraSettings
{
	_0x059E28F4 = 0,
	_0x2706A48D = 1,
};

enum eCreditType
{
	JOB_BIG = 0,
	JOB_MED = 1,
	JOB_SMALL = 2,
	NAME_BIG = 3,
	NAME_MED = 4,
	NAME_SMALL = 5,
	SPACE_BIG = 6,
	SPACE_MED = 7,
	SPACE_SMALL = 8,
	SPACE_END = 9,
	SPRITE_1 = 10,
	LEGALS = 11,
	AUDIO_NAME = 12,
	AUDIO_LEGALS = 13,
	JOB_AND_NAME_MED = 14,
};

enum eCriminalityFlags
{
	CF_JACKING = 0,
	CF_ALLOWED_COP_PURSUIT = 1,
};

enum eCurveType
{
	_0xB8B75E54 = 0,
	_0xE31A36F4 = 1,
	_0x6C03D7C5 = 2,
	_0x7C17DF11 = 3,
	_0xABA18982 = 4,
	_0xE86C75D6 = 5,
	_0xFA7C12A6 = 6,
	_0x72BC8BBD = 7,
	_0x8EB7230F = 8,
	_0xA071134D = 9,
	_0xE17012AA = 10,
	_0x3ED9F3A1 = 11,
	_0xC0AC286E = 12,
	_0xC2CFF53C = 13,
	_0x0953BF20 = 14,
	_0x24648923 = 15,
	_0x3D7C92E7 = 16,
	_0x6C528246 = 17,
	_0xB51FEDD2 = 18,
	_0xCCAB4610 = 19,
	_0xC02BF4A7 = 20,
	_0xE1666B56 = 21,
	_0x2B6B998B = 22,
	_0xAAFF48BA = 23,
	_0xCA5AA3B2 = 24,
	_0x5DBC9E97 = 25,
	_0xF7410A5F = 26,
};

enum eDamageType
{
	UNKNOWN = 0,
	NONE = 1,
	MELEE = 2,
	BULLET = 3,
	BULLET_RUBBER = 4,
	EXPLOSIVE = 5,
	FIRE = 6,
	COLLISION = 7,
	FALL = 8,
	DROWN = 9,
	ELECTRIC = 10,
	BARBED_WIRE = 11,
	FIRE_EXTINGUISHER = 12,
	SMOKE = 13,
	WATER_CANNON = 14,
	TRANQUILIZER = 15,
};

enum eDepth
{
	_0x525D433C = 0,
	_0x90D525B6 = 1,
	_0xF90866D8 = 2,
	_0x7EA2BDEB = 3,
	_0x0D77B8CC = 4,
};

enum eDoorId
{
	_0x872E72B8 = 4294967295,
	VEH_EXT_DOOR_DSIDE_F = 0,
	VEH_EXT_DOOR_DSIDE_R = 1,
	VEH_EXT_DOOR_PSIDE_F = 2,
	VEH_EXT_DOOR_PSIDE_R = 3,
	VEH_EXT_BONNET = 4,
	VEH_EXT_BOOT = 5,
};

enum eDriveType
{
	DRIVE_TYPE_NONE = 0,
	DRIVE_TYPE_RAIN = 1,
	DRIVE_TYPE_SNOW = 2,
	DRIVE_TYPE_UNDERWATER = 3,
	DRIVE_TYPE_REGION = 4,
};

enum eEventType
{
	EVENT_ACQUAINTANCE_PED_DISLIKE = 0,
	EVENT_ACQUAINTANCE_PED_HATE = 1,
	EVENT_ACQUAINTANCE_PED_LIKE = 2,
	EVENT_ACQUAINTANCE_PED_RESPECT = 3,
	EVENT_ACQUAINTANCE_PED_WANTED = 4,
	EVENT_ACQUAINTANCE_PED_DEAD = 5,
	EVENT_AGITATED = 6,
	EVENT_AGITATED_ACTION = 7,
	EVENT_ENCROACHING_PED = 8,
	EVENT_CALL_FOR_COVER = 9,
	EVENT_CAR_UNDRIVEABLE = 10,
	EVENT_CLIMB_LADDER_ON_ROUTE = 11,
	EVENT_CLIMB_NAVMESH_ON_ROUTE = 12,
	EVENT_COMBAT_TAUNT = 13,
	EVENT_COMMUNICATE_EVENT = 14,
	EVENT_COP_CAR_BEING_STOLEN = 15,
	EVENT_CRIME_REPORTED = 16,
	EVENT_DAMAGE = 17,
	EVENT_DEAD_PED_FOUND = 18,
	EVENT_DEATH = 19,
	EVENT_DRAGGED_OUT_CAR = 20,
	EVENT_DUMMY_CONVERSION = 21,
	EVENT_EXPLOSION = 22,
	EVENT_EXPLOSION_HEARD = 23,
	EVENT_FIRE_NEARBY = 24,
	EVENT_FLUSH_TASKS = 25,
	EVENT_FOOT_STEP_HEARD = 26,
	EVENT_GET_OUT_OF_WATER = 27,
	EVENT_GIVE_PED_TASK = 28,
	EVENT_GUN_AIMED_AT = 29,
	EVENT_HELP_AMBIENT_FRIEND = 30,
	EVENT_INJURED_CRY_FOR_HELP = 31,
	EVENT_CRIME_CRY_FOR_HELP = 32,
	EVENT_IN_AIR = 33,
	EVENT_IN_WATER = 34,
	EVENT_INCAPACITATED = 35,
	EVENT_LEADER_ENTERED_CAR_AS_DRIVER = 36,
	EVENT_LEADER_ENTERED_COVER = 37,
	EVENT_LEADER_EXITED_CAR_AS_DRIVER = 38,
	EVENT_LEADER_HOLSTERED_WEAPON = 39,
	EVENT_LEADER_LEFT_COVER = 40,
	EVENT_LEADER_UNHOLSTERED_WEAPON = 41,
	EVENT_MELEE_ACTION = 42,
	EVENT_MUST_LEAVE_BOAT = 43,
	EVENT_NEW_TASK = 44,
	EVENT_NONE = 45,
	EVENT_OBJECT_COLLISION = 46,
	EVENT_ON_FIRE = 47,
	EVENT_OPEN_DOOR = 48,
	EVENT_SHOVE_PED = 49,
	EVENT_PED_COLLISION_WITH_PED = 50,
	EVENT_PED_COLLISION_WITH_PLAYER = 51,
	EVENT_PED_ENTERED_MY_VEHICLE = 52,
	EVENT_PED_JACKING_MY_VEHICLE = 53,
	EVENT_PED_ON_CAR_ROOF = 54,
	EVENT_PED_TO_CHASE = 55,
	EVENT_PED_TO_FLEE = 56,
	EVENT_PLAYER_COLLISION_WITH_PED = 57,
	_0x7BA020DA = 58,
	EVENT_POTENTIAL_BE_WALKED_INTO = 59,
	EVENT_POTENTIAL_BLAST = 60,
	EVENT_POTENTIAL_GET_RUN_OVER = 61,
	EVENT_POTENTIAL_WALK_INTO_FIRE = 62,
	EVENT_POTENTIAL_WALK_INTO_OBJECT = 63,
	EVENT_POTENTIAL_WALK_INTO_VEHICLE = 64,
	EVENT_PROVIDING_COVER = 65,
	EVENT_RADIO_TARGET_POSITION = 66,
	EVENT_RAN_OVER_PED = 67,
	_0xA81BCDE5 = 68,
	EVENT_REACTION_ENEMY_PED = 69,
	EVENT_REACTION_INVESTIGATE_DEAD_PED = 70,
	EVENT_REACTION_INVESTIGATE_THREAT = 71,
	EVENT_REQUEST_HELP_WITH_CONFRONTATION = 72,
	EVENT_RESPONDED_TO_THREAT = 73,
	EVENT_REVIVED = 74,
	EVENT_SCRIPT_COMMAND = 75,
	EVENT_SHOCKING_BROKEN_GLASS = 76,
	EVENT_SHOCKING_CAR_ALARM = 77,
	EVENT_SHOCKING_CAR_CHASE = 78,
	EVENT_SHOCKING_CAR_CRASH = 79,
	EVENT_SHOCKING_BICYCLE_CRASH = 80,
	EVENT_SHOCKING_CAR_PILE_UP = 81,
	EVENT_SHOCKING_CAR_ON_CAR = 82,
	EVENT_SHOCKING_DANGEROUS_ANIMAL = 83,
	EVENT_SHOCKING_DEAD_BODY = 84,
	EVENT_SHOCKING_DRIVING_ON_PAVEMENT = 85,
	EVENT_SHOCKING_BICYCLE_ON_PAVEMENT = 86,
	EVENT_SHOCKING_ENGINE_REVVED = 87,
	EVENT_SHOCKING_EXPLOSION = 88,
	EVENT_SHOCKING_FIRE = 89,
	EVENT_SHOCKING_GUN_FIGHT = 90,
	EVENT_SHOCKING_GUNSHOT_FIRED = 91,
	EVENT_SHOCKING_HELICOPTER_OVERHEAD = 92,
	EVENT_SHOCKING_PARACHUTER_OVERHEAD = 93,
	EVENT_SHOCKING_PED_KNOCKED_INTO_BY_PLAYER = 94,
	EVENT_SHOCKING_HORN_SOUNDED = 95,
	EVENT_SHOCKING_IN_DANGEROUS_VEHICLE = 96,
	EVENT_SHOCKING_INJURED_PED = 97,
	EVENT_SHOCKING_MAD_DRIVER = 98,
	EVENT_SHOCKING_MAD_DRIVER_EXTREME = 99,
	EVENT_SHOCKING_MAD_DRIVER_BICYCLE = 100,
	EVENT_SHOCKING_MUGGING = 101,
	EVENT_SHOCKING_NON_VIOLENT_WEAPON_AIMED_AT = 102,
	EVENT_SHOCKING_PED_RUN_OVER = 103,
	EVENT_SHOCKING_PED_SHOT = 104,
	EVENT_SHOCKING_PLANE_FLY_BY = 105,
	EVENT_SHOCKING_POTENTIAL_BLAST = 106,
	EVENT_SHOCKING_PROPERTY_DAMAGE = 107,
	EVENT_SHOCKING_RUNNING_PED = 108,
	EVENT_SHOCKING_RUNNING_STAMPEDE = 109,
	EVENT_SHOCKING_SEEN_CAR_STOLEN = 110,
	EVENT_SHOCKING_SEEN_CONFRONTATION = 111,
	EVENT_SHOCKING_SEEN_GANG_FIGHT = 112,
	EVENT_SHOCKING_SEEN_INSULT = 113,
	EVENT_SHOCKING_SEEN_MELEE_ACTION = 114,
	EVENT_SHOCKING_SEEN_NICE_CAR = 115,
	EVENT_SHOCKING_SEEN_PED_KILLED = 116,
	EVENT_SHOCKING_SEEN_VEHICLE_TOWED = 117,
	EVENT_SHOCKING_SEEN_WEAPON_THREAT = 118,
	EVENT_SHOCKING_SEEN_WEIRD_PED = 119,
	EVENT_SHOCKING_SEEN_WEIRD_PED_APPROACHING = 120,
	EVENT_SHOCKING_SIREN = 121,
	EVENT_SHOCKING_STUDIO_BOMB = 122,
	EVENT_SHOCKING_VISIBLE_WEAPON = 123,
	EVENT_SHOT_FIRED = 124,
	EVENT_SHOT_FIRED_BULLET_IMPACT = 125,
	EVENT_SHOT_FIRED_WHIZZED_BY = 126,
	EVENT_FRIENDLY_AIMED_AT = 127,
	EVENT_FRIENDLY_FIRE_NEAR_MISS = 128,
	EVENT_SHOUT_BLOCKING_LOS = 129,
	EVENT_SHOUT_TARGET_POSITION = 130,
	EVENT_STATIC_COUNT_REACHED_MAX = 131,
	EVENT_STUCK_IN_AIR = 132,
	EVENT_SUSPICIOUS_ACTIVITY = 133,
	_0xA84F246C = 134,
	EVENT_UNIDENTIFIED_PED = 135,
	EVENT_VEHICLE_COLLISION = 136,
	EVENT_VEHICLE_DAMAGE_WEAPON = 137,
	EVENT_VEHICLE_ON_FIRE = 138,
	EVENT_WHISTLING_HEARD = 139,
	EVENT_DISTURBANCE = 140,
	EVENT_ENTITY_DAMAGED = 141,
	EVENT_ENTITY_DESTROYED = 142,
	EVENT_WRITHE = 143,
	EVENT_HURT_TRANSITION = 144,
	EVENT_PLAYER_UNABLE_TO_ENTER_VEHICLE = 145,
	EVENT_SCENARIO_FORCE_ACTION = 146,
	EVENT_STAT_VALUE_CHANGED = 147,
	EVENT_PLAYER_DEATH = 148,
	EVENT_PED_SEEN_DEAD_PED = 149,
	_0xC92B98C8 = 150,
	_0xA773C13A = 151,
	_0x7FC68049 = 152,
	_0x36B5F57E = 153,
	_0xE70A7E9C = 154,
	_0x7BB0EC60 = 155,
	state_Cowboy_1H_Crouching_Idle = 156,
	_0x7823923E = 157,
	_0x1DA46B48 = 158,
	_0x57205379 = 159,
	_0xD7941AA2 = 160,
	_0xC523FA9E = 161,
	_0x9F396CB7 = 162,
	_0x8EFAEC43 = 163,
	_0x6BE93522 = 164,
	_0x35B9C2F6 = 165,
	_0x516F2606 = 166,
	_0x102A0521 = 167,
	_0x2C24E311 = 168,
	_0x53C98CF2 = 169,
	_0x5B32A776 = 170,
	_0x9155EBDB = 171,
	_0xB3DEFC77 = 172,
	_0xE7F5BE65 = 173,
	EVENT_NETWORK_SCRIPT_EVENT = 174,
	_0xC2949D06 = 175,
	_0xB3F4CE20 = 176,
	_0x515192E4 = 177,
	EVENT_NETWORK_NETWORK_BAIL = 178,
	EVENT_NETWORK_HOST_MIGRATION = 179,
	_0xC8D473AE = 180,
	_0xCDD45E2B = 181,
	_0x2AED0110 = 182,
	_0xE476A2E5 = 183,
	EVENT_NETWORK_CHEAT_TRIGGERED = 184,
	EVENT_NETWORK_DAMAGE_ENTITY = 185,
	EVENT_NETWORK_PLAYER_ARREST = 186,
	_0xF8BB6EED = 187,
	_0x272B4BB1 = 188,
	_0x03C0D0BB = 189,
	_0xC5857F28 = 190,
	_0x6B39C3C7 = 191,
	_0x680E9124 = 192,
	_0x084F397B = 193,
	_0x50DB843C = 194,
	_0xB654C626 = 195,
	_0x60064F81 = 196,
	EVENT_TEXT_MESSAGE_RECEIVED = 197,
	EVENT_CLOUD_FILE_RESPONSE = 198,
	EVENT_NETWORK_PICKUP_RESPAWNED = 199,
	EVENT_NETWORK_PRESENCE_STAT_UPDATE = 200,
	EVENT_NETWORK_PED_LEFT_BEHIND = 201,
	_0x9EE353D5 = 202,
	_0x084288B7 = 203,
	EVENT_NETWORK_INCREMENT_STAT = 204,
	EVENT_NETWORK_SESSION_EVENT = 205,
	_0xCDDB7BF9 = 206,
	_0x35060103 = 207,
	_0xC45B9C8D = 208,
	_0x8461B627 = 209,
	_0x9ACF6B43 = 210,
	_0x526A8D2B = 211,
	_0x06F9071A = 212,
	_0xEBC33AFE = 213,
	_0x38141B44 = 214,
	_0xE52648CE = 215,
	_0xBA04727E = 216,
	_0x5A87C62C = 217,
	_0x35869060 = 218,
	_0xF06BB198 = 219,
	EVENT_NETWORK_PRESENCE_TRIGGER = 220,
	EVENT_NETWORK_PRESENCE_EMAIL = 221,
	_0xEC6788FA = 222,
	_0xB48AD6A2 = 223,
	EVENT_NETWORK_SPECTATE_LOCAL = 224,
	EVENT_NETWORK_CLOUD_EVENT = 225,
	_0x474EBFE0 = 226,
	_0xAF6C7C96 = 227,
	EVENT_NETWORK_APP_LAUNCHED = 228,
	_0x835D6183 = 229,
	_0x03A52AA7 = 230,
	EVENT_NETWORK_REQUEST_DELAY = 231,
	_0xFFC4CC2B = 232,
	_0x06EF2524 = 233,
	_0x157869FC = 234,
	_0x115B8784 = 235,
	_0x93AC2785 = 236,
	_0x6D63129F = 237,
	_0xBC778D37 = 238,
	_0x59272A6A = 239,
	_0x230D7157 = 240,
	_0x0A1F4F09 = 241,
	_0x05DC55B6 = 242,
	_0x424F15B5 = 243,
	_0x78855C1A = 244,
	_0x4A8A5373 = 245,
	EVENT_ERRORS_UNKNOWN_ERROR = 246,
	EVENT_ERRORS_ARRAY_OVERFLOW = 247,
	EVENT_ERRORS_INSTRUCTION_LIMIT = 248,
	EVENT_ERRORS_STACK_OVERFLOW = 249,
	_0x063E563B = 250,
	_0x9DEA6A90 = 251,
	EVENT_INVALID = 4294967295,
};

enum eExplosionTag
{
	DONTCARE = 4294967295,
	GRENADE = 0,
	GRENADELAUNCHER = 1,
	STICKYBOMB = 2,
	MOLOTOV = 3,
	ROCKET = 4,
	TANKSHELL = 5,
	HI_OCTANE = 6,
	CAR = 7,
	PLANE = 8,
	PETROL_PUMP = 9,
	BIKE = 10,
	DIR_STEAM = 11,
	DIR_FLAME = 12,
	DIR_WATER_HYDRANT = 13,
	DIR_GAS_CANISTER = 14,
	BOAT = 15,
	SHIP_DESTROY = 16,
	TRUCK = 17,
	BULLET = 18,
	SMOKEGRENADELAUNCHER = 19,
	SMOKEGRENADE = 20,
	BZGAS = 21,
	FLARE = 22,
	GAS_CANISTER = 23,
	EXTINGUISHER = 24,
	_0x988620B8 = 25,
	EXP_TAG_TRAIN = 26,
	EXP_TAG_BARREL = 27,
	EXP_TAG_PROPANE = 28,
	EXP_TAG_BLIMP = 29,
	EXP_TAG_DIR_FLAME_EXPLODE = 30,
	EXP_TAG_TANKER = 31,
	PLANE_ROCKET = 32,
	EXP_TAG_VEHICLE_BULLET = 33,
	EXP_TAG_GAS_TANK = 34,
	EXP_TAG_BIRD_CRAP = 35,
	EXP_TAG_RAILGUN = 36,
	EXP_TAG_BLIMP2 = 37,
	EXP_TAG_FIREWORK = 38,
	EXP_TAG_SNOWBALL = 39,
	EXP_TAG_PROXMINE = 40,
	EXP_TAG_VALKYRIE_CANNON = 41,
	EXP_TAG_AIR_DEFENCE = 42,
	EXP_TAG_PIPEBOMB = 43,
	EXP_TAG_VEHICLEMINE = 44,
	EXP_TAG_EXPLOSIVEAMMO = 45,
	EXP_TAG_APCSHELL = 46,
	EXP_TAG_BOMB_CLUSTER = 47,
	EXP_TAG_BOMB_GAS = 48,
	EXP_TAG_BOMB_INCENDIARY = 49,
	EXP_TAG_BOMB_STANDARD = 50,
	EXP_TAG_TORPEDO = 51,
	EXP_TAG_TORPEDO_UNDERWATER = 52,
	EXP_TAG_BOMBUSHKA_CANNON = 53,
	EXP_TAG_BOMB_CLUSTER_SECONDARY = 54,
	EXP_TAG_HUNTER_BARRAGE = 55,
	EXP_TAG_HUNTER_CANNON = 56,
	EXP_TAG_ROGUE_CANNON = 57,
	EXP_TAG_MINE_UNDERWATER = 58,
	EXP_TAG_ORBITAL_CANNON = 59,
	EXP_TAG_BOMB_STANDARD_WIDE = 60,
	EXP_TAG_EXPLOSIVEAMMO_SHOTGUN = 61,
	EXP_TAG_OPPRESSOR2_CANNON = 62,
	EXP_TAG_MORTAR_KINETIC = 63,
	EXP_TAG_VEHICLEMINE_KINETIC = 64,
	EXP_TAG_VEHICLEMINE_EMP = 65,
	EXP_TAG_VEHICLEMINE_SPIKE = 66,
	EXP_TAG_VEHICLEMINE_SLICK = 67,
	EXP_TAG_VEHICLEMINE_TAR = 68,
	EXP_TAG_SCRIPT_DRONE = 69,
	EXP_TAG_RAYGUN = 70,
	EXP_TAG_BURIEDMINE = 71,
	EXP_TAG_SCRIPT_MISSILE = 72,
	EXP_TAG_RCTANK_ROCKET = 73,
	EXP_TAG_BOMB_WATER = 74,
	EXP_TAG_BOMB_WATER_SECONDARY = 75,
	_0xF728C4A9 = 76,
	_0xBAEC056F = 77,
	EXP_TAG_FLASHGRENADE = 78,
	EXP_TAG_STUNGRENADE = 79,
	_0x763D3B3B = 80,
	EXP_TAG_SCRIPT_MISSILE_LARGE = 81,
	EXP_TAG_SUBMARINE_BIG = 82,
	EXP_TAG_EMPLAUNCHER_EMP = 83,
};

enum eExternallyDrivenDOFs
{
	EMPTY = 0,
	HIGH_HEELS = 1,
	COLLAR = 2,
};

enum eExtraContentPackType
{
	EXTRACONTENT_TU_PACK = 0,
	EXTRACONTENT_LEVEL_PACK = 1,
	EXTRACONTENT_COMPAT_PACK = 2,
	EXTRACONTENT_PAID_PACK = 3,
};

enum eExtraIncludes
{
	EXTRA_1 = 1,
	EXTRA_2 = 2,
	EXTRA_3 = 3,
	EXTRA_4 = 4,
	EXTRA_5 = 5,
	EXTRA_6 = 6,
	EXTRA_7 = 7,
	EXTRA_8 = 8,
	EXTRA_9 = 9,
	EXTRA_10 = 10,
	EXTRA_11 = 11,
	EXTRA_12 = 12,
	EXTRA_13 = 13,
};

enum eFadeCurveType
{
	FCT_NONE = 0,
	FCT_LINEAR = 1,
	FCT_HALF_SIGMOID = 2,
	FCT_SIGMOID = 3,
};

enum eFireType
{
	NONE = 0,
	MELEE = 1,
	INSTANT_HIT = 2,
	DELAYED_HIT = 3,
	PROJECTILE = 4,
	VOLUMETRIC_PARTICLE = 5,
};

enum eHandlingType
{
	HANDLING_TYPE_BIKE = 0,
	HANDLING_TYPE_FLYING = 1,
	HANDLING_TYPE_VERTICAL_FLYING = 2,
	HANDLING_TYPE_BOAT = 3,
	HANDLING_TYPE_SEAPLANE = 4,
	HANDLING_TYPE_SUBMARINE = 5,
	HANDLING_TYPE_TRAIN = 6,
	HANDLING_TYPE_TRAILER = 7,
	HANDLING_TYPE_CAR = 8,
	HANDLING_TYPE_WEAPON = 9,
	HANDLING_TYPE_MAX_TYPES = 10,
};

enum eIkControlFlags
{
	_0x7CA83DA7 = 0,
	_0x9E7C192B = 1,
	_0x415FA2ED = 2,
	_0x3AB0EBA0 = 3,
	_0x2B84BDEB = 4,
	_0xF5F83084 = 5,
	_0xA573AC76 = 6,
	_0x20333C21 = 7,
	_0xDC2FC81F = 8,
	_0x2C68FF01 = 9,
	_0x64BD88A6 = 10,
	_0xC7567CB7 = 11,
	_0x95AA1828 = 12,
	_0x4DBC6420 = 13,
};

enum eInstructionButtons
{
	ARROW_UP = 0,
	ARROW_DOWN = 1,
	ARROW_LEFT = 2,
	ARROW_RIGHT = 3,
	DPAD_UP = 4,
	DPAD_DOWN = 5,
	DPAD_LEFT = 6,
	DPAD_RIGHT = 7,
	DPAD_NONE = 8,
	DPAD_ALL = 9,
	DPAD_UPDOWN = 10,
	DPAD_LEFTRIGHT = 11,
	LSTICK_UP = 12,
	LSTICK_DOWN = 13,
	LSTICK_LEFT = 14,
	LSTICK_RIGHT = 15,
	LSTICK_CLICK = 16,
	LSTICK_ALL = 17,
	LSTICK_UPDOWN = 18,
	LSTICK_LEFTRIGHT = 19,
	LSTICK_ROTATE = 20,
	RSTICK_UP = 21,
	RSTICK_DOWN = 22,
	RSTICK_LEFT = 23,
	RSTICK_RIGHT = 24,
	RSTICK_CLICK = 25,
	RSTICK_ALL = 26,
	RSTICK_UPDOWN = 27,
	RSTICK_LEFTRIGHT = 28,
	RSTICK_ROTATE = 29,
	BUTTON_A = 30,
	BUTTON_B = 31,
	BUTTON_X = 32,
	BUTTON_Y = 33,
	BUTTON_L1 = 34,
	BUTTON_L2 = 35,
	BUTTON_R1 = 36,
	BUTTON_R2 = 37,
	BUTTON_START = 38,
	BUTTON_BACK = 39,
	SIXAXIS_YAW = 40,
	SIXAXIS_PITCH = 41,
	_0x20AC56EC = 42,
	SIXAXIS_ROLL = 43,
	ICON_SPINNER = 44,
	ARROW_UPDOWN = 45,
	ARROW_LEFTRIGHT = 46,
	ARROW_ALL = 47,
	BUTTONS_TRIGGERS = 48,
	BUTTONS_BUMPERS = 49,
	STICK_CLICKS = 50,
	NOTHING = 51,
	_0x39C4D346 = 52,
	ICON_INVALID = 9999,
};

enum eLookAtImportance
{
	MEDIUM = 0,
	HIGH = 1,
	LOW = 2,
};

enum eMenuAction
{
	MENU_OPTION_ACTION_NONE = 0,
	MENU_OPTION_ACTION_LINK = 1,
	MENU_OPTION_ACTION_PREF_CHANGE = 2,
	MENU_OPTION_ACTION_TRIGGER = 3,
	MENU_OPTION_ACTION_FILL_CONTENT = 4,
	MENU_OPTION_ACTION_FILL_CONTENT_FROM_SCRIPT = 5,
	MENU_OPTION_ACTION_INCEPT = 6,
	MENU_OPTION_ACTION_REFERENCE = 7,
	MENU_OPTION_ACTION_SEPARATOR = 8,
};

enum eMenuItemBits
{
	InitiallyDisabled = 0,
};

enum eMenuOption
{
	MENU_OPTION_SLIDER = 0,
	MENU_OPTION_DISPLAY_ON_OFF = 1,
	MENU_OPTION_DISPLAY_INVERT_LOOK = 2,
	MENU_OPTION_DISPLAY_TARGET_CONFIG = 3,
	MENU_OPTION_DISPLAY_CONTROL_CONFIG = 4,
	MENU_OPTION_CONTROLLER_SENSITIVITY = 5,
	MENU_OPTION_DISPLAY_GPS_SPEECH = 6,
	MENU_OPTION_DISPLAY_SPEAKER_OUTPUT = 7,
	MENU_OPTION_DISPLAY_SWHEADSET = 8,
	MENU_OPTION_DISPLAY_RADIO_STATIONS = 9,
	MENU_OPTION_DISPLAY_VOICE_OUTPUT = 10,
	MENU_OPTION_DISPLAY_UR_PLAYMODE = 11,
	_0x1A3B58A8 = 12,
	MENU_OPTION_DISPLAY_MINIMAP_MODE = 13,
	MENU_OPTION_DISPLAY_RETICLE_MODE = 14,
	MENU_OPTION_DISPLAY_LANGUAGE = 15,
	MENU_OPTION_CAMERA_HEIGHT = 16,
	MENU_OPTION_DISPLAY_SS_FRONTREAR = 17,
	MENU_OPTION_CAMERA_ZOOM = 18,
	MENU_OPTION_CAMERA_ZOOM_NO_FP = 19,
	MENU_OPTION_GAME_FLOW = 20,
	MENU_OPTION_GFX_QUALITY = 21,
	MENU_OPTION_GFX_SHADERQ = 22,
	MENU_OPTION_GFX_SHADOWS = 23,
	MENU_OPTION_GFX_SOFTNESS = 24,
	MENU_OPTION_GFX_WATER = 25,
	MENU_OPTION_VID_VSYNC = 26,
	MENU_OPTION_VID_ASPECT = 27,
	MENU_OPTION_GFX_MSAA = 28,
	MENU_OPTION_GFX_ANISOT = 29,
	MENU_OPTION_GFX_AMBIENTOCC = 30,
	MENU_OPTION_GFX_DXVERSION = 31,
	MENU_OPTION_GFX_NIGHTLIGHTS = 32,
	MENU_OPTION_ROLL_YAW_PITCH = 33,
	MENU_OPTION_MEMORY_GRAPH = 34,
	MENU_OPTION_SCREEN_TYPE = 35,
	MENU_OPTION_DISPLAY_VOICE_TYPE = 36,
	MENU_OPTION_VOICE_FEEDBACK = 37,
	MENU_OPTION_MOUSE_TYPE = 38,
	MENU_OPTION_REPLAY_MODE = 39,
	MENU_OPTION_REPLAY_MEM_LIMIT = 40,
	MENU_OPTION_REPLAY_AUTO_RESUME_RECORDING = 41,
	MENU_OPTION_REPLAY_AUTO_SAVE_RECORDING = 42,
	MENU_OPTION_VIDEO_UPLOAD_PRIVACY = 43,
	MENU_OPTION_CONTROLS_CONTEXT = 44,
	MENU_OPTION_DISPLAY_CONTROL_DRIVEBY = 45,
	MENU_OPTION_FEED_DELAY = 46,
	MENU_OPTION_GFX_REFLECTION = 47,
	MENU_OPTION_CAM_VEH_OFF = 48,
	MENU_OPTION_DISPLAY_MEASUREMENT = 49,
	MENU_OPTION_FPS_DEFAULT_AIM_TYPE = 50,
};

enum eMenuPref
{
	PREF_CONTROL_CONFIG = 0,
	PREF_CONTROL_CONFIG_FPS = 1,
	PREF_VIBRATION = 2,
	PREF_TARGET_CONFIG = 3,
	PREF_INVERT_LOOK = 4,
	PREF_CONTROLLER_SENSITIVITY = 5,
	PREF_CONTROLLER_LIGHT_EFFECT = 6,
	PREF_SFX_VOLUME = 7,
	PREF_MUSIC_VOLUME = 8,
	PREF_GPS_SPEECH = 9,
	PREF_SPEAKER_OUTPUT = 10,
	_0x129B8EEE = 11,
	PREF_RADIO_STATION = 12,
	PREF_VOICE_OUTPUT = 13,
	PREF_GAMMA = 14,
	PREF_PCGAMEPAD = 15,
	PREF_CAMERA_HEIGHT = 16,
	PREF_FEED_PHONE = 17,
	PREF_FEED_STATS = 18,
	PREF_FEED_CREW = 19,
	PREF_FEED_FRIENDS = 20,
	PREF_FEED_SOCIAL = 21,
	PREF_FEED_STORE = 22,
	PREF_FEED_TOOLTIP = 23,
	PREF_FEED_DELAY = 24,
	PREF_DOF = 25,
	PREF_SKFX = 26,
	PREF_SUBTITLES = 27,
	PREF_RADAR_MODE = 28,
	PREF_DISPLAY_HUD = 29,
	PREF_RETICULE = 30,
	PREF_RETICULE_SIZE = 31,
	PREF_DISPLAY_GPS = 32,
	PREF_SAFEZONE_SIZE = 33,
	PREF_CURRENT_LANGUAGE = 34,
	PREF_AUTOSAVE = 35,
	PREF_CINEMATIC_SHOOTING = 36,
	PREF_MUSIC_VOLUME_IN_MP = 37,
	PREF_FACEBOOK_UPDATES = 38,
	PREF_PREVIOUS_LANGUAGE = 39,
	PREF_SYSTEM_LANGUAGE = 40,
	PREF_HDR = 41,
	PREF_DIAG_BOOST = 42,
	PREF_VOICE_SPEAKERS = 43,
	PREF_SS_FRONT = 44,
	PREF_SS_REAR = 45,
	PREF_SNIPER_ZOOM = 46,
	PREF_CONTROLS_CONTEXT = 47,
	PREF_MP_CAMERA_ZOOM_ON_FOOT = 48,
	PREF_MP_CAMERA_ZOOM_IN_VEHICLE = 49,
	PREF_MP_CAMERA_ZOOM_ON_BIKE = 50,
	PREF_MP_CAMERA_ZOOM_IN_BOAT = 51,
	PREF_MP_CAMERA_ZOOM_IN_AIRCRAFT = 52,
	PREF_MP_CAMERA_ZOOM_IN_HELI = 53,
	PREF_STARTUP_FLOW = 54,
	PREF_VID_SCREEN_TYPE = 55,
	PREF_VID_RESOLUTION = 56,
	PREF_VID_REFRESH = 57,
	PREF_VID_ADAPTER = 58,
	PREF_VID_MONITOR = 59,
	PREF_VID_ASPECT = 60,
	PREF_VID_VSYNC = 61,
	PREF_VID_STEREO = 62,
	PREF_VID_STEREO_CONVERGENCE = 63,
	PREF_VID_STEREO_SEPARATION = 64,
	PREF_VID_PAUSE_ON_FOCUS_LOSS = 65,
	PREF_GFX_DXVERSION = 66,
	PREF_GFX_TEXTURE_QUALITY = 67,
	PREF_GFX_SHADER_QUALITY = 68,
	PREF_GFX_SHADOW_QUALITY = 69,
	PREF_GFX_REFLECTION_QUALITY = 70,
	PREF_GFX_REFLECTION_MSAA = 71,
	PREF_GFX_WATER_QUALITY = 72,
	PREF_GFX_PARTICLES_QUALITY = 73,
	PREF_GFX_GRASS_QUALITY = 74,
	PREF_GFX_SHADOW_SOFTNESS = 75,
	PREF_GFX_CITY_DENSITY = 76,
	PREF_GFX_POP_VARIETY = 77,
	PREF_GFX_FXAA = 78,
	PREF_GFX_MSAA = 79,
	PREF_GFX_SCALING = 80,
	PREF_GFX_TXAA = 81,
	PREF_GFX_ANISOTROPIC_FILTERING = 82,
	PREF_GFX_AMBIENT_OCCLUSION = 83,
	PREF_GFX_TESSELLATION = 84,
	PREF_GFX_POST_FX = 85,
	PREF_GFX_DOF = 86,
	PREF_GFX_MB_STRENGTH = 87,
	PREF_GFX_DIST_SCALE = 88,
	PREF_ADV_GFX_LONG_SHADOWS = 89,
	PREF_ADV_GFX_ULTRA_SHADOWS = 90,
	PREF_ADV_GFX_HD_FLIGHT = 91,
	PREF_ADV_GFX_MAX_LOD = 92,
	PREF_ADV_GFX_SHADOWS_DIST_MULT = 93,
	PREF_MEMORY_BAR = 94,
	PREF_GFX_VID_OVERRIDE = 95,
	PREF_VOICE_ENABLE = 96,
	PREF_VOICE_OUTPUT_DEVICE = 97,
	PREF_VOICE_OUTPUT_VOLUME = 98,
	PREF_VOICE_SOUND_VOLUME = 99,
	PREF_VOICE_MUSIC_VOLUME = 100,
	PREF_VOICE_TALK_ENABLED = 101,
	PREF_VOICE_FEEDBACK = 102,
	PREF_VOICE_INPUT_DEVICE = 103,
	PREF_VOICE_CHAT_MODE = 104,
	PREF_VOICE_MIC_VOLUME = 105,
	PREF_VOICE_MIC_SENSITIVITY = 106,
	PREF_MOUSE_TYPE = 107,
	PREF_MOUSE_DRIVE = 108,
	PREF_MOUSE_FLY = 109,
	PREF_MOUSE_SUB = 110,
	PREF_MOUSE_ON_FOOT_SCALE = 111,
	PREF_MOUSE_DRIVING_SCALE = 112,
	PREF_MOUSE_PLANE_SCALE = 113,
	PREF_MOUSE_HELI_SCALE = 114,
	PREF_MOUSE_SUB_SCALE = 115,
	PREF_MOUSE_WEIGHT_SCALE = 116,
	PREF_MOUSE_ACCELERATION = 117,
	PREF_KBM_TOGGLE_AIM = 118,
	_0xE02D8D5C = 119,
	PREF_FPS_PERSISTANT_VIEW = 120,
	PREF_FPS_FIELD_OF_VIEW = 121,
	PREF_FPS_LOOK_SENSITIVITY = 122,
	PREF_FPS_AIM_SENSITIVITY = 123,
	PREF_FPS_AIM_DEADZONE = 124,
	PREF_FPS_AIM_ACCELERATION = 125,
	PREF_AIM_DEADZONE = 126,
	PREF_AIM_ACCELERATION = 127,
	PREF_FPS_AUTO_LEVEL = 128,
	PREF_FPS_RAGDOLL = 129,
	PREF_FPS_COMBATROLL = 130,
	PREF_FPS_HEADBOB = 131,
	PREF_FPS_THIRD_PERSON_COVER = 132,
	PREF_HOOD_CAMERA = 133,
	PREF_FPS_VEH_AUTO_CENTER = 134,
	PREF_LOOK_AROUND_SENSITIVITY = 135,
	PREF_INVERT_MOUSE = 136,
	PREF_INVERT_MOUSE_FLYING = 137,
	PREF_INVERT_MOUSE_SUB = 138,
	PREF_SWAP_ROLL_YAW_MOUSE_FLYING = 139,
	PREF_MOUSE_AUTOCENTER_BIKE = 140,
	PREF_MOUSE_AUTOCENTER_CAR = 141,
	PREF_MOUSE_AUTOCENTER_PLANE = 142,
	PREF_RESTORE_DEFAULT = 143,
	PREF_REPLAY_MODE = 144,
	PREF_REPLAY_MEM_LIMIT = 145,
	PREF_REPLAY_AUTO_RESUME_RECORDING = 146,
	PREF_REPLAY_AUTO_SAVE_RECORDING = 147,
	PREF_VIDEO_UPLOAD_PRIVACY = 148,
	PREF_BIG_RADAR = 149,
	PREF_BIG_RADAR_NAMES = 150,
	PREF_SIXAXIS_HELI = 151,
	PREF_SIXAXIS_BIKE = 152,
	PREF_SIXAXIS_BOAT = 153,
	PREF_SIXAXIS_RELOAD = 154,
	PREF_SIXAXIS_CALIBRATION = 155,
	PREF_SIXAXIS_ACTIVITY = 156,
	PREF_SIXAXIS_AFTERTOUCH = 157,
	_0x82CAAE17 = 158,
	PREF_WIRELESS_STEREO_HEADSET = 159,
	PREF_CTRL_SPEAKER = 160,
	PREF_CTRL_SPEAKER_VOL = 161,
	PREF_PULSE_HEADSET = 162,
	PREF_CTRL_SPEAKER_HEADPHONE = 163,
	PREF_ALTERNATE_HANDBRAKE = 164,
	PREF_ALTERNATE_DRIVEBY = 165,
	PREF_LANDING_PAGE = 166,
	PREF_UR_PLAYMODE = 167,
	PREF_UR_AUTOSCAN = 168,
	PREF_AUDIO_MUTE_ON_FOCUS_LOSS = 169,
	PREF_ROCKSTAR_EDITOR_TOOLTIP = 170,
	PREF_ROCKSTAR_EDITOR_EXPORT_GRAPHICS_UPGRADE = 171,
	PREF_MEASUREMENT_SYSTEM = 172,
	PREF_FPS_DEFAULT_AIM_TYPE = 173,
	PREF_FPS_RELATIVE_VEHICLE_CAMERA_DRIVEBY_AIMING = 174,
};

enum eMenuScreen
{
	MENU_UNIQUE_ID_INVALID = 4294967295,
	MENU_UNIQUE_ID_MAP = 0,
	MENU_UNIQUE_ID_START = 0,
	MENU_UNIQUE_ID_INFO = 1,
	MENU_UNIQUE_ID_FRIENDS = 2,
	MENU_UNIQUE_ID_GALLERY = 3,
	MENU_UNIQUE_ID_SOCIALCLUB = 4,
	MENU_UNIQUE_ID_GAME = 5,
	MENU_UNIQUE_ID_SETTINGS = 6,
	MENU_UNIQUE_ID_PLAYERS = 7,
	MENU_UNIQUE_ID_WEAPONS = 8,
	MENU_UNIQUE_ID_MEDALS = 9,
	MENU_UNIQUE_ID_STATS = 10,
	MENU_UNIQUE_ID_AVAILABLE = 11,
	MENU_UNIQUE_ID_VAGOS = 12,
	MENU_UNIQUE_ID_COPS = 13,
	MENU_UNIQUE_ID_LOST = 14,
	MENU_UNIQUE_ID_HOME_MISSION = 15,
	MENU_UNIQUE_ID_CORONA_SETTINGS = 16,
	MENU_UNIQUE_ID_CORONA_INVITE = 17,
	MENU_UNIQUE_ID_STORE = 18,
	MENU_UNIQUE_ID_HOME_HELP = 19,
	MENU_UNIQUE_ID_HOME_BRIEF = 20,
	MENU_UNIQUE_ID_HOME_FEED = 21,
	MENU_UNIQUE_ID_SETTINGS_AUDIO = 22,
	MENU_UNIQUE_ID_SETTINGS_DISPLAY = 23,
	MENU_UNIQUE_ID_SETTINGS_CONTROLS = 24,
	MENU_UNIQUE_ID_NEW_GAME = 25,
	MENU_UNIQUE_ID_LOAD_GAME = 26,
	MENU_UNIQUE_ID_SAVE_GAME = 27,
	MENU_UNIQUE_ID_HEADER = 28,
	MENU_UNIQUE_ID_HEADER_SAVE_GAME = 29,
	MENU_UNIQUE_ID_HOME = 30,
	MENU_UNIQUE_ID_CREWS = 31,
	MENU_UNIQUE_ID_SETTINGS_SAVEGAME = 32,
	MENU_UNIQUE_ID_GALLERY_ITEM = 33,
	MENU_UNIQUE_ID_FREEMODE = 34,
	MENU_UNIQUE_ID_MP_CHAR_1 = 35,
	MENU_UNIQUE_ID_MP_CHAR_2 = 36,
	MENU_UNIQUE_ID_MP_CHAR_3 = 37,
	MENU_UNIQUE_ID_MP_CHAR_4 = 38,
	MENU_UNIQUE_ID_MP_CHAR_5 = 39,
	MENU_UNIQUE_ID_HEADER_MULTIPLAYER = 40,
	MENU_UNIQUE_ID_HEADER_MY_MP = 41,
	MENU_UNIQUE_ID_MISSION_CREATOR = 42,
	MENU_UNIQUE_ID_GAME_MP = 43,
	MENU_UNIQUE_ID_LEAVE_GAME = 44,
	MENU_UNIQUE_ID_HEADER_PRE_LOBBY = 45,
	MENU_UNIQUE_ID_HEADER_LOBBY = 46,
	MENU_UNIQUE_ID_PARTY = 47,
	MENU_UNIQUE_ID_LOBBY = 48,
	MENU_UNIQUE_ID_PLACEHOLDER = 49,
	MENU_UNIQUE_ID_STATS_CATEGORY = 50,
	MENU_UNIQUE_ID_SETTINGS_LIST = 51,
	MENU_UNIQUE_ID_SAVE_GAME_LIST = 52,
	MENU_UNIQUE_ID_MAP_LEGEND = 53,
	MENU_UNIQUE_ID_CREWS_CATEGORY = 54,
	MENU_UNIQUE_ID_CREWS_FILTER = 55,
	MENU_UNIQUE_ID_CREWS_CARD = 56,
	MENU_UNIQUE_ID_SPECTATOR = 57,
	MENU_UNIQUE_ID_STATS_LISTITEM = 58,
	MENU_UNIQUE_ID_CREW_MINE = 59,
	MENU_UNIQUE_ID_CREW_ROCKSTAR = 60,
	MENU_UNIQUE_ID_CREW_FRIENDS = 61,
	MENU_UNIQUE_ID_CREW_INVITES = 62,
	MENU_UNIQUE_ID_CREW_LIST = 63,
	MENU_UNIQUE_ID_MISSION_CREATOR_CATEGORY = 64,
	MENU_UNIQUE_ID_MISSION_CREATOR_LISTITEM = 65,
	MENU_UNIQUE_ID_MISSION_CREATOR_STAT = 66,
	MENU_UNIQUE_ID_FRIENDS_LIST = 67,
	MENU_UNIQUE_ID_FRIENDS_OPTIONS = 68,
	MENU_UNIQUE_ID_HEADER_MP_CHARACTER_SELECT = 69,
	MENU_UNIQUE_ID_HEADER_MP_CHARACTER_CREATION = 70,
	MENU_UNIQUE_ID_CREATION_HERITAGE = 71,
	MENU_UNIQUE_ID_CREATION_LIFESTYLE = 72,
	MENU_UNIQUE_ID_CREATION_YOU = 73,
	MENU_UNIQUE_ID_PARTY_LIST = 74,
	MENU_UNIQUE_ID_REPLAY_MISSION = 75,
	MENU_UNIQUE_ID_REPLAY_MISSION_LIST = 76,
	MENU_UNIQUE_ID_REPLAY_MISSION_ACTIVITY = 77,
	MENU_UNIQUE_ID_CREW = 78,
	MENU_UNIQUE_ID_CREATION_HERITAGE_LIST = 79,
	MENU_UNIQUE_ID_CREATION_LIFESTYLE_LIST = 80,
	MENU_UNIQUE_ID_PLAYERS_LIST = 81,
	MENU_UNIQUE_ID_PLAYERS_OPTIONS = 82,
	MENU_UNIQUE_ID_PLAYERS_OPTIONS_LIST = 83,
	MENU_UNIQUE_ID_PARTY_OPTIONS = 84,
	MENU_UNIQUE_ID_PARTY_OPTIONS_LIST = 85,
	MENU_UNIQUE_ID_CREW_OPTIONS = 86,
	MENU_UNIQUE_ID_CREW_OPTIONS_LIST = 87,
	MENU_UNIQUE_ID_FRIENDS_OPTIONS_LIST = 88,
	MENU_UNIQUE_ID_FRIENDS_MP = 89,
	MENU_UNIQUE_ID_TEAM_SELECT = 90,
	MENU_UNIQUE_ID_HOME_DIALOG = 91,
	MENU_UNIQUE_ID_HEADER_EMPTY = 92,
	MENU_UNIQUE_ID_SETTINGS_FEED = 93,
	MENU_UNIQUE_ID_GALLERY_OPTIONS = 94,
	MENU_UNIQUE_ID_GALLERY_OPTIONS_LIST = 95,
	MENU_UNIQUE_ID_BRIGHTNESS_CALIBRATION = 96,
	MENU_UNIQUE_ID_HEADER_TEXT_SELECTION = 97,
	MENU_UNIQUE_ID_LOBBY_LIST = 98,
	MENU_UNIQUE_ID_LOBBY_LIST_ITEM = 99,
	MENU_UNIQUE_ID_HEADER_CORONA = 100,
	MENU_UNIQUE_ID_HEADER_CORONA_LOBBY = 101,
	MENU_UNIQUE_ID_HEADER_CORONA_JOINED_PLAYERS = 102,
	MENU_UNIQUE_ID_HEADER_CORONA_INVITE_PLAYERS = 103,
	MENU_UNIQUE_ID_HEADER_CORONA_INVITE_FRIENDS = 104,
	MENU_UNIQUE_ID_HEADER_CORONA_INVITE_CREWS = 105,
	MENU_UNIQUE_ID_CORONA_JOINED_PLAYERS = 106,
	MENU_UNIQUE_ID_CORONA_INVITE_PLAYERS = 107,
	MENU_UNIQUE_ID_CORONA_INVITE_FRIENDS = 108,
	MENU_UNIQUE_ID_CORONA_INVITE_CREWS = 109,
	MENU_UNIQUE_ID_SETTINGS_FACEBOOK = 110,
	MENU_UNIQUE_ID_HEADER_JOINING_SCREEN = 111,
	MENU_UNIQUE_ID_CORONA_SETTINGS_LIST = 112,
	MENU_UNIQUE_ID_CORONA_DETAILS_LIST = 113,
	MENU_UNIQUE_ID_CORONA_INVITE_LIST = 114,
	MENU_UNIQUE_ID_CORONA_JOINED_LIST = 115,
	MENU_UNIQUE_ID_HEADER_CORONA_INVITE_MATCHED_PLAYERS = 116,
	MENU_UNIQUE_ID_HEADER_CORONA_INVITE_LAST_JOB_PLAYERS = 117,
	MENU_UNIQUE_ID_CORONA_INVITE_MATCHED_PLAYERS = 118,
	MENU_UNIQUE_ID_CORONA_INVITE_LAST_JOB_PLAYERS = 119,
	MENU_UNIQUE_ID_CREW_LEADERBOARDS = 120,
	MENU_UNIQUE_ID_HOME_OPEN_JOBS = 121,
	MENU_UNIQUE_ID_CREW_REQUEST = 122,
	MENU_UNIQUE_ID_HEADER_RACE = 123,
	MENU_UNIQUE_ID_RACE_INFO = 124,
	MENU_UNIQUE_ID_RACE_INFOLIST = 125,
	MENU_UNIQUE_ID_RACE_LOBBYLIST = 126,
	MENU_UNIQUE_ID_HEADER_BETTING = 127,
	MENU_UNIQUE_ID_BETTING = 128,
	MENU_UNIQUE_ID_BETTING_INFOLIST = 129,
	MENU_UNIQUE_ID_BETTING_LOBBYLIST = 130,
	MENU_UNIQUE_ID_INCEPT_TRIGGER = 131,
	MENU_UNIQUE_ID_SETTINGS_SIXAXIS = 132,
	MENU_UNIQUE_ID_REPLAY_RANDOM = 133,
	MENU_UNIQUE_ID_CUTSCENE_EMPTY = 134,
	MENU_UNIQUE_ID_HOME_NEWSWIRE = 135,
	MENU_UNIQUE_ID_SETTINGS_CAMERA = 136,
	MENU_UNIQUE_ID_SETTINGS_GRAPHICS = 137,
	MENU_UNIQUE_ID_SETTINGS_ADVANCED_GFX = 138,
	MENU_UNIQUE_ID_SETTINGS_VOICE_CHAT = 139,
	MENU_UNIQUE_ID_SETTINGS_MISC_CONTROLS = 140,
	MENU_UNIQUE_ID_HELP = 141,
	MENU_UNIQUE_ID_MOVIE_EDITOR = 142,
	MENU_UNIQUE_ID_EXIT_TO_WINDOWS = 143,
	MENU_UNIQUE_ID_HEADER_LANDING_PAGE = 144,
	MENU_UNIQUE_ID_SHOW_ACCOUNT_PICKER = 145,
	MENU_UNIQUE_ID_SETTINGS_REPLAY = 146,
	MENU_UNIQUE_ID_REPLAY_EDITOR = 147,
	MENU_UNIQUE_ID_KEYMAP = 148,
	MENU_UNIQUE_ID_KEYMAP_LIST = 149,
	MENU_UNIQUE_ID_KEYMAP_LISTITEM = 150,
	MENU_UNIQUE_ID_SETTINGS_FIRST_PERSON = 151,
	MENU_UNIQUE_ID_HEADER_LANDING_KEYMAPPING = 152,
	MENU_UNIQUE_ID_PROCESS_SAVEGAME = 153,
	MENU_UNIQUE_ID_PROCESS_SAVEGAME_LIST = 154,
	MENU_UNIQUE_ID_IMPORT_SAVEGAME = 155,
};

enum eMenuScreenBits
{
	NotDimmable = 0,
	_0xC761E094 = 1,
	Input_NoBack = 2,
	Input_NoBackIfNavigating = 3,
	Input_NoTabChange = 4,
	Sound_NoAccept = 5,
	AlwaysUseButtons = 6,
	SF_NoClearRootColumns = 7,
	SF_NoChangeLayout = 8,
	SF_NoMenuAdvance = 9,
	SF_CallImmediately = 10,
	NeverGenerateMenuData = 11,
	LayoutChangedOnBack = 12,
	HandlesDisplayDataSlot = 13,
	EnterMenuOnMouseClick = 14,
};

enum eMenuScrollBits
{
	Width_1 = 0,
	Width_2 = 1,
	Width_3 = 2,
	InitiallyVisible = 3,
	InitiallyInvisible = 4,
	ManualUpdate = 5,
	_0x7BD658BA = 6,
	_0x8DBB70A4 = 7,
	Arrows_LeftRight = 8,
	Arrows_UpDown = 9,
	_0xD5AAB635 = 10,
	Align_Right = 11,
	_0xA8B82876 = 12,
	_0x411934E2 = 13,
	Offset_1Right = 14,
	Offset_2Right = 15,
};

enum eMenuVersionBits
{
	kRenderMenusInitially = 0,
	kNoBackground = 1,
	kFadesIn = 2,
	kGeneratesMenuData = 3,
	kNoPlayerInfo = 4,
	kNoHeaderText = 5,
	kMenuSectionJump = 6,
	kNoSwitchDelay = 7,
	kNoTabChangeWhileLocked = 8,
	kNoTabChange = 9,
	kAllowBackingOut = 10,
	kAllowStartButton = 11,
	kNotDimmable = 12,
	kAllHighlighted = 13,
	kHideHeaders = 14,
	kTabsAreColumns = 15,
	kForceButtonRender = 16,
	kForceProcessInput = 17,
	kAutoShiftDepth = 18,
	kNoTimeWarp = 19,
	kCanHide = 20,
	kUseAlternateContentPos = 21,
	kNoPeds = 22,
	kAllowBackingOutInMenu = 23,
	kDelayAudioUntilUnsuppressed = 24,
};

enum eModKitType
{
	MKT_STANDARD = 0,
	MKT_SPORT = 1,
	MKT_SUV = 2,
	MKT_SPECIAL = 3,
};

enum ePackFileMetaDataAssetType
{
	AT_TXD = 0,
	AT_DRB = 1,
	AT_DWD = 2,
	AT_FRG = 3,
};

enum ePackFileMetaDataImapGroupType
{
	TIME_DEPENDENT = 0,
	WEATHER_DEPENDENT = 1,
};

enum ePedCompFlags
{
	_0x346F12F7 = 0,
	_0x45E44013 = 1,
	_0x938A67D9 = 2,
	_0x6E3AB450 = 4,
	_0xA97CEFF9 = 8,
	_0xB67FFD73 = 16,
	_0x124B1775 = 32,
	_0xA68D84D6 = 64,
	_0xE21085EE = 128,
	_0xFBBA4CA4 = 256,
	_0x7000FA24 = 512,
	_0x197852FB = 1024,
	_0x7A0F9202 = 2048,
	_0xCA474120 = 4096,
	_0xE11C6DEB = 8192,
	_0x7A6BCF43 = 16384,
	_0xF3722E1A = 32768,
	_0xC7DAB967 = 65536,
	_0x439B7D5A = 131072,
	_0x3B810595 = 262144,
	_0xE39AA55C = 524288,
	_0x93011E75 = 1048576,
};

enum ePedConfigFlags
{
	_0x67D1A445 = 0,
	_0xC63DE95E = 1,
	_0x10C8FCF4 = 2,
	_0x3F4E1EF9 = 3,
	_0x45C7EF55 = 4,
	_0x37D196F4 = 5,
	_0xE2462399 = 6,
	_0xA5C10A5B = 7,
	_0xEDDEB838 = 8,
	_0xB398B6FD = 9,
	_0xF6664E68 = 10,
	_0xA05E7CA3 = 11,
	_0xCE394045 = 12,
	_0xDAC18782 = 13,
	_0xCD8D1411 = 14,
	_0xB031F1A9 = 15,
	_0xFE65BEE3 = 16,
	_0x7C5CDA78 = 17,
	_0x380165BD = 18,
	_0x07C045C7 = 19,
	_0x583B5E2D = 20,
	_0x475EDA58 = 21,
	_0x8629D05B = 22,
	_0x1522968B = 23,
	_0x8DD4A91B = 24,
	_0x4CC09C4B = 25,
	_0x034F3053 = 26,
	_0xD91BA7CC = 27,
	_0x5C8DC66E = 28,
	_0x8902EAA0 = 29,
	_0x6580B9D2 = 30,
	_0x0EF7A297 = 31,
	_0x6BF86E5B = 32,
	_0x6FFA3617 = 33,
	CPED_CONFIG_FLAG_HasHelmet = 34,
	CPED_CONFIG_FLAG_UseHelmet = 35,
	_0xEEB3D630 = 36,
	_0xB130D17B = 37,
	_0x5F071200 = 38,
	_0xE37223B2 = 39,
	_0xC287AAFF = 40,
	_0x203328CC = 41,
	_0x418671D7 = 42,
	_0xFD8F64D0 = 43,
	_0x5BD84615 = 44,
	_0xEC4A8ACF = 45,
	_0xDB115BFA = 46,
	_0x4132C6F1 = 47,
	_0x25DB1BEE = 48,
	_0xF8E99565 = 49,
	_0xDD17FEE6 = 50,
	_0x7ED9B2C9 = 51,
	_0x655E8618 = 52,
	_0x5A6C1F6E = 53,
	_0xD749FC41 = 54,
	_0x357F63F3 = 55,
	_0xC5E60961 = 56,
	_0x29275C3E = 57,
	CPED_CONFIG_FLAG_IsFiring = 58,
	_0xAE367361 = 59,
	CPED_CONFIG_FLAG_IsStanding = 60,
	_0x74C8A22C = 61,
	CPED_CONFIG_FLAG_InVehicle = 62,
	_0x565B331F = 63,
	_0x0E6334FA = 64,
	CPED_CONFIG_FLAG_IsSwimming = 65,
	_0x39DEDCE7 = 66,
	_0x6370FAB7 = 67,
	_0xD67E8906 = 68,
	_0x480A4DA9 = 69,
	_0x87DE3D8F = 70,
	_0x7FE0A315 = 71,
	_0x3E3C4560 = 72,
	_0x2994C7B7 = 73,
	_0x6D59D275 = 74,
	_0xC8C76F01 = 75,
	CPED_CONFIG_FLAG_IsInTheAir = 76,
	_0x2D493FB7 = 77,
	CPED_CONFIG_FLAG_IsAimingGun = 78,
	_0x14D69875 = 79,
	_0x40B05311 = 80,
	_0x8B230BC5 = 81,
	_0xC74E5842 = 82,
	_0x9EA86147 = 83,
	_0x674C746C = 84,
	_0x3E56A8C2 = 85,
	_0xC144A1EF = 86,
	_0x0548512D = 87,
	_0x31C93909 = 88,
	_0xA0269315 = 89,
	_0xD4D59D4D = 90,
	_0x411D4420 = 91,
	_0xDF4AEF0D = 92,
	_0x4829F05D = 93,
	_0x300E4CD3 = 94,
	_0xF1C5BF04 = 95,
	_0x89C2EF13 = 96,
	_0x4C6C60F1 = 97,
	_0x02A852C8 = 98,
	_0x3D9407F1 = 99,
	_0x319B4558 = 100,
	CPED_CONFIG_FLAG_ForcedAim = 101,
	_0xB942D71A = 102,
	_0xD26C55A8 = 103,
	_0xB89E703B = 104,
	CPED_CONFIG_FLAG_ForceReload = 105,
	_0xD9E73DA2 = 106,
	_0xFF71DC2C = 107,
	_0x1E27E8D8 = 108,
	_0xF2C53966 = 109,
	_0xC4DBE247 = 110,
	_0x83C0A4BF = 111,
	_0x0E0FAF8C = 112,
	_0x26616660 = 113,
	_0x43B80B79 = 114,
	_0x0D2A9309 = 115,
	_0x12C1C983 = 116,
	_0x9133ADB4 = 117,
	_0xE586D504 = 118,
	_0x52374204 = 119,
	_0x71200390 = 120,
	_0xD0468445 = 121,
	CPED_CONFIG_FLAG_DisableMelee = 122,
	_0xFE714397 = 123,
	_0xB3E660BD = 124,
	_0x5FED6BFD = 125,
	_0xC9D6F66F = 126,
	_0x519BC986 = 127,
	_0xAA2C79F8 = 128,
	_0x9A4B617C = 129,
	_0xDAB70E9F = 130,
	_0xE569438A = 131,
	_0xBBC77D6D = 132,
	_0xCB59EF0F = 133,
	_0x8C5EA971 = 134,
	CPED_CONFIG_FLAG_IsScuba = 135,
	CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
	_0xDCE59B58 = 137,
	_0xA357662A = 138,
	_0x1B0E60AA = 139,
	_0xA7BF6E3A = 140,
	_0x98A4BE43 = 141,
	_0x6901E731 = 142,
	_0x9EC9BF6C = 143,
	_0x42841A8F = 144,
	_0x0C8BE027 = 145,
	_0xECB2B358 = 146,
	_0x06FE006D = 147,
	CPED_CONFIG_FLAG_SlopeDetected = 148,
	_0x1A15670B = 149,
	_0x61786EE5 = 150,
	_0xCB9186BD = 151,
	_0xF0710152 = 152,
	_0x43DFE310 = 153,
	_0xC43C624E = 154,
	_0x9FB4A2D7 = 155,
	_0x49DFFCC6 = 156,
	CPED_CONFIG_FLAG_CanBeArrested = 157,
	_0xF7960FF5 = 158,
	_0x59564113 = 159,
	_0x0C6C3099 = 160,
	_0x645F927A = 161,
	_0xA86549B9 = 162,
	_0x8AAF337A = 163,
	_0x13BAA6E7 = 164,
	_0x5FB9D1F5 = 165,
	CPED_CONFIG_FLAG_IsInjured = 166,
	_0x6398A20B = 167,
	_0xD8072639 = 168,
	_0xA05B1845 = 169,
	_0x83F6D220 = 170,
	_0xD8430331 = 171,
	_0x4B547520 = 172,
	_0xE66E1406 = 173,
	_0x1C4BFE0C = 174,
	_0x90008BFA = 175,
	_0x07C7A910 = 176,
	_0xF15F8191 = 177,
	_0xCE4E8BE2 = 178,
	_0x1D46E4F2 = 179,
	CPED_CONFIG_FLAG_IsInCustody = 180,
	_0xE4FD9B3A = 181,
	_0x67AE0812 = 182,
	CPED_CONFIG_FLAG_IsAgitated = 183,
	_0x5282BBDC = 184,
	_0x7B2D325E = 185,
	_0x7946E88B = 186,
	_0x58F3038B = 187,
	_0xCA51A297 = 188,
	_0xDC497075 = 189,
	_0x32FC208B = 190,
	_0x0C296E5A = 191,
	_0xE63B73EC = 192,
	_0x04E9CC80 = 193,
	CPED_CONFIG_FLAG_UsingScenario = 194,
	CPED_CONFIG_FLAG_VisibleOnScreen = 195,
	_0xD88C58A1 = 196,
	_0x5A3DCF43 = 197,
	_0xEA02B420 = 198,
	_0x3F559CFF = 199,
	_0x8C55D029 = 200,
	_0x5E6466F6 = 201,
	_0xEB5AD706 = 202,
	_0x0EDDDDE7 = 203,
	_0xA64F7B1D = 204,
	_0x48532CBA = 205,
	_0xAA25A9E7 = 206,
	_0x415B26B9 = 207,
	_0xA79F36A1 = 208,
	_0xD20738F0 = 209,
	_0x67405504 = 210,
	_0x75DDD68C = 211,
	_0x2AD879B4 = 212,
	_0x51486F91 = 213,
	_0x32F79E21 = 214,
	_0xBF099213 = 215,
	_0x054AC8E2 = 216,
	_0x14E495CC = 217,
	_0x3C7DF9DF = 218,
	_0x848FFEF2 = 219,
	_0x8AF66820 = 220,
	_0x2618E1CF = 221,
	_0x84F722FA = 222,
	_0xD1B87B1F = 223,
	_0x728AA918 = 224,
	CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
	_0x9E318375 = 226,
	_0x59E91185 = 227,
	_0x1EA7225F = 228,
	_0xE4B37BD5 = 229,
	_0x6DCA7D88 = 230,
	_0xFC3E572D = 231,
	_0x08E9F9CF = 232,
	_0x2D3BA52D = 233,
	_0xFD2F53EA = 234,
	_0x31A1B03B = 235,
	_0x6A6F5885 = 236,
	_0x82ED0A66 = 237,
	_0xCE57C9A3 = 238,
	_0x26149198 = 239,
	_0x1B33B598 = 240,
	_0x719B6E87 = 241,
	_0x13E8E8E8 = 242,
	_0xF29739AE = 243,
	_0xABEA8A74 = 244,
	_0xB60EA2BA = 245,
	_0x536B0950 = 246,
	_0x0C754ACA = 247,
	_0x69D28F3E = 248,
	_0x12659168 = 249,
	_0x1BDF2F04 = 250,
	_0x7728FAA3 = 251,
	_0x6A807ED8 = 252,
	CPED_CONFIG_FLAG_OnStairs = 253,
	_0xE1A2F73F = 254,
	_0x5B3697C8 = 255,
	_0xF1EB20A9 = 256,
	_0x8B7DF407 = 257,
	_0x329DCF1A = 258,
	_0x8D90DD1B = 259,
	_0xB8A292B7 = 260,
	_0x8374B087 = 261,
	_0x2AF558F0 = 262,
	_0x82251455 = 263,
	_0x30CF498B = 264,
	_0xE1CD50AF = 265,
	_0x72E4AE48 = 266,
	_0xC2657EA1 = 267,
	_0x29FF6030 = 268,
	_0x8248A5EC = 269,
	_0xD9B50DA1 = 270,
	_0xA0897933 = 271,
	_0x7371F10D = 272,
	_0xCFB4DD04 = 273,
	_0xF7823618 = 274,
	_0xDC305CCE = 275,
	CPED_CONFIG_FLAG_EdgeDetected = 276,
	_0x92B67896 = 277,
	_0xCAD677C9 = 278,
	_0xDC0153CC = 279,
	_0x5276AC7B = 280,
	_0x1032692A = 281,
	_0xDA23E7F1 = 282,
	_0x9139724D = 283,
	_0xA1457461 = 284,
	_0x4186E095 = 285,
	_0xAC68E2EB = 286,
	_0x0AA08AF1 = 287,
	CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
	_0x1B9EE8A1 = 289,
	_0xF3F5758C = 290,
	_0x2A9307F1 = 291,
	_0x7403D216 = 292,
	_0xA06A3C6C = 293,
	_0x3441E7FB = 294,
	_0xF8DA25A5 = 295,
	_0x7EF55802 = 296,
	_0xB31F1187 = 297,
	_0x84315402 = 298,
	_0x0FD69867 = 299,
	_0xC7829B67 = 300,
	_0x02614D67 = 301,
	_0x6D23CF25 = 302,
	_0x2ADA871B = 303,
	_0x47BC8A58 = 304,
	_0xEB692FA5 = 305,
	_0x4A133C50 = 306,
	_0xC58099C3 = 307,
	_0xF3D76D41 = 308,
	_0xB0EEE9F2 = 309,
	_0xCD053ECC = 310,
	_0x0FA153EF = 311,
	_0xD73F5CD3 = 312,
	_0xD4136C22 = 313,
	_0xE404CA6B = 314,
	_0xB9597446 = 315,
	_0xD5C98277 = 316,
	_0xD5060A9C = 317,
	_0x3E5F1CBB = 318,
	_0xD8BE1D54 = 319,
	_0x0B1F191F = 320,
	_0xC995167A = 321,
	_0x9F6BBB44 = 322,
	_0x86B01E54 = 323,
	_0x3A56FE15 = 324,
	_0xC03B736C = 325,
	_0xBBF47729 = 326,
	_0x22B668A8 = 327,
	_0x2624D4D4 = 328,
	_0x474D3B88 = 329,
	_0xC910ACF6 = 330,
	CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
	_0x630F55F3 = 332,
	_0x150468FD = 333,
	_0x914EBD6B = 334,
	_0x79AF3B6D = 335,
	_0x75C7A632 = 336,
	_0x52D530E2 = 337,
	_0xDB2A90E0 = 338,
	_0x5922763D = 339,
	_0x12ADB567 = 340,
	_0x105C8518 = 341,
	_0x106F703D = 342,
	_0xED152C3E = 343,
	_0xA0EFE6A8 = 344,
	_0xBF348C82 = 345,
	_0xCDDFE830 = 346,
	_0x7B59BD9B = 347,
	_0x0124C788 = 348,
	_0xD10B5122 = 349,
	_0x08D361A5 = 350,
	_0xE13D1F7C = 351,
	_0x40E25FB9 = 352,
	_0x930629D9 = 353,
	_0xECCF0C7F = 354,
	_0xB6E9613B = 355,
	_0x490C0478 = 356,
	_0xE8865BEA = 357,
	_0xF3C34A29 = 358,
	_0x526A4485 = 359,
	_0xF660E115 = 360,
	_0xAB0E6DED = 361,
	_0xE56CCAA3 = 362,
	_0x7318E605 = 363,
	_0x5C5D9CD3 = 364,
	_0x8F7701F3 = 365,
	_0xBC4436AD = 366,
	_0xD7E07D37 = 367,
	_0x03C4FD24 = 368,
	_0x7675789A = 369,
	_0xB7288A88 = 370,
	_0xC06B6291 = 371,
	_0x95A4A805 = 372,
	_0xA8E9A042 = 373,
	_0xCB45361C = 374,
	_0xBAC674B3 = 375,
	_0x147F1FFB = 376,
	_0x4376DD79 = 377,
	_0xCD3DB518 = 378,
	_0xFE4BA4B6 = 379,
	_0x5DF03A55 = 380,
	_0xBCD816CD = 381,
	_0xCF02DD69 = 382,
	_0xF73AFA2E = 383,
	_0x80B9A9D0 = 384,
	_0xF601F7EE = 385,
	_0xA91350FC = 386,
	_0x3AB23B96 = 387,
	_0x6300E941 = 388,
	_0x1C389EAC = 389,
	_0xB4B1CD4C = 390,
	_0x5459AFB8 = 391,
	_0x54F27667 = 392,
	_0xC11D3E8F = 393,
	_0x5419EB3E = 394,
	_0x82D8DBB4 = 395,
	_0x33B02D2F = 396,
	_0xAE66176D = 397,
	_0xA2692593 = 398,
	_0x714C7E31 = 399,
	_0xEC488AC7 = 400,
	_0xAE398504 = 401,
	_0xABC58D72 = 402,
	_0x5E5B9591 = 403,
	_0x6BA1091E = 404,
	_0x77840177 = 405,
	_0x1C7ACAC4 = 406,
	_0x124420E9 = 407,
	_0x75A65587 = 408,
	_0xDFD2D55B = 409,
	_0xBDD39919 = 410,
	_0x43DEC267 = 411,
	_0xE42B7797 = 412,
	_0x168C7F47 = 413,
	_0x4F8149F5 = 414,
	_0xDD9ECA7A = 415,
	_0x9E7EF9D2 = 416,
	_0x2C6ED942 = 417,
	_0xEAC4F3CD = 418,
	_0xA488727D = 419,
	_0xCFF5F6DE = 420,
	_0x6D614599 = 421,
	_0x36B5E755 = 422,
	_0xFE401D26 = 423,
	_0xB2EC0FEB = 424,
	_0x2B42AE82 = 425,
	_0x7A95734F = 426,
	_0xDF4D8617 = 427,
	_0x578F1F14 = 428,
	_0x6E9CB79B = 429,
	_0x5F504094 = 430,
	_0x153C9500 = 431,
	_0xCB7A632E = 432,
	_0xDE727981 = 433,
	_0xD27E4F86 = 434,
	_0x12BBB935 = 435,
	_0xAD0A1277 = 436,
	_0xEA6AA46A = 437,
	_0xD5DB4BDA = 438,
	_0xCB7F3A1E = 439,
	_0x50178878 = 440,
	_0x051B4F0D = 441,
	_0x2FC3DECC = 442,
	_0xC0030B0B = 443,
	_0xBBDAF1E9 = 444,
	_0x944FE59C = 445,
	_0x506FBA39 = 446,
	_0xDD45FE84 = 447,
	_0xE698AE75 = 448,
	_0x199633F8 = 449,
	_0xEA5A97AA = 450,
	_0x7786019F = 451,
	_0x3A251D83 = 452,
	_0xA56F6986 = 453,
	_0x1D19C622 = 454,
	_0xB68D3EAB = 455,
	_0x96EFB9BC = 456,
	_0x4BD5EBAD = 457,
	_0xFCC5EBC5 = 458,
	_0x4376ABF2 = 459,
};

enum ePedDamageZones
{
	kDamageZoneTorso = 0,
	kDamageZoneHead = 1,
	kDamageZoneLeftArm = 2,
	kDamageZoneRightArm = 3,
	kDamageZoneLeftLeg = 4,
	kDamageZoneRightLeg = 5,
};

enum ePedDecorationType
{
	TYPE_TATTOO = 0,
	TYPE_BADGE = 1,
	TYPE_MEDAL = 2,
	TYPE_INVALID = 3,
};

enum ePedDecorationZone
{
	ZONE_TORSO = 0,
	ZONE_HEAD = 1,
	ZONE_LEFT_ARM = 2,
	ZONE_RIGHT_ARM = 3,
	ZONE_LEFT_LEG = 4,
	ZONE_RIGHT_LEG = 5,
	ZONE_MEDALS = 6,
	ZONE_INVALID = 7,
};

enum ePedRadioGenre
{
	RADIO_GENRE_OFF = 0,
	RADIO_GENRE_MODERN_ROCK = 1,
	RADIO_GENRE_CLASSIC_ROCK = 2,
	RADIO_GENRE_POP = 3,
	RADIO_GENRE_MODERN_HIPHOP = 4,
	RADIO_GENRE_CLASSIC_HIPHOP = 5,
	RADIO_GENRE_PUNK = 6,
	RADIO_GENRE_LEFT_WING_TALK = 7,
	RADIO_GENRE_RIGHT_WING_TALK = 8,
	RADIO_GENRE_COUNTRY = 9,
	RADIO_GENRE_DANCE = 10,
	RADIO_GENRE_MEXICAN = 11,
	RADIO_GENRE_REGGAE = 12,
	RADIO_GENRE_JAZZ = 13,
	RADIO_GENRE_MOTOWN = 14,
	RADIO_GENRE_SURF = 15,
	RADIO_GENRE_UNSPECIFIED = 16,
};

enum ePedVarComp
{
	PV_COMP_INVALID = 4294967295,
	PV_COMP_HEAD = 0,
	PV_COMP_BERD = 1,
	PV_COMP_HAIR = 2,
	PV_COMP_UPPR = 3,
	PV_COMP_LOWR = 4,
	PV_COMP_HAND = 5,
	PV_COMP_FEET = 6,
	PV_COMP_TEEF = 7,
	PV_COMP_ACCS = 8,
	PV_COMP_TASK = 9,
	PV_COMP_DECL = 10,
	PV_COMP_JBIB = 11,
	PV_COMP_MAX = 12,
};

enum ePedVehicleTypes
{
	PED_DRIVES_POOR_CAR = 0,
	PED_DRIVES_AVERAGE_CAR = 1,
	PED_DRIVES_RICH_CAR = 2,
	PED_DRIVES_BIG_CAR = 3,
	PED_DRIVES_MOTORCYCLE = 4,
	PED_DRIVES_BOAT = 5,
};

enum ePopGroupFlags
{
	POPGROUP_IS_GANG = 0,
	POPGROUP_AMBIENT = 1,
	POPGROUP_SCENARIO = 2,
	POPGROUP_RARE = 3,
	POPGROUP_NETWORK_COMMON = 4,
	POPGROUP_AERIAL = 5,
	POPGROUP_AQUATIC = 6,
	POPGROUP_WILDLIFE = 7,
	POPGROUP_IN_VEHICLE = 8,
};

enum ePropRenderFlags
{
	PRF_ALPHA = 0,
	PRF_DECAL = 1,
	PRF_CUTOUT = 2,
};

enum ePushType
{
	kPushRadialU = 0,
	kPushSine = 1,
	_0x66744256 = 2,
};

enum eRagdollBlockingFlags
{
	RBF_BULLET_IMPACT = 0,
	RBF_VEHICLE_IMPACT = 1,
	RBF_FIRE = 2,
	RBF_ELECTROCUTION = 3,
	RBF_PLAYER_IMPACT = 4,
	RBF_EXPLOSION = 5,
	RBF_IMPACT_OBJECT = 6,
	RBF_MELEE = 7,
	RBF_RUBBER_BULLET = 8,
	RBF_FALLING = 9,
	RBF_WATER_JET = 10,
	RBF_DROWNING = 11,
	_0x9F52E2C4 = 12,
	RBF_PLAYER_BUMP = 13,
	RBF_PLAYER_RAGDOLL_BUMP = 14,
	RBF_PED_RAGDOLL_BUMP = 15,
	RBF_VEHICLE_GRAB = 16,
	RBF_SMOKE_GRENADE = 17,
};

enum eRagdollType
{
	RD_MALE = 0,
	RD_FEMALE = 1,
	RD_MALE_LARGE = 2,
	RD_CUSTOM = 3,
};

enum eRandomEventType
{
	ET_INVALID = 4294967295,
	ET_CRIME = 0,
	ET_JAYWALKING = 1,
	ET_COP_PURSUIT = 2,
	ET_SPAWNED_COP_PURSUIT = 3,
	ET_AMBIENT_COP = 4,
	ET_INTERESTING_DRIVER = 5,
	ET_AGGRESSIVE_DRIVER = 6,
};

enum eReportLink
{
	ReportLink_None = 0,
	ReportLink_ReportRoot = 1,
	ReportLink_PlayerMadeMissions = 2,
	ReportLink_Crew = 3,
	ReportLink_Confirmation = 4,
	_0x7668E184 = 5,
	ReportLink_Successful = 6,
	ReportLink_CommendRoot = 7,
	ReportLink_UGCReportRoot = 8,
	ReportLink_Content = 9,
	ReportLink_Other = 10,
};

enum eReportType
{
	ReportType_None = 0,
	ReportType_Griefing = 1,
	ReportType_OffensiveLanguage = 2,
	ReportType_OffensiveLicensePlate = 3,
	ReportType_Exploit = 4,
	ReportType_GameExploit = 5,
	ReportType_OffensiveUGC = 6,
	ReportType_Other = 7,
	ReportType_OffensiveCrewName = 8,
	ReportType_OffensiveCrewMotto = 9,
	ReportType_OffensiveCrewStatus = 10,
	ReportType_OffensiveCrewEmblem = 11,
	ReportType_PlayerMade_Title = 12,
	ReportType_PlayerMade_Description = 13,
	ReportType_PlayerMade_Photo = 14,
	ReportType_PlayerMade_Content = 15,
	ReportType_VoiceChat_Annoying = 16,
	ReportType_VoiceChat_Hate = 17,
	ReportType_TextChat_Annoying = 18,
	ReportType_TextChat_Hate = 19,
	ReportType_Friendly = 20,
	ReportType_Helpful = 21,
};

enum eScenarioActionType
{
	eScenarioActionFlee = 0,
	eScenarioActionHeadTrack = 1,
	_0x79E25F7D = 2,
	eScenarioActionCowardExit = 3,
	eScenarioActionShockReaction = 4,
	eScenarioActionThreatResponseExit = 5,
	eScenarioActionCombatExit = 6,
};

enum eScenarioPopStreamingSlot
{
	SCENARIO_POP_STREAMING_NORMAL = 0,
	SCENARIO_POP_STREAMING_SMALL = 1,
};

enum eScriptedAnimFlags
{
	_0x29214179 = 0,
	_0x1C2B3196 = 1,
	_0xDE379C5E = 2,
	_0xCC5C6615 = 3,
	_0xE2256170 = 4,
	_0x083BF689 = 5,
	_0xA6DCEB00 = 6,
	_0x00D0D019 = 7,
	_0x5582749F = 8,
	_0x53FDCDC4 = 9,
	_0x682410DB = 10,
	_0x419B8906 = 11,
	_0xB46C05A7 = 12,
	_0x4D9A4FC0 = 13,
	_0x417B4150 = 14,
	_0x5A43CD67 = 15,
	_0x7A37E4A6 = 16,
	_0xE735397D = 17,
	_0x747F9257 = 18,
	_0x3A00B430 = 19,
	_0xA0ACB203 = 20,
	_0x666A7AB1 = 21,
	_0x3C46AE1C = 22,
	_0x33BC580B = 23,
	_0x82BA7305 = 24,
	_0x8DDBF2A4 = 25,
	_0xE2783BE9 = 26,
	_0xC3DD88B5 = 27,
	_0x902A123D = 28,
	_0x3F7125DA = 29,
	_0x494A9410 = 30,
};

enum eSettingsManagerConfig
{
	SMC_AUTO = 0,
	SMC_DEMO = 1,
	SMC_FIXED = 2,
	SMC_SAFE = 3,
	SMC_MEDIUM = 4,
	SMC_UNKNOWN = 5,
};

enum eSexinessFlags
{
	SF_JEER_AT_HOT_PED = 0,
	SF_HURRIEDFEMALES_SEXY = 1,
	SF_HOT_PERSON = 2,
};

enum eShopEnum
{
	CLO_SHOP_LOW = 0,
	CLO_SHOP_MID = 1,
	CLO_SHOP_HIGH = 2,
	CLO_SHOP_GUN_LARGE = 3,
	CLO_SHOP_GUN_SMALL = 4,
	CLO_SHOP_AMB = 5,
	CLO_SHOP_CASINO = 6,
	CLO_SHOP_CAR_MEET = 7,
	_0xB5BCC72E = 8,
	CLO_SHOP_MUSIC_STUDIO = 9,
	CLO_SHOP_NONE = 10,
};

enum eStreamingPolicy
{
	SP_STREAMING = 0,
	SP_SINGLEPLAYER_RESIDENT = 1,
	SP_MULTIPLAYER_RESIDENT = 2,
};

enum eStreamingPriority
{
	SP_Variation = 0,
	SP_Low = 1,
	SP_Medium = 2,
	SP_High = 3,
};

enum eSuperlodType
{
	SLOD_HUMAN = 0,
	SLOD_SMALL_QUADPED = 1,
	SLOD_LARGE_QUADPED = 2,
	SLOD_NULL = 3,
	SLOD_KEEP_LOWEST = 4,
};

enum eSwankness
{
	SWANKNESS_0 = 0,
	SWANKNESS_1 = 1,
	SWANKNESS_2 = 2,
	SWANKNESS_3 = 3,
	SWANKNESS_4 = 4,
	SWANKNESS_5 = 5,
};

enum eSystemType
{
	SYSTEM_TYPE_DROP = 0,
	SYSTEM_TYPE_MIST = 1,
	SYSTEM_TYPE_GROUND = 2,
};

enum eTattooFacing
{
	TATTOO_FRONT = 0,
	TATTOO_BACK = 1,
	TATTOO_LEFT = 2,
	TATTOO_RIGHT = 3,
	TATTOO_FRONT_LEFT = 4,
	TATTOO_BACK_LEFT = 5,
	TATTOO_FRONT_RIGHT = 6,
	TATTOO_BACK_RIGHT = 7,
};

enum eTattooFaction
{
	TATTOO_SP_MICHAEL = 0,
	TATTOO_SP_FRANKLIN = 1,
	TATTOO_SP_TREVOR = 2,
	TATTOO_MP_FM = 3,
	TATTOO_MP_FM_F = 4,
};

enum eVehicleClass
{
	VC_COMPACT = 0,
	VC_SEDAN = 1,
	VC_SUV = 2,
	VC_COUPE = 3,
	VC_MUSCLE = 4,
	VC_SPORT_CLASSIC = 5,
	VC_SPORT = 6,
	VC_SUPER = 7,
	VC_MOTORCYCLE = 8,
	VC_OFF_ROAD = 9,
	VC_INDUSTRIAL = 10,
	VC_UTILITY = 11,
	VC_VAN = 12,
	VC_CYCLE = 13,
	VC_BOAT = 14,
	VC_HELICOPTER = 15,
	VC_PLANE = 16,
	VC_SERVICE = 17,
	VC_EMERGENCY = 18,
	VC_MILITARY = 19,
	VC_COMMERCIAL = 20,
	VC_RAIL = 21,
	VC_OPEN_WHEEL = 22,
};

enum eVehicleDashboardType
{
	VDT_BANSHEE = 0,
	VDT_BOBCAT = 1,
	VDT_CAVALCADE = 2,
	VDT_COMET = 3,
	VDT_DUKES = 4,
	VDT_FACTION = 5,
	VDT_FELTZER = 6,
	VDT_FEROCI = 7,
	VDT_FUTO = 8,
	VDT_GENTAXI = 9,
	VDT_MAVERICK = 10,
	VDT_PEYOTE = 11,
	VDT_RUINER = 12,
	VDT_SPEEDO = 13,
	VDT_SULTAN = 14,
	VDT_SUPERGT = 15,
	VDT_TAILGATER = 16,
	VDT_TRUCK = 17,
	VDT_TRUCKDIGI = 18,
	VDT_INFERNUS = 19,
	VDT_ZTYPE = 20,
	VDT_LAZER = 21,
	VDT_SPORTBK = 22,
	VDT_RACE = 23,
	VDT_LAZER_VINTAGE = 24,
	_0xB2851A2D = 25,
};

enum eVehicleFlags
{
	_0x435D5F08 = 0,
};

enum eVehicleModCameraPos
{
	VMCP_DEFAULT = 0,
	VMCP_FRONT = 1,
	VMCP_FRONT_LEFT = 2,
	VMCP_FRONT_RIGHT = 3,
	VMCP_REAR = 4,
	VMCP_REAR_LEFT = 5,
	VMCP_REAR_RIGHT = 6,
	VMCP_LEFT = 7,
	VMCP_RIGHT = 8,
	VMCP_TOP = 9,
	VMCP_BOTTOM = 10,
};

enum eVehicleModType
{
	VMT_SPOILER = 0,
	VMT_BUMPER_F = 1,
	VMT_BUMPER_R = 2,
	VMT_SKIRT = 3,
	VMT_EXHAUST = 4,
	VMT_CHASSIS = 5,
	VMT_GRILL = 6,
	VMT_BONNET = 7,
	VMT_WING_L = 8,
	VMT_WING_R = 9,
	VMT_ROOF = 10,
	VMT_PLTHOLDER = 11,
	VMT_PLTVANITY = 12,
	VMT_INTERIOR1 = 13,
	VMT_INTERIOR2 = 14,
	VMT_INTERIOR3 = 15,
	VMT_INTERIOR4 = 16,
	VMT_INTERIOR5 = 17,
	VMT_SEATS = 18,
	VMT_STEERING = 19,
	VMT_KNOB = 20,
	VMT_PLAQUE = 21,
	VMT_ICE = 22,
	VMT_TRUNK = 23,
	VMT_HYDRO = 24,
	VMT_ENGINEBAY1 = 25,
	VMT_ENGINEBAY2 = 26,
	VMT_ENGINEBAY3 = 27,
	VMT_CHASSIS2 = 28,
	VMT_CHASSIS3 = 29,
	VMT_CHASSIS4 = 30,
	VMT_CHASSIS5 = 31,
	VMT_DOOR_L = 32,
	VMT_DOOR_R = 33,
	VMT_LIVERY_MOD = 34,
	VMT_LIGHTBAR = 35,
	VMT_ENGINE = 36,
	VMT_BRAKES = 37,
	VMT_GEARBOX = 38,
	VMT_HORN = 39,
	VMT_SUSPENSION = 40,
	VMT_ARMOUR = 41,
	VMT_NITROUS = 42,
	VMT_TURBO = 43,
	VMT_SUBWOOFER = 44,
	VMT_TYRE_SMOKE = 45,
	VMT_HYDRAULICS = 46,
	VMT_XENON_LIGHTS = 47,
	VMT_WHEELS = 48,
	VMT_WHEELS_REAR_OR_HYDRAULICS = 49,
};

enum eVehiclePlateType
{
	VPT_FRONT_AND_BACK_PLATES = 0,
	VPT_FRONT_PLATES = 1,
	VPT_BACK_PLATES = 2,
	VPT_NONE = 3,
};

enum eVehicleScenarioType
{
	UNKNOWN = 0,
	_0x31716F5F = 1,
	_0x75A7FF31 = 2,
	DELIVERY_DRIVER = 3,
	_0x6475CEE9 = 4,
	LEANING = 5,
};

enum eVehicleWheelType
{
	VWT_SPORT = 0,
	VWT_MUSCLE = 1,
	VWT_LOWRIDER = 2,
	VWT_SUV = 3,
	VWT_OFFROAD = 4,
	VWT_TUNER = 5,
	VWT_BIKE = 6,
	VWT_HIEND = 7,
	VWT_SUPERMOD1 = 8,
	VWT_SUPERMOD2 = 9,
	VWT_SUPERMOD3 = 10,
	VWT_SUPERMOD4 = 11,
	VWT_SUPERMOD5 = 12,
};

enum eVfxGroup
{
	VFXGROUP_UNDEFINED = 4294967295,
	VFXGROUP_VOID = 0,
	VFXGROUP_GENERIC = 1,
	VFXGROUP_CONCRETE = 2,
	VFXGROUP_CONCRETE_DUSTY = 3,
	VFXGROUP_TARMAC = 4,
	VFXGROUP_TARMAC_BRITTLE = 5,
	VFXGROUP_STONE = 6,
	VFXGROUP_BRICK = 7,
	VFXGROUP_MARBLE = 8,
	VFXGROUP_PAVING = 9,
	VFXGROUP_SANDSTONE = 10,
	VFXGROUP_SANDSTONE_BRITTLE = 11,
	VFXGROUP_SAND_LOOSE = 12,
	VFXGROUP_SAND_COMPACT = 13,
	VFXGROUP_SAND_WET = 14,
	VFXGROUP_SAND_UNDERWATER = 15,
	VFXGROUP_SAND_DEEP = 16,
	VFXGROUP_SAND_WET_DEEP = 17,
	VFXGROUP_ICE = 18,
	VFXGROUP_SNOW_LOOSE = 19,
	VFXGROUP_SNOW_COMPACT = 20,
	VFXGROUP_GRAVEL = 21,
	VFXGROUP_GRAVEL_DEEP = 22,
	VFXGROUP_DIRT_DRY = 23,
	VFXGROUP_MUD_SOFT = 24,
	VFXGROUP_MUD_DEEP = 25,
	VFXGROUP_MUD_UNDERWATER = 26,
	VFXGROUP_CLAY = 27,
	VFXGROUP_GRASS = 28,
	VFXGROUP_GRASS_SHORT = 29,
	VFXGROUP_HAY = 30,
	VFXGROUP_BUSHES = 31,
	VFXGROUP_TREE_BARK = 32,
	VFXGROUP_LEAVES = 33,
	VFXGROUP_METAL = 34,
	VFXGROUP_WOOD = 35,
	VFXGROUP_WOOD_DUSTY = 36,
	VFXGROUP_WOOD_SPLINTER = 37,
	VFXGROUP_CERAMIC = 38,
	VFXGROUP_CARPET_FABRIC = 39,
	VFXGROUP_CARPET_FABRIC_DUSTY = 40,
	VFXGROUP_PLASTIC = 41,
	VFXGROUP_PLASTIC_HOLLOW = 42,
	VFXGROUP_RUBBER = 43,
	VFXGROUP_LINOLEUM = 44,
	VFXGROUP_PLASTER_BRITTLE = 45,
	VFXGROUP_CARDBOARD = 46,
	VFXGROUP_PAPER = 47,
	VFXGROUP_FOAM = 48,
	VFXGROUP_FEATHERS = 49,
	VFXGROUP_TVSCREEN = 50,
	VFXGROUP_GLASS = 51,
	VFXGROUP_GLASS_BULLETPROOF = 52,
	VFXGROUP_CAR_METAL = 53,
	VFXGROUP_CAR_PLASTIC = 54,
	VFXGROUP_CAR_GLASS = 55,
	VFXGROUP_PUDDLE = 56,
	VFXGROUP_LIQUID_WATER = 57,
	VFXGROUP_LIQUID_BLOOD = 58,
	VFXGROUP_LIQUID_OIL = 59,
	VFXGROUP_LIQUID_PETROL = 60,
	VFXGROUP_LIQUID_MUD = 61,
	VFXGROUP_FRESH_MEAT = 62,
	VFXGROUP_DRIED_MEAT = 63,
	VFXGROUP_PED_HEAD = 64,
	VFXGROUP_PED_TORSO = 65,
	VFXGROUP_PED_LIMB = 66,
	VFXGROUP_PED_FOOT = 67,
	VFXGROUP_PED_CAPSULE = 68,
};

enum eWantedLevel
{
	WANTED_CLEAN = 0,
	WANTED_LEVEL1 = 1,
	WANTED_LEVEL2 = 2,
	WANTED_LEVEL3 = 3,
	WANTED_LEVEL4 = 4,
	WANTED_LEVEL5 = 5,
	WANTED_LEVEL_LAST = 6,
};

enum eWeaponEffectGroup
{
	WEAPON_EFFECT_GROUP_PUNCH_KICK = 0,
	WEAPON_EFFECT_GROUP_MELEE_WOOD = 1,
	WEAPON_EFFECT_GROUP_MELEE_METAL = 2,
	WEAPON_EFFECT_GROUP_MELEE_SHARP = 3,
	WEAPON_EFFECT_GROUP_MELEE_GENERIC = 4,
	WEAPON_EFFECT_GROUP_PISTOL_SMALL = 5,
	WEAPON_EFFECT_GROUP_PISTOL_LARGE = 6,
	WEAPON_EFFECT_GROUP_PISTOL_SILENCED = 7,
	WEAPON_EFFECT_GROUP_RUBBER = 8,
	WEAPON_EFFECT_GROUP_SMG = 9,
	WEAPON_EFFECT_GROUP_SHOTGUN = 10,
	WEAPON_EFFECT_GROUP_RIFLE_ASSAULT = 11,
	WEAPON_EFFECT_GROUP_RIFLE_SNIPER = 12,
	WEAPON_EFFECT_GROUP_ROCKET = 13,
	WEAPON_EFFECT_GROUP_GRENADE = 14,
	WEAPON_EFFECT_GROUP_MOLOTOV = 15,
	WEAPON_EFFECT_GROUP_FIRE = 16,
	WEAPON_EFFECT_GROUP_EXPLOSION = 17,
	WEAPON_EFFECT_GROUP_LASER = 18,
	WEAPON_EFFECT_GROUP_STUNGUN = 19,
	WEAPON_EFFECT_GROUP_HEAVY_MG = 20,
	WEAPON_EFFECT_GROUP_VEHICLE_MG = 21,
};

enum eWeaponWheelSlot
{
	WHEEL_PISTOL = 0,
	WHEEL_SMG = 1,
	WHEEL_RIFLE = 2,
	WHEEL_SNIPER = 3,
	WHEEL_UNARMED_MELEE = 4,
	WHEEL_SHOTGUN = 5,
	WHEEL_HEAVY = 6,
	WHEEL_THROWABLE_SPECIAL = 7,
};

enum manifestFlags
{
	INTERIOR_DATA = 0,
};

enum rage__InputGroup
{
	INPUTGROUP_MOVE = 0,
	INPUTGROUP_LOOK = 1,
	INPUTGROUP_WHEEL = 2,
	INPUTGROUP_CELLPHONE_NAVIGATE = 3,
	INPUTGROUP_CELLPHONE_NAVIGATE_UD = 4,
	INPUTGROUP_CELLPHONE_NAVIGATE_LR = 5,
	INPUTGROUP_FRONTEND_DPAD_ALL = 6,
	INPUTGROUP_FRONTEND_DPAD_UD = 7,
	INPUTGROUP_FRONTEND_DPAD_LR = 8,
	INPUTGROUP_FRONTEND_LSTICK_ALL = 9,
	INPUTGROUP_FRONTEND_RSTICK_ALL = 10,
	INPUTGROUP_FRONTEND_GENERIC_UD = 11,
	INPUTGROUP_FRONTEND_GENERIC_LR = 12,
	INPUTGROUP_FRONTEND_GENERIC_ALL = 13,
	INPUTGROUP_FRONTEND_BUMPERS = 14,
	INPUTGROUP_FRONTEND_TRIGGERS = 15,
	INPUTGROUP_FRONTEND_STICKS = 16,
	INPUTGROUP_SCRIPT_DPAD_ALL = 17,
	INPUTGROUP_SCRIPT_DPAD_UD = 18,
	INPUTGROUP_SCRIPT_DPAD_LR = 19,
	INPUTGROUP_SCRIPT_LSTICK_ALL = 20,
	INPUTGROUP_SCRIPT_RSTICK_ALL = 21,
	INPUTGROUP_SCRIPT_BUMPERS = 22,
	INPUTGROUP_SCRIPT_TRIGGERS = 23,
	INPUTGROUP_WEAPON_WHEEL_CYCLE = 24,
	INPUTGROUP_FLY = 25,
	INPUTGROUP_SUB = 26,
	INPUTGROUP_VEH_MOVE_ALL = 27,
	INPUTGROUP_CURSOR = 28,
	INPUTGROUP_CURSOR_SCROLL = 29,
	INPUTGROUP_SNIPER_ZOOM_SECONDARY = 30,
	INPUTGROUP_VEH_HYDRAULICS_CONTROL = 31,
	MAX_INPUTGROUPS = 32,
	INPUTGROUP_INVALID = 4294967295,
};

enum rage__InputType
{
	INPUT_NEXT_CAMERA = 0,
	INPUT_LOOK_LR = 1,
	INPUT_LOOK_UD = 2,
	INPUT_LOOK_UP_ONLY = 3,
	INPUT_LOOK_DOWN_ONLY = 4,
	INPUT_LOOK_LEFT_ONLY = 5,
	INPUT_LOOK_RIGHT_ONLY = 6,
	INPUT_CINEMATIC_SLOWMO = 7,
	INPUT_SCRIPTED_FLY_UD = 8,
	INPUT_SCRIPTED_FLY_LR = 9,
	INPUT_SCRIPTED_FLY_ZUP = 10,
	INPUT_SCRIPTED_FLY_ZDOWN = 11,
	INPUT_WEAPON_WHEEL_UD = 12,
	INPUT_WEAPON_WHEEL_LR = 13,
	INPUT_WEAPON_WHEEL_NEXT = 14,
	INPUT_WEAPON_WHEEL_PREV = 15,
	INPUT_SELECT_NEXT_WEAPON = 16,
	INPUT_SELECT_PREV_WEAPON = 17,
	INPUT_SKIP_CUTSCENE = 18,
	INPUT_CHARACTER_WHEEL = 19,
	INPUT_MULTIPLAYER_INFO = 20,
	INPUT_SPRINT = 21,
	INPUT_JUMP = 22,
	INPUT_ENTER = 23,
	INPUT_ATTACK = 24,
	INPUT_AIM = 25,
	INPUT_LOOK_BEHIND = 26,
	INPUT_PHONE = 27,
	INPUT_SPECIAL_ABILITY = 28,
	INPUT_SPECIAL_ABILITY_SECONDARY = 29,
	INPUT_MOVE_LR = 30,
	INPUT_MOVE_UD = 31,
	INPUT_MOVE_UP_ONLY = 32,
	INPUT_MOVE_DOWN_ONLY = 33,
	INPUT_MOVE_LEFT_ONLY = 34,
	INPUT_MOVE_RIGHT_ONLY = 35,
	INPUT_DUCK = 36,
	INPUT_SELECT_WEAPON = 37,
	INPUT_PICKUP = 38,
	INPUT_SNIPER_ZOOM = 39,
	INPUT_SNIPER_ZOOM_IN_ONLY = 40,
	INPUT_SNIPER_ZOOM_OUT_ONLY = 41,
	INPUT_SNIPER_ZOOM_IN_SECONDARY = 42,
	INPUT_SNIPER_ZOOM_OUT_SECONDARY = 43,
	INPUT_COVER = 44,
	INPUT_RELOAD = 45,
	INPUT_TALK = 46,
	INPUT_DETONATE = 47,
	INPUT_HUD_SPECIAL = 48,
	INPUT_ARREST = 49,
	INPUT_ACCURATE_AIM = 50,
	INPUT_CONTEXT = 51,
	INPUT_CONTEXT_SECONDARY = 52,
	INPUT_WEAPON_SPECIAL = 53,
	INPUT_WEAPON_SPECIAL_TWO = 54,
	INPUT_DIVE = 55,
	INPUT_DROP_WEAPON = 56,
	INPUT_DROP_AMMO = 57,
	INPUT_THROW_GRENADE = 58,
	INPUT_VEH_MOVE_LR = 59,
	INPUT_VEH_MOVE_UD = 60,
	INPUT_VEH_MOVE_UP_ONLY = 61,
	INPUT_VEH_MOVE_DOWN_ONLY = 62,
	INPUT_VEH_MOVE_LEFT_ONLY = 63,
	INPUT_VEH_MOVE_RIGHT_ONLY = 64,
	INPUT_VEH_SPECIAL = 65,
	INPUT_VEH_GUN_LR = 66,
	INPUT_VEH_GUN_UD = 67,
	INPUT_VEH_AIM = 68,
	INPUT_VEH_ATTACK = 69,
	INPUT_VEH_ATTACK2 = 70,
	INPUT_VEH_ACCELERATE = 71,
	INPUT_VEH_BRAKE = 72,
	INPUT_VEH_DUCK = 73,
	INPUT_VEH_HEADLIGHT = 74,
	INPUT_VEH_EXIT = 75,
	INPUT_VEH_HANDBRAKE = 76,
	INPUT_VEH_HOTWIRE_LEFT = 77,
	INPUT_VEH_HOTWIRE_RIGHT = 78,
	INPUT_VEH_LOOK_BEHIND = 79,
	INPUT_VEH_CIN_CAM = 80,
	INPUT_VEH_NEXT_RADIO = 81,
	INPUT_VEH_PREV_RADIO = 82,
	INPUT_VEH_NEXT_RADIO_TRACK = 83,
	INPUT_VEH_PREV_RADIO_TRACK = 84,
	INPUT_VEH_RADIO_WHEEL = 85,
	INPUT_VEH_HORN = 86,
	INPUT_VEH_FLY_THROTTLE_UP = 87,
	INPUT_VEH_FLY_THROTTLE_DOWN = 88,
	INPUT_VEH_FLY_YAW_LEFT = 89,
	INPUT_VEH_FLY_YAW_RIGHT = 90,
	INPUT_VEH_PASSENGER_AIM = 91,
	INPUT_VEH_PASSENGER_ATTACK = 92,
	INPUT_VEH_SPECIAL_ABILITY_FRANKLIN = 93,
	INPUT_VEH_STUNT_UD = 94,
	INPUT_VEH_CINEMATIC_UD = 95,
	INPUT_VEH_CINEMATIC_UP_ONLY = 96,
	INPUT_VEH_CINEMATIC_DOWN_ONLY = 97,
	INPUT_VEH_CINEMATIC_LR = 98,
	INPUT_VEH_SELECT_NEXT_WEAPON = 99,
	INPUT_VEH_SELECT_PREV_WEAPON = 100,
	INPUT_VEH_ROOF = 101,
	INPUT_VEH_JUMP = 102,
	INPUT_VEH_GRAPPLING_HOOK = 103,
	INPUT_VEH_SHUFFLE = 104,
	INPUT_VEH_DROP_PROJECTILE = 105,
	INPUT_VEH_MOUSE_CONTROL_OVERRIDE = 106,
	INPUT_VEH_FLY_ROLL_LR = 107,
	INPUT_VEH_FLY_ROLL_LEFT_ONLY = 108,
	INPUT_VEH_FLY_ROLL_RIGHT_ONLY = 109,
	INPUT_VEH_FLY_PITCH_UD = 110,
	INPUT_VEH_FLY_PITCH_UP_ONLY = 111,
	INPUT_VEH_FLY_PITCH_DOWN_ONLY = 112,
	INPUT_VEH_FLY_UNDERCARRIAGE = 113,
	INPUT_VEH_FLY_ATTACK = 114,
	INPUT_VEH_FLY_SELECT_NEXT_WEAPON = 115,
	INPUT_VEH_FLY_SELECT_PREV_WEAPON = 116,
	INPUT_VEH_FLY_SELECT_TARGET_LEFT = 117,
	INPUT_VEH_FLY_SELECT_TARGET_RIGHT = 118,
	INPUT_VEH_FLY_VERTICAL_FLIGHT_MODE = 119,
	INPUT_VEH_FLY_DUCK = 120,
	INPUT_VEH_FLY_ATTACK_CAMERA = 121,
	INPUT_VEH_FLY_MOUSE_CONTROL_OVERRIDE = 122,
	INPUT_VEH_SUB_TURN_LR = 123,
	INPUT_VEH_SUB_TURN_LEFT_ONLY = 124,
	INPUT_VEH_SUB_TURN_RIGHT_ONLY = 125,
	INPUT_VEH_SUB_PITCH_UD = 126,
	INPUT_VEH_SUB_PITCH_UP_ONLY = 127,
	INPUT_VEH_SUB_PITCH_DOWN_ONLY = 128,
	INPUT_VEH_SUB_THROTTLE_UP = 129,
	INPUT_VEH_SUB_THROTTLE_DOWN = 130,
	INPUT_VEH_SUB_ASCEND = 131,
	INPUT_VEH_SUB_DESCEND = 132,
	INPUT_VEH_SUB_TURN_HARD_LEFT = 133,
	INPUT_VEH_SUB_TURN_HARD_RIGHT = 134,
	INPUT_VEH_SUB_MOUSE_CONTROL_OVERRIDE = 135,
	INPUT_VEH_PUSHBIKE_PEDAL = 136,
	INPUT_VEH_PUSHBIKE_SPRINT = 137,
	INPUT_VEH_PUSHBIKE_FRONT_BRAKE = 138,
	INPUT_VEH_PUSHBIKE_REAR_BRAKE = 139,
	INPUT_MELEE_ATTACK_LIGHT = 140,
	INPUT_MELEE_ATTACK_HEAVY = 141,
	INPUT_MELEE_ATTACK_ALTERNATE = 142,
	INPUT_MELEE_BLOCK = 143,
	INPUT_PARACHUTE_DEPLOY = 144,
	INPUT_PARACHUTE_DETACH = 145,
	INPUT_PARACHUTE_TURN_LR = 146,
	INPUT_PARACHUTE_TURN_LEFT_ONLY = 147,
	INPUT_PARACHUTE_TURN_RIGHT_ONLY = 148,
	INPUT_PARACHUTE_PITCH_UD = 149,
	INPUT_PARACHUTE_PITCH_UP_ONLY = 150,
	INPUT_PARACHUTE_PITCH_DOWN_ONLY = 151,
	INPUT_PARACHUTE_BRAKE_LEFT = 152,
	INPUT_PARACHUTE_BRAKE_RIGHT = 153,
	INPUT_PARACHUTE_SMOKE = 154,
	INPUT_PARACHUTE_PRECISION_LANDING = 155,
	INPUT_MAP = 156,
	INPUT_SELECT_WEAPON_UNARMED = 157,
	INPUT_SELECT_WEAPON_MELEE = 158,
	INPUT_SELECT_WEAPON_HANDGUN = 159,
	INPUT_SELECT_WEAPON_SHOTGUN = 160,
	INPUT_SELECT_WEAPON_SMG = 161,
	INPUT_SELECT_WEAPON_AUTO_RIFLE = 162,
	INPUT_SELECT_WEAPON_SNIPER = 163,
	INPUT_SELECT_WEAPON_HEAVY = 164,
	INPUT_SELECT_WEAPON_SPECIAL = 165,
	INPUT_SELECT_CHARACTER_MICHAEL = 166,
	INPUT_SELECT_CHARACTER_FRANKLIN = 167,
	INPUT_SELECT_CHARACTER_TREVOR = 168,
	INPUT_SELECT_CHARACTER_MULTIPLAYER = 169,
	INPUT_SAVE_REPLAY_CLIP = 170,
	INPUT_SPECIAL_ABILITY_PC = 171,
	INPUT_CELLPHONE_UP = 172,
	INPUT_CELLPHONE_DOWN = 173,
	INPUT_CELLPHONE_LEFT = 174,
	INPUT_CELLPHONE_RIGHT = 175,
	INPUT_CELLPHONE_SELECT = 176,
	INPUT_CELLPHONE_CANCEL = 177,
	INPUT_CELLPHONE_OPTION = 178,
	INPUT_CELLPHONE_EXTRA_OPTION = 179,
	INPUT_CELLPHONE_SCROLL_FORWARD = 180,
	INPUT_CELLPHONE_SCROLL_BACKWARD = 181,
	INPUT_CELLPHONE_CAMERA_FOCUS_LOCK = 182,
	INPUT_CELLPHONE_CAMERA_GRID = 183,
	INPUT_CELLPHONE_CAMERA_SELFIE = 184,
	INPUT_CELLPHONE_CAMERA_DOF = 185,
	INPUT_CELLPHONE_CAMERA_EXPRESSION = 186,
	INPUT_FRONTEND_DOWN = 187,
	INPUT_FRONTEND_UP = 188,
	INPUT_FRONTEND_LEFT = 189,
	INPUT_FRONTEND_RIGHT = 190,
	INPUT_FRONTEND_RDOWN = 191,
	INPUT_FRONTEND_RUP = 192,
	INPUT_FRONTEND_RLEFT = 193,
	INPUT_FRONTEND_RRIGHT = 194,
	INPUT_FRONTEND_AXIS_X = 195,
	INPUT_FRONTEND_AXIS_Y = 196,
	INPUT_FRONTEND_RIGHT_AXIS_X = 197,
	INPUT_FRONTEND_RIGHT_AXIS_Y = 198,
	INPUT_FRONTEND_PAUSE = 199,
	INPUT_FRONTEND_PAUSE_ALTERNATE = 200,
	INPUT_FRONTEND_ACCEPT = 201,
	INPUT_FRONTEND_CANCEL = 202,
	INPUT_FRONTEND_X = 203,
	INPUT_FRONTEND_Y = 204,
	INPUT_FRONTEND_LB = 205,
	INPUT_FRONTEND_RB = 206,
	INPUT_FRONTEND_LT = 207,
	INPUT_FRONTEND_RT = 208,
	INPUT_FRONTEND_LS = 209,
	INPUT_FRONTEND_RS = 210,
	INPUT_FRONTEND_LEADERBOARD = 211,
	INPUT_FRONTEND_SOCIAL_CLUB = 212,
	INPUT_FRONTEND_SOCIAL_CLUB_SECONDARY = 213,
	INPUT_FRONTEND_DELETE = 214,
	INPUT_FRONTEND_ENDSCREEN_ACCEPT = 215,
	INPUT_FRONTEND_ENDSCREEN_EXPAND = 216,
	INPUT_FRONTEND_SELECT = 217,
	INPUT_SCRIPT_LEFT_AXIS_X = 218,
	INPUT_SCRIPT_LEFT_AXIS_Y = 219,
	INPUT_SCRIPT_RIGHT_AXIS_X = 220,
	INPUT_SCRIPT_RIGHT_AXIS_Y = 221,
	INPUT_SCRIPT_RUP = 222,
	INPUT_SCRIPT_RDOWN = 223,
	INPUT_SCRIPT_RLEFT = 224,
	INPUT_SCRIPT_RRIGHT = 225,
	INPUT_SCRIPT_LB = 226,
	INPUT_SCRIPT_RB = 227,
	INPUT_SCRIPT_LT = 228,
	INPUT_SCRIPT_RT = 229,
	INPUT_SCRIPT_LS = 230,
	INPUT_SCRIPT_RS = 231,
	INPUT_SCRIPT_PAD_UP = 232,
	INPUT_SCRIPT_PAD_DOWN = 233,
	INPUT_SCRIPT_PAD_LEFT = 234,
	INPUT_SCRIPT_PAD_RIGHT = 235,
	INPUT_SCRIPT_SELECT = 236,
	INPUT_CURSOR_ACCEPT = 237,
	INPUT_CURSOR_CANCEL = 238,
	INPUT_CURSOR_X = 239,
	INPUT_CURSOR_Y = 240,
	INPUT_CURSOR_SCROLL_UP = 241,
	INPUT_CURSOR_SCROLL_DOWN = 242,
	INPUT_ENTER_CHEAT_CODE = 243,
	INPUT_INTERACTION_MENU = 244,
	INPUT_MP_TEXT_CHAT_ALL = 245,
	INPUT_MP_TEXT_CHAT_TEAM = 246,
	INPUT_MP_TEXT_CHAT_FRIENDS = 247,
	INPUT_MP_TEXT_CHAT_CREW = 248,
	INPUT_PUSH_TO_TALK = 249,
	INPUT_CREATOR_LS = 250,
	INPUT_CREATOR_RS = 251,
	INPUT_CREATOR_LT = 252,
	INPUT_CREATOR_RT = 253,
	INPUT_CREATOR_MENU_TOGGLE = 254,
	INPUT_CREATOR_ACCEPT = 255,
	INPUT_CREATOR_DELETE = 256,
	INPUT_ATTACK2 = 257,
	INPUT_RAPPEL_JUMP = 258,
	INPUT_RAPPEL_LONG_JUMP = 259,
	INPUT_RAPPEL_SMASH_WINDOW = 260,
	INPUT_PREV_WEAPON = 261,
	INPUT_NEXT_WEAPON = 262,
	INPUT_MELEE_ATTACK1 = 263,
	INPUT_MELEE_ATTACK2 = 264,
	INPUT_WHISTLE = 265,
	INPUT_MOVE_LEFT = 266,
	INPUT_MOVE_RIGHT = 267,
	INPUT_MOVE_UP = 268,
	INPUT_MOVE_DOWN = 269,
	INPUT_LOOK_LEFT = 270,
	INPUT_LOOK_RIGHT = 271,
	INPUT_LOOK_UP = 272,
	INPUT_LOOK_DOWN = 273,
	INPUT_SNIPER_ZOOM_IN = 274,
	INPUT_SNIPER_ZOOM_OUT = 275,
	INPUT_SNIPER_ZOOM_IN_ALTERNATE = 276,
	INPUT_SNIPER_ZOOM_OUT_ALTERNATE = 277,
	INPUT_VEH_MOVE_LEFT = 278,
	INPUT_VEH_MOVE_RIGHT = 279,
	INPUT_VEH_MOVE_UP = 280,
	INPUT_VEH_MOVE_DOWN = 281,
	INPUT_VEH_GUN_LEFT = 282,
	INPUT_VEH_GUN_RIGHT = 283,
	INPUT_VEH_GUN_UP = 284,
	INPUT_VEH_GUN_DOWN = 285,
	INPUT_VEH_LOOK_LEFT = 286,
	INPUT_VEH_LOOK_RIGHT = 287,
	INPUT_REPLAY_START_STOP_RECORDING = 288,
	INPUT_REPLAY_START_STOP_RECORDING_SECONDARY = 289,
	INPUT_SCALED_LOOK_LR = 290,
	INPUT_SCALED_LOOK_UD = 291,
	INPUT_SCALED_LOOK_UP_ONLY = 292,
	INPUT_SCALED_LOOK_DOWN_ONLY = 293,
	INPUT_SCALED_LOOK_LEFT_ONLY = 294,
	INPUT_SCALED_LOOK_RIGHT_ONLY = 295,
	INPUT_REPLAY_MARKER_DELETE = 296,
	INPUT_REPLAY_CLIP_DELETE = 297,
	INPUT_REPLAY_PAUSE = 298,
	INPUT_REPLAY_REWIND = 299,
	INPUT_REPLAY_FFWD = 300,
	INPUT_REPLAY_NEWMARKER = 301,
	INPUT_REPLAY_RECORD = 302,
	INPUT_REPLAY_SCREENSHOT = 303,
	INPUT_REPLAY_HIDEHUD = 304,
	INPUT_REPLAY_STARTPOINT = 305,
	INPUT_REPLAY_ENDPOINT = 306,
	INPUT_REPLAY_ADVANCE = 307,
	INPUT_REPLAY_BACK = 308,
	INPUT_REPLAY_TOOLS = 309,
	INPUT_REPLAY_RESTART = 310,
	INPUT_REPLAY_SHOWHOTKEY = 311,
	INPUT_REPLAY_CYCLEMARKERLEFT = 312,
	INPUT_REPLAY_CYCLEMARKERRIGHT = 313,
	INPUT_REPLAY_FOVINCREASE = 314,
	INPUT_REPLAY_FOVDECREASE = 315,
	INPUT_REPLAY_CAMERAUP = 316,
	INPUT_REPLAY_CAMERADOWN = 317,
	INPUT_REPLAY_SAVE = 318,
	INPUT_REPLAY_TOGGLETIME = 319,
	INPUT_REPLAY_TOGGLETIPS = 320,
	INPUT_REPLAY_PREVIEW = 321,
	INPUT_REPLAY_TOGGLE_TIMELINE = 322,
	INPUT_REPLAY_TIMELINE_PICKUP_CLIP = 323,
	INPUT_REPLAY_TIMELINE_DUPLICATE_CLIP = 324,
	INPUT_REPLAY_TIMELINE_PLACE_CLIP = 325,
	INPUT_REPLAY_CTRL = 326,
	INPUT_REPLAY_TIMELINE_SAVE = 327,
	INPUT_REPLAY_PREVIEW_AUDIO = 328,
	INPUT_VEH_DRIVE_LOOK = 329,
	INPUT_VEH_DRIVE_LOOK2 = 330,
	INPUT_VEH_FLY_ATTACK2 = 331,
	INPUT_RADIO_WHEEL_UD = 332,
	INPUT_RADIO_WHEEL_LR = 333,
	INPUT_VEH_SLOWMO_UD = 334,
	INPUT_VEH_SLOWMO_UP_ONLY = 335,
	INPUT_VEH_SLOWMO_DOWN_ONLY = 336,
	INPUT_VEH_HYDRAULICS_CONTROL_TOGGLE = 337,
	INPUT_VEH_HYDRAULICS_CONTROL_LEFT = 338,
	INPUT_VEH_HYDRAULICS_CONTROL_RIGHT = 339,
	INPUT_VEH_HYDRAULICS_CONTROL_UP = 340,
	INPUT_VEH_HYDRAULICS_CONTROL_DOWN = 341,
	INPUT_VEH_HYDRAULICS_CONTROL_LR = 342,
	INPUT_VEH_HYDRAULICS_CONTROL_UD = 343,
	INPUT_SWITCH_VISOR = 344,
	INPUT_VEH_MELEE_HOLD = 345,
	INPUT_VEH_MELEE_LEFT = 346,
	INPUT_VEH_MELEE_RIGHT = 347,
	INPUT_MAP_POI = 348,
	INPUT_REPLAY_SNAPMATIC_PHOTO = 349,
	INPUT_VEH_CAR_JUMP = 350,
	INPUT_VEH_ROCKET_BOOST = 351,
	INPUT_VEH_FLY_BOOST = 352,
	INPUT_VEH_PARACHUTE = 353,
	INPUT_VEH_BIKE_WINGS = 354,
	INPUT_VEH_FLY_BOMB_BAY = 355,
	INPUT_VEH_FLY_COUNTER = 356,
	INPUT_VEH_TRANSFORM = 357,
	INPUT_QUAD_LOCO_REVERSE = 358,
	INPUT_RESPAWN_FASTER = 359,
	INPUT_HUDMARKER_SELECT = 360,
	MAX_INPUTS = 361,
	UNDEFINED_INPUT = 4294967295,
	DYNAMIC_MAPPING_MOUSE_X = 4294967286,
	DYNAMIC_MAPPING_MOUSE_Y = 4294967276,
	FIRST_INPUT = 0,
	SCRIPTED_INPUT_FIRST = 218,
	SCRIPTED_INPUT_LAST = 236,
};

enum rage__Mapper
{
	ON_FOOT = 0,
	IN_VEHICLE = 1,
	MELEE = 2,
	PARACHUTE = 3,
	FRONTEND = 4,
	REPLAY = 5,
	DEPRECATED_MAPPER = 6,
	MAPPERS_MAX = 7,
	UNDEFINED_MAPPER = 4294967295,
};

enum rage__characterClothControllerTuning__enFlags
{
	_0xB4427964 = 0,
};

enum rage__clothInstanceTuning__enCLOTH_TUNE_FLAGS
{
	_0x02A90554 = 0,
	_0x4752DAFA = 1,
	_0xEAC5F797 = 2,
	_0xBADE1BDA = 3,
	_0xFBF0F5B2 = 4,
	_0xD734BB7C = 5,
	_0x00F9E049 = 6,
	_0xFE291880 = 7,
	_0x2844A250 = 8,
	_0xA9AE6C72 = 9,
	_0xF10143B9 = 10,
};

enum rage__eLodType
{
	LODTYPES_DEPTH_HD = 0,
	LODTYPES_DEPTH_LOD = 1,
	LODTYPES_DEPTH_SLOD1 = 2,
	LODTYPES_DEPTH_SLOD2 = 3,
	LODTYPES_DEPTH_SLOD3 = 4,
	LODTYPES_DEPTH_ORPHANHD = 5,
	LODTYPES_DEPTH_SLOD4 = 6,
};

enum rage__ePriorityLevel
{
	PRI_REQUIRED = 0,
	PRI_OPTIONAL_HIGH = 1,
	PRI_OPTIONAL_MEDIUM = 2,
	PRI_OPTIONAL_LOW = 3,
};

enum rage__fwArchetypeDef__eAssetType
{
	ASSET_TYPE_UNINITIALIZED = 0,
	ASSET_TYPE_FRAGMENT = 1,
	ASSET_TYPE_DRAWABLE = 2,
	ASSET_TYPE_DRAWABLEDICTIONARY = 3,
	ASSET_TYPE_ASSETLESS = 4,
};

enum rage__ioMapperParameter
{
	KEY_NULL = 0,
	KEY_BACK = 8,
	KEY_TAB = 9,
	KEY_RETURN = 13,
	KEY_PAUSE = 19,
	KEY_CAPITAL = 20,
	KEY_ESCAPE = 27,
	KEY_SPACE = 32,
	KEY_PAGEUP = 33,
	KEY_PRIOR = 33,
	KEY_PAGEDOWN = 34,
	KEY_NEXT = 34,
	KEY_END = 35,
	KEY_HOME = 36,
	KEY_LEFT = 37,
	KEY_UP = 38,
	KEY_RIGHT = 39,
	KEY_DOWN = 40,
	KEY_SNAPSHOT = 44,
	KEY_SYSRQ = 44,
	KEY_INSERT = 45,
	KEY_DELETE = 46,
	KEY_0 = 48,
	KEY_1 = 49,
	KEY_2 = 50,
	KEY_3 = 51,
	KEY_4 = 52,
	KEY_5 = 53,
	KEY_6 = 54,
	KEY_7 = 55,
	KEY_8 = 56,
	KEY_9 = 57,
	KEY_A = 65,
	KEY_B = 66,
	KEY_C = 67,
	KEY_D = 68,
	KEY_E = 69,
	KEY_F = 70,
	KEY_G = 71,
	KEY_H = 72,
	KEY_I = 73,
	KEY_J = 74,
	KEY_K = 75,
	KEY_L = 76,
	KEY_M = 77,
	KEY_N = 78,
	KEY_O = 79,
	KEY_P = 80,
	KEY_Q = 81,
	KEY_R = 82,
	KEY_S = 83,
	KEY_T = 84,
	KEY_U = 85,
	KEY_V = 86,
	KEY_W = 87,
	KEY_X = 88,
	KEY_Y = 89,
	KEY_Z = 90,
	KEY_LWIN = 91,
	KEY_RWIN = 92,
	KEY_APPS = 93,
	KEY_NUMPAD0 = 96,
	KEY_NUMPAD1 = 97,
	KEY_NUMPAD2 = 98,
	KEY_NUMPAD3 = 99,
	KEY_NUMPAD4 = 100,
	KEY_NUMPAD5 = 101,
	KEY_NUMPAD6 = 102,
	KEY_NUMPAD7 = 103,
	KEY_NUMPAD8 = 104,
	KEY_NUMPAD9 = 105,
	KEY_MULTIPLY = 106,
	KEY_ADD = 107,
	KEY_SUBTRACT = 109,
	KEY_DECIMAL = 110,
	KEY_DIVIDE = 111,
	KEY_F1 = 112,
	KEY_F2 = 113,
	KEY_F3 = 114,
	KEY_F4 = 115,
	KEY_F5 = 116,
	KEY_F6 = 117,
	KEY_F7 = 118,
	KEY_F8 = 119,
	KEY_F9 = 120,
	KEY_F10 = 121,
	KEY_F11 = 122,
	KEY_F12 = 123,
	KEY_F13 = 124,
	KEY_F14 = 125,
	KEY_F15 = 126,
	KEY_F16 = 127,
	KEY_F17 = 128,
	KEY_F18 = 129,
	KEY_F19 = 130,
	KEY_F20 = 131,
	KEY_F21 = 132,
	KEY_F22 = 133,
	KEY_F23 = 134,
	KEY_F24 = 135,
	KEY_NUMLOCK = 144,
	KEY_SCROLL = 145,
	KEY_NUMPADEQUALS = 146,
	KEY_LSHIFT = 160,
	KEY_RSHIFT = 161,
	KEY_LCONTROL = 162,
	KEY_RCONTROL = 163,
	KEY_LMENU = 164,
	KEY_RMENU = 165,
	KEY_SEMICOLON = 186,
	KEY_OEM_1 = 186,
	KEY_PLUS = 187,
	KEY_EQUALS = 187,
	KEY_COMMA = 188,
	KEY_MINUS = 189,
	KEY_PERIOD = 190,
	KEY_SLASH = 191,
	KEY_OEM_2 = 191,
	KEY_GRAVE = 192,
	KEY_OEM_3 = 192,
	KEY_LBRACKET = 219,
	KEY_OEM_4 = 219,
	KEY_BACKSLASH = 220,
	KEY_OEM_5 = 220,
	KEY_RBRACKET = 221,
	KEY_OEM_6 = 221,
	KEY_APOSTROPHE = 222,
	KEY_OEM_7 = 222,
	KEY_OEM_102 = 226,
	KEY_RAGE_EXTRA1 = 240,
	KEY_RAGE_EXTRA2 = 241,
	KEY_RAGE_EXTRA3 = 242,
	KEY_RAGE_EXTRA4 = 244,
	KEY_NUMPADENTER = 253,
	KEY_CHATPAD_GREEN_SHIFT = 254,
	KEY_CHATPAD_ORANGE_SHIFT = 255,
	IOM_AXIS_UNDEFINED = 4294967295,
	IOM_UNDEFINED = 4294967295,
	IOM_WHEEL_UNDEFINED = 4294967295,
	IOM_POV_UNDEFINED = 4294967295,
	IOM_ANY_BUTTON = 4294967295,
	IOM_AXIS_X = 512,
	IOM_AXIS_Y = 513,
	IOM_IAXIS_X = 514,
	IOM_IAXIS_Y = 515,
	BASIC_MOUSE_AXIS_MAX = 516,
	IOM_AXIS_X_LEFT = 517,
	IOM_AXIS_X_RIGHT = 518,
	IOM_AXIS_Y_UP = 519,
	IOM_AXIS_Y_DOWN = 520,
	MOUSE_AXIS_MAX = 521,
	IOM_WHEEL_UP = 1024,
	IOM_WHEEL_DOWN = 1025,
	IOM_AXIS_WHEEL_DELTA = 1026,
	IOM_IAXIS_WHEEL_DELTA = 1027,
	IOM_AXIS_WHEEL = 1028,
	IOM_IAXIS_WHEEL = 1029,
	IOM_AXIS_WHEEL_RELATIVE = 1030,
	IOM_IAXIS_WHEEL_RELATIVE = 1031,
	MOUSE_LEFT = 2049,
	MOUSE_RIGHT = 2050,
	MOUSE_MIDDLE = 2052,
	MOUSE_EXTRABTN1 = 2056,
	MOUSE_EXTRABTN2 = 2064,
	MOUSE_EXTRABTN3 = 2080,
	MOUSE_EXTRABTN4 = 2112,
	MOUSE_EXTRABTN5 = 2176,
	L2 = 131072,
	R2 = 131073,
	L1 = 131074,
	R1 = 131075,
	RUP = 131076,
	RRIGHT = 131077,
	RDOWN = 131078,
	RLEFT = 131079,
	SELECT = 131080,
	L3 = 131081,
	R3 = 131082,
	START = 131083,
	LUP = 131084,
	LRIGHT = 131085,
	LDOWN = 131086,
	LLEFT = 131087,
	TOUCH = 131088,
	L2_INDEX = 8192,
	R2_INDEX = 8193,
	L1_INDEX = 8194,
	R1_INDEX = 8195,
	RUP_INDEX = 8196,
	RRIGHT_INDEX = 8197,
	RDOWN_INDEX = 8198,
	RLEFT_INDEX = 8199,
	SELECT_INDEX = 8200,
	L3_INDEX = 8201,
	R3_INDEX = 8202,
	START_INDEX = 8203,
	LUP_INDEX = 8204,
	LRIGHT_INDEX = 8205,
	LDOWN_INDEX = 8206,
	LLEFT_INDEX = 8207,
	TOUCH_INDEX = 8208,
	NUMBUTTONS = 8209,
	IOM_AXIS_LX = 4096,
	IOM_AXIS_LY = 4097,
	IOM_AXIS_RX = 4098,
	IOM_AXIS_RY = 4099,
	IOM_AXIS_LUP = 4100,
	IOM_AXIS_LDOWN = 4101,
	IOM_AXIS_LLEFT = 4102,
	IOM_AXIS_LRIGHT = 4103,
	IOM_AXIS_LUR = 4104,
	IOM_AXIS_LUL = 4105,
	IOM_AXIS_LDR = 4106,
	IOM_AXIS_LDL = 4107,
	IOM_AXIS_RUP = 4108,
	IOM_AXIS_RDOWN = 4109,
	IOM_AXIS_RLEFT = 4110,
	IOM_AXIS_RRIGHT = 4111,
	IOM_AXIS_RUR = 4112,
	IOM_AXIS_RUL = 4113,
	IOM_AXIS_RDR = 4114,
	IOM_AXIS_RDL = 4115,
	IOM_AXIS_DPADX = 4116,
	IOM_AXIS_DPADY = 4117,
	IOM_AXIS_LY_UP = 4118,
	IOM_AXIS_LY_DOWN = 4119,
	IOM_AXIS_LX_LEFT = 4120,
	IOM_AXIS_LX_RIGHT = 4121,
	IOM_AXIS_RY_UP = 4122,
	IOM_AXIS_RY_DOWN = 4123,
	IOM_AXIS_RX_LEFT = 4124,
	IOM_AXIS_RX_RIGHT = 4125,
	IOM_JOYSTICK_BUTTON1 = 32768,
	IOM_JOYSTICK_BUTTON2 = 32769,
	IOM_JOYSTICK_BUTTON3 = 32770,
	IOM_JOYSTICK_BUTTON4 = 32771,
	IOM_JOYSTICK_BUTTON5 = 32772,
	IOM_JOYSTICK_BUTTON6 = 32773,
	IOM_JOYSTICK_BUTTON7 = 32774,
	IOM_JOYSTICK_BUTTON8 = 32775,
	IOM_JOYSTICK_BUTTON9 = 32776,
	IOM_JOYSTICK_BUTTON10 = 32777,
	IOM_JOYSTICK_BUTTON11 = 32778,
	IOM_JOYSTICK_BUTTON12 = 32779,
	IOM_JOYSTICK_BUTTON13 = 32780,
	IOM_JOYSTICK_BUTTON14 = 32781,
	IOM_JOYSTICK_BUTTON15 = 32782,
	IOM_JOYSTICK_BUTTON16 = 32783,
	IOM_JOYSTICK_BUTTON17 = 32784,
	IOM_JOYSTICK_BUTTON18 = 32785,
	IOM_JOYSTICK_BUTTON19 = 32786,
	IOM_JOYSTICK_BUTTON20 = 32787,
	IOM_JOYSTICK_BUTTON21 = 32788,
	IOM_JOYSTICK_BUTTON22 = 32789,
	IOM_JOYSTICK_BUTTON23 = 32790,
	IOM_JOYSTICK_BUTTON24 = 32791,
	IOM_JOYSTICK_BUTTON25 = 32792,
	IOM_JOYSTICK_BUTTON26 = 32793,
	IOM_JOYSTICK_BUTTON27 = 32794,
	IOM_JOYSTICK_BUTTON28 = 32795,
	IOM_JOYSTICK_BUTTON29 = 32796,
	IOM_JOYSTICK_BUTTON30 = 32797,
	IOM_JOYSTICK_BUTTON31 = 32798,
	IOM_JOYSTICK_BUTTON32 = 32799,
	IOM_JOYSTICK_AXIS1 = 65536,
	IOM_JOYSTICK_AXIS2 = 65537,
	IOM_JOYSTICK_AXIS3 = 65538,
	IOM_JOYSTICK_AXIS4 = 65539,
	IOM_JOYSTICK_AXIS5 = 65540,
	IOM_JOYSTICK_AXIS6 = 65541,
	IOM_JOYSTICK_AXIS7 = 65542,
	IOM_JOYSTICK_AXIS8 = 65543,
	IOM_POV1_UP = 16384,
	IOM_POV1_RIGHT = 16385,
	IOM_POV1_DOWN = 16386,
	IOM_POV1_LEFT = 16387,
	IOM_POV2_UP = 16388,
	IOM_POV2_RIGHT = 16389,
	IOM_POV2_DOWN = 16390,
	IOM_POV2_LEFT = 16391,
	IOM_POV3_UP = 16392,
	IOM_POV3_RIGHT = 16393,
	IOM_POV3_DOWN = 16394,
	IOM_POV3_LEFT = 16395,
	IOM_POV4_UP = 16396,
	IOM_POV4_RIGHT = 16397,
	IOM_POV4_DOWN = 16398,
	IOM_POV4_LEFT = 16399,
};

enum rage__ioMapperSource
{
	IOMS_UNDEFINED = 4294967295,
	IOMS_KEYBOARD = 0,
	IOMS_MOUSE_ABSOLUTEAXIS = 1,
	IOMS_MOUSE_CENTEREDAXIS = 2,
	IOMS_MOUSE_RELATIVEAXIS = 3,
	IOMS_MOUSE_SCALEDAXIS = 4,
	IOMS_MOUSE_NORMALIZED = 5,
	IOMS_MOUSE_WHEEL = 6,
	IOMS_MOUSE_BUTTON = 7,
	IOMS_MOUSE_BUTTONANY = 8,
	IOMS_PAD_DIGITALBUTTON = 9,
	IOMS_PAD_DIGITALBUTTONANY = 10,
	IOMS_PAD_ANALOGBUTTON = 11,
	IOMS_PAD_AXIS = 12,
	IOMS_JOYSTICK_BUTTON = 13,
	IOMS_JOYSTICK_AXIS = 14,
	IOMS_JOYSTICK_IAXIS = 15,
	IOMS_JOYSTICK_AXIS_NEGATIVE = 16,
	IOMS_JOYSTICK_AXIS_POSITIVE = 17,
	IOMS_JOYSTICK_POV = 18,
	IOMS_JOYSTICK_POV_AXIS = 19,
	IOMS_PAD_DEBUGBUTTON = 20,
	IOMS_DIGITALBUTTON_AXIS = 21,
	IOMS_MKB_AXIS = 22,
	IOMS_TOUCHPAD_ABSOLUTE_AXIS = 23,
	IOMS_TOUCHPAD_CENTERED_AXIS = 24,
	IOMS_GAME_CONTROLLED = 25,
	IOMS_FORCE32 = 2147483647,
};

enum rage__phCapsuleBoundDef__enCollisionBoundDef
{
	BOUND_DEF_IS_PLANE = 0,
};

